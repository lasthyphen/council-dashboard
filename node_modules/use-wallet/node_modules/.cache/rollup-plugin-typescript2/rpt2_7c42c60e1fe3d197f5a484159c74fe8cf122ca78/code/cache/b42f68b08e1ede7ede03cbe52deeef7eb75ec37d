{"code":"import * as PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\nimport { useCallback, useContext, useEffect, useMemo, useRef, useState, } from 'react';\r\nimport { UnsupportedChainIdError, Web3ReactProvider, useWeb3React, } from '@web3-react/core';\r\nimport { getConnectors } from './connectors';\r\nimport { ConnectionRejectedError, ChainUnsupportedError, ConnectorUnsupportedError, } from './errors';\r\nimport { getAccountIsContract, blockExplorerUrl, getLastActiveAccount, clearLastActiveAccount, setLastActiveAccount, setLastConnector, getLastConnector, } from './utils';\r\nimport { getProviderFromUseWalletId, getProviderString, } from './providers/index';\r\nimport * as chains from './chains';\r\nimport { useWatchBlockNumber } from './hooks/watchBlockNumber';\r\nimport { useWalletBalance } from './hooks/walletBalance';\r\nconst UseWalletContext = React.createContext(null);\r\n// CONTEXT CONSUMER ============================================================\r\nfunction useWallet() {\r\n    const walletContext = useContext(UseWalletContext);\r\n    if (walletContext === null) {\r\n        throw new Error('useWallet() can only be used inside of <UseWalletProvider />, ' +\r\n            'please declare it at a higher level.');\r\n    }\r\n    const getBlockNumber = useGetBlockNumber();\r\n    const { wallet } = walletContext;\r\n    return useMemo(() => {\r\n        return { ...wallet, getBlockNumber };\r\n    }, [getBlockNumber, wallet]);\r\n}\r\nfunction useGetBlockNumber() {\r\n    const walletContext = useContext(UseWalletContext);\r\n    const [blockNumber, setBlockNumber] = useState(null);\r\n    const requestedBlockNumber = useRef(false);\r\n    const getBlockNumber = useCallback(() => {\r\n        if (walletContext === null) {\r\n            return null;\r\n        }\r\n        requestedBlockNumber.current = true;\r\n        walletContext.addBlockNumberListener(setBlockNumber);\r\n        return blockNumber;\r\n    }, [walletContext, blockNumber]);\r\n    useEffect(() => {\r\n        if (!requestedBlockNumber.current || walletContext === null) {\r\n            return;\r\n        }\r\n        walletContext.addBlockNumberListener(setBlockNumber);\r\n        return () => {\r\n            walletContext.removeBlockNumberListener(setBlockNumber);\r\n        };\r\n    }, [requestedBlockNumber, walletContext]);\r\n    return getBlockNumber;\r\n}\r\nUseWalletProvider.propTypes = {\r\n    children: PropTypes.node,\r\n    connectors: PropTypes.objectOf(PropTypes.object),\r\n    autoConnect: PropTypes.bool,\r\n    pollBalanceInterval: PropTypes.number,\r\n    pollBlockNumberInterval: PropTypes.number,\r\n};\r\nUseWalletProvider.defaultProps = {\r\n    connectors: {},\r\n    autoConnect: false,\r\n    pollBalanceInterval: 2000,\r\n    pollBlockNumberInterval: 5000,\r\n};\r\nfunction UseWalletProvider({ children, \r\n// connectors contains init functions and/or connector configs.\r\nconnectors: connectorsInitsOrConfigs, autoConnect, pollBalanceInterval, pollBlockNumberInterval, }) {\r\n    const walletContext = useContext(UseWalletContext);\r\n    if (walletContext !== null) {\r\n        throw new Error('<UseWalletProvider /> has already been declared.');\r\n    }\r\n    const [connector, setConnector] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [type, setType] = useState(null);\r\n    const [status, setStatus] = useState('disconnected');\r\n    const web3ReactContext = useWeb3React();\r\n    const activationId = useRef(0);\r\n    const { account, chainId: web3ChainId, library: ethereum, error: web3Error, } = web3ReactContext;\r\n    const balance = useWalletBalance({ account, ethereum, pollBalanceInterval });\r\n    const { addBlockNumberListener, removeBlockNumberListener } = useWatchBlockNumber({ ethereum, pollBlockNumberInterval });\r\n    // Combine the user-provided connectors with the default ones (see connectors.js).\r\n    const connectors = useMemo(() => getConnectors(connectorsInitsOrConfigs), [connectorsInitsOrConfigs]);\r\n    const chainId = useMemo(() => (web3ChainId ? web3ChainId : chains.getDefaultChainId()), [web3ChainId]);\r\n    const reset = useCallback(() => {\r\n        if (web3ReactContext.active) {\r\n            web3ReactContext.deactivate();\r\n        }\r\n        clearLastActiveAccount();\r\n        setConnector(null);\r\n        setError(null);\r\n        setStatus('disconnected');\r\n    }, [web3ReactContext]);\r\n    // if the user switched networks on the wallet itself\r\n    // return unsupported error.\r\n    useMemo(() => {\r\n        if (web3Error instanceof UnsupportedChainIdError) {\r\n            setStatus('error');\r\n            setError(new ChainUnsupportedError(web3Error.message));\r\n        }\r\n    }, [web3Error]);\r\n    const connect = useCallback(async (connectorId = 'injected') => {\r\n        // Prevent race conditions between connections by using an external ID.\r\n        const id = ++activationId.current;\r\n        reset();\r\n        // Check if another connection has happened right after deactivate().\r\n        if (id !== activationId.current) {\r\n            return;\r\n        }\r\n        if (!connectors[connectorId]) {\r\n            setStatus('error');\r\n            setError(new ConnectorUnsupportedError(connectorId));\r\n            return;\r\n        }\r\n        // If no connection happens, we're in the right context and can safely update\r\n        // the connection stage status\r\n        setStatus('connecting');\r\n        const [connectorInit, connectorConfig] = connectors[connectorId] || [];\r\n        // Initialize the (useWallet) connector if it exists.\r\n        const connector = await connectorInit?.();\r\n        // Initialize the web3-react connector if it exists.\r\n        const web3ReactConnector = connector?.web3ReactConnector?.({\r\n            ...(connectorConfig || {}),\r\n        });\r\n        if (!web3ReactConnector) {\r\n            setStatus('error');\r\n            setError(new ConnectorUnsupportedError(connectorId));\r\n            return;\r\n        }\r\n        try {\r\n            // TODO: there is no way to prevent an activation to complete, but we\r\n            // could reconnect to the last provider the user tried to connect to.\r\n            setConnector(connectorId);\r\n            await web3ReactContext.activate(web3ReactConnector, undefined, true);\r\n            setLastConnector(connectorId);\r\n            if (connectorId === 'injected') {\r\n                const account = await web3ReactConnector.getAccount();\r\n                account && setLastActiveAccount(account);\r\n                web3ReactConnector.getProvider().then((provider) => {\r\n                    provider.on('accountsChanged', (accounts) => {\r\n                        setLastActiveAccount(accounts[0]);\r\n                    });\r\n                });\r\n            }\r\n            setStatus('connected');\r\n        }\r\n        catch (err) {\r\n            // Donâ€™t throw if another connection has happened in the meantime.\r\n            if (id !== activationId.current) {\r\n                return;\r\n            }\r\n            // If not, the error has been thrown during the current connection attempt,\r\n            // so it's correct to indicate that there has been an error\r\n            setConnector(null);\r\n            setStatus('error');\r\n            if (err instanceof UnsupportedChainIdError) {\r\n                setError(new ChainUnsupportedError(err.message));\r\n                return;\r\n            }\r\n            // It might have thrown with an error known by the connector\r\n            if (connector.handleActivationError) {\r\n                const handledError = connector.handleActivationError(err);\r\n                if (handledError) {\r\n                    setError(handledError);\r\n                    return;\r\n                }\r\n            }\r\n            // Otherwise, set to state the received error\r\n            setError(err);\r\n        }\r\n    }, [connectors, reset, web3ReactContext]);\r\n    useEffect(() => {\r\n        if (!autoConnect) {\r\n            return;\r\n        }\r\n        const lastConnector = getLastConnector();\r\n        const lastActiveAccount = getLastActiveAccount();\r\n        if (lastActiveAccount && lastConnector === 'injected') {\r\n            const isInjectedAvailable = Object.keys(connectors).some((key) => key === 'injected');\r\n            if (isInjectedAvailable) {\r\n                connect();\r\n            }\r\n        }\r\n        //eslint-disable-next-line\r\n    }, []);\r\n    useEffect(() => {\r\n        if (!account || !ethereum) {\r\n            return;\r\n        }\r\n        let cancel = false;\r\n        setType(null);\r\n        getAccountIsContract(ethereum, account).then((isContract) => {\r\n            if (!cancel) {\r\n                setStatus('connected');\r\n                setType(isContract ? 'contract' : 'normal');\r\n            }\r\n        });\r\n        return () => {\r\n            cancel = true;\r\n            setStatus('disconnected');\r\n            setType(null);\r\n        };\r\n    }, [account, ethereum]);\r\n    const wallet = useMemo(() => ({\r\n        _web3ReactContext: web3ReactContext,\r\n        account: account || null,\r\n        balance,\r\n        chainId,\r\n        connect,\r\n        connector,\r\n        connectors,\r\n        error,\r\n        ethereum,\r\n        isConnected: () => status === 'connected',\r\n        networkName: chains.getChainInformation(chainId).type,\r\n        providerInfo: connector\r\n            ? getProviderFromUseWalletId(connector)\r\n            : getProviderFromUseWalletId('unknown'),\r\n        reset,\r\n        status,\r\n        type,\r\n    }), [\r\n        account,\r\n        balance,\r\n        chainId,\r\n        connect,\r\n        connector,\r\n        connectors,\r\n        error,\r\n        ethereum,\r\n        type,\r\n        reset,\r\n        status,\r\n        web3ReactContext,\r\n    ]);\r\n    return (React.createElement(UseWalletContext.Provider, { value: {\r\n            addBlockNumberListener,\r\n            pollBalanceInterval,\r\n            pollBlockNumberInterval,\r\n            removeBlockNumberListener,\r\n            wallet,\r\n        } }, children));\r\n}\r\nUseWalletProviderWrapper.propTypes = UseWalletProvider.propTypes;\r\nUseWalletProviderWrapper.defaultProps = UseWalletProvider.defaultProps;\r\nfunction UseWalletProviderWrapper(props) {\r\n    return (React.createElement(Web3ReactProvider, { getLibrary: (ethereum) => ethereum },\r\n        React.createElement(UseWalletProvider, Object.assign({}, props))));\r\n}\r\nexport { ConnectionRejectedError, ChainUnsupportedError, ConnectorUnsupportedError, UseWalletProviderWrapper as UseWalletProvider, useWallet, getProviderString, getProviderFromUseWalletId, blockExplorerUrl, getLastActiveAccount, chains, };\r\n//# sourceMappingURL=index.js.map","references":["/Users/saleemfareed/use-wallet/node_modules/@types/react/index.d.ts","/Users/saleemfareed/use-wallet/node_modules/@types/prop-types/index.d.ts","/Users/saleemfareed/use-wallet/node_modules/@types/react/index.d.ts","/Users/saleemfareed/use-wallet/node_modules/@types/react/index.d.ts","/Users/saleemfareed/use-wallet/node_modules/@web3-react/core/dist/index.d.ts","/Users/saleemfareed/use-wallet/src/types.ts","/Users/saleemfareed/use-wallet/src/connectors.ts","/Users/saleemfareed/use-wallet/src/errors.ts","/Users/saleemfareed/use-wallet/src/utils.ts","/Users/saleemfareed/use-wallet/src/providers/index.tsx","/Users/saleemfareed/use-wallet/src/chains.ts","/Users/saleemfareed/use-wallet/src/hooks/watchBlockNumber.tsx","/Users/saleemfareed/use-wallet/src/hooks/walletBalance.tsx"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/saleemfareed/use-wallet/index.d.ts","writeByteOrderMark":false,"text":"import type { ReactNode } from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport { Connector, ConnectorConfig, Wallet } from './types';\r\nimport { ConnectionRejectedError, ChainUnsupportedError, ConnectorUnsupportedError } from './errors';\r\nimport { blockExplorerUrl, getLastActiveAccount } from './utils';\r\nimport { getProviderFromUseWalletId, getProviderString } from './providers/index';\r\nimport * as chains from './chains';\r\ndeclare function useWallet(): Wallet;\r\ndeclare type UseWalletProviderProps = {\r\n    children: ReactNode;\r\n    connectors: {\r\n        [key: string]: Connector | ConnectorConfig;\r\n    };\r\n    autoConnect: boolean;\r\n    pollBalanceInterval: number;\r\n    pollBlockNumberInterval: number;\r\n};\r\ndeclare function UseWalletProviderWrapper(props: UseWalletProviderProps): JSX.Element;\r\ndeclare namespace UseWalletProviderWrapper {\r\n    var propTypes: {\r\n        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;\r\n        connectors: PropTypes.Requireable<{\r\n            [x: string]: object | null | undefined;\r\n        }>;\r\n        autoConnect: PropTypes.Requireable<boolean>;\r\n        pollBalanceInterval: PropTypes.Requireable<number>;\r\n        pollBlockNumberInterval: PropTypes.Requireable<number>;\r\n    };\r\n    var defaultProps: {\r\n        connectors: {};\r\n        autoConnect: boolean;\r\n        pollBalanceInterval: number;\r\n        pollBlockNumberInterval: number;\r\n    };\r\n}\r\nexport { ConnectionRejectedError, ChainUnsupportedError, ConnectorUnsupportedError, UseWalletProviderWrapper as UseWalletProvider, useWallet, getProviderString, getProviderFromUseWalletId, blockExplorerUrl, getLastActiveAccount, chains, };\r\n"}}
