{"code":"import JSBI from 'jsbi';\r\nimport { useRef, useCallback, useEffect } from 'react';\r\nimport { pollEvery, getBlockNumber } from '../utils';\r\n// Only watch block numbers, and return functions allowing to subscribe to it.\r\nexport function useWatchBlockNumber({ ethereum, pollBlockNumberInterval, }) {\r\n    const lastBlockNumber = useRef(null);\r\n    // Using listeners lets useWallet() decide if it wants to expose the block\r\n    // number, which implies to re-render whenever the block number updates.\r\n    const blockNumberListeners = useRef(new Set());\r\n    const addBlockNumberListener = useCallback((cb) => {\r\n        if (blockNumberListeners.current.has(cb)) {\r\n            return;\r\n        }\r\n        // Immediately send the block number to the new listener\r\n        cb(lastBlockNumber.current);\r\n        // Add the listener\r\n        blockNumberListeners.current.add(cb);\r\n    }, []);\r\n    const removeBlockNumberListener = useCallback((cb) => {\r\n        blockNumberListeners.current.delete(cb);\r\n    }, []);\r\n    // Update the block number and broadcast it to the listeners\r\n    const updateBlockNumber = useCallback((blockNumber) => {\r\n        if (lastBlockNumber.current === blockNumber) {\r\n            return;\r\n        }\r\n        lastBlockNumber.current = blockNumber;\r\n        blockNumberListeners.current.forEach((cb) => cb(blockNumber));\r\n    }, []);\r\n    useEffect(() => {\r\n        if (!ethereum) {\r\n            updateBlockNumber(null);\r\n            return;\r\n        }\r\n        let cancel = false;\r\n        const pollBlockNumber = pollEvery(() => {\r\n            return {\r\n                request: () => getBlockNumber(ethereum),\r\n                onResult: (latestBlockNumber) => {\r\n                    if (!cancel) {\r\n                        updateBlockNumber(latestBlockNumber === null\r\n                            ? null\r\n                            : JSBI.BigInt(latestBlockNumber).toString());\r\n                    }\r\n                },\r\n            };\r\n        }, pollBlockNumberInterval);\r\n        const stopPollingBlockNumber = pollBlockNumber();\r\n        return () => {\r\n            cancel = true;\r\n            stopPollingBlockNumber();\r\n        };\r\n    }, [ethereum, pollBlockNumberInterval, updateBlockNumber]);\r\n    return { addBlockNumberListener, removeBlockNumberListener };\r\n}\r\n//# sourceMappingURL=watchBlockNumber.js.map","references":["/Users/saleemfareed/use-wallet/node_modules/jsbi/jsbi.d.ts","/Users/saleemfareed/use-wallet/node_modules/@types/react/index.d.ts","/Users/saleemfareed/use-wallet/src/types.ts","/Users/saleemfareed/use-wallet/src/utils.ts"],"map":"{\"version\":3,\"file\":\"watchBlockNumber.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/hooks/watchBlockNumber.tsx\"],\"names\":[],\"mappings\":\"AAAA,OAAO,IAAI,MAAM,MAAM,CAAA;AACvB,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,OAAO,CAAA;AAGtD,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,UAAU,CAAA;AAEpD,8EAA8E;AAC9E,MAAM,UAAU,mBAAmB,CAAC,EAClC,QAAQ,EACR,uBAAuB,GAIxB;IACC,MAAM,eAAe,GAAG,MAAM,CAAgB,IAAI,CAAC,CAAA;IAEnD,0EAA0E;IAC1E,wEAAwE;IACxE,MAAM,oBAAoB,GAAG,MAAM,CACjC,IAAI,GAAG,EAAE,CACV,CAAA;IAED,MAAM,sBAAsB,GAAG,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE;QAChD,IAAI,oBAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;YACxC,OAAM;SACP;QAED,wDAAwD;QACxD,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;QAE3B,mBAAmB;QACnB,oBAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAA;IACtC,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,MAAM,yBAAyB,GAAG,WAAW,CAAC,CAAC,EAAE,EAAE,EAAE;QACnD,oBAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IACzC,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,4DAA4D;IAC5D,MAAM,iBAAiB,GAAG,WAAW,CAAC,CAAC,WAAW,EAAE,EAAE;QACpD,IAAI,eAAe,CAAC,OAAO,KAAK,WAAW,EAAE;YAC3C,OAAM;SACP;QAED,eAAe,CAAC,OAAO,GAAG,WAAW,CAAA;QACrC,oBAAoB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAA;IAC/D,CAAC,EAAE,EAAE,CAAC,CAAA;IAEN,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,CAAC,QAAQ,EAAE;YACb,iBAAiB,CAAC,IAAI,CAAC,CAAA;YACvB,OAAM;SACP;QAED,IAAI,MAAM,GAAG,KAAK,CAAA;QAElB,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,EAAE;YACrC,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,QAAQ,CAAC;gBACvC,QAAQ,EAAE,CAAC,iBAAyB,EAAE,EAAE;oBACtC,IAAI,CAAC,MAAM,EAAE;wBACX,iBAAiB,CACf,iBAAiB,KAAK,IAAI;4BACxB,CAAC,CAAC,IAAI;4BACN,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,CAC9C,CAAA;qBACF;gBACH,CAAC;aACF,CAAA;QACH,CAAC,EAAE,uBAAuB,CAAC,CAAA;QAE3B,MAAM,sBAAsB,GAAG,eAAe,EAAE,CAAA;QAEhD,OAAO,GAAG,EAAE;YACV,MAAM,GAAG,IAAI,CAAA;YACb,sBAAsB,EAAE,CAAA;QAC1B,CAAC,CAAA;IACH,CAAC,EAAE,CAAC,QAAQ,EAAE,uBAAuB,EAAE,iBAAiB,CAAC,CAAC,CAAA;IAE1D,OAAO,EAAE,sBAAsB,EAAE,yBAAyB,EAAE,CAAA;AAC9D,CAAC\"}","dts":{"name":"/Users/saleemfareed/use-wallet/hooks/watchBlockNumber.d.ts","writeByteOrderMark":false,"text":"import { EthereumProvider } from '../types';\r\nexport declare function useWatchBlockNumber({ ethereum, pollBlockNumberInterval, }: {\r\n    ethereum: EthereumProvider;\r\n    pollBlockNumberInterval: number;\r\n}): {\r\n    addBlockNumberListener: (cb: any) => void;\r\n    removeBlockNumberListener: (cb: any) => void;\r\n};\r\n"}}
