{"code":"import * as Images from '../images/index';\r\nfunction isElectron() {\r\n    // See https://github.com/electron/electron/issues/2288\r\n    return (typeof navigator === 'object' &&\r\n        typeof navigator.userAgent === 'string' &&\r\n        navigator.userAgent.indexOf('Electron') >= 0);\r\n}\r\n// See the corresponding prop type, EthereumProviderType, in prop-types.js.\r\nconst PROVIDERS = new Map([\r\n    {\r\n        id: 'frame',\r\n        name: 'Frame',\r\n        type: 'Desktop',\r\n        image: Images.Frame,\r\n        strings: {\r\n            'your Ethereum wallet': 'Frame',\r\n        },\r\n    },\r\n    {\r\n        id: 'metamask',\r\n        name: 'Metamask',\r\n        type: 'Desktop',\r\n        image: Images.Metamask,\r\n        strings: {\r\n            'your Ethereum wallet': 'Metamask',\r\n        },\r\n    },\r\n    {\r\n        id: 'status',\r\n        name: 'Status',\r\n        type: 'Mobile',\r\n        image: Images.Status,\r\n        strings: {\r\n            'your Ethereum wallet': 'Status',\r\n        },\r\n    },\r\n    {\r\n        id: 'cipher',\r\n        name: 'Cipher',\r\n        type: 'Mobile',\r\n        image: Images.Cipher,\r\n        strings: {\r\n            'your Ethereum wallet': 'Cipher',\r\n        },\r\n    },\r\n    {\r\n        id: 'fortmatic',\r\n        name: 'Fortmatic',\r\n        type: 'Any',\r\n        image: Images.Fortmatic,\r\n        strings: {\r\n            'your Ethereum wallet': 'Fortmatic',\r\n        },\r\n    },\r\n    {\r\n        id: 'portis',\r\n        name: 'Portis',\r\n        type: 'Any',\r\n        image: Images.Portis,\r\n        strings: {\r\n            'your Ethereum wallet': 'Portis',\r\n        },\r\n    },\r\n    {\r\n        id: 'walletconnect',\r\n        name: 'WalletConnect',\r\n        type: 'Any',\r\n        image: Images.walletconnect,\r\n        strings: {\r\n            'your Ethereum wallet': 'WalletConnect',\r\n        },\r\n    },\r\n    {\r\n        id: 'unknown',\r\n        name: 'Unknown',\r\n        type: 'Desktop',\r\n        image: Images.wallet,\r\n        strings: {\r\n            'your Ethereum wallet': 'your wallet',\r\n        },\r\n    },\r\n].map((provider) => [provider.id, provider]));\r\n// Get a providers object for a given ID.\r\nfunction getProvider(providerId) {\r\n    return PROVIDERS.get(providerId);\r\n}\r\n// Get a string that depends on the current Ethereum provider.\r\n// The default string is used as an identifier (Ã  la gettext).\r\nfunction getProviderString(string, providerId = 'unknown') {\r\n    const provider = getProvider(providerId);\r\n    return (provider && provider.strings[string]) || string;\r\n}\r\n// Get an identifier for the provider, if it can be detected.\r\nfunction identifyProvider(provider) {\r\n    if (provider && isElectron()) {\r\n        return 'frame';\r\n    }\r\n    if (provider && provider.isMetaMask) {\r\n        return 'metamask';\r\n    }\r\n    return 'unknown';\r\n}\r\n// Get a provider from its useWallet() identifier.\r\nfunction getProviderFromUseWalletId(id) {\r\n    if (id === 'injected' || id === 'provided') {\r\n        return (getProvider(identifyProvider(window.ethereum)) || getProvider('unknown'));\r\n    }\r\n    return getProvider(id) || getProvider('unknown');\r\n}\r\nexport { getProvider, identifyProvider, getProviderString, getProviderFromUseWalletId, };\r\nexport default PROVIDERS;\r\n//# sourceMappingURL=index.js.map","references":["/Users/saleemfareed/use-wallet/src/types.ts","/Users/saleemfareed/use-wallet/src/images/index.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/providers/index.tsx\"],\"names\":[],\"mappings\":\"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\"}"}
