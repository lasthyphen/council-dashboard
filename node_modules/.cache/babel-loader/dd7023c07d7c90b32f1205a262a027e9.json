{"ast":null,"code":"import { useCallback, useState, useMemo } from 'react';\nimport useTasks from './useTasks';\nimport { addressesEqual } from '../lib/web3-utils';\nimport { dayjs } from '../utils/date-utils';\nimport * as DisputesTypes from '../types/dispute-status-types';\nconst ALL_FILTER = 0;\nconst UNSELECTED_PHASE = -1;\nconst INITIAL_DATE_RANGE = {\n  start: null,\n  end: null\n};\nconst TASKS_ACTIONS_TYPES = [DisputesTypes.Phase.All, DisputesTypes.Phase.VotingPeriod, DisputesTypes.Phase.RevealVote, DisputesTypes.Phase.AppealRuling, DisputesTypes.Phase.ConfirmAppeal];\n\nfunction useFilteredTasks(jurorTasksSelected, connectedAccount) {\n  const [selectedDateRange, setSelectedDateRange] = useState(INITIAL_DATE_RANGE);\n  const [selectedPhase, setSelectedPhase] = useState(UNSELECTED_PHASE);\n  const [filtersSelected, setFiltersSelected] = useState(false); // If My Tasks is selected we need to only show ALL-COMMIT-REVEAL actions\n\n  const TASKS_ACTIONS_TYPES_STRING = jurorTasksSelected ? TASKS_ACTIONS_TYPES.slice(0, 3).map(DisputesTypes.getTaskActionString) : TASKS_ACTIONS_TYPES.map(DisputesTypes.getTaskActionString);\n  const {\n    openTasks: tasks,\n    fetching,\n    error\n  } = useTasks();\n  const jurorTasks = useMemo(() => tasks ? tasks.filter(task => task.juror === 'Anyone' ? false : addressesEqual(task.juror, connectedAccount)) : [], [connectedAccount, tasks]);\n  const tasksToFilter = jurorTasksSelected ? jurorTasks : tasks;\n  const handleSelectedDateRangeChange = useCallback(range => {\n    setFiltersSelected(range !== INITIAL_DATE_RANGE);\n    setSelectedDateRange(range);\n  }, [setSelectedDateRange]);\n  const handleSelectedPhaseChange = useCallback(index => {\n    setFiltersSelected(index !== ALL_FILTER);\n    setSelectedPhase(index || UNSELECTED_PHASE);\n  }, []);\n  const filteredTasks = useMemo(() => tasksToFilter.filter(({\n    phaseType,\n    dueDate,\n    open\n  }) => (selectedPhase === UNSELECTED_PHASE || selectedPhase === ALL_FILTER || phaseType === TASKS_ACTIONS_TYPES[selectedPhase]) && (!selectedDateRange.start || !selectedDateRange.end || dayjs(dueDate).isBetween(dayjs(selectedDateRange.start).startOf('day'), dayjs(selectedDateRange.end).endOf('day'), '[]'))), [selectedDateRange.end, selectedDateRange.start, selectedPhase, tasksToFilter]);\n  const handleClearFilters = useCallback(() => {\n    setSelectedPhase(UNSELECTED_PHASE);\n    setSelectedDateRange(INITIAL_DATE_RANGE);\n    setFiltersSelected(false);\n  }, []);\n  const emptyFilterResults = !filteredTasks.length && (selectedPhase > 1 || selectedDateRange.start || selectedDateRange.end);\n  return {\n    tasks: filteredTasks,\n    fetching,\n    error,\n    filtersSelected,\n    setFiltersSelected,\n    emptyFilterResults,\n    handleClearFilters,\n    selectedDateRange,\n    handleSelectedDateRangeChange,\n    selectedPhase,\n    handleSelectedPhaseChange,\n    openTasksNumber: tasks.length,\n    jurorOpenTaskNumber: jurorTasks.length,\n    taskActionsString: TASKS_ACTIONS_TYPES_STRING\n  };\n}\n\nexport default useFilteredTasks;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useFilteredTasks.js"],"names":["useCallback","useState","useMemo","useTasks","addressesEqual","dayjs","DisputesTypes","ALL_FILTER","UNSELECTED_PHASE","INITIAL_DATE_RANGE","start","end","TASKS_ACTIONS_TYPES","Phase","All","VotingPeriod","RevealVote","AppealRuling","ConfirmAppeal","useFilteredTasks","jurorTasksSelected","connectedAccount","selectedDateRange","setSelectedDateRange","selectedPhase","setSelectedPhase","filtersSelected","setFiltersSelected","TASKS_ACTIONS_TYPES_STRING","slice","map","getTaskActionString","openTasks","tasks","fetching","error","jurorTasks","filter","task","juror","tasksToFilter","handleSelectedDateRangeChange","range","handleSelectedPhaseChange","index","filteredTasks","phaseType","dueDate","open","isBetween","startOf","endOf","handleClearFilters","emptyFilterResults","length","openTasksNumber","jurorOpenTaskNumber","taskActionsString"],"mappings":"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","sourcesContent":["import { useCallback, useState, useMemo } from 'react'\nimport useTasks from './useTasks'\nimport { addressesEqual } from '../lib/web3-utils'\nimport { dayjs } from '../utils/date-utils'\nimport * as DisputesTypes from '../types/dispute-status-types'\n\nconst ALL_FILTER = 0\nconst UNSELECTED_PHASE = -1\nconst INITIAL_DATE_RANGE = { start: null, end: null }\nconst TASKS_ACTIONS_TYPES = [\n  DisputesTypes.Phase.All,\n  DisputesTypes.Phase.VotingPeriod,\n  DisputesTypes.Phase.RevealVote,\n  DisputesTypes.Phase.AppealRuling,\n  DisputesTypes.Phase.ConfirmAppeal,\n]\n\nfunction useFilteredTasks(jurorTasksSelected, connectedAccount) {\n  const [selectedDateRange, setSelectedDateRange] = useState(INITIAL_DATE_RANGE)\n  const [selectedPhase, setSelectedPhase] = useState(UNSELECTED_PHASE)\n  const [filtersSelected, setFiltersSelected] = useState(false)\n\n  // If My Tasks is selected we need to only show ALL-COMMIT-REVEAL actions\n  const TASKS_ACTIONS_TYPES_STRING = jurorTasksSelected\n    ? TASKS_ACTIONS_TYPES.slice(0, 3).map(DisputesTypes.getTaskActionString)\n    : TASKS_ACTIONS_TYPES.map(DisputesTypes.getTaskActionString)\n\n  const { openTasks: tasks, fetching, error } = useTasks()\n\n  const jurorTasks = useMemo(\n    () =>\n      tasks\n        ? tasks.filter(task =>\n            task.juror === 'Anyone'\n              ? false\n              : addressesEqual(task.juror, connectedAccount)\n          )\n        : [],\n    [connectedAccount, tasks]\n  )\n\n  const tasksToFilter = jurorTasksSelected ? jurorTasks : tasks\n\n  const handleSelectedDateRangeChange = useCallback(\n    range => {\n      setFiltersSelected(range !== INITIAL_DATE_RANGE)\n      setSelectedDateRange(range)\n    },\n    [setSelectedDateRange]\n  )\n\n  const handleSelectedPhaseChange = useCallback(index => {\n    setFiltersSelected(index !== ALL_FILTER)\n    setSelectedPhase(index || UNSELECTED_PHASE)\n  }, [])\n\n  const filteredTasks = useMemo(\n    () =>\n      tasksToFilter.filter(\n        ({ phaseType, dueDate, open }) =>\n          (selectedPhase === UNSELECTED_PHASE ||\n            selectedPhase === ALL_FILTER ||\n            phaseType === TASKS_ACTIONS_TYPES[selectedPhase]) &&\n          (!selectedDateRange.start ||\n            !selectedDateRange.end ||\n            dayjs(dueDate).isBetween(\n              dayjs(selectedDateRange.start).startOf('day'),\n              dayjs(selectedDateRange.end).endOf('day'),\n              '[]'\n            ))\n      ),\n    [\n      selectedDateRange.end,\n      selectedDateRange.start,\n      selectedPhase,\n      tasksToFilter,\n    ]\n  )\n\n  const handleClearFilters = useCallback(() => {\n    setSelectedPhase(UNSELECTED_PHASE)\n    setSelectedDateRange(INITIAL_DATE_RANGE)\n    setFiltersSelected(false)\n  }, [])\n\n  const emptyFilterResults =\n    !filteredTasks.length &&\n    (selectedPhase > 1 || selectedDateRange.start || selectedDateRange.end)\n\n  return {\n    tasks: filteredTasks,\n    fetching,\n    error,\n    filtersSelected,\n    setFiltersSelected,\n    emptyFilterResults,\n    handleClearFilters,\n    selectedDateRange,\n    handleSelectedDateRangeChange,\n    selectedPhase,\n    handleSelectedPhaseChange,\n    openTasksNumber: tasks.length,\n    jurorOpenTaskNumber: jurorTasks.length,\n    taskActionsString: TASKS_ACTIONS_TYPES_STRING,\n  }\n}\n\nexport default useFilteredTasks\n"]},"metadata":{},"sourceType":"module"}