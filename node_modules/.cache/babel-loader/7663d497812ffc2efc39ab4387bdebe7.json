{"ast":null,"code":"function n(a, b) {\n  a |= 0;\n\n  for (var c = 0, d = 0 | b.length; c < d; c++) {\n    a = (a << 5) + a + b.charCodeAt(c);\n  }\n\n  return a;\n}\n\nfunction q(a) {\n  return n(5381, a.replace(/([\\s,]|#[^\\n\\r]+)+/g, \" \").trim()) >>> 0;\n}\n\nfunction t(a, b) {\n  if (\"string\" == typeof a) {\n    var c = q(a);\n    a = void 0 !== r[c] ? r[c] : parse(a, {\n      noLocation: !0\n    });\n  } else {\n    void 0 !== a.__key ? c = a.__key : (c = q(print(a)), a = void 0 !== r[c] ? r[c] : a);\n  }\n\n  r[c] = a;\n  a.__key = c;\n  return {\n    key: b ? n(c, stringifyVariables(b)) >>> 0 : c,\n    query: a,\n    variables: b || {}\n  };\n}\n\nfunction u(a, b) {\n  return _extends({}, a, {\n    context: _extends({}, a.context, {\n      meta: _extends({}, a.context.meta, b)\n    })\n  });\n}\n\nfunction v(a, b) {\n  void 0 === b && (b = []);\n\n  if (Array.isArray(a)) {\n    a.forEach(function c(a) {\n      v(a, b);\n    });\n  } else if (\"object\" == typeof a && null !== a) {\n    for (var d in a) {\n      \"__typename\" === d && \"string\" == typeof a[d] ? b.push(a[d]) : v(a[d], b);\n    }\n  }\n\n  return b;\n}\n\nfunction w(a, b, c) {\n  return c.indexOf(a) === b;\n}\n\nfunction x(a) {\n  return a.kind === Kind.FIELD && \"__typename\" === a.name.value;\n}\n\nfunction y(a) {\n  if (a.selectionSet && !a.selectionSet.selections.some(x)) {\n    return _extends({}, a, {\n      selectionSet: _extends({}, a.selectionSet, {\n        selections: a.selectionSet.selections.concat([{\n          kind: Kind.FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: \"__typename\"\n          }\n        }])\n      })\n    });\n  }\n}\n\nfunction z(a) {\n  var b = visit(a, {\n    Field: y,\n    InlineFragment: y\n  });\n  b.__key = a.__key;\n  return b;\n}\n\nfunction B(a) {\n  return a && \"object\" == typeof a ? Object.keys(a).reduce(function (b, c) {\n    var d = a[c];\n    \"__typename\" === c ? Object.defineProperty(b, \"__typename\", {\n      enumerable: !1,\n      value: d\n    }) : Array.isArray(d) ? b[c] = d.map(B) : b[c] = d && \"object\" == typeof d && \"__typename\" in d ? B(d) : d;\n    return b;\n  }, {}) : a;\n}\n\nfunction C(a) {\n  a.toPromise = function () {\n    return toPromise(take(1)(a));\n  };\n\n  return a;\n}\n\nfunction D() {}\n\nfunction E(a) {\n  return \"subscription\" !== (a = a.operationName) && \"query\" !== a;\n}\n\nfunction F(a) {\n  return a.path || a.extensions ? {\n    message: a.message,\n    path: a.path,\n    extensions: a.extensions\n  } : a.message;\n}\n\nfunction G(a) {\n  return \"mutation\" !== (a = a.operationName) && \"query\" !== a;\n}\n\nfunction H(a) {\n  return _extends({}, a, {\n    query: z(a.query)\n  });\n}\n\nfunction I(a) {\n  return \"query\" !== a.operationName || \"cache-only\" !== a.context.requestPolicy;\n}\n\nfunction J(a) {\n  return u(a, {\n    cacheOutcome: \"miss\"\n  });\n}\n\nfunction K(a) {\n  return G(a);\n}\n\nfunction L(a) {\n  function b(a) {\n    var b = a.context.requestPolicy;\n    return \"query\" === a.operationName && \"network-only\" !== b && (\"cache-only\" === b || h.has(a.key));\n  }\n\n  function c(a) {\n    var c = h.get(a.key);\n    \"production\" !== process.env.NODE_ENV && g(_extends({}, {\n      operation: a\n    }, c ? {\n      type: \"cacheHit\",\n      message: \"The result was successfully retried from the cache\"\n    } : {\n      type: \"cacheMiss\",\n      message: \"The result could not be retrieved from the cache\"\n    }));\n    c = _extends({}, c, {\n      operation: u(a, {\n        cacheOutcome: c ? \"hit\" : \"miss\"\n      })\n    });\n    \"cache-and-network\" === a.context.requestPolicy && (c.stale = !0, M(m, a));\n    return c;\n  }\n\n  function d(a) {\n    return !G(a) && b(a);\n  }\n\n  function e(a) {\n    a.operation && \"mutation\" === a.operation.operationName ? k(a) : a.operation && \"query\" === a.operation.operationName && l(a);\n  }\n\n  function f(a) {\n    return !G(a) && !b(a);\n  }\n\n  var k,\n      l,\n      p = a.forward,\n      m = a.client,\n      g = a.dispatchDebug,\n      h = new Map();\n  a = Object.create(null);\n  k = function N(a, b, c, d) {\n    function e(b) {\n      if (a.has(b)) {\n        var d = a.get(b).operation;\n        a.delete(b);\n        M(c, d);\n      }\n    }\n\n    return function (a) {\n      function c(a) {\n        f.add(a);\n      }\n\n      var f = new Set(),\n          g = a.operation.context.additionalTypenames;\n      g = v(a.data).filter(w).concat(g || []);\n      \"production\" !== process.env.NODE_ENV && d({\n        type: \"cacheInvalidation\",\n        message: \"The following typenames have been invalidated: \" + g,\n        operation: a.operation,\n        data: {\n          typenames: g,\n          response: a\n        },\n        source: \"cacheExchange\"\n      });\n      g.forEach(function (a) {\n        (a = b[a] || (b[a] = new Set())).forEach(c);\n        a.clear();\n      });\n      f.forEach(e);\n    };\n  }(h, a, m, g), l = function O(a, b) {\n    return function (c) {\n      var d = c.operation,\n          e = c.data,\n          f = d.context.additionalTypenames;\n      null != e && (a.set(d.key, {\n        operation: d,\n        data: e,\n        error: c.error\n      }), v(c.data).filter(w).concat(f || []).forEach(function (a) {\n        (b[a] || (b[a] = new Set())).add(d.key);\n      }));\n    };\n  }(h, a);\n  return function (a) {\n    var b = share(a);\n    a = map(c)(filter(d)(b));\n    b = tap(e)(p(filter(I)(map(J)(merge([map(H)(filter(f)(b)), filter(K)(b)])))));\n    return merge([a, b]);\n  };\n}\n\nfunction M(a, b) {\n  return a.reexecuteOperation(_extends({}, b, {\n    context: _extends({}, b.context, {\n      requestPolicy: \"network-only\"\n    })\n  }));\n}\n\nfunction P(a) {\n  return console.log(\"[Exchange debug]: Completed operation: \", a);\n}\n\nfunction Q(a) {\n  return console.log(\"[Exchange debug]: Incoming operation: \", a);\n}\n\nfunction R(a) {\n  function b(a) {\n    f.delete(a.operation.key);\n  }\n\n  function c(a) {\n    var c = a.key,\n        b = a.operationName;\n\n    if (\"teardown\" === b) {\n      return f.delete(c), !0;\n    }\n\n    if (\"query\" !== b && \"subscription\" !== b) {\n      return !0;\n    }\n\n    b = f.has(c);\n    f.add(c);\n    b && \"production\" !== process.env.NODE_ENV && e({\n      type: \"dedup\",\n      message: \"An operation has been deduped.\",\n      operation: a,\n      source: \"dedupExchange\"\n    });\n    return !b;\n  }\n\n  var d = a.forward,\n      e = a.dispatchDebug,\n      f = new Set();\n  return function (a) {\n    a = filter(c)(a);\n    return tap(b)(d(a));\n  };\n}\n\nfunction S(a) {\n  return \"query\" === a.operationName || \"mutation\" === a.operationName;\n}\n\nfunction T(a) {\n  return \"query\" !== a.operationName && \"mutation\" !== a.operationName;\n}\n\nfunction U(a) {\n  var b = a.forward,\n      c = a.dispatchDebug;\n  return function (a) {\n    var f,\n        d = share(a);\n    a = mergeMap(function (a) {\n      var b = a.key,\n          g = filter(function (a) {\n        return \"teardown\" === a.operationName && a.key === b;\n      })(d),\n          e = makeFetchBody(a),\n          f = makeFetchURL(a, e),\n          l = makeFetchOptions(a, e);\n      \"production\" !== process.env.NODE_ENV && c({\n        type: \"fetchRequest\",\n        message: \"A fetch request is being executed.\",\n        operation: a,\n        data: {\n          url: f,\n          fetchOptions: l\n        },\n        source: \"fetchExchange\"\n      });\n      return onPush(function (b) {\n        var d = b.data ? void 0 : b.error;\n        \"production\" !== process.env.NODE_ENV && c({\n          type: d ? \"fetchError\" : \"fetchSuccess\",\n          message: \"A \" + (d ? \"failed\" : \"successful\") + \" fetch response has been returned.\",\n          operation: a,\n          data: {\n            url: f,\n            fetchOptions: l,\n            value: d || b\n          },\n          source: \"fetchExchange\"\n        });\n      })(takeUntil(g)(makeFetchSource(a, f, l)));\n    })(filter(S)(d));\n    f = b(filter(T)(d));\n    return merge([a, f]);\n  };\n}\n\nfunction V() {\n  return !1;\n}\n\nfunction W(a) {\n  function b(a) {\n    if (\"teardown\" !== a.operationName && \"production\" !== process.env.NODE_ENV) {\n      var b = 'No exchange has handled operations of type \"' + a.operationName + \"\\\". Check whether you've added an exchange responsible for these operations.\";\n      \"production\" !== process.env.NODE_ENV && c({\n        type: \"fallbackCatch\",\n        message: b,\n        operation: a,\n        source: \"fallbackExchange\"\n      });\n      console.warn(b);\n    }\n  }\n\n  var c = a.dispatchDebug;\n  return function (a) {\n    return filter(V)(tap(b)(a));\n  };\n}\n\nfunction X(a) {\n  return function (b) {\n    var c = b.client,\n        d = b.dispatchDebug;\n    return a.reduceRight(function (a, b) {\n      return b({\n        client: c,\n        forward: a,\n        dispatchDebug: function dispatchDebug(a) {\n          \"production\" !== process.env.NODE_ENV && d(_extends({}, {\n            timestamp: Date.now(),\n            source: b.name\n          }, a));\n        }\n      });\n    }, b.forward);\n  };\n}\n\nfunction Z(a) {\n  var d,\n      e,\n      f,\n      p,\n      m,\n      c = this;\n  this.activeOperations = Object.create(null);\n  this.queue = [];\n\n  this.createOperationContext = function (a) {\n    return _extends({}, {\n      url: c.url,\n      fetchOptions: c.fetchOptions,\n      fetch: c.fetch,\n      preferGetMethod: c.preferGetMethod\n    }, a, {\n      requestPolicy: (a || {}).requestPolicy || c.requestPolicy\n    });\n  };\n\n  this.createRequestOperation = function (a, b, d) {\n    return {\n      key: b.key,\n      query: b.query,\n      variables: b.variables,\n      operationName: a,\n      context: c.createOperationContext(d)\n    };\n  };\n\n  this.executeQuery = function (a, b) {\n    a = c.createRequestOperation(\"query\", a, b);\n    var l = c.executeRequestOperation(a);\n    return (a = a.context.pollInterval) ? switchMap(function d() {\n      return l;\n    })(merge([fromValue(0), interval(a)])) : l;\n  };\n\n  this.executeSubscription = function (a, b) {\n    a = c.createRequestOperation(\"subscription\", a, b);\n    return c.executeRequestOperation(a);\n  };\n\n  this.executeMutation = function (a, b) {\n    a = c.createRequestOperation(\"mutation\", a, b);\n    return c.executeRequestOperation(a);\n  };\n\n  if (\"production\" !== process.env.NODE_ENV && !a.url) {\n    throw Error(\"You are creating an urql-client without a url.\");\n  }\n\n  d = D;\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    e = (d = makeSubject()).next, f = d.source;\n\n    this.subscribeToDebugTarget = function b(a) {\n      return subscribe(a)(f);\n    };\n\n    d = e;\n  }\n\n  this.url = a.url;\n  this.fetchOptions = a.fetchOptions;\n  this.fetch = a.fetch;\n  this.suspense = !!a.suspense;\n  this.requestPolicy = a.requestPolicy || \"cache-first\";\n  this.preferGetMethod = !!a.preferGetMethod;\n  this.maskTypename = !!a.maskTypename;\n  e = makeSubject();\n  p = e.next;\n  this.operations$ = e.source;\n  m = !1;\n\n  this.dispatchOperation = function (a) {\n    m = !0;\n\n    for (a && p(a); a = c.queue.shift();) {\n      p(a);\n    }\n\n    m = !1;\n  };\n\n  this.reexecuteOperation = function (a) {\n    0 < (c.activeOperations[a.key] || 0) && (c.queue.push(a), m || Promise.resolve().then(c.dispatchOperation));\n  };\n\n  a = X(void 0 !== a.exchanges ? a.exchanges : Y);\n  this.results$ = share(a({\n    client: this,\n    dispatchDebug: d,\n    forward: W({\n      dispatchDebug: d\n    })\n  })(this.operations$));\n  publish(this.results$);\n}\n\nfunction ba(a) {\n  a.data = B(a.data);\n  return a;\n}\n\nfunction createClient(a) {\n  return new Z(a);\n}\n\nfunction debugExchange(a) {\n  var d = a.forward;\n  return \"production\" === process.env.NODE_ENV ? function b(a) {\n    return d(a);\n  } : function c(a) {\n    return tap(P)(d(tap(Q)(a)));\n  };\n}\n\nfunction ssrExchange(a) {\n  function b(b) {\n    var c = b.client,\n        l = b.forward;\n    return function (b) {\n      var e = a && \"boolean\" == typeof a.isClient ? !!a.isClient : !c.suspense,\n          k = share(b);\n      b = l(filter(f)(k));\n      k = map(p)(filter(m)(k));\n      e ? k = tap(d)(k) : b = tap(g)(b);\n      return merge([b, k]);\n    };\n  }\n\n  function c(a) {\n    return !E(a) && void 0 !== h[a.key];\n  }\n\n  function d(a) {\n    k.push(a.operation.key);\n    1 === k.length && Promise.resolve().then(e);\n  }\n\n  function e() {\n    for (var a; a = k.shift();) {\n      delete h[a];\n    }\n  }\n\n  function f(a) {\n    return !c(a);\n  }\n\n  function p(a) {\n    var b = h[a.key],\n        c = b.error;\n    return {\n      operation: a,\n      data: b.data,\n      extensions: void 0,\n      error: c ? new CombinedError({\n        networkError: c.networkError ? Error(c.networkError) : void 0,\n        graphQLErrors: c.graphQLErrors && c.graphQLErrors.length ? c.graphQLErrors : void 0\n      }) : void 0\n    };\n  }\n\n  function m(a) {\n    return c(a);\n  }\n\n  function g(a) {\n    var c,\n        b = a.operation;\n\n    if (!E(b)) {\n      c = a.error;\n      a = {\n        data: a.data,\n        error: void 0\n      };\n      c && (a.error = {\n        graphQLErrors: c.graphQLErrors.map(F),\n        networkError: c.networkError ? \"\" + c.networkError : void 0\n      });\n      h[b.key] = a;\n    }\n  }\n\n  var h = {},\n      k = [];\n\n  b.restoreData = function (a) {\n    return _extends(h, a);\n  };\n\n  b.extractData = function () {\n    return _extends({}, h);\n  };\n\n  a && a.initialState && b.restoreData(a.initialState);\n  return b;\n}\n\nfunction subscriptionExchange(a) {\n  function b(a) {\n    return \"subscription\" === (a = a.operationName) || !!d && (\"query\" === a || \"mutation\" === a);\n  }\n\n  var c = a.forwardSubscription,\n      d = a.enableAllOperations;\n  return function (a) {\n    function d(a) {\n      var b = c({\n        key: a.key.toString(36),\n        query: print(a.query),\n        variables: a.variables,\n        context: _extends({}, a.context)\n      });\n      return make(function (c) {\n        function d(b) {\n          return k(makeResult(a, b));\n        }\n\n        function e(b) {\n          return k(makeErrorResult(a, b));\n        }\n\n        function f() {\n          g || (g = !0, \"subscription\" === a.operationName && m.reexecuteOperation(_extends({}, a, {\n            operationName: \"teardown\"\n          })), h());\n        }\n\n        var l,\n            k = c.next,\n            h = c.complete,\n            g = !1;\n        Promise.resolve().then(function () {\n          g || (l = b.subscribe({\n            next: d,\n            error: e,\n            complete: f\n          }));\n        });\n        return function () {\n          g = !0;\n          l && l.unsubscribe();\n        };\n      });\n    }\n\n    function e(a) {\n      return !h(a);\n    }\n\n    var m = a.client,\n        g = a.forward,\n        h = b;\n    return function (a) {\n      var c,\n          b = share(a);\n      a = mergeMap(function (a) {\n        var c = a.key,\n            e = filter(function (a) {\n          return \"teardown\" === a.operationName && a.key === c;\n        })(b);\n        return takeUntil(e)(d(a));\n      })(filter(h)(b));\n      c = g(filter(e)(b));\n      return merge([a, c]);\n    };\n  };\n}\n\nvar r, aa, Y;\nimport { visit } from \"graphql/language/visitor\";\nimport { Kind } from \"graphql/language/kinds\";\nimport { print } from \"graphql/language/printer\";\nimport { parse } from \"graphql/language/parser\";\nimport { share, onPush, takeWhile, toPromise, take, filter, map, tap, merge, mergeMap, takeUntil, make, switchMap, fromValue, interval, makeSubject, publish, onStart, onEnd, subscribe } from \"wonka\";\nimport { s as stringifyVariables, _ as _extends, C as CombinedError, m as makeResult, a as makeErrorResult, b as makeFetchBody, c as makeFetchURL, d as makeFetchOptions, e as makeFetchSource } from \"./36dc2ce0.mjs\";\nexport { C as CombinedError, a as makeErrorResult, m as makeResult, s as stringifyVariables } from \"./36dc2ce0.mjs\";\nr = Object.create(null);\naa = W({\n  dispatchDebug: D\n});\nY = [R, L, U];\n\nZ.prototype.onOperationStart = function (a) {\n  var b = a.key;\n  this.activeOperations[b] = (this.activeOperations[b] || 0) + 1;\n  this.dispatchOperation(a);\n};\n\nZ.prototype.onOperationEnd = function (a) {\n  var b = a.key,\n      c = this.activeOperations[b] || 0;\n  0 >= (this.activeOperations[b] = 0 >= c ? 0 : c - 1) && this.dispatchOperation(_extends({}, a, {\n    operationName: \"teardown\"\n  }));\n};\n\nZ.prototype.executeRequestOperation = function (a) {\n  var p,\n      c = this,\n      d = a.key,\n      e = a.operationName,\n      f = filter(function (a) {\n    return a.operation.key === d;\n  })(this.results$);\n  this.maskTypename && (f = map(ba)(f));\n\n  if (\"mutation\" === e) {\n    return take(1)(onStart(function b() {\n      return c.dispatchOperation(a);\n    })(f));\n  }\n\n  p = filter(function (a) {\n    return \"teardown\" === a.operationName && a.key === d;\n  })(this.operations$);\n  f = onEnd(function () {\n    c.onOperationEnd(a);\n  })(onStart(function () {\n    c.onOperationStart(a);\n  })(takeUntil(p)(f)));\n  return !1 !== a.context.suspense && this.suspense && \"query\" === e ? function A(a) {\n    return function (b) {\n      var c = share(a),\n          d = !1,\n          e = !1;\n      onPush(function () {\n        return d = !0;\n      })(takeWhile(function () {\n        return !e;\n      })(c))(b);\n\n      if (!d) {\n        throw e = !0, b(0), toPromise(take(1)(c));\n      }\n    };\n  }(f) : f;\n};\n\nZ.prototype.query = function (a, b, c) {\n  c && \"boolean\" == typeof c.suspense || (c = _extends({}, c, {\n    suspense: !1\n  }));\n  return C(this.executeQuery(t(a, b), c));\n};\n\nZ.prototype.readQuery = function (a, b, c) {\n  var d = null;\n  subscribe(function (a) {\n    d = a;\n  })(this.executeQuery(t(a, b), c)).unsubscribe();\n  return d;\n};\n\nZ.prototype.subscription = function (a, b, c) {\n  return this.executeSubscription(t(a, b), c);\n};\n\nZ.prototype.mutation = function (a, b, c) {\n  return C(this.executeMutation(t(a, b), c));\n};\n\nexport { Z as Client, L as cacheExchange, X as composeExchanges, createClient, t as createRequest, debugExchange, R as dedupExchange, Y as defaultExchanges, aa as fallbackExchangeIO, U as fetchExchange, z as formatDocument, B as maskTypename, ssrExchange, subscriptionExchange };","map":null,"metadata":{},"sourceType":"module"}