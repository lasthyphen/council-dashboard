{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getContract}from'../web3-contracts';import{performDisputableVotingQuery}from'./queries';import disputableDandelionVotingAbi from'../abi/disputables/DisputableDandelionVoting.json';import disputableDelayAbi from'../abi/disputables/DisputableDelay.json';export function delayExtractor(disputableAddress,disputableActionId){return extractFromContract(disputableDelayAbi,disputableAddress,disputableActionId,'delayedScripts',4);}export function dandelionVotingExtractor(disputableAddress,disputableActionId){return extractFromContract(disputableDandelionVotingAbi,disputableAddress,disputableActionId,'getVote',10);}export function votingExtractor(_x,_x2,_x3){return _votingExtractor.apply(this,arguments);}function _votingExtractor(){_votingExtractor=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(disputableAddress,disputableActionId,disputableAppId){var _data$disputableVotin,_data$disputableVotin2;var _ref,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return performDisputableVotingQuery(disputableAddress,disputableActionId,disputableAppId);case 2:_ref=_context.sent;data=_ref.data;if(data===null||data===void 0?void 0:(_data$disputableVotin=data.disputableVoting)===null||_data$disputableVotin===void 0?void 0:(_data$disputableVotin2=_data$disputableVotin.votes)===null||_data$disputableVotin2===void 0?void 0:_data$disputableVotin2.length){_context.next=6;break;}throw new Error('Failed to fetch evmScript from subgraph');case 6:return _context.abrupt(\"return\",data.disputableVoting.votes[0].script);case 7:case\"end\":return _context.stop();}}},_callee);}));return _votingExtractor.apply(this,arguments);}function extractFromContract(_x4,_x5,_x6,_x7,_x8){return _extractFromContract.apply(this,arguments);}function _extractFromContract(){_extractFromContract=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(abi,disputableAddress,disputableActionId,fn,scriptPosition){var disputableAppContract,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:disputableAppContract=getContract(disputableAddress,abi);// Fetch the evmScript via contract call\n_context2.next=3;return disputableAppContract[fn](disputableActionId);case 3:result=_context2.sent;return _context2.abrupt(\"return\",result[scriptPosition]);case 5:case\"end\":return _context2.stop();}}},_callee2);}));return _extractFromContract.apply(this,arguments);}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/scriptExtractors.js"],"names":["getContract","performDisputableVotingQuery","disputableDandelionVotingAbi","disputableDelayAbi","delayExtractor","disputableAddress","disputableActionId","extractFromContract","dandelionVotingExtractor","votingExtractor","disputableAppId","data","disputableVoting","votes","length","Error","script","abi","fn","scriptPosition","disputableAppContract","result"],"mappings":"qPAAA,OAASA,WAAT,KAA4B,mBAA5B,CACA,OAASC,4BAAT,KAA6C,WAA7C,CAEA,MAAOC,CAAAA,4BAAP,KAAyC,mDAAzC,CACA,MAAOC,CAAAA,kBAAP,KAA+B,yCAA/B,CAEA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,iBAAxB,CAA2CC,kBAA3C,CAA+D,CACpE,MAAOC,CAAAA,mBAAmB,CACxBJ,kBADwB,CAExBE,iBAFwB,CAGxBC,kBAHwB,CAIxB,gBAJwB,CAKxB,CALwB,CAA1B,CAOD,CAED,MAAO,SAASE,CAAAA,wBAAT,CACLH,iBADK,CAELC,kBAFK,CAGL,CACA,MAAOC,CAAAA,mBAAmB,CACxBL,4BADwB,CAExBG,iBAFwB,CAGxBC,kBAHwB,CAIxB,SAJwB,CAKxB,EALwB,CAA1B,CAOD,CAED,eAAsBG,CAAAA,eAAtB,4D,qGAAO,iBACLJ,iBADK,CAELC,kBAFK,CAGLI,eAHK,uMAKkBT,CAAAA,4BAA4B,CACjDI,iBADiD,CAEjDC,kBAFiD,CAGjDI,eAHiD,CAL9C,2BAKGC,IALH,MAKGA,IALH,IAWAA,IAXA,SAWAA,IAXA,wCAWAA,IAAI,CAAEC,gBAXN,wEAWA,sBAAwBC,KAXxB,iDAWA,uBAA+BC,MAX/B,8BAYG,IAAIC,CAAAA,KAAJ,CAAU,yCAAV,CAZH,wCAeEJ,IAAI,CAACC,gBAAL,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+BG,MAfjC,wD,0DAkBQT,CAAAA,mB,sLAAf,kBACEU,GADF,CAEEZ,iBAFF,CAGEC,kBAHF,CAIEY,EAJF,CAKEC,cALF,uJAOQC,qBAPR,CAOgCpB,WAAW,CAACK,iBAAD,CAAoBY,GAApB,CAP3C,CASE;AATF,uBAUuBG,CAAAA,qBAAqB,CAACF,EAAD,CAArB,CAA0BZ,kBAA1B,CAVvB,QAUQe,MAVR,iDAWSA,MAAM,CAACF,cAAD,CAXf,0D","sourcesContent":["import { getContract } from '../web3-contracts'\nimport { performDisputableVotingQuery } from './queries'\n\nimport disputableDandelionVotingAbi from '../abi/disputables/DisputableDandelionVoting.json'\nimport disputableDelayAbi from '../abi/disputables/DisputableDelay.json'\n\nexport function delayExtractor(disputableAddress, disputableActionId) {\n  return extractFromContract(\n    disputableDelayAbi,\n    disputableAddress,\n    disputableActionId,\n    'delayedScripts',\n    4\n  )\n}\n\nexport function dandelionVotingExtractor(\n  disputableAddress,\n  disputableActionId\n) {\n  return extractFromContract(\n    disputableDandelionVotingAbi,\n    disputableAddress,\n    disputableActionId,\n    'getVote',\n    10\n  )\n}\n\nexport async function votingExtractor(\n  disputableAddress,\n  disputableActionId,\n  disputableAppId\n) {\n  const { data } = await performDisputableVotingQuery(\n    disputableAddress,\n    disputableActionId,\n    disputableAppId\n  )\n\n  if (!data?.disputableVoting?.votes?.length) {\n    throw new Error('Failed to fetch evmScript from subgraph')\n  }\n\n  return data.disputableVoting.votes[0].script\n}\n\nasync function extractFromContract(\n  abi,\n  disputableAddress,\n  disputableActionId,\n  fn,\n  scriptPosition\n) {\n  const disputableAppContract = getContract(disputableAddress, abi)\n\n  // Fetch the evmScript via contract call\n  const result = await disputableAppContract[fn](disputableActionId)\n  return result[scriptPosition]\n}\n"]},"metadata":{},"sourceType":"module"}