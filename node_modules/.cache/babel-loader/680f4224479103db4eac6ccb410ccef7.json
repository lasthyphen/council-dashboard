{"ast":null,"code":"import { getContract } from '../web3-contracts';\nimport { performDisputableVotingQuery } from './queries';\nimport disputableDandelionVotingAbi from '../abi/disputables/DisputableDandelionVoting.json';\nimport disputableDelayAbi from '../abi/disputables/DisputableDelay.json';\nexport function delayExtractor(disputableAddress, disputableActionId) {\n  return extractFromContract(disputableDelayAbi, disputableAddress, disputableActionId, 'delayedScripts', 4);\n}\nexport function dandelionVotingExtractor(disputableAddress, disputableActionId) {\n  return extractFromContract(disputableDandelionVotingAbi, disputableAddress, disputableActionId, 'getVote', 10);\n}\nexport async function votingExtractor(disputableAddress, disputableActionId, disputableAppId) {\n  var _data$disputableVotin, _data$disputableVotin2;\n\n  const {\n    data\n  } = await performDisputableVotingQuery(disputableAddress, disputableActionId, disputableAppId);\n\n  if (!(data === null || data === void 0 ? void 0 : (_data$disputableVotin = data.disputableVoting) === null || _data$disputableVotin === void 0 ? void 0 : (_data$disputableVotin2 = _data$disputableVotin.votes) === null || _data$disputableVotin2 === void 0 ? void 0 : _data$disputableVotin2.length)) {\n    throw new Error('Failed to fetch evmScript from subgraph');\n  }\n\n  return data.disputableVoting.votes[0].script;\n}\n\nasync function extractFromContract(abi, disputableAddress, disputableActionId, fn, scriptPosition) {\n  const disputableAppContract = getContract(disputableAddress, abi); // Fetch the evmScript via contract call\n\n  const result = await disputableAppContract[fn](disputableActionId);\n  return result[scriptPosition];\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/scriptExtractors.js"],"names":["getContract","performDisputableVotingQuery","disputableDandelionVotingAbi","disputableDelayAbi","delayExtractor","disputableAddress","disputableActionId","extractFromContract","dandelionVotingExtractor","votingExtractor","disputableAppId","data","disputableVoting","votes","length","Error","script","abi","fn","scriptPosition","disputableAppContract","result"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,SAASC,4BAAT,QAA6C,WAA7C;AAEA,OAAOC,4BAAP,MAAyC,mDAAzC;AACA,OAAOC,kBAAP,MAA+B,yCAA/B;AAEA,OAAO,SAASC,cAAT,CAAwBC,iBAAxB,EAA2CC,kBAA3C,EAA+D;AACpE,SAAOC,mBAAmB,CACxBJ,kBADwB,EAExBE,iBAFwB,EAGxBC,kBAHwB,EAIxB,gBAJwB,EAKxB,CALwB,CAA1B;AAOD;AAED,OAAO,SAASE,wBAAT,CACLH,iBADK,EAELC,kBAFK,EAGL;AACA,SAAOC,mBAAmB,CACxBL,4BADwB,EAExBG,iBAFwB,EAGxBC,kBAHwB,EAIxB,SAJwB,EAKxB,EALwB,CAA1B;AAOD;AAED,OAAO,eAAeG,eAAf,CACLJ,iBADK,EAELC,kBAFK,EAGLI,eAHK,EAIL;AAAA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMV,4BAA4B,CACjDI,iBADiD,EAEjDC,kBAFiD,EAGjDI,eAHiD,CAAnD;;AAMA,MAAI,EAACC,IAAD,aAACA,IAAD,gDAACA,IAAI,CAAEC,gBAAP,oFAAC,sBAAwBC,KAAzB,2DAAC,uBAA+BC,MAAhC,CAAJ,EAA4C;AAC1C,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,SAAOJ,IAAI,CAACC,gBAAL,CAAsBC,KAAtB,CAA4B,CAA5B,EAA+BG,MAAtC;AACD;;AAED,eAAeT,mBAAf,CACEU,GADF,EAEEZ,iBAFF,EAGEC,kBAHF,EAIEY,EAJF,EAKEC,cALF,EAME;AACA,QAAMC,qBAAqB,GAAGpB,WAAW,CAACK,iBAAD,EAAoBY,GAApB,CAAzC,CADA,CAGA;;AACA,QAAMI,MAAM,GAAG,MAAMD,qBAAqB,CAACF,EAAD,CAArB,CAA0BZ,kBAA1B,CAArB;AACA,SAAOe,MAAM,CAACF,cAAD,CAAb;AACD","sourcesContent":["import { getContract } from '../web3-contracts'\nimport { performDisputableVotingQuery } from './queries'\n\nimport disputableDandelionVotingAbi from '../abi/disputables/DisputableDandelionVoting.json'\nimport disputableDelayAbi from '../abi/disputables/DisputableDelay.json'\n\nexport function delayExtractor(disputableAddress, disputableActionId) {\n  return extractFromContract(\n    disputableDelayAbi,\n    disputableAddress,\n    disputableActionId,\n    'delayedScripts',\n    4\n  )\n}\n\nexport function dandelionVotingExtractor(\n  disputableAddress,\n  disputableActionId\n) {\n  return extractFromContract(\n    disputableDandelionVotingAbi,\n    disputableAddress,\n    disputableActionId,\n    'getVote',\n    10\n  )\n}\n\nexport async function votingExtractor(\n  disputableAddress,\n  disputableActionId,\n  disputableAppId\n) {\n  const { data } = await performDisputableVotingQuery(\n    disputableAddress,\n    disputableActionId,\n    disputableAppId\n  )\n\n  if (!data?.disputableVoting?.votes?.length) {\n    throw new Error('Failed to fetch evmScript from subgraph')\n  }\n\n  return data.disputableVoting.votes[0].script\n}\n\nasync function extractFromContract(\n  abi,\n  disputableAddress,\n  disputableActionId,\n  fn,\n  scriptPosition\n) {\n  const disputableAppContract = getContract(disputableAddress, abi)\n\n  // Fetch the evmScript via contract call\n  const result = await disputableAppContract[fn](disputableActionId)\n  return result[scriptPosition]\n}\n"]},"metadata":{},"sourceType":"module"}