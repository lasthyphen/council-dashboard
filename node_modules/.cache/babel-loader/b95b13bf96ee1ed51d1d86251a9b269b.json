{"ast":null,"code":"'use strict';\n\nmodule.exports = setextHeading;\nvar lineFeed = '\\n';\nvar tab = '\\t';\nvar space = ' ';\nvar equalsTo = '=';\nvar dash = '-';\nvar maxIndent = 3;\nvar equalsToDepth = 1;\nvar dashDepth = 2;\n\nfunction setextHeading(eat, value, silent) {\n  var self = this;\n  var now = eat.now();\n  var length = value.length;\n  var index = -1;\n  var subvalue = '';\n  var content;\n  var queue;\n  var character;\n  var marker;\n  var depth; // Eat initial indentation.\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== space || index >= maxIndent) {\n      index--;\n      break;\n    }\n\n    subvalue += character;\n  } // Eat content.\n\n\n  content = '';\n  queue = '';\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character === lineFeed) {\n      index--;\n      break;\n    }\n\n    if (character === space || character === tab) {\n      queue += character;\n    } else {\n      content += queue + character;\n      queue = '';\n    }\n  }\n\n  now.column += subvalue.length;\n  now.offset += subvalue.length;\n  subvalue += content + queue; // Ensure the content is followed by a newline and a valid marker.\n\n  character = value.charAt(++index);\n  marker = value.charAt(++index);\n\n  if (character !== lineFeed || marker !== equalsTo && marker !== dash) {\n    return;\n  }\n\n  subvalue += character; // Eat Setext-line.\n\n  queue = marker;\n  depth = marker === equalsTo ? equalsToDepth : dashDepth;\n\n  while (++index < length) {\n    character = value.charAt(index);\n\n    if (character !== marker) {\n      if (character !== lineFeed) {\n        return;\n      }\n\n      index--;\n      break;\n    }\n\n    queue += character;\n  }\n\n  if (silent) {\n    return true;\n  }\n\n  return eat(subvalue + queue)({\n    type: 'heading',\n    depth: depth,\n    children: self.tokenizeInline(content, now)\n  });\n}","map":null,"metadata":{},"sourceType":"script"}