{"ast":null,"code":"import { useQuery } from 'urql';\nimport { JurorFirstANJActivationMovement } from '../queries/balances';\nimport { ActiveJurors, JurorFeesClaimed } from '../queries/juror';\nimport { JurorDrafts } from '../queries/jurorDrafts';\nexport function useJurorDraftQuery(jurorId) {\n  const [result] = useQuery({\n    query: JurorDrafts,\n    variables: {\n      id: jurorId === null || jurorId === void 0 ? void 0 : jurorId.toLowerCase()\n    },\n    pause: !jurorId\n  });\n\n  if (result.fetching || result.error) {\n    return [];\n  }\n\n  const {\n    juror\n  } = result.data || {};\n  return juror ? juror.drafts.map(draft => draft.round.dispute.id) : [];\n}\n/**\n * Queries if the juror  by id `jurorId` has ever claimed rewards\n * Rewards can be claimed from two places: Subscriptions fees or Dispute fees (the later includes appeal and juror fees)\n *\n * @param {String} jurorId Address of the juror\n * @returns {Boolean} True if juror has ever claimed rewards\n */\n\nexport function useJurorRewardsEverClaimedQuery(jurorId) {\n  const [{\n    data\n  }] = useQuery({\n    query: JurorFeesClaimed,\n    variables: {\n      owner: jurorId.toLowerCase()\n    }\n  });\n\n  if (!data) {\n    return false;\n  }\n\n  return data.feeMovements.length > 0;\n}\nexport function useFirstANJActivationQuery(jurorId, {\n  pause = false\n}) {\n  const [result] = useQuery({\n    query: JurorFirstANJActivationMovement,\n    variables: {\n      id: jurorId.toLowerCase()\n    },\n    pause\n  });\n  const {\n    juror\n  } = result.data || {};\n  return juror ? juror.anjMovements[0] : null;\n}\nexport function useActiveJurorsNumber() {\n  var _data$jurors;\n\n  const [{\n    data,\n    error\n  }] = useQuery({\n    query: ActiveJurors\n  });\n  return [data === null || data === void 0 ? void 0 : (_data$jurors = data.jurors) === null || _data$jurors === void 0 ? void 0 : _data$jurors.length, error];\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/query-hooks.js"],"names":["useQuery","JurorFirstANJActivationMovement","ActiveJurors","JurorFeesClaimed","JurorDrafts","useJurorDraftQuery","jurorId","result","query","variables","id","toLowerCase","pause","fetching","error","juror","data","drafts","map","draft","round","dispute","useJurorRewardsEverClaimedQuery","owner","feeMovements","length","useFirstANJActivationQuery","anjMovements","useActiveJurorsNumber","jurors"],"mappings":"AAAA,SAASA,QAAT,QAAyB,MAAzB;AAEA,SAASC,+BAAT,QAAgD,qBAAhD;AACA,SAASC,YAAT,EAAuBC,gBAAvB,QAA+C,kBAA/C;AACA,SAASC,WAAT,QAA4B,wBAA5B;AAEA,OAAO,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AAC1C,QAAM,CAACC,MAAD,IAAWP,QAAQ,CAAC;AACxBQ,IAAAA,KAAK,EAAEJ,WADiB;AAExBK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEJ,OAAF,aAAEA,OAAF,uBAAEA,OAAO,CAAEK,WAAT;AAAN,KAFa;AAGxBC,IAAAA,KAAK,EAAE,CAACN;AAHgB,GAAD,CAAzB;;AAMA,MAAIC,MAAM,CAACM,QAAP,IAAmBN,MAAM,CAACO,KAA9B,EAAqC;AACnC,WAAO,EAAP;AACD;;AAED,QAAM;AAAEC,IAAAA;AAAF,MAAYR,MAAM,CAACS,IAAP,IAAe,EAAjC;AAEA,SAAOD,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAaC,GAAb,CAAiBC,KAAK,IAAIA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBX,EAA9C,CAAH,GAAuD,EAAnE;AACD;AAED;;;;;;;;AAOA,OAAO,SAASY,+BAAT,CAAyChB,OAAzC,EAAkD;AACvD,QAAM,CAAC;AAAEU,IAAAA;AAAF,GAAD,IAAahB,QAAQ,CAAC;AAC1BQ,IAAAA,KAAK,EAAEL,gBADmB;AAE1BM,IAAAA,SAAS,EAAE;AAAEc,MAAAA,KAAK,EAAEjB,OAAO,CAACK,WAAR;AAAT;AAFe,GAAD,CAA3B;;AAKA,MAAI,CAACK,IAAL,EAAW;AACT,WAAO,KAAP;AACD;;AAED,SAAOA,IAAI,CAACQ,YAAL,CAAkBC,MAAlB,GAA2B,CAAlC;AACD;AAED,OAAO,SAASC,0BAAT,CAAoCpB,OAApC,EAA6C;AAAEM,EAAAA,KAAK,GAAG;AAAV,CAA7C,EAAgE;AACrE,QAAM,CAACL,MAAD,IAAWP,QAAQ,CAAC;AACxBQ,IAAAA,KAAK,EAAEP,+BADiB;AAExBQ,IAAAA,SAAS,EAAE;AAAEC,MAAAA,EAAE,EAAEJ,OAAO,CAACK,WAAR;AAAN,KAFa;AAGxBC,IAAAA;AAHwB,GAAD,CAAzB;AAMA,QAAM;AAAEG,IAAAA;AAAF,MAAYR,MAAM,CAACS,IAAP,IAAe,EAAjC;AAEA,SAAOD,KAAK,GAAGA,KAAK,CAACY,YAAN,CAAmB,CAAnB,CAAH,GAA2B,IAAvC;AACD;AAED,OAAO,SAASC,qBAAT,GAAiC;AAAA;;AACtC,QAAM,CAAC;AAAEZ,IAAAA,IAAF;AAAQF,IAAAA;AAAR,GAAD,IAAoBd,QAAQ,CAAC;AACjCQ,IAAAA,KAAK,EAAEN;AAD0B,GAAD,CAAlC;AAIA,SAAO,CAACc,IAAD,aAACA,IAAD,uCAACA,IAAI,CAAEa,MAAP,iDAAC,aAAcJ,MAAf,EAAuBX,KAAvB,CAAP;AACD","sourcesContent":["import { useQuery } from 'urql'\n\nimport { JurorFirstANJActivationMovement } from '../queries/balances'\nimport { ActiveJurors, JurorFeesClaimed } from '../queries/juror'\nimport { JurorDrafts } from '../queries/jurorDrafts'\n\nexport function useJurorDraftQuery(jurorId) {\n  const [result] = useQuery({\n    query: JurorDrafts,\n    variables: { id: jurorId?.toLowerCase() },\n    pause: !jurorId,\n  })\n\n  if (result.fetching || result.error) {\n    return []\n  }\n\n  const { juror } = result.data || {}\n\n  return juror ? juror.drafts.map(draft => draft.round.dispute.id) : []\n}\n\n/**\n * Queries if the juror  by id `jurorId` has ever claimed rewards\n * Rewards can be claimed from two places: Subscriptions fees or Dispute fees (the later includes appeal and juror fees)\n *\n * @param {String} jurorId Address of the juror\n * @returns {Boolean} True if juror has ever claimed rewards\n */\nexport function useJurorRewardsEverClaimedQuery(jurorId) {\n  const [{ data }] = useQuery({\n    query: JurorFeesClaimed,\n    variables: { owner: jurorId.toLowerCase() },\n  })\n\n  if (!data) {\n    return false\n  }\n\n  return data.feeMovements.length > 0\n}\n\nexport function useFirstANJActivationQuery(jurorId, { pause = false }) {\n  const [result] = useQuery({\n    query: JurorFirstANJActivationMovement,\n    variables: { id: jurorId.toLowerCase() },\n    pause,\n  })\n\n  const { juror } = result.data || {}\n\n  return juror ? juror.anjMovements[0] : null\n}\n\nexport function useActiveJurorsNumber() {\n  const [{ data, error }] = useQuery({\n    query: ActiveJurors,\n  })\n\n  return [data?.jurors?.length, error]\n}\n"]},"metadata":{},"sourceType":"module"}