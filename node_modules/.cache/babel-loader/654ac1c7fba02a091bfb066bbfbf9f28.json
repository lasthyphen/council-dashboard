{"ast":null,"code":"import _regeneratorRuntime from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as radspec from 'radspec';\nimport { addressesEqual } from '../address';\nimport { findAppMethodFromIntent } from '../app';\n/**\n * Attempt to describe intent via radspec.\n */\n\nexport function tryEvaluatingRadspec(_x, _x2, _x3) {\n  return _tryEvaluatingRadspec.apply(this, arguments);\n}\n\nfunction _tryEvaluatingRadspec() {\n  _tryEvaluatingRadspec = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(intent, apps, provider // Decorated intent with description, if one could be made\n  ) {\n    var app, appsToSearch, foundMethod, _ref, abi, method, evaluatedNotice;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            app = apps.find(function (app) {\n              return addressesEqual(app.address, intent.to);\n            }); // If the intent matches an installed app, use only that app to search for a\n            // method match, otherwise fallback to searching all installed apps\n\n            appsToSearch = app ? [app] : apps;\n            foundMethod = appsToSearch.reduce(function (found, app) {\n              if (found) {\n                return found;\n              }\n\n              var method = findAppMethodFromIntent(app, intent);\n\n              if (method) {\n                return {\n                  method: method,\n                  // This is not very nice, but some apps don't have ABIs attached to their function\n                  // declarations and so we have to fall back to using their full app ABI\n                  // TODO: define a more concrete schema around the artifact.json's `function.abi`\n                  abi: method.abi ? [method.abi] : app.abi\n                };\n              }\n            }, undefined);\n            _ref = foundMethod || {}, abi = _ref.abi, method = _ref.method;\n\n            if (!(method && method.notice)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.prev = 5;\n            _context.next = 8;\n            return radspec.evaluate(method.notice, {\n              abi: abi,\n              transaction: intent\n            }, {\n              provider: provider\n            });\n\n          case 8:\n            evaluatedNotice = _context.sent;\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](5);\n            console.error(\"Could not evaluate a description for given transaction data: \".concat(intent.data), _context.t0);\n\n          case 14:\n            return _context.abrupt(\"return\", evaluatedNotice);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 11]]);\n  }));\n  return _tryEvaluatingRadspec.apply(this, arguments);\n}\n\nexport { postprocessRadspecDescription } from './postprocess';","map":null,"metadata":{},"sourceType":"module"}