{"ast":null,"code":"import TransactionIntent from '../transactions/TransactionIntent';\nimport { toArrayEntry } from '../utils/misc';\n\nfunction normalizeAppFilters(filters) {\n  var _a;\n\n  if (!filters) {\n    return {};\n  }\n\n  if (typeof filters === 'string') {\n    return filters.startsWith('0x') ? {\n      address: [filters]\n    } : {\n      name: [filters]\n    };\n  }\n\n  if (Array.isArray(filters)) {\n    return ((_a = filters[0]) === null || _a === void 0 ? void 0 : _a.startsWith('0x')) ? {\n      address: filters\n    } : {\n      name: filters\n    };\n  }\n\n  if (filters.address) {\n    return {\n      address: toArrayEntry(filters.address)\n    };\n  }\n\n  if (filters.name) {\n    return {\n      name: toArrayEntry(filters.name)\n    };\n  }\n\n  return {};\n}\n\nexport default class Organization {\n  constructor(connection) {\n    this.connection = connection;\n  }\n\n  get location() {\n    return this.connection.orgLocation;\n  }\n\n  get address() {\n    return this.connection.orgAddress;\n  }\n\n  get _connection() {\n    return this.connection;\n  } ///////// APPS ///////////\n\n\n  async app(filters) {\n    return this.connection.orgConnector.appForOrg(this, normalizeAppFilters(filters));\n  }\n\n  async apps(filters) {\n    return this.connection.orgConnector.appsForOrg(this, normalizeAppFilters(filters));\n  }\n\n  onApp(filtersOrCallback, callback) {\n    const filters = callback ? filtersOrCallback : null;\n\n    const _callback = callback || filtersOrCallback;\n\n    return this.connection.orgConnector.onAppForOrg(this, normalizeAppFilters(filters), _callback);\n  }\n\n  onApps(filtersOrCallback, callback) {\n    const filters = callback ? filtersOrCallback : null;\n\n    const _callback = callback || filtersOrCallback;\n\n    return this.connection.orgConnector.onAppsForOrg(this, normalizeAppFilters(filters), _callback);\n  } ///////// PERMISSIONS ///////////\n\n\n  async permissions() {\n    return this.connection.orgConnector.permissionsForOrg(this);\n  }\n\n  onPermissions(callback) {\n    return this.connection.orgConnector.onPermissionsForOrg(this, callback);\n  } ///////// INTENTS ///////////\n\n\n  appIntent(appAddress, functionName, functionArgs) {\n    return new TransactionIntent({\n      contractAddress: appAddress,\n      functionName,\n      functionArgs\n    }, this, this.connection.ethersProvider);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}