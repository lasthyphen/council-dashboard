{"ast":null,"code":"// TODO: Remove these linting exceptions after implementation.\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-function */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _permissions;\n\nclass ConnectorJson {\n  constructor(config) {\n    _permissions.set(this, void 0);\n\n    this.name = 'json';\n    this.config = config;\n    this.network = config.network;\n\n    __classPrivateFieldSet(this, _permissions, config.permissions);\n  }\n\n  async connect(connection) {\n    this.connection = connection;\n  }\n\n  async disconnect() {\n    delete this.connection;\n  }\n\n  async permissionsForOrg() {\n    return __classPrivateFieldGet(this, _permissions);\n  }\n\n  onPermissionsForOrg(organization, callback) {\n    return {\n      unsubscribe: () => {}\n    };\n  }\n\n  async app(organization, filters) {\n    return this.appByAddress(organization, '');\n  }\n\n  async apps(filters) {\n    return [];\n  }\n\n  appForOrg(organization) {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }\n\n  appsForOrg(organization) {\n    return new Promise(resolve => {\n      resolve([]);\n    });\n  }\n\n  onAppForOrg(organization, filters, callback) {\n    return {\n      unsubscribe: () => {}\n    };\n  }\n\n  onAppsForOrg(organization, filters, callback) {\n    return {\n      unsubscribe: () => {}\n    };\n  }\n\n  repoForApp(organization, appAddress) {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }\n\n  appByAddress(organization, appAddress) {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }\n\n  rolesForAddress(organization, appAddress) {\n    return new Promise(resolve => {\n      resolve([]);\n    });\n  }\n\n}\n\n_permissions = new WeakMap();\nexport default ConnectorJson;","map":null,"metadata":{},"sourceType":"module"}