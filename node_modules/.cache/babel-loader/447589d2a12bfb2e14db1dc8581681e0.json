{"ast":null,"code":"import _styled8 from \"styled-components\";\nimport _styled7 from \"styled-components\";\nimport _styled6 from \"styled-components\";\nimport _styled5 from \"styled-components\";\nimport _styled4 from \"styled-components\";\nimport _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeCurrentRuling.js\";\nimport React, { useMemo } from 'react';\nimport { Distribution, GU, Help, Tag, textStyle, useTheme } from '@aragon/ui';\nimport { useWallet } from '../../providers/Wallet';\nimport { isValidOutcome, getTotalOutcomeWeight, filterByValidOutcome, juryOutcomeToString, OUTCOMES } from '../../utils/crvoting-utils';\nimport { getPercentage } from '../../lib/math-utils';\nimport { getJurorDraft } from '../../utils/juror-draft-utils';\nimport { getDisputeLastRound } from '../../utils/dispute-utils';\n\nconst getOutcomeColor = (outcome, theme) => {\n  if (outcome === OUTCOMES.InFavor) return theme.positive;\n  if (outcome === OUTCOMES.Against) return theme.negative;\n  return theme.hint;\n};\n\nvar _StyledSpan = _styled(\"span\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledSpan\",\n  componentId: \"sc-1oqq48r-0\"\n})([\"\", \" color:\", \"\"], p => p._css, p => p._css2);\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledDiv\",\n  componentId: \"sc-1oqq48r-1\"\n})([\"display:flex;align-items:center;justify-content:space-between;width:100%;\"]);\n\nvar _StyledDiv2 = _styled(\"div\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledDiv2\",\n  componentId: \"sc-1oqq48r-2\"\n})([\"display:flex;align-items:center;\"]);\n\nvar _StyledDiv3 = _styled(\"div\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledDiv3\",\n  componentId: \"sc-1oqq48r-3\"\n})([\"background:\", \";width:8px;height:8px;margin-right:\", \"px;border-radius:50%;\"], p => p._css3, p => p._css4);\n\nvar _StyledSpan2 = _styled(\"span\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledSpan2\",\n  componentId: \"sc-1oqq48r-4\"\n})([\"color:\", \";width:220px;\"], p => p._css5);\n\nvar _StyledSpan3 = _styled(\"span\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledSpan3\",\n  componentId: \"sc-1oqq48r-5\"\n})([\"margin-right:\", \"px;\"], p => p._css6);\n\nvar _StyledDiv4 = _styled(\"div\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledDiv4\",\n  componentId: \"sc-1oqq48r-6\"\n})([\"display:flex;align-items:center;\"]);\n\nvar _StyledSpan4 = _styled(\"span\").withConfig({\n  displayName: \"DisputeCurrentRuling___StyledSpan4\",\n  componentId: \"sc-1oqq48r-7\"\n})([\"color:\", \";margin-right:\", \"px;\"], p => p._css7, p => p._css8);\n\nfunction DisputeCurrentRuling({\n  dispute\n}) {\n  const theme = useTheme();\n  const wallet = useWallet();\n  const lastRound = getDisputeLastRound(dispute);\n  const jurorDraft = getJurorDraft(lastRound, wallet.account);\n  const {\n    outcome: myOutcome = 0,\n    weight: myWeight = 0\n  } = jurorDraft || {};\n  const distribution = useOutcomeDistribution(lastRound); // distribution is sorted by weight so we can return colors in corresponding order\n\n  const colors = distribution.map(({\n    outcome\n  }) => getOutcomeColor(outcome, theme));\n  const myDistributionIndex = distribution.findIndex(({\n    outcome\n  }) => outcome === myOutcome);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(Distribution, {\n    heading: React.createElement(_StyledSpan, {\n      _css: textStyle('label2'),\n      _css2: theme.contentSecondary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Current ruling\"),\n    items: distribution.map(({\n      outcome,\n      weight\n    }) => ({\n      item: juryOutcomeToString(outcome),\n      percentage: weight\n    })),\n    renderFullLegendItem: ({\n      color,\n      item,\n      index,\n      percentage\n    }) => {\n      // We'll show the juror voting weight hint if any juror has been drafted more than once for this last round\n      const showVotingWeightHint = index === 0 && lastRound.jurorsNumber !== lastRound.jurors.length;\n      const showMyWeight = myWeight > 1;\n      return React.createElement(_StyledDiv, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(_StyledDiv2, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(_StyledDiv3, {\n        _css3: color,\n        _css4: 1 * GU,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(_StyledSpan2, {\n        key: index,\n        _css5: theme.contentSecondary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, item), React.createElement(_StyledSpan3, {\n        _css6: 1 * GU,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, percentage, \"%\"), myDistributionIndex === index && React.createElement(Tag, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"You\")), showVotingWeightHint && React.createElement(_StyledDiv4, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(_StyledSpan4, {\n        _css7: theme.help,\n        _css8: 0.5 * GU,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, showMyWeight ? 'Your voting weight' : 'Voting weight'), React.createElement(Help, {\n        hint: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, showMyWeight ? 'You have been' : 'The same juror can be', ' ', \"drafted multiple times to arbitrate the same dispute for the same round. When that happens,\", ' ', showMyWeight ? 'your' : 'their', \" voting weight\", ' ', showMyWeight ? 'is' : 'will be', \" proportional to the number of times \", showMyWeight ? 'you' : 'they', \" are drafted.\")));\n    },\n    colors: colors,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n}\n\nconst useFilteredOutcomes = round => {\n  const {\n    jurors\n  } = round;\n  return useMemo(() => {\n    const totalValidOutcomes = jurors.filter(({\n      outcome\n    }) => isValidOutcome(outcome));\n    return [totalValidOutcomes, filterByValidOutcome(totalValidOutcomes)];\n  }, [jurors]);\n};\n\nfunction useOutcomeDistribution(round) {\n  const [totalValidOutcomes, filteredOutcomes] = useFilteredOutcomes(round);\n  return useMemo(() => {\n    const totalWeight = getTotalOutcomeWeight(totalValidOutcomes);\n    return filteredOutcomes.map(({\n      outcomes,\n      outcome\n    }) => {\n      const partialWeight = getTotalOutcomeWeight(outcomes);\n      return {\n        outcome,\n        weight: getPercentage(partialWeight, totalWeight)\n      };\n    }).sort((outcome1, outcome2) => outcome2.weight - outcome1.weight);\n  }, [filteredOutcomes, totalValidOutcomes]);\n}\n\nexport default DisputeCurrentRuling;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeCurrentRuling.js"],"names":["React","useMemo","Distribution","GU","Help","Tag","textStyle","useTheme","useWallet","isValidOutcome","getTotalOutcomeWeight","filterByValidOutcome","juryOutcomeToString","OUTCOMES","getPercentage","getJurorDraft","getDisputeLastRound","getOutcomeColor","outcome","theme","InFavor","positive","Against","negative","hint","DisputeCurrentRuling","dispute","wallet","lastRound","jurorDraft","account","myOutcome","weight","myWeight","distribution","useOutcomeDistribution","colors","map","myDistributionIndex","findIndex","contentSecondary","item","percentage","color","index","showVotingWeightHint","jurorsNumber","jurors","length","showMyWeight","help","useFilteredOutcomes","round","totalValidOutcomes","filter","filteredOutcomes","totalWeight","outcomes","partialWeight","sort","outcome1","outcome2"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport { Distribution, GU, Help, Tag, textStyle, useTheme } from '@aragon/ui'\nimport { useWallet } from '../../providers/Wallet'\nimport {\n  isValidOutcome,\n  getTotalOutcomeWeight,\n  filterByValidOutcome,\n  juryOutcomeToString,\n  OUTCOMES,\n} from '../../utils/crvoting-utils'\nimport { getPercentage } from '../../lib/math-utils'\nimport { getJurorDraft } from '../../utils/juror-draft-utils'\nimport { getDisputeLastRound } from '../../utils/dispute-utils'\n\nconst getOutcomeColor = (outcome, theme) => {\n  if (outcome === OUTCOMES.InFavor) return theme.positive\n  if (outcome === OUTCOMES.Against) return theme.negative\n\n  return theme.hint\n}\n\nfunction DisputeCurrentRuling({ dispute }) {\n  const theme = useTheme()\n  const wallet = useWallet()\n\n  const lastRound = getDisputeLastRound(dispute)\n  const jurorDraft = getJurorDraft(lastRound, wallet.account)\n\n  const { outcome: myOutcome = 0, weight: myWeight = 0 } = jurorDraft || {}\n  const distribution = useOutcomeDistribution(lastRound)\n\n  // distribution is sorted by weight so we can return colors in corresponding order\n  const colors = distribution.map(({ outcome }) =>\n    getOutcomeColor(outcome, theme)\n  )\n\n  const myDistributionIndex = distribution.findIndex(\n    ({ outcome }) => outcome === myOutcome\n  )\n\n  return (\n    <div>\n      <Distribution\n        heading={\n          <span\n            css={`\n              ${textStyle('label2')}\n              color: ${theme.contentSecondary}\n            `}\n          >\n            Current ruling\n          </span>\n        }\n        items={distribution.map(({ outcome, weight }) => ({\n          item: juryOutcomeToString(outcome),\n          percentage: weight,\n        }))}\n        renderFullLegendItem={({ color, item, index, percentage }) => {\n          // We'll show the juror voting weight hint if any juror has been drafted more than once for this last round\n          const showVotingWeightHint =\n            index === 0 && lastRound.jurorsNumber !== lastRound.jurors.length\n          const showMyWeight = myWeight > 1\n\n          return (\n            <div\n              css={`\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                width: 100%;\n              `}\n            >\n              <div\n                css={`\n                  display: flex;\n                  align-items: center;\n                `}\n              >\n                <div\n                  css={`\n                    background: ${color};\n                    width: 8px;\n                    height: 8px;\n                    margin-right: ${1 * GU}px;\n                    border-radius: 50%;\n                  `}\n                />\n\n                <span\n                  key={index}\n                  css={`\n                    color: ${theme.contentSecondary};\n                    width: 220px;\n                  `}\n                >\n                  {item}\n                </span>\n                <span\n                  css={`\n                    margin-right: ${1 * GU}px;\n                  `}\n                >\n                  {percentage}%\n                </span>\n                {myDistributionIndex === index && <Tag>You</Tag>}\n              </div>\n              {showVotingWeightHint && (\n                <div\n                  css={`\n                    display: flex;\n                    align-items: center;\n                  `}\n                >\n                  <span\n                    css={`\n                      color: ${theme.help};\n                      margin-right: ${0.5 * GU}px;\n                    `}\n                  >\n                    {showMyWeight ? 'Your voting weight' : 'Voting weight'}\n                  </span>\n                  <Help hint=\"\">\n                    {showMyWeight ? 'You have been' : 'The same juror can be'}{' '}\n                    drafted multiple times to arbitrate the same dispute for the\n                    same round. When that happens,{' '}\n                    {showMyWeight ? 'your' : 'their'} voting weight{' '}\n                    {showMyWeight ? 'is' : 'will be'} proportional to the number\n                    of times {showMyWeight ? 'you' : 'they'} are drafted.\n                  </Help>\n                </div>\n              )}\n            </div>\n          )\n        }}\n        colors={colors}\n      />\n    </div>\n  )\n}\n\nconst useFilteredOutcomes = round => {\n  const { jurors } = round\n\n  return useMemo(() => {\n    const totalValidOutcomes = jurors.filter(({ outcome }) =>\n      isValidOutcome(outcome)\n    )\n    return [totalValidOutcomes, filterByValidOutcome(totalValidOutcomes)]\n  }, [jurors])\n}\n\nfunction useOutcomeDistribution(round) {\n  const [totalValidOutcomes, filteredOutcomes] = useFilteredOutcomes(round)\n\n  return useMemo(() => {\n    const totalWeight = getTotalOutcomeWeight(totalValidOutcomes)\n\n    return filteredOutcomes\n      .map(({ outcomes, outcome }) => {\n        const partialWeight = getTotalOutcomeWeight(outcomes)\n        return {\n          outcome,\n          weight: getPercentage(partialWeight, totalWeight),\n        }\n      })\n      .sort((outcome1, outcome2) => outcome2.weight - outcome1.weight)\n  }, [filteredOutcomes, totalValidOutcomes])\n}\n\nexport default DisputeCurrentRuling\n"]},"metadata":{},"sourceType":"module"}