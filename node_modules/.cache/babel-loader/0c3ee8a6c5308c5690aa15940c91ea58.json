{"ast":null,"code":"import { Permission } from '@aragon/connect-core';\nexport function parsePermissions(result, organization) {\n  var _a, _b;\n\n  const permissions = (_b = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.organization) === null || _b === void 0 ? void 0 : _b.permissions;\n\n  if (!Array.isArray(permissions)) {\n    throw new Error('Unable to parse permissions.');\n  }\n\n  const datas = permissions.map(permission => {\n    var _a, _b;\n\n    return {\n      appAddress: permission === null || permission === void 0 ? void 0 : permission.appAddress,\n      allowed: permission === null || permission === void 0 ? void 0 : permission.allowed,\n      granteeAddress: permission === null || permission === void 0 ? void 0 : permission.granteeAddress,\n      params: ((_b = (_a = permission === null || permission === void 0 ? void 0 : permission.params) === null || _a === void 0 ? void 0 : _a.map) === null || _b === void 0 ? void 0 : _b.call(_a, param => ({\n        argumentId: param === null || param === void 0 ? void 0 : param.argumentId,\n        operationType: param === null || param === void 0 ? void 0 : param.operationType,\n        argumentValue: param === null || param === void 0 ? void 0 : param.argumentValue\n      }))) || [],\n      roleHash: permission === null || permission === void 0 ? void 0 : permission.roleHash\n    };\n  });\n  const allowedPermissions = datas.filter(data => data.allowed);\n  return allowedPermissions.map(data => {\n    return new Permission(data, organization);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}