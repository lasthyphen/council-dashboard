{"ast":null,"code":"import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{CourtModuleType}from'../types/court-module-types';import{bigNum}from'../lib/math-utils';import{transformSubscriptionModuleDataAttributes}from'./subscription-utils';import{toMs}from'./date-utils';export function transformCourtConfigDataAttributes(courtConfig){var subscriptionModule=courtConfig.subscriptions;return _objectSpread({},courtConfig,{draftFee:bigNum(courtConfig.draftFee),settleFee:bigNum(courtConfig.settleFee),jurorFee:bigNum(courtConfig.jurorFee),minActiveBalance:bigNum(courtConfig.minActiveBalance),maxRegularAppealRounds:parseInt(courtConfig.maxRegularAppealRounds,10),termDuration:toMs(parseInt(courtConfig.termDuration,10)),currentTerm:parseInt(courtConfig.currentTerm,10),evidenceTerms:parseInt(courtConfig.evidenceTerms,10),commitTerms:parseInt(courtConfig.commitTerms,10),revealTerms:parseInt(courtConfig.revealTerms,10),appealTerms:parseInt(courtConfig.appealTerms,10),appealConfirmationTerms:parseInt(courtConfig.appealConfirmationTerms,10),terms:courtConfig.terms.map(function(term){return _objectSpread({},term,{startTime:toMs(parseInt(term.startTime,10))});}),subscriptionModule:transformSubscriptionModuleDataAttributes(subscriptionModule)});}function getFirstTermStartTime(terms){if(terms.length===0){throw new Error('Terms cannot be empty');}return terms[0].startTime;}export function getExpectedCurrentTermId(now,_ref){var terms=_ref.terms,termDuration=_ref.termDuration;var firstTermStartTime=getFirstTermStartTime(terms);return Math.floor((now.valueOf()-firstTermStartTime)/termDuration);}export function getTermStartTime(termId,_ref2){var terms=_ref2.terms,termDuration=_ref2.termDuration;var firstTermStartTime=getFirstTermStartTime(terms);return termId*termDuration+firstTermStartTime;}export function getTermEndTime(termId,_ref3){var terms=_ref3.terms,termDuration=_ref3.termDuration;var termStartTime=getTermStartTime(termId,{terms:terms,termDuration:termDuration});return termStartTime+(termDuration-1);}export function getTermPeriod(termId,_ref4){var terms=_ref4.terms,termDuration=_ref4.termDuration;return[getTermStartTime,getTermEndTime].map(function(f){return f(termId,{terms:terms,termDuration:termDuration});});}export function getModuleAddress(modules,moduleType){var courtModule=modules.find(function(mod){return CourtModuleType[mod.type]===moduleType;});return courtModule?courtModule.address:null;}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/utils/court-utils.js"],"names":["CourtModuleType","bigNum","transformSubscriptionModuleDataAttributes","toMs","transformCourtConfigDataAttributes","courtConfig","subscriptionModule","subscriptions","draftFee","settleFee","jurorFee","minActiveBalance","maxRegularAppealRounds","parseInt","termDuration","currentTerm","evidenceTerms","commitTerms","revealTerms","appealTerms","appealConfirmationTerms","terms","map","term","startTime","getFirstTermStartTime","length","Error","getExpectedCurrentTermId","now","firstTermStartTime","Math","floor","valueOf","getTermStartTime","termId","getTermEndTime","termStartTime","getTermPeriod","f","getModuleAddress","modules","moduleType","courtModule","find","mod","type","address"],"mappings":"2HAAA,OAASA,eAAT,KAAgC,6BAAhC,CACA,OAASC,MAAT,KAAuB,mBAAvB,CACA,OAASC,yCAAT,KAA0D,sBAA1D,CACA,OAASC,IAAT,KAAqB,cAArB,CAEA,MAAO,SAASC,CAAAA,kCAAT,CAA4CC,WAA5C,CAAyD,IACvCC,CAAAA,kBADuC,CAChBD,WADgB,CACtDE,aADsD,CAE9D,wBACKF,WADL,EAEEG,QAAQ,CAAEP,MAAM,CAACI,WAAW,CAACG,QAAb,CAFlB,CAGEC,SAAS,CAAER,MAAM,CAACI,WAAW,CAACI,SAAb,CAHnB,CAIEC,QAAQ,CAAET,MAAM,CAACI,WAAW,CAACK,QAAb,CAJlB,CAKEC,gBAAgB,CAAEV,MAAM,CAACI,WAAW,CAACM,gBAAb,CAL1B,CAMEC,sBAAsB,CAAEC,QAAQ,CAACR,WAAW,CAACO,sBAAb,CAAqC,EAArC,CANlC,CAOEE,YAAY,CAAEX,IAAI,CAACU,QAAQ,CAACR,WAAW,CAACS,YAAb,CAA2B,EAA3B,CAAT,CAPpB,CAQEC,WAAW,CAAEF,QAAQ,CAACR,WAAW,CAACU,WAAb,CAA0B,EAA1B,CARvB,CASEC,aAAa,CAAEH,QAAQ,CAACR,WAAW,CAACW,aAAb,CAA4B,EAA5B,CATzB,CAUEC,WAAW,CAAEJ,QAAQ,CAACR,WAAW,CAACY,WAAb,CAA0B,EAA1B,CAVvB,CAWEC,WAAW,CAAEL,QAAQ,CAACR,WAAW,CAACa,WAAb,CAA0B,EAA1B,CAXvB,CAYEC,WAAW,CAAEN,QAAQ,CAACR,WAAW,CAACc,WAAb,CAA0B,EAA1B,CAZvB,CAaEC,uBAAuB,CAAEP,QAAQ,CAACR,WAAW,CAACe,uBAAb,CAAsC,EAAtC,CAbnC,CAcEC,KAAK,CAAEhB,WAAW,CAACgB,KAAZ,CAAkBC,GAAlB,CAAsB,SAAAC,IAAI,0BAC5BA,IAD4B,EAE/BC,SAAS,CAAErB,IAAI,CAACU,QAAQ,CAACU,IAAI,CAACC,SAAN,CAAiB,EAAjB,CAAT,CAFgB,IAA1B,CAdT,CAkBElB,kBAAkB,CAAEJ,yCAAyC,CAC3DI,kBAD2D,CAlB/D,GAsBD,CAED,QAASmB,CAAAA,qBAAT,CAA+BJ,KAA/B,CAAsC,CACpC,GAAIA,KAAK,CAACK,MAAN,GAAiB,CAArB,CAAwB,CACtB,KAAM,IAAIC,CAAAA,KAAJ,CAAU,uBAAV,CAAN,CACD,CAED,MAAON,CAAAA,KAAK,CAAC,CAAD,CAAL,CAASG,SAAhB,CACD,CAED,MAAO,SAASI,CAAAA,wBAAT,CAAkCC,GAAlC,MAAgE,IAAvBR,CAAAA,KAAuB,MAAvBA,KAAuB,CAAhBP,YAAgB,MAAhBA,YAAgB,CACrE,GAAMgB,CAAAA,kBAAkB,CAAGL,qBAAqB,CAACJ,KAAD,CAAhD,CACA,MAAOU,CAAAA,IAAI,CAACC,KAAL,CAAW,CAACH,GAAG,CAACI,OAAJ,GAAgBH,kBAAjB,EAAuChB,YAAlD,CAAP,CACD,CAED,MAAO,SAASoB,CAAAA,gBAAT,CAA0BC,MAA1B,OAA2D,IAAvBd,CAAAA,KAAuB,OAAvBA,KAAuB,CAAhBP,YAAgB,OAAhBA,YAAgB,CAChE,GAAMgB,CAAAA,kBAAkB,CAAGL,qBAAqB,CAACJ,KAAD,CAAhD,CACA,MAAOc,CAAAA,MAAM,CAAGrB,YAAT,CAAwBgB,kBAA/B,CACD,CAED,MAAO,SAASM,CAAAA,cAAT,CAAwBD,MAAxB,OAAyD,IAAvBd,CAAAA,KAAuB,OAAvBA,KAAuB,CAAhBP,YAAgB,OAAhBA,YAAgB,CAC9D,GAAMuB,CAAAA,aAAa,CAAGH,gBAAgB,CAACC,MAAD,CAAS,CAAEd,KAAK,CAALA,KAAF,CAASP,YAAY,CAAZA,YAAT,CAAT,CAAtC,CAEA,MAAOuB,CAAAA,aAAa,EAAIvB,YAAY,CAAG,CAAnB,CAApB,CACD,CAED,MAAO,SAASwB,CAAAA,aAAT,CAAuBH,MAAvB,OAAwD,IAAvBd,CAAAA,KAAuB,OAAvBA,KAAuB,CAAhBP,YAAgB,OAAhBA,YAAgB,CAC7D,MAAO,CAACoB,gBAAD,CAAmBE,cAAnB,EAAmCd,GAAnC,CAAuC,SAAAiB,CAAC,QAC7CA,CAAAA,CAAC,CAACJ,MAAD,CAAS,CAAEd,KAAK,CAALA,KAAF,CAASP,YAAY,CAAZA,YAAT,CAAT,CAD4C,EAAxC,CAAP,CAGD,CAED,MAAO,SAAS0B,CAAAA,gBAAT,CAA0BC,OAA1B,CAAmCC,UAAnC,CAA+C,CACpD,GAAMC,CAAAA,WAAW,CAAGF,OAAO,CAACG,IAAR,CAClB,SAAAC,GAAG,QAAI7C,CAAAA,eAAe,CAAC6C,GAAG,CAACC,IAAL,CAAf,GAA8BJ,UAAlC,EADe,CAApB,CAIA,MAAOC,CAAAA,WAAW,CAAGA,WAAW,CAACI,OAAf,CAAyB,IAA3C,CACD","sourcesContent":["import { CourtModuleType } from '../types/court-module-types'\nimport { bigNum } from '../lib/math-utils'\nimport { transformSubscriptionModuleDataAttributes } from './subscription-utils'\nimport { toMs } from './date-utils'\n\nexport function transformCourtConfigDataAttributes(courtConfig) {\n  const { subscriptions: subscriptionModule } = courtConfig\n  return {\n    ...courtConfig,\n    draftFee: bigNum(courtConfig.draftFee),\n    settleFee: bigNum(courtConfig.settleFee),\n    jurorFee: bigNum(courtConfig.jurorFee),\n    minActiveBalance: bigNum(courtConfig.minActiveBalance),\n    maxRegularAppealRounds: parseInt(courtConfig.maxRegularAppealRounds, 10),\n    termDuration: toMs(parseInt(courtConfig.termDuration, 10)),\n    currentTerm: parseInt(courtConfig.currentTerm, 10),\n    evidenceTerms: parseInt(courtConfig.evidenceTerms, 10),\n    commitTerms: parseInt(courtConfig.commitTerms, 10),\n    revealTerms: parseInt(courtConfig.revealTerms, 10),\n    appealTerms: parseInt(courtConfig.appealTerms, 10),\n    appealConfirmationTerms: parseInt(courtConfig.appealConfirmationTerms, 10),\n    terms: courtConfig.terms.map(term => ({\n      ...term,\n      startTime: toMs(parseInt(term.startTime, 10)),\n    })),\n    subscriptionModule: transformSubscriptionModuleDataAttributes(\n      subscriptionModule\n    ),\n  }\n}\n\nfunction getFirstTermStartTime(terms) {\n  if (terms.length === 0) {\n    throw new Error('Terms cannot be empty')\n  }\n\n  return terms[0].startTime\n}\n\nexport function getExpectedCurrentTermId(now, { terms, termDuration }) {\n  const firstTermStartTime = getFirstTermStartTime(terms)\n  return Math.floor((now.valueOf() - firstTermStartTime) / termDuration)\n}\n\nexport function getTermStartTime(termId, { terms, termDuration }) {\n  const firstTermStartTime = getFirstTermStartTime(terms)\n  return termId * termDuration + firstTermStartTime\n}\n\nexport function getTermEndTime(termId, { terms, termDuration }) {\n  const termStartTime = getTermStartTime(termId, { terms, termDuration })\n\n  return termStartTime + (termDuration - 1)\n}\n\nexport function getTermPeriod(termId, { terms, termDuration }) {\n  return [getTermStartTime, getTermEndTime].map(f =>\n    f(termId, { terms, termDuration })\n  )\n}\n\nexport function getModuleAddress(modules, moduleType) {\n  const courtModule = modules.find(\n    mod => CourtModuleType[mod.type] === moduleType\n  )\n\n  return courtModule ? courtModule.address : null\n}\n"]},"metadata":{},"sourceType":"module"}