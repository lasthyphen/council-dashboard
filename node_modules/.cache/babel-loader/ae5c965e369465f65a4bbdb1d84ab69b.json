{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _organization;\n\nexport default class Permission {\n  constructor(data, organization) {\n    _organization.set(this, void 0);\n\n    __classPrivateFieldSet(this, _organization, organization);\n\n    this.allowed = data.allowed;\n    this.appAddress = data.appAddress;\n    this.granteeAddress = data.granteeAddress;\n    this.params = data.params;\n    this.roleHash = data.roleHash;\n  }\n\n  orgConnector() {\n    return __classPrivateFieldGet(this, _organization).connection.orgConnector;\n  }\n\n  async app() {\n    return this.orgConnector().appByAddress(__classPrivateFieldGet(this, _organization), this.appAddress);\n  }\n\n  async role() {\n    const roles = await this.orgConnector().rolesForAddress(__classPrivateFieldGet(this, _organization), this.appAddress);\n    return roles.find(role => role.hash === this.roleHash);\n  }\n\n}\n_organization = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}