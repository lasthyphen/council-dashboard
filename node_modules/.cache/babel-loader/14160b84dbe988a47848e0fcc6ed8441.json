{"ast":null,"code":"import _regeneratorRuntime from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { ethers } from 'ethers';\nimport { ConnectorJson, Organization, toNetwork } from '@aragon/connect-core';\nimport ConnectorEthereum from '@aragon/connect-ethereum';\nimport ConnectorTheGraph from '@aragon/connect-thegraph';\nimport { XDAI_WSS_ENDPOINT, DEFAULT_IPFS_URL } from './constants';\n\nfunction ipfsResolverFromUrlTemplate(urlTemplate) {\n  return function ipfsResolver(cid, path) {\n    var url = urlTemplate.replace(/\\{cid\\}/, cid);\n\n    if (!path) {\n      return url.replace(/\\{path\\}/, '');\n    }\n\n    if (!path.startsWith('/')) {\n      path = \"/\".concat(path);\n    }\n\n    return url.replace(/\\{path\\}/, path);\n  };\n}\n\nfunction getIpfsResolver(ipfs) {\n  if (typeof ipfs === 'function') {\n    return ipfs;\n  }\n\n  return ipfsResolverFromUrlTemplate(ipfs || DEFAULT_IPFS_URL);\n}\n\nfunction normalizeConnectorConfig(connector) {\n  if (Array.isArray(connector)) {\n    return [connector[0], connector[1] || {}];\n  }\n\n  if (typeof connector === 'string') {\n    return [connector, {}];\n  }\n\n  return null;\n}\n\nfunction getConnector(connector, network) {\n  var normalizedConfig = normalizeConnectorConfig(connector);\n\n  if (normalizedConfig === null) {\n    return connector;\n  }\n\n  var _normalizedConfig = _slicedToArray(normalizedConfig, 2),\n      name = _normalizedConfig[0],\n      config = _normalizedConfig[1];\n\n  if (!config.network) {\n    config.network = network;\n  }\n\n  if (name === 'json') {\n    return new ConnectorJson(config);\n  }\n\n  if (name === 'thegraph') {\n    return new ConnectorTheGraph(config);\n  }\n\n  if (name === 'ethereum') {\n    return new ConnectorEthereum(config);\n  }\n\n  throw new Error(\"Unsupported connector name: \".concat(name));\n}\n\nfunction getEthersProvider(ethereumProvider, network) {\n  // Ethers compatibility: ethereum => homestead\n  if (network.name === 'ethereum' && network.chainId === 1) {\n    network = _objectSpread({}, network, {\n      name: 'homestead'\n    });\n  }\n\n  if (ethereumProvider) {\n    try {\n      return new ethers.providers.Web3Provider(ethereumProvider, network);\n    } catch (err) {\n      console.error('Invalid provider:', ethereumProvider);\n      throw err;\n    }\n  }\n\n  if (network.chainId === 100) {\n    return new ethers.providers.WebSocketProvider(XDAI_WSS_ENDPOINT, network);\n  }\n\n  return ethers.getDefaultProvider(network);\n}\n\nfunction resolveAddress(_x, _x2) {\n  return _resolveAddress.apply(this, arguments);\n}\n\nfunction _resolveAddress() {\n  _resolveAddress = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(ethersProvider, location) {\n    var address;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!ethers.utils.isAddress(location)) {\n              _context.next = 4;\n              break;\n            }\n\n            _context.t0 = location;\n            _context.next = 7;\n            break;\n\n          case 4:\n            _context.next = 6;\n            return ethersProvider.resolveName(location);\n\n          case 6:\n            _context.t0 = _context.sent;\n\n          case 7:\n            address = _context.t0;\n\n            if (ethers.utils.isAddress(address)) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error('Please provide a valid address or ENS domain.');\n\n          case 10:\n            return _context.abrupt(\"return\", address);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _resolveAddress.apply(this, arguments);\n}\n\nfunction connect(_x3, _x4) {\n  return _connect.apply(this, arguments);\n}\n\nfunction _connect() {\n  _connect = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(location, connector) {\n    var _ref,\n        actAs,\n        ethereumProvider,\n        ipfs,\n        network,\n        verbose,\n        _a,\n        _network,\n        ethersProvider,\n        orgConnector,\n        orgAddress,\n        connectionContext,\n        _args2 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _ref = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {}, actAs = _ref.actAs, ethereumProvider = _ref.ethereum, ipfs = _ref.ipfs, network = _ref.network, verbose = _ref.verbose;\n            _network = toNetwork(network !== null && network !== void 0 ? network : 'ethereum');\n            ethersProvider = getEthersProvider(ethereumProvider, _network);\n            orgConnector = getConnector(connector, _network);\n            _context2.next = 6;\n            return resolveAddress(ethersProvider, location);\n\n          case 6:\n            orgAddress = _context2.sent;\n            connectionContext = {\n              actAs: actAs || null,\n              ethereumProvider: ethereumProvider || null,\n              ethersProvider: ethersProvider,\n              ipfs: getIpfsResolver(ipfs),\n              network: _network,\n              orgAddress: orgAddress,\n              orgConnector: orgConnector,\n              orgLocation: location,\n              verbose: verbose !== null && verbose !== void 0 ? verbose : false\n            };\n            _context2.next = 10;\n            return (_a = orgConnector.connect) === null || _a === void 0 ? void 0 : _a.call(orgConnector, connectionContext);\n\n          case 10:\n            return _context2.abrupt(\"return\", new Organization(connectionContext));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _connect.apply(this, arguments);\n}\n\nexport default connect;","map":null,"metadata":{},"sourceType":"module"}