{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _styled10 from\"styled-components\";import _styled9 from\"styled-components\";import _styled8 from\"styled-components\";import _styled7 from\"styled-components\";import _styled6 from\"styled-components\";import _styled5 from\"styled-components\";import _styled4 from\"styled-components\";import _styled3 from\"styled-components\";import _styled2 from\"styled-components\";import _styled from\"styled-components\";import React from'react';import{Accordion,GU,SyncIndicator,textStyle,useTheme}from'@aragon/ui';import{useWallet}from'use-wallet';import useEvidences from'../../hooks/useEvidences';import{addressesEqual}from'../../lib/web3-utils';import ErrorLoadingEvidence from'./ErrorLoadingEvidence';import IdentityBadge from'../IdentityBadge';import Markdown from'../Markdown';import{dateFormat}from'../../utils/date-utils';import folderIcon from\"../../assets/folderIcon.svg\";var _StyledDiv=_styled(\"div\").withConfig({displayName:\"DisputeEvidences___StyledDiv\",componentId:\"w4iy7t-0\"})([\"display:flex;align-items:center;\"]);var _StyledSpan=_styled(\"span\").withConfig({displayName:\"DisputeEvidences___StyledSpan\",componentId:\"w4iy7t-1\"})([\"margin-left:\",\"px;\"],function(p){return p._css;});var DisputeEvidences=React.memo(function DisputeEvidences(_ref){var defendant=_ref.defendant,evidences=_ref.evidences,loading=_ref.loading,plaintiff=_ref.plaintiff;return React.createElement(React.Fragment,null,React.createElement(SyncIndicator,{visible:loading,label:\"Loading evidences\\u2026\"}),evidences&&evidences.map(function(evidence,index){var createdAt=evidence.createdAt,submitter=evidence.submitter,metadata=evidence.metadata,error=evidence.error;return React.createElement(Accordion,{key:index,items:[[React.createElement(_StyledDiv,null,React.createElement(\"img\",{src:folderIcon,width:\"17\",height:\"20\",alt:\"\"}),React.createElement(_StyledSpan,{_css:1.5*GU},\"Argument #\",index+1)),React.createElement(EvidenceContent,{createdAt:createdAt,error:error,metadata:metadata,submitter:submitter,submitterLabel:getSubmitterLabel(submitter,defendant,plaintiff)})]]});}));});var _StyledDiv2=_styled(\"div\").withConfig({displayName:\"DisputeEvidences___StyledDiv2\",componentId:\"w4iy7t-2\"})([\"margin-bottom:\",\"px;padding:\",\"px \",\"px;\"],function(p){return p._css2;},function(p){return p._css3;},function(p){return p._css4;});var _StyledDiv3=_styled(\"div\").withConfig({displayName:\"DisputeEvidences___StyledDiv3\",componentId:\"w4iy7t-3\"})([\"display:grid;grid-template-columns:150px minmax(180px,auto);grid-gap:\",\"px;margin-bottom:\",\"px;\"],function(p){return p._css5;},function(p){return p._css6;});var _StyledH=_styled(\"h2\").withConfig({displayName:\"DisputeEvidences___StyledH\",componentId:\"w4iy7t-4\"})([\"\",\";color:\",\";margin-bottom:\",\"px;\"],function(p){return p._css7;},function(p){return p._css8;},function(p){return p._css9;});var _StyledDiv4=_styled(\"div\").withConfig({displayName:\"DisputeEvidences___StyledDiv4\",componentId:\"w4iy7t-5\"})([\"display:flex;align-items:flex-start;\"]);var _StyledH2=_styled(\"h2\").withConfig({displayName:\"DisputeEvidences___StyledH2\",componentId:\"w4iy7t-6\"})([\"\",\";color:\",\";margin-bottom:\",\"px;\"],function(p){return p._css10;},function(p){return p._css11;},function(p){return p._css12;});var _StyledSpan2=_styled(\"span\").withConfig({displayName:\"DisputeEvidences___StyledSpan2\",componentId:\"w4iy7t-7\"})([\"\",\";\"],function(p){return p._css13;});var _StyledH3=_styled(\"h2\").withConfig({displayName:\"DisputeEvidences___StyledH3\",componentId:\"w4iy7t-8\"})([\"\",\";color:\",\";margin-bottom:\",\"px;\"],function(p){return p._css14;},function(p){return p._css15;},function(p){return p._css16;});var _StyledDiv5=_styled(\"div\").withConfig({displayName:\"DisputeEvidences___StyledDiv5\",componentId:\"w4iy7t-9\"})([\"display:flex;align-items:flex-start;\"]);var EvidenceContent=React.memo(function EvidenceContent(_ref2){var createdAt=_ref2.createdAt,error=_ref2.error,metadata=_ref2.metadata,submitter=_ref2.submitter,submitterLabel=_ref2.submitterLabel;var theme=useTheme();var wallet=useWallet();if(error){return React.createElement(ErrorLoadingEvidence,null);}return React.createElement(_StyledDiv2,{_css2:2*GU,_css3:3*GU,_css4:8*GU-3},React.createElement(_StyledDiv3,{_css5:5*GU,_css6:5*GU},React.createElement(\"div\",null,React.createElement(_StyledH,{_css7:textStyle('label2'),_css8:theme.surfaceContentSecondary,_css9:2*GU},\"Submitted by\"),React.createElement(_StyledDiv4,null,React.createElement(IdentityBadge,{connectedAccount:addressesEqual(submitter,wallet.account),entity:submitter,label:submitterLabel}))),React.createElement(\"div\",null,React.createElement(_StyledH2,{_css10:textStyle('label2'),_css11:theme.surfaceContentSecondary,_css12:2*GU},\"Date\"),React.createElement(_StyledSpan2,{_css13:textStyle('body2')},dateFormat(createdAt,'onlyDate')))),React.createElement(\"div\",null,React.createElement(_StyledH3,{_css14:textStyle('label2'),_css15:theme.surfaceContentSecondary,_css16:2*GU},\"Data\"),React.createElement(_StyledDiv5,null,React.createElement(Markdown,{text:metadata}))));});function getSubmitterLabel(submitter,defendant,plaintiff){if(addressesEqual(submitter,defendant)){return'Defendant';}if(addressesEqual(submitter,plaintiff)){return'Plaintiff';}return'';}export default function Evidences(_ref3){var dispute=_ref3.dispute,evidences=_ref3.evidences;// This hook ensures us that evidenceProcessed won't be updated unless there are new evidences.\nvar _useEvidences=useEvidences(dispute,evidences),_useEvidences2=_slicedToArray(_useEvidences,2),evidenceProcessed=_useEvidences2[0],fetchingEvidences=_useEvidences2[1];return React.createElement(DisputeEvidences,{defendant:dispute.defendant,evidences:evidenceProcessed,loading:fetchingEvidences,plaintiff:dispute.plaintiff});}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeEvidences.js"],"names":["React","Accordion","GU","SyncIndicator","textStyle","useTheme","useWallet","useEvidences","addressesEqual","ErrorLoadingEvidence","IdentityBadge","Markdown","dateFormat","DisputeEvidences","memo","defendant","evidences","loading","plaintiff","map","evidence","index","createdAt","submitter","metadata","error","folderIcon","getSubmitterLabel","EvidenceContent","submitterLabel","theme","wallet","surfaceContentSecondary","account","Evidences","dispute","evidenceProcessed","fetchingEvidences"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Accordion, GU, SyncIndicator, textStyle, useTheme } from '@aragon/ui'\nimport { useWallet } from 'use-wallet'\nimport useEvidences from '../../hooks/useEvidences'\nimport { addressesEqual } from '../../lib/web3-utils'\nimport ErrorLoadingEvidence from './ErrorLoadingEvidence'\nimport IdentityBadge from '../IdentityBadge'\nimport Markdown from '../Markdown'\nimport { dateFormat } from '../../utils/date-utils'\n\nimport folderIcon from '../../assets/folderIcon.svg'\n\nconst DisputeEvidences = React.memo(function DisputeEvidences({\n  defendant,\n  evidences,\n  loading,\n  plaintiff,\n}) {\n  return (\n    <React.Fragment>\n      <SyncIndicator visible={loading} label=\"Loading evidences…\" />\n      {evidences &&\n        evidences.map((evidence, index) => {\n          const { createdAt, submitter, metadata, error } = evidence\n          return (\n            <Accordion\n              key={index}\n              items={[\n                [\n                  <div\n                    css={`\n                      display: flex;\n                      align-items: center;\n                    `}\n                  >\n                    <img src={folderIcon} width=\"17\" height=\"20\" alt=\"\" />\n                    <span\n                      css={`\n                        margin-left: ${1.5 * GU}px;\n                      `}\n                    >\n                      Argument #{index + 1}\n                    </span>\n                  </div>,\n                  <EvidenceContent\n                    createdAt={createdAt}\n                    error={error}\n                    metadata={metadata}\n                    submitter={submitter}\n                    submitterLabel={getSubmitterLabel(\n                      submitter,\n                      defendant,\n                      plaintiff\n                    )}\n                  />,\n                ],\n              ]}\n            />\n          )\n        })}\n    </React.Fragment>\n  )\n})\n\nconst EvidenceContent = React.memo(function EvidenceContent({\n  createdAt,\n  error,\n  metadata,\n  submitter,\n  submitterLabel,\n}) {\n  const theme = useTheme()\n  const wallet = useWallet()\n\n  if (error) {\n    return <ErrorLoadingEvidence />\n  }\n  return (\n    <div\n      css={`\n        margin-bottom: ${2 * GU}px;\n        padding: ${3 * GU}px ${8 * GU - 3}px;\n      `}\n    >\n      <div\n        css={`\n          display: grid;\n          grid-template-columns: 150px minmax(180px, auto);\n          grid-gap: ${5 * GU}px;\n          margin-bottom: ${5 * GU}px;\n        `}\n      >\n        <div>\n          <h2\n            css={`\n              ${textStyle('label2')};\n              color: ${theme.surfaceContentSecondary};\n              margin-bottom: ${2 * GU}px;\n            `}\n          >\n            Submitted by\n          </h2>\n          <div\n            css={`\n              display: flex;\n              align-items: flex-start;\n            `}\n          >\n            <IdentityBadge\n              connectedAccount={addressesEqual(submitter, wallet.account)}\n              entity={submitter}\n              label={submitterLabel}\n            />\n          </div>\n        </div>\n        <div>\n          <h2\n            css={`\n              ${textStyle('label2')};\n              color: ${theme.surfaceContentSecondary};\n              margin-bottom: ${2 * GU}px;\n            `}\n          >\n            Date\n          </h2>\n          <span\n            css={`\n              ${textStyle('body2')};\n            `}\n          >\n            {dateFormat(createdAt, 'onlyDate')}\n          </span>\n        </div>\n      </div>\n      <div>\n        <h2\n          css={`\n            ${textStyle('label2')};\n            color: ${theme.surfaceContentSecondary};\n            margin-bottom: ${2 * GU}px;\n          `}\n        >\n          Data\n        </h2>\n        <div\n          css={`\n            display: flex;\n            align-items: flex-start;\n          `}\n        >\n          <Markdown text={metadata} />\n        </div>\n      </div>\n    </div>\n  )\n})\n\nfunction getSubmitterLabel(submitter, defendant, plaintiff) {\n  if (addressesEqual(submitter, defendant)) {\n    return 'Defendant'\n  }\n\n  if (addressesEqual(submitter, plaintiff)) {\n    return 'Plaintiff'\n  }\n\n  return ''\n}\n\nexport default function Evidences({ dispute, evidences }) {\n  // This hook ensures us that evidenceProcessed won't be updated unless there are new evidences.\n  const [evidenceProcessed, fetchingEvidences] = useEvidences(\n    dispute,\n    evidences\n  )\n\n  return (\n    <DisputeEvidences\n      defendant={dispute.defendant}\n      evidences={evidenceProcessed}\n      loading={fetchingEvidences}\n      plaintiff={dispute.plaintiff}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}