{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { captureException } from '@sentry/browser';\nimport gql from 'graphql-tag';\nimport { Client } from 'urql';\nconst RETRY_EVERY = 3000;\nconst UNISWAP_URL = 'https://api.thegraph.com/subgraphs/name/lutter/uniswap-v2';\nconst ETH_ANJ_PAIR = '0x0ffc70be6e2d841e109653ddb3034961591679d6';\nconst DAI_ETH_PAIR = '0xa478c2975ab1ea89e8196811f51a7b7ade33eb11';\nconst graphqlClient = new Client({\n  url: UNISWAP_URL\n});\nconst ANJ_PRICE_QUERY = gql`\n  query {\n    pair(id: \"${ETH_ANJ_PAIR}\") {\n      token0Price\n    }\n  }\n`;\nconst ETH_PRICE_QUERY = gql`\n  query {\n    pair(id: \"${DAI_ETH_PAIR}\") {\n      token0Price\n    }\n  }\n`;\nexport function useUniswapAnjPrice() {\n  const [anjPrice, setAnjPrice] = useState(0);\n  useEffect(() => {\n    let cancelled = false;\n    let retryTimer;\n\n    async function fetchPrice() {\n      try {\n        const [anjResults, ethResults] = await Promise.all([graphqlClient.query(ANJ_PRICE_QUERY).toPromise(), graphqlClient.query(ETH_PRICE_QUERY).toPromise()]);\n        const {\n          pair: anjPair\n        } = anjResults.data;\n        const {\n          pair: ethPair\n        } = ethResults.data;\n        const anjToEthPrice = anjPair.token0Price;\n        const ethToDaiPrice = ethPair.token0Price;\n        const anjPrice = Number(anjToEthPrice) * Number(ethToDaiPrice);\n\n        if (!cancelled) {\n          setAnjPrice(anjPrice);\n        }\n      } catch (err) {\n        captureException(err);\n        retryTimer = setTimeout(fetchPrice, RETRY_EVERY);\n      }\n    }\n\n    fetchPrice();\n    return () => {\n      cancelled = true;\n      clearTimeout(retryTimer);\n    };\n  }, []);\n  return anjPrice;\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useUniswapAnjPrice.js"],"names":["useEffect","useState","captureException","gql","Client","RETRY_EVERY","UNISWAP_URL","ETH_ANJ_PAIR","DAI_ETH_PAIR","graphqlClient","url","ANJ_PRICE_QUERY","ETH_PRICE_QUERY","useUniswapAnjPrice","anjPrice","setAnjPrice","cancelled","retryTimer","fetchPrice","anjResults","ethResults","Promise","all","query","toPromise","pair","anjPair","data","ethPair","anjToEthPrice","token0Price","ethToDaiPrice","Number","err","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AAEA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,MAAT,QAAuB,MAAvB;AAEA,MAAMC,WAAW,GAAG,IAApB;AAEA,MAAMC,WAAW,GAAG,2DAApB;AACA,MAAMC,YAAY,GAAG,4CAArB;AACA,MAAMC,YAAY,GAAG,4CAArB;AAEA,MAAMC,aAAa,GAAG,IAAIL,MAAJ,CAAW;AAAEM,EAAAA,GAAG,EAAEJ;AAAP,CAAX,CAAtB;AAEA,MAAMK,eAAe,GAAGR,GAAI;;gBAEZI,YAAa;;;;CAF7B;AAOA,MAAMK,eAAe,GAAGT,GAAI;;gBAEZK,YAAa;;;;CAF7B;AAQA,OAAO,SAASK,kBAAT,GAA8B;AACnC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,CAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,SAAS,GAAG,KAAhB;AACA,QAAIC,UAAJ;;AACA,mBAAeC,UAAf,GAA4B;AAC1B,UAAI;AACF,cAAM,CAACC,UAAD,EAAaC,UAAb,IAA2B,MAAMC,OAAO,CAACC,GAAR,CAAY,CACjDb,aAAa,CAACc,KAAd,CAAoBZ,eAApB,EAAqCa,SAArC,EADiD,EAEjDf,aAAa,CAACc,KAAd,CAAoBX,eAApB,EAAqCY,SAArC,EAFiD,CAAZ,CAAvC;AAKA,cAAM;AAAEC,UAAAA,IAAI,EAAEC;AAAR,YAAoBP,UAAU,CAACQ,IAArC;AACA,cAAM;AAAEF,UAAAA,IAAI,EAAEG;AAAR,YAAoBR,UAAU,CAACO,IAArC;AACA,cAAME,aAAa,GAAGH,OAAO,CAACI,WAA9B;AACA,cAAMC,aAAa,GAAGH,OAAO,CAACE,WAA9B;AACA,cAAMhB,QAAQ,GAAGkB,MAAM,CAACH,aAAD,CAAN,GAAwBG,MAAM,CAACD,aAAD,CAA/C;;AAEA,YAAI,CAACf,SAAL,EAAgB;AACdD,UAAAA,WAAW,CAACD,QAAD,CAAX;AACD;AACF,OAfD,CAeE,OAAOmB,GAAP,EAAY;AACZ/B,QAAAA,gBAAgB,CAAC+B,GAAD,CAAhB;AACAhB,QAAAA,UAAU,GAAGiB,UAAU,CAAChB,UAAD,EAAab,WAAb,CAAvB;AACD;AACF;;AAEDa,IAAAA,UAAU;AAEV,WAAO,MAAM;AACXF,MAAAA,SAAS,GAAG,IAAZ;AACAmB,MAAAA,YAAY,CAAClB,UAAD,CAAZ;AACD,KAHD;AAID,GA/BQ,EA+BN,EA/BM,CAAT;AAiCA,SAAOH,QAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\nimport { captureException } from '@sentry/browser'\n\nimport gql from 'graphql-tag'\nimport { Client } from 'urql'\n\nconst RETRY_EVERY = 3000\n\nconst UNISWAP_URL = 'https://api.thegraph.com/subgraphs/name/lutter/uniswap-v2'\nconst ETH_ANJ_PAIR = '0x0ffc70be6e2d841e109653ddb3034961591679d6'\nconst DAI_ETH_PAIR = '0xa478c2975ab1ea89e8196811f51a7b7ade33eb11'\n\nconst graphqlClient = new Client({ url: UNISWAP_URL })\n\nconst ANJ_PRICE_QUERY = gql`\n  query {\n    pair(id: \"${ETH_ANJ_PAIR}\") {\n      token0Price\n    }\n  }\n`\nconst ETH_PRICE_QUERY = gql`\n  query {\n    pair(id: \"${DAI_ETH_PAIR}\") {\n      token0Price\n    }\n  }\n`\n\nexport function useUniswapAnjPrice() {\n  const [anjPrice, setAnjPrice] = useState(0)\n\n  useEffect(() => {\n    let cancelled = false\n    let retryTimer\n    async function fetchPrice() {\n      try {\n        const [anjResults, ethResults] = await Promise.all([\n          graphqlClient.query(ANJ_PRICE_QUERY).toPromise(),\n          graphqlClient.query(ETH_PRICE_QUERY).toPromise(),\n        ])\n\n        const { pair: anjPair } = anjResults.data\n        const { pair: ethPair } = ethResults.data\n        const anjToEthPrice = anjPair.token0Price\n        const ethToDaiPrice = ethPair.token0Price\n        const anjPrice = Number(anjToEthPrice) * Number(ethToDaiPrice)\n\n        if (!cancelled) {\n          setAnjPrice(anjPrice)\n        }\n      } catch (err) {\n        captureException(err)\n        retryTimer = setTimeout(fetchPrice, RETRY_EVERY)\n      }\n    }\n\n    fetchPrice()\n\n    return () => {\n      cancelled = true\n      clearTimeout(retryTimer)\n    }\n  }, [])\n\n  return anjPrice\n}\n"]},"metadata":{},"sourceType":"module"}