{"ast":null,"code":"var _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/Dashboard/DashboardStateProvider.js\";\nimport React, { useContext } from 'react';\nimport { useWallet } from '../../providers/Wallet';\nimport { useAppealsByUserSubscription, useJurorBalancesSubscription, useJurorDraftsRewardsSubscription } from '../../hooks/subscription-hooks';\nconst DashboardContext = React.createContext();\n\nfunction DashboardStateProvider({\n  children\n}) {\n  const wallet = useWallet();\n  const Provider = DashboardContext.Provider; // Workaround to not subscribe when no connected account\n\n  if (wallet.account) return React.createElement(WithSubscription, {\n    Provider: Provider,\n    connectedAccount: wallet.account,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, children);\n  return React.createElement(Provider, {\n    value: {\n      anjMovements: [],\n      anjBalances: {},\n      appeals: [],\n      claimedSubscriptionFees: [],\n      jurorDrafts: [],\n      treasury: []\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, children);\n}\n\nfunction WithSubscription({\n  Provider,\n  connectedAccount,\n  children\n}) {\n  // Juror ANJ balances, 24h ANJ movements and claimed subscription fees\n  const {\n    anjBalances,\n    anjMovements,\n    claimedSubscriptionFees,\n    treasury,\n    fetching: balancesFetching,\n    errors: balanceErrors\n  } = useJurorBalancesSubscription(connectedAccount); // Appeals\n\n  const {\n    appeals,\n    fetching: appealsFetching,\n    errors: appealErrors\n  } = useAppealsByUserSubscription(connectedAccount, false); // Non settled appeals\n  // Juror drafts not rewarded\n\n  const {\n    jurorDrafts,\n    fetching: jurorDraftsFetching,\n    error: jurorDraftsError\n  } = useJurorDraftsRewardsSubscription(connectedAccount);\n  const fetching = balancesFetching || appealsFetching || jurorDraftsFetching;\n  const errors = [...balanceErrors, ...appealErrors, ...(jurorDraftsError ? [jurorDraftsError] : [])];\n  return React.createElement(Provider, {\n    value: {\n      anjBalances,\n      anjMovements,\n      appeals,\n      claimedSubscriptionFees,\n      errors,\n      fetching,\n      jurorDrafts,\n      treasury\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, children);\n}\n\nfunction useDashboardState() {\n  return useContext(DashboardContext);\n}\n\nexport { DashboardStateProvider, useDashboardState };","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Dashboard/DashboardStateProvider.js"],"names":["React","useContext","useWallet","useAppealsByUserSubscription","useJurorBalancesSubscription","useJurorDraftsRewardsSubscription","DashboardContext","createContext","DashboardStateProvider","children","wallet","Provider","account","anjMovements","anjBalances","appeals","claimedSubscriptionFees","jurorDrafts","treasury","WithSubscription","connectedAccount","fetching","balancesFetching","errors","balanceErrors","appealsFetching","appealErrors","jurorDraftsFetching","error","jurorDraftsError","useDashboardState"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SACEC,4BADF,EAEEC,4BAFF,EAGEC,iCAHF,QAIO,gCAJP;AAMA,MAAMC,gBAAgB,GAAGN,KAAK,CAACO,aAAN,EAAzB;;AAEA,SAASC,sBAAT,CAAgC;AAAEC,EAAAA;AAAF,CAAhC,EAA8C;AAC5C,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AAEA,QAAMS,QAAQ,GAAGL,gBAAgB,CAACK,QAAlC,CAH4C,CAK5C;;AACA,MAAID,MAAM,CAACE,OAAX,EACE,OACE,oBAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAED,QAA5B;AAAsC,IAAA,gBAAgB,EAAED,MAAM,CAACE,OAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,QADH,CADF;AAMF,SACE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE;AACLI,MAAAA,YAAY,EAAE,EADT;AAELC,MAAAA,WAAW,EAAE,EAFR;AAGLC,MAAAA,OAAO,EAAE,EAHJ;AAILC,MAAAA,uBAAuB,EAAE,EAJpB;AAKLC,MAAAA,WAAW,EAAE,EALR;AAMLC,MAAAA,QAAQ,EAAE;AANL,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGT,QAVH,CADF;AAcD;;AAED,SAASU,gBAAT,CAA0B;AAAER,EAAAA,QAAF;AAAYS,EAAAA,gBAAZ;AAA8BX,EAAAA;AAA9B,CAA1B,EAAoE;AAClE;AACA,QAAM;AACJK,IAAAA,WADI;AAEJD,IAAAA,YAFI;AAGJG,IAAAA,uBAHI;AAIJE,IAAAA,QAJI;AAKJG,IAAAA,QAAQ,EAAEC,gBALN;AAMJC,IAAAA,MAAM,EAAEC;AANJ,MAOFpB,4BAA4B,CAACgB,gBAAD,CAPhC,CAFkE,CAWlE;;AACA,QAAM;AACJL,IAAAA,OADI;AAEJM,IAAAA,QAAQ,EAAEI,eAFN;AAGJF,IAAAA,MAAM,EAAEG;AAHJ,MAIFvB,4BAA4B,CAACiB,gBAAD,EAAmB,KAAnB,CAJhC,CAZkE,CAgBR;AAE1D;;AACA,QAAM;AACJH,IAAAA,WADI;AAEJI,IAAAA,QAAQ,EAAEM,mBAFN;AAGJC,IAAAA,KAAK,EAAEC;AAHH,MAIFxB,iCAAiC,CAACe,gBAAD,CAJrC;AAMA,QAAMC,QAAQ,GAAGC,gBAAgB,IAAIG,eAApB,IAAuCE,mBAAxD;AACA,QAAMJ,MAAM,GAAG,CACb,GAAGC,aADU,EAEb,GAAGE,YAFU,EAGb,IAAIG,gBAAgB,GAAG,CAACA,gBAAD,CAAH,GAAwB,EAA5C,CAHa,CAAf;AAMA,SACE,oBAAC,QAAD;AACE,IAAA,KAAK,EAAE;AACLf,MAAAA,WADK;AAELD,MAAAA,YAFK;AAGLE,MAAAA,OAHK;AAILC,MAAAA,uBAJK;AAKLO,MAAAA,MALK;AAMLF,MAAAA,QANK;AAOLJ,MAAAA,WAPK;AAQLC,MAAAA;AARK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYGT,QAZH,CADF;AAgBD;;AAED,SAASqB,iBAAT,GAA6B;AAC3B,SAAO7B,UAAU,CAACK,gBAAD,CAAjB;AACD;;AAED,SAASE,sBAAT,EAAiCsB,iBAAjC","sourcesContent":["import React, { useContext } from 'react'\nimport { useWallet } from '../../providers/Wallet'\nimport {\n  useAppealsByUserSubscription,\n  useJurorBalancesSubscription,\n  useJurorDraftsRewardsSubscription,\n} from '../../hooks/subscription-hooks'\n\nconst DashboardContext = React.createContext()\n\nfunction DashboardStateProvider({ children }) {\n  const wallet = useWallet()\n\n  const Provider = DashboardContext.Provider\n\n  // Workaround to not subscribe when no connected account\n  if (wallet.account)\n    return (\n      <WithSubscription Provider={Provider} connectedAccount={wallet.account}>\n        {children}\n      </WithSubscription>\n    )\n\n  return (\n    <Provider\n      value={{\n        anjMovements: [],\n        anjBalances: {},\n        appeals: [],\n        claimedSubscriptionFees: [],\n        jurorDrafts: [],\n        treasury: [],\n      }}\n    >\n      {children}\n    </Provider>\n  )\n}\n\nfunction WithSubscription({ Provider, connectedAccount, children }) {\n  // Juror ANJ balances, 24h ANJ movements and claimed subscription fees\n  const {\n    anjBalances,\n    anjMovements,\n    claimedSubscriptionFees,\n    treasury,\n    fetching: balancesFetching,\n    errors: balanceErrors,\n  } = useJurorBalancesSubscription(connectedAccount)\n\n  // Appeals\n  const {\n    appeals,\n    fetching: appealsFetching,\n    errors: appealErrors,\n  } = useAppealsByUserSubscription(connectedAccount, false) // Non settled appeals\n\n  // Juror drafts not rewarded\n  const {\n    jurorDrafts,\n    fetching: jurorDraftsFetching,\n    error: jurorDraftsError,\n  } = useJurorDraftsRewardsSubscription(connectedAccount)\n\n  const fetching = balancesFetching || appealsFetching || jurorDraftsFetching\n  const errors = [\n    ...balanceErrors,\n    ...appealErrors,\n    ...(jurorDraftsError ? [jurorDraftsError] : []),\n  ]\n\n  return (\n    <Provider\n      value={{\n        anjBalances,\n        anjMovements,\n        appeals,\n        claimedSubscriptionFees,\n        errors,\n        fetching,\n        jurorDrafts,\n        treasury,\n      }}\n    >\n      {children}\n    </Provider>\n  )\n}\n\nfunction useDashboardState() {\n  return useContext(DashboardContext)\n}\n\nexport { DashboardStateProvider, useDashboardState }\n"]},"metadata":{},"sourceType":"module"}