{"ast":null,"code":"import _styled6 from \"styled-components\";\nimport _styled5 from \"styled-components\";\nimport _styled4 from \"styled-components\";\nimport _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/panels/AppealPanel.js\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Button, DropDown, Field, GU, Info, Link } from '@aragon/ui';\nimport { getDisputeLastRound } from '../../../utils/dispute-utils';\nimport { getAppealRulingOptions, appealOptionToString } from '../../../utils/crvoting-utils';\nimport { formatUnits } from '../../../lib/math-utils';\nimport { Phase as DisputePhase } from '../../../types/dispute-status-types';\nimport { useAppealDeposits, useAppealFeeAllowance, useFeeBalanceOf } from '../../../hooks/useCourtContracts';\nimport { useWallet } from '../../../providers/Wallet';\nimport { useCourtConfig } from '../../../providers/CourtConfig';\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"AppealPanel___StyledDiv\",\n  componentId: \"sc-17fn0xy-0\"\n})([\"display:flex;align-items:center;\"]);\n\nvar _StyledImg = _styled(\"img\").withConfig({\n  displayName: \"AppealPanel___StyledImg\",\n  componentId: \"sc-17fn0xy-1\"\n})([\"margin-right:\", \"px;\"], p => p._css);\n\nvar _StyledDropDown = _styled(DropDown).withConfig({\n  displayName: \"AppealPanel___StyledDropDown\",\n  componentId: \"sc-17fn0xy-2\"\n})([\"margin-bottom:\", \"px;\"], p => p._css2);\n\nvar _StyledButton = _styled(Button).withConfig({\n  displayName: \"AppealPanel___StyledButton\",\n  componentId: \"sc-17fn0xy-3\"\n})([\"margin-bottom:\", \"px;\"], p => p._css3);\n\nvar _StyledInfo = _styled(Info).withConfig({\n  displayName: \"AppealPanel___StyledInfo\",\n  componentId: \"sc-17fn0xy-4\"\n})([\"margin-bottom:\", \"px;\"], p => p._css4);\n\nvar _StyledInfo2 = _styled(Info).withConfig({\n  displayName: \"AppealPanel___StyledInfo2\",\n  componentId: \"sc-17fn0xy-5\"\n})([\"margin-bottom:\", \"px;\"], p => p._css5);\n\nfunction AppealPanel({\n  confirm,\n  dispute,\n  onAppeal,\n  onApproveFeeDeposit,\n  onDone\n}) {\n  const {\n    feeToken\n  } = useCourtConfig();\n  const {\n    account: connectedAccount\n  } = useWallet();\n  const [selectedOutcome, setSelectedOutcome] = useState({\n    value: -1,\n    error: null\n  }); // get connected account fee balance and  allowance\n\n  const [feeBalance] = useFeeBalanceOf(connectedAccount);\n  const [feeAllowance] = useAppealFeeAllowance(connectedAccount); // get required appeal desposits (appeal and confirm appeal)\n\n  const [[appealDeposit, confirmAppealDeposit]] = useAppealDeposits(dispute.id, dispute.lastRoundId); // If users have the appeal panel open but the phase has already pass\n  // don't let them continue and close it\n\n  useEffect(() => {\n    if (confirm && dispute.phase !== DisputePhase.ConfirmAppeal || !confirm && dispute.phase !== DisputePhase.AppealRuling) {\n      // close the panel\n      onDone();\n    }\n  }, [confirm, dispute.phase, onDone]); // Reqiured deposits for appealing and confirming appeal are different\n\n  const requiredDeposit = confirm ? confirmAppealDeposit : appealDeposit;\n  const {\n    vote,\n    appeal\n  } = getDisputeLastRound(dispute);\n  const {\n    winningOutcome\n  } = vote || {}; // If appealing => options are the opossed of the wining outcome\n  // If confirming appeal => options are the opossed of the appealed ruling\n\n  const appealOptions = getAppealRulingOptions(confirm ? appeal.appealedRuling : winningOutcome);\n  const handleOutcomeSelected = useCallback(newOutcome => {\n    setSelectedOutcome({\n      value: newOutcome\n    });\n  }, []); // For submission\n\n  const handleAppeal = useCallback(event => {\n    event.preventDefault();\n    const errored = validateForm(selectedOutcome.value);\n\n    if (errored) {\n      return;\n    }\n\n    const appealOption = appealOptions[selectedOutcome.value]; // Appeal ruling\n\n    const disputeId = dispute.id;\n    const roundId = dispute.lastRoundId;\n    const appealRuling = appealOption.outcome;\n    onDone();\n    onAppeal(disputeId, roundId, appealRuling, requiredDeposit, feeAllowance, confirm);\n  }, [appealOptions, confirm, dispute.id, dispute.lastRoundId, feeAllowance, onAppeal, onDone, requiredDeposit, selectedOutcome.value]); // check if connected account has the minimum required deposit to be able to appeal\n\n  const canAppeal = feeBalance.gte(requiredDeposit); // Form validation\n\n  const validateForm = outcome => {\n    if (outcome === -1) {\n      const error = 'You must select an outcome';\n      setSelectedOutcome(outcome => ({ ...outcome,\n        error\n      }));\n      return true;\n    }\n\n    return false;\n  };\n\n  const actionLabel = confirm ? 'Confirm appeal' : 'Appeal ruling';\n  const errorMessage = selectedOutcome.error;\n  return React.createElement(\"form\", {\n    onSubmit: handleAppeal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Field, {\n    label: \"Required collateral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(_StyledDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, React.createElement(_StyledImg, {\n    height: \"18\",\n    src: `https://chasing-coins.com/coin/logo/${feeToken.symbol}`,\n    _css: 0.5 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, formatUnits(requiredDeposit), \" \", feeToken.symbol, ' '))), confirm && appeal && React.createElement(Field, {\n    label: \"Appeal outcome\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, appealOptionToString(appeal.appealedRuling)), React.createElement(Field, {\n    label: confirm ? 'Appeal confirmation outcome' : 'Appeal outcome',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, React.createElement(_StyledDropDown, {\n    items: appealOptions.map(option => option.description),\n    placeholder: \"Select outcome\",\n    selected: selectedOutcome.value,\n    onChange: handleOutcomeSelected,\n    wide: true,\n    _css2: 2 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })), React.createElement(_StyledButton, {\n    type: \"submit\",\n    mode: \"strong\",\n    wide: true,\n    disabled: !canAppeal,\n    _css3: 2 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, actionLabel), !canAppeal && React.createElement(_StyledInfo, {\n    mode: \"warning\",\n    _css4: 2 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"You must hold \", formatUnits(requiredDeposit), \" \", feeToken.symbol, \" in order to appeal\"), errorMessage && React.createElement(_StyledInfo2, {\n    mode: \"error\",\n    _css5: 2 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, errorMessage), React.createElement(Info, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197\n    },\n    __self: this\n  }, \"Please note that if the final ruling outcome is different from your selected appeal, the entire amount of your collateral could be slashed.\", ' ', React.createElement(Link, {\n    href: \"https://support.dijets.io/article/43-dispute-lifecycle#appeal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, \"Learn more\"), \".\"));\n}\n\nconst Panel = React.memo(function Panel({\n  dispute,\n  confirm,\n  ...props\n}) {\n  const {\n    appeal\n  } = getDisputeLastRound(dispute); // Cases where a confirm appeal is done, the next round is created (with no appeal) and the panel hasn't closed yet\n\n  if (confirm && !appeal) {\n    return null;\n  }\n\n  return React.createElement(AppealPanel, Object.assign({\n    dispute: dispute,\n    confirm: confirm\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }));\n});\nexport default Panel;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/panels/AppealPanel.js"],"names":["React","useCallback","useEffect","useState","Button","DropDown","Field","GU","Info","Link","getDisputeLastRound","getAppealRulingOptions","appealOptionToString","formatUnits","Phase","DisputePhase","useAppealDeposits","useAppealFeeAllowance","useFeeBalanceOf","useWallet","useCourtConfig","AppealPanel","confirm","dispute","onAppeal","onApproveFeeDeposit","onDone","feeToken","account","connectedAccount","selectedOutcome","setSelectedOutcome","value","error","feeBalance","feeAllowance","appealDeposit","confirmAppealDeposit","id","lastRoundId","phase","ConfirmAppeal","AppealRuling","requiredDeposit","vote","appeal","winningOutcome","appealOptions","appealedRuling","handleOutcomeSelected","newOutcome","handleAppeal","event","preventDefault","errored","validateForm","appealOption","disputeId","roundId","appealRuling","outcome","canAppeal","gte","actionLabel","errorMessage","symbol","map","option","description","Panel","memo","props"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Button, DropDown, Field, GU, Info, Link } from '@aragon/ui'\nimport { getDisputeLastRound } from '../../../utils/dispute-utils'\nimport {\n  getAppealRulingOptions,\n  appealOptionToString,\n} from '../../../utils/crvoting-utils'\nimport { formatUnits } from '../../../lib/math-utils'\nimport { Phase as DisputePhase } from '../../../types/dispute-status-types'\nimport {\n  useAppealDeposits,\n  useAppealFeeAllowance,\n  useFeeBalanceOf,\n} from '../../../hooks/useCourtContracts'\nimport { useWallet } from '../../../providers/Wallet'\nimport { useCourtConfig } from '../../../providers/CourtConfig'\n\nfunction AppealPanel({\n  confirm,\n  dispute,\n  onAppeal,\n  onApproveFeeDeposit,\n  onDone,\n}) {\n  const { feeToken } = useCourtConfig()\n  const { account: connectedAccount } = useWallet()\n  const [selectedOutcome, setSelectedOutcome] = useState({\n    value: -1,\n    error: null,\n  })\n\n  // get connected account fee balance and  allowance\n  const [feeBalance] = useFeeBalanceOf(connectedAccount)\n  const [feeAllowance] = useAppealFeeAllowance(connectedAccount)\n\n  // get required appeal desposits (appeal and confirm appeal)\n  const [[appealDeposit, confirmAppealDeposit]] = useAppealDeposits(\n    dispute.id,\n    dispute.lastRoundId\n  )\n\n  // If users have the appeal panel open but the phase has already pass\n  // don't let them continue and close it\n  useEffect(() => {\n    if (\n      (confirm && dispute.phase !== DisputePhase.ConfirmAppeal) ||\n      (!confirm && dispute.phase !== DisputePhase.AppealRuling)\n    ) {\n      // close the panel\n      onDone()\n    }\n  }, [confirm, dispute.phase, onDone])\n\n  // Reqiured deposits for appealing and confirming appeal are different\n  const requiredDeposit = confirm ? confirmAppealDeposit : appealDeposit\n\n  const { vote, appeal } = getDisputeLastRound(dispute)\n  const { winningOutcome } = vote || {}\n\n  // If appealing => options are the opossed of the wining outcome\n  // If confirming appeal => options are the opossed of the appealed ruling\n  const appealOptions = getAppealRulingOptions(\n    confirm ? appeal.appealedRuling : winningOutcome\n  )\n\n  const handleOutcomeSelected = useCallback(newOutcome => {\n    setSelectedOutcome({ value: newOutcome })\n  }, [])\n\n  // For submission\n  const handleAppeal = useCallback(\n    event => {\n      event.preventDefault()\n\n      const errored = validateForm(selectedOutcome.value)\n      if (errored) {\n        return\n      }\n\n      const appealOption = appealOptions[selectedOutcome.value]\n\n      // Appeal ruling\n      const disputeId = dispute.id\n      const roundId = dispute.lastRoundId\n      const appealRuling = appealOption.outcome\n\n      onDone()\n      onAppeal(\n        disputeId,\n        roundId,\n        appealRuling,\n        requiredDeposit,\n        feeAllowance,\n        confirm\n      )\n    },\n    [\n      appealOptions,\n      confirm,\n      dispute.id,\n      dispute.lastRoundId,\n      feeAllowance,\n      onAppeal,\n      onDone,\n      requiredDeposit,\n      selectedOutcome.value,\n    ]\n  )\n\n  // check if connected account has the minimum required deposit to be able to appeal\n  const canAppeal = feeBalance.gte(requiredDeposit)\n\n  // Form validation\n  const validateForm = outcome => {\n    if (outcome === -1) {\n      const error = 'You must select an outcome'\n      setSelectedOutcome(outcome => ({ ...outcome, error }))\n      return true\n    }\n\n    return false\n  }\n\n  const actionLabel = confirm ? 'Confirm appeal' : 'Appeal ruling'\n  const errorMessage = selectedOutcome.error\n\n  return (\n    <form onSubmit={handleAppeal}>\n      <Field label=\"Required collateral\">\n        <div\n          css={`\n            display: flex;\n            align-items: center;\n          `}\n        >\n          <img\n            height=\"18\"\n            src={`https://chasing-coins.com/coin/logo/${feeToken.symbol}`}\n            css={`\n              margin-right: ${0.5 * GU}px;\n            `}\n          />\n          <span>\n            {formatUnits(requiredDeposit)} {feeToken.symbol}{' '}\n          </span>\n        </div>\n      </Field>\n      {confirm && appeal && (\n        <Field label=\"Appeal outcome\">\n          {appealOptionToString(appeal.appealedRuling)}\n        </Field>\n      )}\n      <Field label={confirm ? 'Appeal confirmation outcome' : 'Appeal outcome'}>\n        <DropDown\n          items={appealOptions.map(option => option.description)}\n          placeholder=\"Select outcome\"\n          selected={selectedOutcome.value}\n          onChange={handleOutcomeSelected}\n          wide\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n        />\n      </Field>\n      <Button\n        type=\"submit\"\n        mode=\"strong\"\n        wide\n        disabled={!canAppeal}\n        css={`\n          margin-bottom: ${2 * GU}px;\n        `}\n      >\n        {actionLabel}\n      </Button>\n      {!canAppeal && (\n        <Info\n          mode=\"warning\"\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n        >\n          You must hold {formatUnits(requiredDeposit)} {feeToken.symbol} in\n          order to appeal\n        </Info>\n      )}\n      {errorMessage && (\n        <Info\n          mode=\"error\"\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n        >\n          {errorMessage}\n        </Info>\n      )}\n      <Info>\n        Please note that if the final ruling outcome is different from your\n        selected appeal, the entire amount of your collateral could be slashed.{' '}\n        <Link href=\"https://support.dijets.io/article/43-dispute-lifecycle#appeal\">\n          Learn more\n        </Link>\n        .\n      </Info>\n    </form>\n  )\n}\n\nconst Panel = React.memo(function Panel({ dispute, confirm, ...props }) {\n  const { appeal } = getDisputeLastRound(dispute)\n\n  // Cases where a confirm appeal is done, the next round is created (with no appeal) and the panel hasn't closed yet\n  if (confirm && !appeal) {\n    return null\n  }\n\n  return <AppealPanel dispute={dispute} confirm={confirm} {...props} />\n})\n\nexport default Panel\n"]},"metadata":{},"sourceType":"module"}