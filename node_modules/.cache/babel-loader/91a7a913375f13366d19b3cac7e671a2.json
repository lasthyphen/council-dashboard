{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useMemo}from'react';import{useTotalANTStakedPolling}from'./useCourtContracts';import{useActiveJurorsNumber}from'../hooks/query-hooks';import{useJurorRegistrySubscription,useTotalRewardsSubscription}from'../hooks/subscription-hooks';import{getKnownToken}from'../utils/known-tokens';import{bigNum}from'../lib/math-utils';import IconANJ from\"../assets/IconANJ.svg\";import IconANT from\"../assets/IconANT.svg\";import IconDAI from\"../assets/IconDAI.svg\";var STATS_FETCHING_TIMEOUT=15000;var COURT_STATS=[{label:'Total Active ANJ',token:_objectSpread({},getKnownToken('ANJ'),{icon:IconANJ})},{label:'Total Staked ANT',token:_objectSpread({},getKnownToken('ANT'),{icon:IconANT})},{label:'Total Active Jurors'},{label:'Total Rewards DAI',token:_objectSpread({},getKnownToken('DAI'),{icon:IconDAI})}];export function useTotalActiveBalance(){var _useJurorRegistrySubs=useJurorRegistrySubscription(),jurorRegistryStats=_useJurorRegistrySubs.data,error=_useJurorRegistrySubs.error;return useMemo(function(){if(!jurorRegistryStats||error){return[bigNum(-1),error];}return[bigNum(jurorRegistryStats.totalActive),error];},[error,jurorRegistryStats]);}function useTotalRewards(){var _useTotalRewardsSubsc=useTotalRewardsSubscription(),rewards=_useTotalRewardsSubsc.data,error=_useTotalRewardsSubsc.error;return useMemo(function(){if(!rewards||error){return[bigNum(-1),error];}return[rewards.reduce(function(totalAcumulator,reward){return totalAcumulator.add(reward.amount);},bigNum(0)),error];},[error,rewards]);}/**\n * Hook to get the dashboard stats ANJ active balance, ANT total stake and the active jurors number\n * @returns {Array} First item an array with the stats and the second one a loading state\n */function useCourtStats(){var _useTotalActiveBalanc=useTotalActiveBalance(),_useTotalActiveBalanc2=_slicedToArray(_useTotalActiveBalanc,2),anjActiveBalance=_useTotalActiveBalanc2[0],anjActiveBalanceError=_useTotalActiveBalanc2[1];var _useTotalANTStakedPol=useTotalANTStakedPolling(STATS_FETCHING_TIMEOUT),_useTotalANTStakedPol2=_slicedToArray(_useTotalANTStakedPol,2),antTotalStake=_useTotalANTStakedPol2[0],antTotalStakeError=_useTotalANTStakedPol2[1];var _useActiveJurorsNumbe=useActiveJurorsNumber(),_useActiveJurorsNumbe2=_slicedToArray(_useActiveJurorsNumbe,2),activeJurors=_useActiveJurorsNumbe2[0],activeJurorsError=_useActiveJurorsNumbe2[1];var _useTotalRewards=useTotalRewards(),_useTotalRewards2=_slicedToArray(_useTotalRewards,2),totalRewards=_useTotalRewards2[0],totalRewardsError=_useTotalRewards2[1];// Loading states\nvar anjFetching=anjActiveBalance.eq(bigNum(-1))&&!anjActiveBalanceError;var antFetching=antTotalStake.eq(bigNum(-1))&&!antTotalStakeError;var activeJurorsFetching=activeJurors===null&&!activeJurorsError;var totalRewardsFetching=totalRewards.eq(bigNum(-1))&&!totalRewardsError;return useMemo(function(){if(anjFetching||antFetching||activeJurorsFetching||totalRewardsFetching){return[null,true];}var statsData=[anjActiveBalance,antTotalStake,activeJurors,totalRewards];var statsError=[anjActiveBalanceError,antTotalStakeError,activeJurorsError,totalRewardsError];return[COURT_STATS.map(function(stat,index){return _objectSpread({},stat,{value:statsData[index],error:statsError[index]});}),false];}/* eslint-disable react-hooks/exhaustive-deps */,[activeJurors,activeJurorsError,activeJurorsFetching,anjActiveBalance.toString(),anjActiveBalanceError,anjFetching,antFetching,antTotalStake.toString(),antTotalStakeError,totalRewards.toString(),totalRewardsError,totalRewardsFetching]/* eslint-disable-line react-hooks/exhaustive-deps */);}export default useCourtStats;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useCourtStats.js"],"names":["useMemo","useTotalANTStakedPolling","useActiveJurorsNumber","useJurorRegistrySubscription","useTotalRewardsSubscription","getKnownToken","bigNum","STATS_FETCHING_TIMEOUT","COURT_STATS","label","token","icon","IconANJ","IconANT","IconDAI","useTotalActiveBalance","jurorRegistryStats","data","error","totalActive","useTotalRewards","rewards","reduce","totalAcumulator","reward","add","amount","useCourtStats","anjActiveBalance","anjActiveBalanceError","antTotalStake","antTotalStakeError","activeJurors","activeJurorsError","totalRewards","totalRewardsError","anjFetching","eq","antFetching","activeJurorsFetching","totalRewardsFetching","statsData","statsError","map","stat","index","value","toString"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\nimport { useTotalANTStakedPolling } from './useCourtContracts'\nimport { useActiveJurorsNumber } from '../hooks/query-hooks'\nimport {\n  useJurorRegistrySubscription,\n  useTotalRewardsSubscription,\n} from '../hooks/subscription-hooks'\nimport { getKnownToken } from '../utils/known-tokens'\nimport { bigNum } from '../lib/math-utils'\nimport IconANJ from '../assets/IconANJ.svg'\nimport IconANT from '../assets/IconANT.svg'\nimport IconDAI from '../assets/IconDAI.svg'\n\nconst STATS_FETCHING_TIMEOUT = 15000\n\nconst COURT_STATS = [\n  {\n    label: 'Total Active ANJ',\n    token: { ...getKnownToken('ANJ'), icon: IconANJ },\n  },\n  {\n    label: 'Total Staked ANT',\n    token: { ...getKnownToken('ANT'), icon: IconANT },\n  },\n  { label: 'Total Active Jurors' },\n  {\n    label: 'Total Rewards DAI',\n    token: { ...getKnownToken('DAI'), icon: IconDAI },\n  },\n]\n\nexport function useTotalActiveBalance() {\n  const { data: jurorRegistryStats, error } = useJurorRegistrySubscription()\n\n  return useMemo(() => {\n    if (!jurorRegistryStats || error) {\n      return [bigNum(-1), error]\n    }\n    return [bigNum(jurorRegistryStats.totalActive), error]\n  }, [error, jurorRegistryStats])\n}\n\nfunction useTotalRewards() {\n  const { data: rewards, error } = useTotalRewardsSubscription()\n\n  return useMemo(() => {\n    if (!rewards || error) {\n      return [bigNum(-1), error]\n    }\n    return [\n      rewards.reduce(\n        (totalAcumulator, reward) => totalAcumulator.add(reward.amount),\n        bigNum(0)\n      ),\n      error,\n    ]\n  }, [error, rewards])\n}\n/**\n * Hook to get the dashboard stats ANJ active balance, ANT total stake and the active jurors number\n * @returns {Array} First item an array with the stats and the second one a loading state\n */\nfunction useCourtStats() {\n  const [anjActiveBalance, anjActiveBalanceError] = useTotalActiveBalance()\n  const [antTotalStake, antTotalStakeError] = useTotalANTStakedPolling(\n    STATS_FETCHING_TIMEOUT\n  )\n  const [activeJurors, activeJurorsError] = useActiveJurorsNumber()\n  const [totalRewards, totalRewardsError] = useTotalRewards()\n\n  // Loading states\n  const anjFetching = anjActiveBalance.eq(bigNum(-1)) && !anjActiveBalanceError\n  const antFetching = antTotalStake.eq(bigNum(-1)) && !antTotalStakeError\n  const activeJurorsFetching = activeJurors === null && !activeJurorsError\n  const totalRewardsFetching = totalRewards.eq(bigNum(-1)) && !totalRewardsError\n\n  return useMemo(\n    () => {\n      if (\n        anjFetching ||\n        antFetching ||\n        activeJurorsFetching ||\n        totalRewardsFetching\n      ) {\n        return [null, true]\n      }\n\n      const statsData = [\n        anjActiveBalance,\n        antTotalStake,\n        activeJurors,\n        totalRewards,\n      ]\n      const statsError = [\n        anjActiveBalanceError,\n        antTotalStakeError,\n        activeJurorsError,\n        totalRewardsError,\n      ]\n      return [\n        COURT_STATS.map((stat, index) => {\n          return {\n            ...stat,\n            value: statsData[index],\n            error: statsError[index],\n          }\n        }),\n        false,\n      ]\n    } /* eslint-disable react-hooks/exhaustive-deps */,\n    [\n      activeJurors,\n      activeJurorsError,\n      activeJurorsFetching,\n      anjActiveBalance.toString(),\n      anjActiveBalanceError,\n      anjFetching,\n      antFetching,\n      antTotalStake.toString(),\n      antTotalStakeError,\n      totalRewards.toString(),\n      totalRewardsError,\n      totalRewardsFetching,\n    ]\n    /* eslint-disable-line react-hooks/exhaustive-deps */\n  )\n}\n\nexport default useCourtStats\n"]},"metadata":{},"sourceType":"module"}