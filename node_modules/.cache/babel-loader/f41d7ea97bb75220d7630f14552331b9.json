{"ast":null,"code":"import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useMemo}from'react';import{useCourtClock}from'../providers/CourtClock';import{useCourtConfig}from'../providers/CourtConfig';import{useTasksSubscription}from'./subscription-hooks';import{getTermEndTime}from'../utils/court-utils';import{getAdjudicationPhase}from'../utils/dispute-utils';import{convertToString,getTaskActionString,Phase as DisputePhase}from'../types/dispute-status-types';import{getVoidedDisputesByCourt}from'../flagged-disputes/voided-disputes';export default function useTasks(){var courtConfig=useCourtConfig();var _useCourtClock=useCourtClock(),currentTermId=_useCourtClock.currentTermId;var _useTasksSubscription=useTasksSubscription(),tasks=_useTasksSubscription.tasks,fetching=_useTasksSubscription.fetching,error=_useTasksSubscription.error;var openTasks=useOpenTasks(tasks,currentTermId,courtConfig);return{openTasks:openTasks,fetching:fetching,error:error};}function useOpenTasks(tasks,currentTermId,courtConfig){var voidedDisputes=getVoidedDisputesByCourt();var convertedTasks=useMemo(function(){if(!tasks){return null;}return tasks.map(function(task){return _objectSpread({},task,{},getAdjudicationPhase(task.dispute,task,currentTermId,courtConfig));});},[courtConfig,currentTermId,tasks]);var convertedTasksPhasesKey=convertedTasks?convertedTasks.map(function(phase){return convertToString(phase.phase);}).join(''):null;var incompleteTasks=useMemo(function(){if(!convertedTasks){return null;}return convertedTasks.filter(function(task){return!voidedDisputes.has(task.dispute.id)&&task.phase!==DisputePhase.Ended;});},[convertedTasksPhasesKey,voidedDisputes]);// eslint-disable-line react-hooks/exhaustive-deps\nreturn useMemo(function(){if(!convertedTasks){return[];}var openTasks=[];for(var i=0;i<incompleteTasks.length;i++){var currentPhase=incompleteTasks[i].phase;var nextTransition=getTermEndTime(incompleteTasks[i].phaseEndTerm,courtConfig);if(currentPhase!==DisputePhase.AppealRuling&&currentPhase!==DisputePhase.ConfirmAppeal){for(var j=0;j<incompleteTasks[i].jurors.length;j++){if(isVotingTaskOpen(incompleteTasks[i].jurors[j],currentPhase)){openTasks.push({number:incompleteTasks[i].number,state:incompleteTasks[i].state,createdAt:incompleteTasks[i].createdAt,juror:incompleteTasks[i].jurors[j].juror.id,disputeId:incompleteTasks[i].dispute.id,commitment:incompleteTasks[i].jurors[j].commitment,outcome:incompleteTasks[i].jurors[j].outcome,phase:getTaskActionString(currentPhase),phaseType:currentPhase,dueDate:nextTransition});}}}else{if(isAppealTaskOpen(incompleteTasks[i],currentPhase)){// We are in appeal or confirm and only need to generate a single task\n// (rather than one per juror) if the task is still open\nopenTasks.push({number:incompleteTasks[i].number,state:incompleteTasks[i].state,createdAt:incompleteTasks[i].createdAt,juror:'Anyone',disputeId:incompleteTasks[i].dispute.id,phase:getTaskActionString(currentPhase),phaseType:currentPhase,dueDate:nextTransition});}}}return openTasks;// Since we are using our own generated cache key we don't need to add the convertedTasks to the dependency list.\n},[convertedTasksPhasesKey,incompleteTasks]);// eslint-disable-line react-hooks/exhaustive-deps\n}function isAppealTaskOpen(round,currentPhase){if(currentPhase===DisputePhase.AppealRuling){return!round.appeal;}if(currentPhase===DisputePhase.ConfirmAppeal){var _round$appeal;if(round===null||round===void 0?void 0:(_round$appeal=round.appeal)===null||_round$appeal===void 0?void 0:_round$appeal.opposedRuling){return Number(round.appeal.opposedRuling)===0;}return true;}}function isVotingTaskOpen(draft,currentPhase){if(currentPhase===DisputePhase.VotingPeriod){return!draft.commitment;}if(currentPhase===DisputePhase.RevealVote){if(draft.outcome||!draft.commitment){return false;}return true;}}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useTasks.js"],"names":["useMemo","useCourtClock","useCourtConfig","useTasksSubscription","getTermEndTime","getAdjudicationPhase","convertToString","getTaskActionString","Phase","DisputePhase","getVoidedDisputesByCourt","useTasks","courtConfig","currentTermId","tasks","fetching","error","openTasks","useOpenTasks","voidedDisputes","convertedTasks","map","task","dispute","convertedTasksPhasesKey","phase","join","incompleteTasks","filter","has","id","Ended","i","length","currentPhase","nextTransition","phaseEndTerm","AppealRuling","ConfirmAppeal","j","jurors","isVotingTaskOpen","push","number","state","createdAt","juror","disputeId","commitment","outcome","phaseType","dueDate","isAppealTaskOpen","round","appeal","opposedRuling","Number","draft","VotingPeriod","RevealVote"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\nimport { useCourtClock } from '../providers/CourtClock'\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useTasksSubscription } from './subscription-hooks'\n\nimport { getTermEndTime } from '../utils/court-utils'\nimport { getAdjudicationPhase } from '../utils/dispute-utils'\nimport {\n  convertToString,\n  getTaskActionString,\n  Phase as DisputePhase,\n} from '../types/dispute-status-types'\nimport { getVoidedDisputesByCourt } from '../flagged-disputes/voided-disputes'\n\nexport default function useTasks() {\n  const courtConfig = useCourtConfig()\n  const { currentTermId } = useCourtClock()\n  const { tasks, fetching, error } = useTasksSubscription()\n\n  const openTasks = useOpenTasks(tasks, currentTermId, courtConfig)\n\n  return { openTasks, fetching, error }\n}\n\nfunction useOpenTasks(tasks, currentTermId, courtConfig) {\n  const voidedDisputes = getVoidedDisputesByCourt()\n  const convertedTasks = useMemo(() => {\n    if (!tasks) {\n      return null\n    }\n    return tasks.map(task => ({\n      ...task,\n      ...getAdjudicationPhase(task.dispute, task, currentTermId, courtConfig),\n    }))\n  }, [courtConfig, currentTermId, tasks])\n\n  const convertedTasksPhasesKey = convertedTasks\n    ? convertedTasks.map(phase => convertToString(phase.phase)).join('')\n    : null\n\n  const incompleteTasks = useMemo(() => {\n    if (!convertedTasks) {\n      return null\n    }\n    return convertedTasks.filter(\n      task =>\n        !voidedDisputes.has(task.dispute.id) &&\n        task.phase !== DisputePhase.Ended\n    )\n  }, [convertedTasksPhasesKey, voidedDisputes]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return useMemo(() => {\n    if (!convertedTasks) {\n      return []\n    }\n    const openTasks = []\n\n    for (let i = 0; i < incompleteTasks.length; i++) {\n      const currentPhase = incompleteTasks[i].phase\n      const nextTransition = getTermEndTime(\n        incompleteTasks[i].phaseEndTerm,\n        courtConfig\n      )\n\n      if (\n        currentPhase !== DisputePhase.AppealRuling &&\n        currentPhase !== DisputePhase.ConfirmAppeal\n      ) {\n        for (let j = 0; j < incompleteTasks[i].jurors.length; j++) {\n          if (isVotingTaskOpen(incompleteTasks[i].jurors[j], currentPhase)) {\n            openTasks.push({\n              number: incompleteTasks[i].number,\n              state: incompleteTasks[i].state,\n              createdAt: incompleteTasks[i].createdAt,\n              juror: incompleteTasks[i].jurors[j].juror.id,\n              disputeId: incompleteTasks[i].dispute.id,\n              commitment: incompleteTasks[i].jurors[j].commitment,\n              outcome: incompleteTasks[i].jurors[j].outcome,\n              phase: getTaskActionString(currentPhase),\n              phaseType: currentPhase,\n              dueDate: nextTransition,\n            })\n          }\n        }\n      } else {\n        if (isAppealTaskOpen(incompleteTasks[i], currentPhase)) {\n          // We are in appeal or confirm and only need to generate a single task\n          // (rather than one per juror) if the task is still open\n          openTasks.push({\n            number: incompleteTasks[i].number,\n            state: incompleteTasks[i].state,\n            createdAt: incompleteTasks[i].createdAt,\n            juror: 'Anyone',\n            disputeId: incompleteTasks[i].dispute.id,\n            phase: getTaskActionString(currentPhase),\n            phaseType: currentPhase,\n            dueDate: nextTransition,\n          })\n        }\n      }\n    }\n    return openTasks\n    // Since we are using our own generated cache key we don't need to add the convertedTasks to the dependency list.\n  }, [convertedTasksPhasesKey, incompleteTasks]) // eslint-disable-line react-hooks/exhaustive-deps\n}\n\nfunction isAppealTaskOpen(round, currentPhase) {\n  if (currentPhase === DisputePhase.AppealRuling) {\n    return !round.appeal\n  }\n  if (currentPhase === DisputePhase.ConfirmAppeal) {\n    if (round?.appeal?.opposedRuling) {\n      return Number(round.appeal.opposedRuling) === 0\n    }\n\n    return true\n  }\n}\n\nfunction isVotingTaskOpen(draft, currentPhase) {\n  if (currentPhase === DisputePhase.VotingPeriod) {\n    return !draft.commitment\n  }\n  if (currentPhase === DisputePhase.RevealVote) {\n    if (draft.outcome || !draft.commitment) {\n      return false\n    }\n    return true\n  }\n}\n"]},"metadata":{},"sourceType":"module"}