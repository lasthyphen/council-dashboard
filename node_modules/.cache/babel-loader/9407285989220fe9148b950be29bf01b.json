{"ast":null,"code":"import _styled10 from \"styled-components\";\nimport _styled9 from \"styled-components\";\nimport _styled8 from \"styled-components\";\nimport _styled7 from \"styled-components\";\nimport _styled6 from \"styled-components\";\nimport _styled5 from \"styled-components\";\nimport _styled4 from \"styled-components\";\nimport _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeInfoContent.js\";\nimport React, { useEffect, useMemo, useState } from 'react';\nimport resolvePathname from 'resolve-pathname';\nimport { GU, Help, Link, textStyle, useTheme, useViewport } from '@aragon/ui';\nimport styled from 'styled-components';\nimport DisputeDetailDescription from './DisputeDetailDescription';\nimport DisputeOutcomeText from './DisputeOutcomeText';\nimport IdentityBadge from '../IdentityBadge';\nimport Loading from '../Loading';\nimport { useWallet } from '../../providers/Wallet';\nimport { describeDisputedAction } from '../../disputables';\nimport { IPFS_ENDPOINT } from '../../endpoints';\nimport { getIpfsCidFromUri, transformIPFSHash } from '../../lib/ipfs-utils';\nimport { addressesEqual, transformAddresses } from '../../lib/web3-utils';\nimport { Phase as DisputePhase } from '../../types/dispute-status-types';\n\nvar _StyledLink = styled(Link).withConfig({\n  displayName: \"DisputeInfoContent___StyledLink\",\n  componentId: \"sc-1l0ll96-0\"\n})([\"text-decoration:none;\"]);\n\nfunction DisputeInfoContent({\n  dispute,\n  isFinalRulingEnsured\n}) {\n  const {\n    below\n  } = useViewport();\n  const compactMode = below('medium');\n  const {\n    agreementText,\n    agreementUrl,\n    creator,\n    defendant,\n    description,\n    disputedAction,\n    disputedActionURL,\n    executionPath,\n    loading,\n    organization\n  } = useDisputeFields(dispute);\n  return React.createElement(React.Fragment, null, isFinalRulingEnsured && React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(FinalJuryOutcome, {\n    dispute: dispute,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })), React.createElement(Row, {\n    compactMode: compactMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(DisputedAction, {\n    actionText: disputedAction,\n    dispute: dispute,\n    executionPath: executionPath,\n    isFinalRulingEnsured: isFinalRulingEnsured,\n    loading: loading,\n    url: disputedActionURL,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }), organization && React.createElement(Field, {\n    label: \"Organization\",\n    value: organization,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  })), React.createElement(Row, {\n    compactMode: compactMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(_StyledField, {\n    label: \"Description\",\n    loading: loading,\n    value: description,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }), creator && React.createElement(Field, {\n    label: \"Plaintiff\",\n    value: creator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(Row, {\n    compactMode: compactMode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, agreementText ? React.createElement(Field, {\n    label: \"Link to agreement\",\n    value: React.createElement(_StyledLink, {\n      external: true,\n      href: agreementUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, agreementText),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), defendant && React.createElement(Field, {\n    label: \"Defendant\",\n    value: defendant,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  })));\n}\n\nvar _StyledH = styled(\"h2\").withConfig({\n  displayName: \"DisputeInfoContent___StyledH\",\n  componentId: \"sc-1l0ll96-1\"\n})([\"\", \";color:\", \";margin-bottom:\", \"px;\"], p => p._css, p => p._css2, p => p._css3);\n\nvar _StyledLink2 = styled(Link).withConfig({\n  displayName: \"DisputeInfoContent___StyledLink2\",\n  componentId: \"sc-1l0ll96-2\"\n})([\"text-decoration:none;\"]);\n\nvar _StyledLink3 = styled(Link).withConfig({\n  displayName: \"DisputeInfoContent___StyledLink3\",\n  componentId: \"sc-1l0ll96-3\"\n})([\"text-decoration:none;\"]);\n\nvar _StyledDiv = styled(\"div\").withConfig({\n  displayName: \"DisputeInfoContent___StyledDiv\",\n  componentId: \"sc-1l0ll96-4\"\n})([\"\", \";\"], p => p._css4);\n\nfunction Field({\n  label,\n  loading,\n  value,\n  ...props\n}) {\n  const theme = useTheme();\n  const wallet = useWallet();\n\n  if (!value && !loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(_StyledH, {\n    _css: textStyle('label2'),\n    _css2: theme.surfaceContentSecondary,\n    _css3: 1 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, label), (() => {\n    if (loading) {\n      return React.createElement(Loading, {\n        size: \"small\",\n        center: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    }\n\n    if (typeof value === 'string') {\n      const ipfsPath = getIpfsCidFromUri(value);\n\n      if (ipfsPath) {\n        const ipfsUrl = resolvePathname(ipfsPath, `${IPFS_ENDPOINT}/`);\n        return React.createElement(_StyledLink2, {\n          href: ipfsUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, \"Read more\");\n      }\n\n      return value.split('\\n').map((line, i) => React.createElement(React.Fragment, {\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, transformAddresses(line, (part, isAddress, index) => isAddress ? React.createElement(\"span\", {\n        title: part,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(IdentityBadge, {\n        connectedAccount: addressesEqual(part, wallet.account),\n        compact: true,\n        entity: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })) : React.createElement(React.Fragment, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, transformIPFSHash(part, (word, isIpfsHash, i) => {\n        if (isIpfsHash) {\n          const ipfsUrl = resolvePathname(word, `${IPFS_ENDPOINT}/`);\n          return React.createElement(_StyledLink3, {\n            href: ipfsUrl,\n            key: i,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 150\n            },\n            __self: this\n          }, word);\n        }\n\n        return React.createElement(\"span\", {\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, word);\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(_StyledDiv, {\n      _css4: textStyle('body2'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, value);\n  })());\n}\n\nvar _StyledField2 = styled(Field).withConfig({\n  displayName: \"DisputeInfoContent___StyledField2\",\n  componentId: \"sc-1l0ll96-5\"\n})([\"word-break:break-word;overflow-wrap:anywhere;\"]);\n\nvar _StyledField = styled(Field).withConfig({\n  displayName: \"DisputeInfoContent___StyledField\",\n  componentId: \"sc-1l0ll96-6\"\n})([\"word-break:break-word;overflow-wrap:anywhere;\"]);\n\nfunction FinalJuryOutcome({\n  dispute\n}) {\n  var _lastRound$vote, _lastRound$appeal;\n\n  const {\n    lastRoundId,\n    rounds\n  } = dispute;\n  const lastRound = rounds === null || rounds === void 0 ? void 0 : rounds[lastRoundId];\n  const voteWinningOutcome = lastRound === null || lastRound === void 0 ? void 0 : (_lastRound$vote = lastRound.vote) === null || _lastRound$vote === void 0 ? void 0 : _lastRound$vote.winningOutcome;\n  const appealedRuling = lastRound === null || lastRound === void 0 ? void 0 : (_lastRound$appeal = lastRound.appeal) === null || _lastRound$appeal === void 0 ? void 0 : _lastRound$appeal.appealedRuling;\n  return React.createElement(Field, {\n    label: \"Final Jury Outcome\",\n    value: React.createElement(DisputeOutcomeText, {\n      outcome: appealedRuling || voteWinningOutcome,\n      phase: appealedRuling ? DisputePhase.AppealRuling : DisputePhase.RevealVote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  });\n}\n\nvar _StyledLink4 = styled(Link).withConfig({\n  displayName: \"DisputeInfoContent___StyledLink4\",\n  componentId: \"sc-1l0ll96-7\"\n})([\"text-decoration:none;white-space:break-spaces;text-align:left;\"]);\n\nfunction DisputedAction({\n  actionText,\n  dispute,\n  executionPath,\n  isFinalRulingEnsured,\n  loading,\n  url\n}) {\n  const ActionTextComponent = useMemo(() => {\n    // Disputes may not include an embedded executable action\n    if (!actionText && !loading) {\n      return React.createElement(DisputedActionNA, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      });\n    }\n\n    const action = Array.isArray(executionPath) ? React.createElement(DisputeDetailDescription, {\n      path: executionPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }) : actionText;\n    return url ? React.createElement(_StyledLink4, {\n      external: true,\n      href: url,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, action) : action;\n  }, [actionText, executionPath, loading, url]);\n  return React.createElement(_StyledField2, {\n    label: \"Disputed Action\",\n    loading: loading,\n    value: ActionTextComponent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245\n    },\n    __self: this\n  });\n}\n\nfunction useDisputeFields(dispute) {\n  const {\n    agreementText,\n    agreementUrl,\n    defendant,\n    disputable,\n    organization,\n    plaintiff,\n    subject\n  } = dispute;\n  const creator = plaintiff || (subject === null || subject === void 0 ? void 0 : subject.id);\n  const [{\n    disputedActionRadspec,\n    disputedActionText,\n    disputedActionURL,\n    executionPath\n  }, loading] = useDisputedAction(dispute);\n  const {\n    disputedAction,\n    description\n  } = useMemo(() => {\n    // Disputes created through agreements\n    if (disputable) {\n      return {\n        disputedAction: disputedActionRadspec,\n        description: disputable.actionContext\n      };\n    } // Old disputes not created through agreements\n\n\n    return {\n      disputedAction: disputedActionText,\n      description: disputedActionRadspec\n    };\n  }, [disputable, disputedActionRadspec, disputedActionText]);\n  return {\n    agreementText,\n    agreementUrl,\n    creator,\n    defendant,\n    description,\n    disputable,\n    disputedAction,\n    disputedActionURL,\n    executionPath,\n    loading,\n    organization\n  };\n}\n\nvar _StyledDiv2 = styled(\"div\").withConfig({\n  displayName: \"DisputeInfoContent___StyledDiv2\",\n  componentId: \"sc-1l0ll96-8\"\n})([\"display:flex;align-items:center;\"]);\n\nvar _StyledSpan = styled(\"span\").withConfig({\n  displayName: \"DisputeInfoContent___StyledSpan\",\n  componentId: \"sc-1l0ll96-9\"\n})([\"margin-right:\", \"px;\"], p => p._css5);\n\nconst DisputedActionNA = () => {\n  return React.createElement(_StyledDiv2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }, React.createElement(_StyledSpan, {\n    _css5: 1 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319\n    },\n    __self: this\n  }, \"N/A\"), React.createElement(Help, {\n    hint: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, \"This dispute does not involve a binding action and is simply between the given context and arguments.\"));\n};\n\nfunction useDisputedAction({\n  id,\n  disputable,\n  disputedActionRadspec,\n  disputedActionText,\n  disputedActionURL,\n  subject\n}) {\n  const [disputedAction, setDisputedAction] = useState({\n    disputedActionRadspec,\n    disputedActionText,\n    disputedActionURL\n  });\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    // If the dispute was not created through an agreement, the disputed action\n    // descriptions should be already available (initialized above)\n    if (!disputable) {\n      return;\n    }\n\n    let cancelled = false;\n    setLoading(true);\n\n    const describeDispute = async () => {\n      // Get disputable long and short description\n      // as well as the URL where the disputed action is taking place\n      const disputedActionDescription = await describeDisputedAction(id, disputable.organization, disputable.address, disputable.disputableActionId, subject.id);\n\n      if (!cancelled) {\n        setLoading(false);\n        setDisputedAction(disputedActionDescription);\n      }\n    };\n\n    describeDispute();\n    return () => {\n      cancelled = true;\n    };\n  }, [disputable, id, subject]);\n  return [disputedAction, loading];\n}\n\nconst Row = styled.div.withConfig({\n  displayName: \"DisputeInfoContent__Row\",\n  componentId: \"sc-1l0ll96-10\"\n})([\"display:grid;\", \"\"], ({\n  compactMode\n}) => `\n    grid-gap: ${(compactMode ? 2.5 : 5) * GU}px;\n    margin-bottom: ${compactMode ? 0 : 2 * GU}px;\n    grid-template-columns: ${compactMode ? 'auto' : `1fr minmax(${25 * GU}px, auto)`};\n  `);\nexport default DisputeInfoContent;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeInfoContent.js"],"names":["React","useEffect","useMemo","useState","resolvePathname","GU","Help","Link","textStyle","useTheme","useViewport","styled","DisputeDetailDescription","DisputeOutcomeText","IdentityBadge","Loading","useWallet","describeDisputedAction","IPFS_ENDPOINT","getIpfsCidFromUri","transformIPFSHash","addressesEqual","transformAddresses","Phase","DisputePhase","DisputeInfoContent","dispute","isFinalRulingEnsured","below","compactMode","agreementText","agreementUrl","creator","defendant","description","disputedAction","disputedActionURL","executionPath","loading","organization","useDisputeFields","Field","label","value","props","theme","wallet","surfaceContentSecondary","ipfsPath","ipfsUrl","split","map","line","i","part","isAddress","index","account","word","isIpfsHash","FinalJuryOutcome","lastRoundId","rounds","lastRound","voteWinningOutcome","vote","winningOutcome","appealedRuling","appeal","AppealRuling","RevealVote","DisputedAction","actionText","url","ActionTextComponent","action","Array","isArray","disputable","plaintiff","subject","id","disputedActionRadspec","disputedActionText","useDisputedAction","actionContext","DisputedActionNA","setDisputedAction","setLoading","cancelled","describeDispute","disputedActionDescription","address","disputableActionId","Row","div"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport resolvePathname from 'resolve-pathname'\nimport { GU, Help, Link, textStyle, useTheme, useViewport } from '@aragon/ui'\nimport styled from 'styled-components'\nimport DisputeDetailDescription from './DisputeDetailDescription'\nimport DisputeOutcomeText from './DisputeOutcomeText'\nimport IdentityBadge from '../IdentityBadge'\nimport Loading from '../Loading'\nimport { useWallet } from '../../providers/Wallet'\n\nimport { describeDisputedAction } from '../../disputables'\nimport { IPFS_ENDPOINT } from '../../endpoints'\nimport { getIpfsCidFromUri, transformIPFSHash } from '../../lib/ipfs-utils'\nimport { addressesEqual, transformAddresses } from '../../lib/web3-utils'\nimport { Phase as DisputePhase } from '../../types/dispute-status-types'\n\nfunction DisputeInfoContent({ dispute, isFinalRulingEnsured }) {\n  const { below } = useViewport()\n  const compactMode = below('medium')\n\n  const {\n    agreementText,\n    agreementUrl,\n    creator,\n    defendant,\n    description,\n    disputedAction,\n    disputedActionURL,\n    executionPath,\n    loading,\n    organization,\n  } = useDisputeFields(dispute)\n\n  return (\n    <>\n      {isFinalRulingEnsured && (\n        <Row>\n          <FinalJuryOutcome dispute={dispute} />\n        </Row>\n      )}\n      <Row compactMode={compactMode}>\n        <DisputedAction\n          actionText={disputedAction}\n          dispute={dispute}\n          executionPath={executionPath}\n          isFinalRulingEnsured={isFinalRulingEnsured}\n          loading={loading}\n          url={disputedActionURL}\n        />\n\n        {organization && <Field label=\"Organization\" value={organization} />}\n      </Row>\n      <Row compactMode={compactMode}>\n        <Field\n          label=\"Description\"\n          loading={loading}\n          value={description}\n          css={`\n            word-break: break-word;\n            overflow-wrap: anywhere;\n          `}\n        />\n        {creator && <Field label=\"Plaintiff\" value={creator} />}\n      </Row>\n      <Row compactMode={compactMode}>\n        {agreementText ? (\n          <Field\n            label=\"Link to agreement\"\n            value={\n              <Link\n                external\n                href={agreementUrl}\n                css={`\n                  text-decoration: none;\n                `}\n              >\n                {agreementText}\n              </Link>\n            }\n          />\n        ) : (\n          <div />\n        )}\n        {defendant && <Field label=\"Defendant\" value={defendant} />}\n      </Row>\n    </>\n  )\n}\n\nfunction Field({ label, loading, value, ...props }) {\n  const theme = useTheme()\n  const wallet = useWallet()\n\n  if (!value && !loading) {\n    return <div />\n  }\n\n  return (\n    <div {...props}>\n      <h2\n        css={`\n          ${textStyle('label2')};\n          color: ${theme.surfaceContentSecondary};\n          margin-bottom: ${1 * GU}px;\n        `}\n      >\n        {label}\n      </h2>\n      {(() => {\n        if (loading) {\n          return <Loading size=\"small\" center={false} />\n        }\n\n        if (typeof value === 'string') {\n          const ipfsPath = getIpfsCidFromUri(value)\n          if (ipfsPath) {\n            const ipfsUrl = resolvePathname(ipfsPath, `${IPFS_ENDPOINT}/`)\n            return (\n              <Link\n                href={ipfsUrl}\n                css={`\n                  text-decoration: none;\n                `}\n              >\n                Read more\n              </Link>\n            )\n          }\n\n          return value.split('\\n').map((line, i) => (\n            <React.Fragment key={i}>\n              {transformAddresses(line, (part, isAddress, index) =>\n                isAddress ? (\n                  <span title={part} key={index}>\n                    <IdentityBadge\n                      connectedAccount={addressesEqual(part, wallet.account)}\n                      compact\n                      entity={part}\n                    />\n                  </span>\n                ) : (\n                  <React.Fragment key={index}>\n                    {transformIPFSHash(part, (word, isIpfsHash, i) => {\n                      if (isIpfsHash) {\n                        const ipfsUrl = resolvePathname(\n                          word,\n                          `${IPFS_ENDPOINT}/`\n                        )\n                        return (\n                          <Link\n                            href={ipfsUrl}\n                            key={i}\n                            css={`\n                              text-decoration: none;\n                            `}\n                          >\n                            {word}\n                          </Link>\n                        )\n                      }\n\n                      return <span key={i}>{word}</span>\n                    })}\n                  </React.Fragment>\n                )\n              )}\n              <br />\n            </React.Fragment>\n          ))\n        }\n\n        return (\n          <div\n            css={`\n              ${textStyle('body2')};\n            `}\n          >\n            {value}\n          </div>\n        )\n      })()}\n    </div>\n  )\n}\n\nfunction FinalJuryOutcome({ dispute }) {\n  const { lastRoundId, rounds } = dispute\n  const lastRound = rounds?.[lastRoundId]\n  const voteWinningOutcome = lastRound?.vote?.winningOutcome\n  const appealedRuling = lastRound?.appeal?.appealedRuling\n\n  return (\n    <Field\n      label=\"Final Jury Outcome\"\n      value={\n        <DisputeOutcomeText\n          outcome={appealedRuling || voteWinningOutcome}\n          phase={\n            appealedRuling ? DisputePhase.AppealRuling : DisputePhase.RevealVote\n          }\n        />\n      }\n    />\n  )\n}\n\nfunction DisputedAction({\n  actionText,\n  dispute,\n  executionPath,\n  isFinalRulingEnsured,\n  loading,\n  url,\n}) {\n  const ActionTextComponent = useMemo(() => {\n    // Disputes may not include an embedded executable action\n    if (!actionText && !loading) {\n      return <DisputedActionNA />\n    }\n\n    const action = Array.isArray(executionPath) ? (\n      <DisputeDetailDescription path={executionPath} />\n    ) : (\n      actionText\n    )\n\n    return url ? (\n      <Link\n        external\n        href={url}\n        css={`\n          text-decoration: none;\n          white-space: break-spaces;\n          text-align: left;\n        `}\n      >\n        {action}\n      </Link>\n    ) : (\n      action\n    )\n  }, [actionText, executionPath, loading, url])\n\n  return (\n    <Field\n      label=\"Disputed Action\"\n      loading={loading}\n      value={ActionTextComponent}\n      css={`\n        word-break: break-word;\n        overflow-wrap: anywhere;\n      `}\n    />\n  )\n}\n\nfunction useDisputeFields(dispute) {\n  const {\n    agreementText,\n    agreementUrl,\n    defendant,\n    disputable,\n    organization,\n    plaintiff,\n    subject,\n  } = dispute\n\n  const creator = plaintiff || subject?.id\n\n  const [\n    {\n      disputedActionRadspec,\n      disputedActionText,\n      disputedActionURL,\n      executionPath,\n    },\n    loading,\n  ] = useDisputedAction(dispute)\n\n  const { disputedAction, description } = useMemo(() => {\n    // Disputes created through agreements\n    if (disputable) {\n      return {\n        disputedAction: disputedActionRadspec,\n        description: disputable.actionContext,\n      }\n    }\n\n    // Old disputes not created through agreements\n    return {\n      disputedAction: disputedActionText,\n      description: disputedActionRadspec,\n    }\n  }, [disputable, disputedActionRadspec, disputedActionText])\n\n  return {\n    agreementText,\n    agreementUrl,\n    creator,\n    defendant,\n    description,\n    disputable,\n    disputedAction,\n    disputedActionURL,\n    executionPath,\n    loading,\n    organization,\n  }\n}\n\nconst DisputedActionNA = () => {\n  return (\n    <div\n      css={`\n        display: flex;\n        align-items: center;\n      `}\n    >\n      <span\n        css={`\n          margin-right: ${1 * GU}px;\n        `}\n      >\n        N/A\n      </span>\n      <Help hint=\"\">\n        This dispute does not involve a binding action and is simply between the\n        given context and arguments.\n      </Help>\n    </div>\n  )\n}\n\nfunction useDisputedAction({\n  id,\n  disputable,\n  disputedActionRadspec,\n  disputedActionText,\n  disputedActionURL,\n  subject,\n}) {\n  const [disputedAction, setDisputedAction] = useState({\n    disputedActionRadspec,\n    disputedActionText,\n    disputedActionURL,\n  })\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    // If the dispute was not created through an agreement, the disputed action\n    // descriptions should be already available (initialized above)\n    if (!disputable) {\n      return\n    }\n\n    let cancelled = false\n    setLoading(true)\n\n    const describeDispute = async () => {\n      // Get disputable long and short description\n      // as well as the URL where the disputed action is taking place\n      const disputedActionDescription = await describeDisputedAction(\n        id,\n        disputable.organization,\n        disputable.address,\n        disputable.disputableActionId,\n        subject.id\n      )\n\n      if (!cancelled) {\n        setLoading(false)\n        setDisputedAction(disputedActionDescription)\n      }\n    }\n\n    describeDispute()\n\n    return () => {\n      cancelled = true\n    }\n  }, [disputable, id, subject])\n\n  return [disputedAction, loading]\n}\n\nconst Row = styled.div`\n  display: grid;\n\n  ${({ compactMode }) => `\n    grid-gap: ${(compactMode ? 2.5 : 5) * GU}px;\n    margin-bottom: ${compactMode ? 0 : 2 * GU}px;\n    grid-template-columns: ${\n      compactMode ? 'auto' : `1fr minmax(${25 * GU}px, auto)`\n    };\n  `}\n`\n\nexport default DisputeInfoContent\n"]},"metadata":{},"sourceType":"module"}