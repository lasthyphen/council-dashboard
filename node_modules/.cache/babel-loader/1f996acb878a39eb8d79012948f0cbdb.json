{"ast":null,"code":"import _objectWithoutProperties from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _styled6 from\"styled-components\";import _styled5 from\"styled-components\";import _styled4 from\"styled-components\";import _styled3 from\"styled-components\";import _styled2 from\"styled-components\";import _styled from\"styled-components\";import React,{useCallback,useEffect,useState}from'react';import{Button,DropDown,Field,GU,Info,Link}from'@aragon/ui';import{getDisputeLastRound}from'../../../utils/dispute-utils';import{getAppealRulingOptions,appealOptionToString}from'../../../utils/crvoting-utils';import{formatUnits}from'../../../lib/math-utils';import{Phase as DisputePhase}from'../../../types/dispute-status-types';import{useAppealDeposits,useAppealFeeAllowance,useFeeBalanceOf}from'../../../hooks/useCourtContracts';import{useWallet}from'../../../providers/Wallet';import{useCourtConfig}from'../../../providers/CourtConfig';var _StyledDiv=_styled(\"div\").withConfig({displayName:\"AppealPanel___StyledDiv\",componentId:\"sc-17fn0xy-0\"})([\"display:flex;align-items:center;\"]);var _StyledImg=_styled(\"img\").withConfig({displayName:\"AppealPanel___StyledImg\",componentId:\"sc-17fn0xy-1\"})([\"margin-right:\",\"px;\"],function(p){return p._css;});var _StyledDropDown=_styled(DropDown).withConfig({displayName:\"AppealPanel___StyledDropDown\",componentId:\"sc-17fn0xy-2\"})([\"margin-bottom:\",\"px;\"],function(p){return p._css2;});var _StyledButton=_styled(Button).withConfig({displayName:\"AppealPanel___StyledButton\",componentId:\"sc-17fn0xy-3\"})([\"margin-bottom:\",\"px;\"],function(p){return p._css3;});var _StyledInfo=_styled(Info).withConfig({displayName:\"AppealPanel___StyledInfo\",componentId:\"sc-17fn0xy-4\"})([\"margin-bottom:\",\"px;\"],function(p){return p._css4;});var _StyledInfo2=_styled(Info).withConfig({displayName:\"AppealPanel___StyledInfo2\",componentId:\"sc-17fn0xy-5\"})([\"margin-bottom:\",\"px;\"],function(p){return p._css5;});function AppealPanel(_ref){var confirm=_ref.confirm,dispute=_ref.dispute,onAppeal=_ref.onAppeal,onApproveFeeDeposit=_ref.onApproveFeeDeposit,onDone=_ref.onDone;var _useCourtConfig=useCourtConfig(),feeToken=_useCourtConfig.feeToken;var _useWallet=useWallet(),connectedAccount=_useWallet.account;var _useState=useState({value:-1,error:null}),_useState2=_slicedToArray(_useState,2),selectedOutcome=_useState2[0],setSelectedOutcome=_useState2[1];// get connected account fee balance and  allowance\nvar _useFeeBalanceOf=useFeeBalanceOf(connectedAccount),_useFeeBalanceOf2=_slicedToArray(_useFeeBalanceOf,1),feeBalance=_useFeeBalanceOf2[0];var _useAppealFeeAllowanc=useAppealFeeAllowance(connectedAccount),_useAppealFeeAllowanc2=_slicedToArray(_useAppealFeeAllowanc,1),feeAllowance=_useAppealFeeAllowanc2[0];// get required appeal desposits (appeal and confirm appeal)\nvar _useAppealDeposits=useAppealDeposits(dispute.id,dispute.lastRoundId),_useAppealDeposits2=_slicedToArray(_useAppealDeposits,1),_useAppealDeposits2$=_slicedToArray(_useAppealDeposits2[0],2),appealDeposit=_useAppealDeposits2$[0],confirmAppealDeposit=_useAppealDeposits2$[1];// If users have the appeal panel open but the phase has already pass\n// don't let them continue and close it\nuseEffect(function(){if(confirm&&dispute.phase!==DisputePhase.ConfirmAppeal||!confirm&&dispute.phase!==DisputePhase.AppealRuling){// close the panel\nonDone();}},[confirm,dispute.phase,onDone]);// Reqiured deposits for appealing and confirming appeal are different\nvar requiredDeposit=confirm?confirmAppealDeposit:appealDeposit;var _getDisputeLastRound=getDisputeLastRound(dispute),vote=_getDisputeLastRound.vote,appeal=_getDisputeLastRound.appeal;var _ref2=vote||{},winningOutcome=_ref2.winningOutcome;// If appealing => options are the opossed of the wining outcome\n// If confirming appeal => options are the opossed of the appealed ruling\nvar appealOptions=getAppealRulingOptions(confirm?appeal.appealedRuling:winningOutcome);var handleOutcomeSelected=useCallback(function(newOutcome){setSelectedOutcome({value:newOutcome});},[]);// For submission\nvar handleAppeal=useCallback(function(event){event.preventDefault();var errored=validateForm(selectedOutcome.value);if(errored){return;}var appealOption=appealOptions[selectedOutcome.value];// Appeal ruling\nvar disputeId=dispute.id;var roundId=dispute.lastRoundId;var appealRuling=appealOption.outcome;onDone();onAppeal(disputeId,roundId,appealRuling,requiredDeposit,feeAllowance,confirm);},[appealOptions,confirm,dispute.id,dispute.lastRoundId,feeAllowance,onAppeal,onDone,requiredDeposit,selectedOutcome.value]);// check if connected account has the minimum required deposit to be able to appeal\nvar canAppeal=feeBalance.gte(requiredDeposit);// Form validation\nvar validateForm=function validateForm(outcome){if(outcome===-1){var error='You must select an outcome';setSelectedOutcome(function(outcome){return _objectSpread({},outcome,{error:error});});return true;}return false;};var actionLabel=confirm?'Confirm appeal':'Appeal ruling';var errorMessage=selectedOutcome.error;return React.createElement(\"form\",{onSubmit:handleAppeal},React.createElement(Field,{label:\"Required collateral\"},React.createElement(_StyledDiv,null,React.createElement(_StyledImg,{height:\"18\",src:\"https://chasing-coins.com/coin/logo/\".concat(feeToken.symbol),_css:0.5*GU}),React.createElement(\"span\",null,formatUnits(requiredDeposit),\" \",feeToken.symbol,' '))),confirm&&appeal&&React.createElement(Field,{label:\"Appeal outcome\"},appealOptionToString(appeal.appealedRuling)),React.createElement(Field,{label:confirm?'Appeal confirmation outcome':'Appeal outcome'},React.createElement(_StyledDropDown,{items:appealOptions.map(function(option){return option.description;}),placeholder:\"Select outcome\",selected:selectedOutcome.value,onChange:handleOutcomeSelected,wide:true,_css2:2*GU})),React.createElement(_StyledButton,{type:\"submit\",mode:\"strong\",wide:true,disabled:!canAppeal,_css3:2*GU},actionLabel),!canAppeal&&React.createElement(_StyledInfo,{mode:\"warning\",_css4:2*GU},\"You must hold \",formatUnits(requiredDeposit),\" \",feeToken.symbol,\" in order to appeal\"),errorMessage&&React.createElement(_StyledInfo2,{mode:\"error\",_css5:2*GU},errorMessage),React.createElement(Info,null,\"Please note that if the final ruling outcome is different from your selected appeal, the entire amount of your collateral could be slashed.\",' ',React.createElement(Link,{href:\"https://help.aragon.org/article/43-dispute-lifecycle#appeal\"},\"Learn more\"),\".\"));}var Panel=React.memo(function Panel(_ref3){var dispute=_ref3.dispute,confirm=_ref3.confirm,props=_objectWithoutProperties(_ref3,[\"dispute\",\"confirm\"]);var _getDisputeLastRound2=getDisputeLastRound(dispute),appeal=_getDisputeLastRound2.appeal;// Cases where a confirm appeal is done, the next round is created (with no appeal) and the panel hasn't closed yet\nif(confirm&&!appeal){return null;}return React.createElement(AppealPanel,Object.assign({dispute:dispute,confirm:confirm},props));});export default Panel;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/panels/AppealPanel.js"],"names":["React","useCallback","useEffect","useState","Button","DropDown","Field","GU","Info","Link","getDisputeLastRound","getAppealRulingOptions","appealOptionToString","formatUnits","Phase","DisputePhase","useAppealDeposits","useAppealFeeAllowance","useFeeBalanceOf","useWallet","useCourtConfig","AppealPanel","confirm","dispute","onAppeal","onApproveFeeDeposit","onDone","feeToken","connectedAccount","account","value","error","selectedOutcome","setSelectedOutcome","feeBalance","feeAllowance","id","lastRoundId","appealDeposit","confirmAppealDeposit","phase","ConfirmAppeal","AppealRuling","requiredDeposit","vote","appeal","winningOutcome","appealOptions","appealedRuling","handleOutcomeSelected","newOutcome","handleAppeal","event","preventDefault","errored","validateForm","appealOption","disputeId","roundId","appealRuling","outcome","canAppeal","gte","actionLabel","errorMessage","symbol","map","option","description","Panel","memo","props"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Button, DropDown, Field, GU, Info, Link } from '@aragon/ui'\nimport { getDisputeLastRound } from '../../../utils/dispute-utils'\nimport {\n  getAppealRulingOptions,\n  appealOptionToString,\n} from '../../../utils/crvoting-utils'\nimport { formatUnits } from '../../../lib/math-utils'\nimport { Phase as DisputePhase } from '../../../types/dispute-status-types'\nimport {\n  useAppealDeposits,\n  useAppealFeeAllowance,\n  useFeeBalanceOf,\n} from '../../../hooks/useCourtContracts'\nimport { useWallet } from '../../../providers/Wallet'\nimport { useCourtConfig } from '../../../providers/CourtConfig'\n\nfunction AppealPanel({\n  confirm,\n  dispute,\n  onAppeal,\n  onApproveFeeDeposit,\n  onDone,\n}) {\n  const { feeToken } = useCourtConfig()\n  const { account: connectedAccount } = useWallet()\n  const [selectedOutcome, setSelectedOutcome] = useState({\n    value: -1,\n    error: null,\n  })\n\n  // get connected account fee balance and  allowance\n  const [feeBalance] = useFeeBalanceOf(connectedAccount)\n  const [feeAllowance] = useAppealFeeAllowance(connectedAccount)\n\n  // get required appeal desposits (appeal and confirm appeal)\n  const [[appealDeposit, confirmAppealDeposit]] = useAppealDeposits(\n    dispute.id,\n    dispute.lastRoundId\n  )\n\n  // If users have the appeal panel open but the phase has already pass\n  // don't let them continue and close it\n  useEffect(() => {\n    if (\n      (confirm && dispute.phase !== DisputePhase.ConfirmAppeal) ||\n      (!confirm && dispute.phase !== DisputePhase.AppealRuling)\n    ) {\n      // close the panel\n      onDone()\n    }\n  }, [confirm, dispute.phase, onDone])\n\n  // Reqiured deposits for appealing and confirming appeal are different\n  const requiredDeposit = confirm ? confirmAppealDeposit : appealDeposit\n\n  const { vote, appeal } = getDisputeLastRound(dispute)\n  const { winningOutcome } = vote || {}\n\n  // If appealing => options are the opossed of the wining outcome\n  // If confirming appeal => options are the opossed of the appealed ruling\n  const appealOptions = getAppealRulingOptions(\n    confirm ? appeal.appealedRuling : winningOutcome\n  )\n\n  const handleOutcomeSelected = useCallback(newOutcome => {\n    setSelectedOutcome({ value: newOutcome })\n  }, [])\n\n  // For submission\n  const handleAppeal = useCallback(\n    event => {\n      event.preventDefault()\n\n      const errored = validateForm(selectedOutcome.value)\n      if (errored) {\n        return\n      }\n\n      const appealOption = appealOptions[selectedOutcome.value]\n\n      // Appeal ruling\n      const disputeId = dispute.id\n      const roundId = dispute.lastRoundId\n      const appealRuling = appealOption.outcome\n\n      onDone()\n      onAppeal(\n        disputeId,\n        roundId,\n        appealRuling,\n        requiredDeposit,\n        feeAllowance,\n        confirm\n      )\n    },\n    [\n      appealOptions,\n      confirm,\n      dispute.id,\n      dispute.lastRoundId,\n      feeAllowance,\n      onAppeal,\n      onDone,\n      requiredDeposit,\n      selectedOutcome.value,\n    ]\n  )\n\n  // check if connected account has the minimum required deposit to be able to appeal\n  const canAppeal = feeBalance.gte(requiredDeposit)\n\n  // Form validation\n  const validateForm = outcome => {\n    if (outcome === -1) {\n      const error = 'You must select an outcome'\n      setSelectedOutcome(outcome => ({ ...outcome, error }))\n      return true\n    }\n\n    return false\n  }\n\n  const actionLabel = confirm ? 'Confirm appeal' : 'Appeal ruling'\n  const errorMessage = selectedOutcome.error\n\n  return (\n    <form onSubmit={handleAppeal}>\n      <Field label=\"Required collateral\">\n        <div\n          css={`\n            display: flex;\n            align-items: center;\n          `}\n        >\n          <img\n            height=\"18\"\n            src={`https://chasing-coins.com/coin/logo/${feeToken.symbol}`}\n            css={`\n              margin-right: ${0.5 * GU}px;\n            `}\n          />\n          <span>\n            {formatUnits(requiredDeposit)} {feeToken.symbol}{' '}\n          </span>\n        </div>\n      </Field>\n      {confirm && appeal && (\n        <Field label=\"Appeal outcome\">\n          {appealOptionToString(appeal.appealedRuling)}\n        </Field>\n      )}\n      <Field label={confirm ? 'Appeal confirmation outcome' : 'Appeal outcome'}>\n        <DropDown\n          items={appealOptions.map(option => option.description)}\n          placeholder=\"Select outcome\"\n          selected={selectedOutcome.value}\n          onChange={handleOutcomeSelected}\n          wide\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n        />\n      </Field>\n      <Button\n        type=\"submit\"\n        mode=\"strong\"\n        wide\n        disabled={!canAppeal}\n        css={`\n          margin-bottom: ${2 * GU}px;\n        `}\n      >\n        {actionLabel}\n      </Button>\n      {!canAppeal && (\n        <Info\n          mode=\"warning\"\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n        >\n          You must hold {formatUnits(requiredDeposit)} {feeToken.symbol} in\n          order to appeal\n        </Info>\n      )}\n      {errorMessage && (\n        <Info\n          mode=\"error\"\n          css={`\n            margin-bottom: ${2 * GU}px;\n          `}\n        >\n          {errorMessage}\n        </Info>\n      )}\n      <Info>\n        Please note that if the final ruling outcome is different from your\n        selected appeal, the entire amount of your collateral could be slashed.{' '}\n        <Link href=\"https://help.aragon.org/article/43-dispute-lifecycle#appeal\">\n          Learn more\n        </Link>\n        .\n      </Info>\n    </form>\n  )\n}\n\nconst Panel = React.memo(function Panel({ dispute, confirm, ...props }) {\n  const { appeal } = getDisputeLastRound(dispute)\n\n  // Cases where a confirm appeal is done, the next round is created (with no appeal) and the panel hasn't closed yet\n  if (confirm && !appeal) {\n    return null\n  }\n\n  return <AppealPanel dispute={dispute} confirm={confirm} {...props} />\n})\n\nexport default Panel\n"]},"metadata":{},"sourceType":"module"}