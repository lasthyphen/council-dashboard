{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = void 0;\n\nvar _dayjs = _interopRequireDefault(require(\"dayjs\")),\n    _advancedFormat = _interopRequireDefault(require(\"dayjs/plugin/advancedFormat\"));\n\n_dayjs.default.extend(_advancedFormat.default);\n\nvar _default = function _default() {\n  return (\n    /*#__PURE__*/\n\n    /**\n    * Format a timestamp as a string\n    *\n    * @param {*} timestamp Unix timestamp in seconds\n    * @param {string} [format='MMM. Do YYYY'] Format for the date, defaults to a format like \"Jan. 1st 2000\"\n    *\n    * @return {Promise<radspec/evaluator/TypedValue>}\n    */\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(timestamp) {\n        var format,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                format = _args.length > 1 && _args[1] !== undefined ? _args[1] : \"MMM. Do YYYY\";\n                return _context.abrupt(\"return\", {\n                  type: \"string\",\n                  value: (0, _dayjs.default)(new Date(1e3 * +timestamp)).format(format)\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}