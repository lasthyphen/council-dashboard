{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { captureException } from '@sentry/browser';\nimport { useCourtConfig } from '../providers/CourtConfig';\nimport { useUniswapAnjPrice } from './useUniswapAnjPrice';\nimport { bigNum, formatUnits } from '../lib/math-utils';\nimport { getNetworkType } from '../lib/web3-utils';\nconst API_BASE = 'https://api.0x.org';\nconst UNISWAP_PRECISION = bigNum(10).pow(18);\nconst SELL_TOKEN = 'USDC';\nconst SELL_TOKEN_PRECISION = bigNum(10).pow(6);\n/**\n * Convert ANJ amount into USD price\n * @param {BigNum} amount The amount to convert to USD\n * @returns {String} The amount value in USD\n */\n\nexport function useANJAmountToUsd(amount) {\n  const {\n    anjToken\n  } = useCourtConfig();\n  const anjPrice = useUniswapAnjPrice();\n\n  if (!amount || anjPrice === 0) {\n    return '-';\n  }\n\n  return convertAmount(amount, anjPrice, anjToken.decimals, UNISWAP_PRECISION);\n}\n/**\n * Convert a token into a USD price\n *\n * @param {String} symbol The symbol of the token to convert from.\n * @param {Number} decimals The amount of decimals for the token.\n * @param {BigNumber} amount The amount to convert into USD.\n * @returns { Number } The balance value in USD\n */\n\nexport function useTokenAmountToUsd(symbol, decimals, amount) {\n  const [amountInUsd, setAmountInUsd] = useState('-');\n  useEffect(() => {\n    let cancelled = false;\n\n    if (getNetworkType() !== 'main') {\n      return;\n    }\n\n    const fetchPrice = async () => {\n      try {\n        var _prices$records;\n\n        const res = await fetch(`${API_BASE}/swap/v0/prices?sellToken=${SELL_TOKEN}`);\n        const prices = await res.json();\n\n        if (cancelled || !amount || !(prices === null || prices === void 0 ? void 0 : (_prices$records = prices.records) === null || _prices$records === void 0 ? void 0 : _prices$records.length)) {\n          return;\n        }\n\n        const priceRecord = prices.records.find(price => price.symbol === symbol);\n\n        if (!priceRecord) {\n          return;\n        }\n\n        const convertedAmount = convertAmount(amount, priceRecord.price, decimals, SELL_TOKEN_PRECISION);\n        setAmountInUsd(convertedAmount);\n      } catch (err) {\n        console.error(`Could not fetch ${symbol} USD price`, err);\n        captureException(err);\n      }\n    };\n\n    fetchPrice();\n    return () => {\n      cancelled = true;\n    };\n  }, [amount, decimals, symbol]);\n  return amountInUsd;\n}\n\nfunction convertAmount(amount, price, decimals, precision) {\n  const rate = (price * precision).toFixed();\n  return formatUnits(amount.mul(rate.toString()).div(precision), {\n    digits: decimals\n  });\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useTokenAmountToUsd.js"],"names":["useEffect","useState","captureException","useCourtConfig","useUniswapAnjPrice","bigNum","formatUnits","getNetworkType","API_BASE","UNISWAP_PRECISION","pow","SELL_TOKEN","SELL_TOKEN_PRECISION","useANJAmountToUsd","amount","anjToken","anjPrice","convertAmount","decimals","useTokenAmountToUsd","symbol","amountInUsd","setAmountInUsd","cancelled","fetchPrice","res","fetch","prices","json","records","length","priceRecord","find","price","convertedAmount","err","console","error","precision","rate","toFixed","mul","toString","div","digits"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { captureException } from '@sentry/browser'\n\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useUniswapAnjPrice } from './useUniswapAnjPrice'\nimport { bigNum, formatUnits } from '../lib/math-utils'\nimport { getNetworkType } from '../lib/web3-utils'\n\nconst API_BASE = 'https://api.0x.org'\nconst UNISWAP_PRECISION = bigNum(10).pow(18)\n\nconst SELL_TOKEN = 'USDC'\nconst SELL_TOKEN_PRECISION = bigNum(10).pow(6)\n\n/**\n * Convert ANJ amount into USD price\n * @param {BigNum} amount The amount to convert to USD\n * @returns {String} The amount value in USD\n */\nexport function useANJAmountToUsd(amount) {\n  const { anjToken } = useCourtConfig()\n  const anjPrice = useUniswapAnjPrice()\n\n  if (!amount || anjPrice === 0) {\n    return '-'\n  }\n\n  return convertAmount(amount, anjPrice, anjToken.decimals, UNISWAP_PRECISION)\n}\n\n/**\n * Convert a token into a USD price\n *\n * @param {String} symbol The symbol of the token to convert from.\n * @param {Number} decimals The amount of decimals for the token.\n * @param {BigNumber} amount The amount to convert into USD.\n * @returns { Number } The balance value in USD\n */\nexport function useTokenAmountToUsd(symbol, decimals, amount) {\n  const [amountInUsd, setAmountInUsd] = useState('-')\n  useEffect(() => {\n    let cancelled = false\n\n    if (getNetworkType() !== 'main') {\n      return\n    }\n\n    const fetchPrice = async () => {\n      try {\n        const res = await fetch(\n          `${API_BASE}/swap/v0/prices?sellToken=${SELL_TOKEN}`\n        )\n        const prices = await res.json()\n\n        if (cancelled || !amount || !prices?.records?.length) {\n          return\n        }\n\n        const priceRecord = prices.records.find(\n          price => price.symbol === symbol\n        )\n        if (!priceRecord) {\n          return\n        }\n\n        const convertedAmount = convertAmount(\n          amount,\n          priceRecord.price,\n          decimals,\n          SELL_TOKEN_PRECISION\n        )\n        setAmountInUsd(convertedAmount)\n      } catch (err) {\n        console.error(`Could not fetch ${symbol} USD price`, err)\n        captureException(err)\n      }\n    }\n\n    fetchPrice()\n\n    return () => {\n      cancelled = true\n    }\n  }, [amount, decimals, symbol])\n\n  return amountInUsd\n}\n\nfunction convertAmount(amount, price, decimals, precision) {\n  const rate = (price * precision).toFixed()\n\n  return formatUnits(amount.mul(rate.toString()).div(precision), {\n    digits: decimals,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}