{"ast":null,"code":"// TODO: Remove these linting exceptions after implementation.\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-function */\n\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\nclass ConnectorEthereum {\n  constructor(config) {\n    this.name = 'ethereum';\n    this.config = config;\n    this.network = config.network;\n  }\n\n  async connect(connection) {\n    this.connection = connection;\n  }\n\n  async disconnect() {\n    delete this.connection;\n  }\n\n  async permissionsForOrg() {\n    return new Promise(resolve => {\n      resolve([]);\n    });\n  }\n\n  onPermissionsForOrg(organization, callback) {\n    return {\n      unsubscribe: () => {}\n    };\n  }\n\n  appForOrg(organization, filters) {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }\n\n  appsForOrg(organization, filters) {\n    return new Promise(resolve => {\n      resolve([]);\n    });\n  }\n\n  onAppForOrg(organization, filters, callback) {\n    return {\n      unsubscribe: () => {}\n    };\n  }\n\n  onAppsForOrg(organization, filters, callback) {\n    return {\n      unsubscribe: () => {}\n    };\n  }\n\n  repoForApp(organization, appAddress) {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }\n\n  appByAddress(organization, appAddress) {\n    return new Promise(resolve => {\n      resolve();\n    });\n  }\n\n  rolesForAddress(organization, appAddress) {\n    return new Promise(resolve => {\n      resolve([]);\n    });\n  }\n\n}\n\nexport default ConnectorEthereum;","map":null,"metadata":{},"sourceType":"module"}