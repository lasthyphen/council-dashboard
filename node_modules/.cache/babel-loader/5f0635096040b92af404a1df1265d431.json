{"ast":null,"code":"// const EthQuery = require('ethjs-query')\nconst EthQuery = require('eth-query');\n\nconst EventEmitter = require('events');\n\nconst pify = require('pify');\n\nconst hexUtils = require('./hexUtils');\n\nconst incrementHexNumber = hexUtils.incrementHexNumber;\nconst sec = 1000;\nconst min = 60 * sec;\n\nclass RpcBlockTracker extends EventEmitter {\n  constructor(opts = {}) {\n    super();\n    if (!opts.provider) throw new Error('RpcBlockTracker - no provider specified.');\n    this._provider = opts.provider;\n    this._query = new EthQuery(opts.provider); // config\n\n    this._pollingInterval = opts.pollingInterval || 4 * sec;\n    this._syncingTimeout = opts.syncingTimeout || 1 * min; // state\n\n    this._trackingBlock = null;\n    this._trackingBlockTimestamp = null;\n    this._currentBlock = null;\n    this._isRunning = false; // bind methods for cleaner syntax later\n\n    this._performSync = this._performSync.bind(this);\n    this._handleNewBlockNotification = this._handleNewBlockNotification.bind(this);\n  }\n\n  getTrackingBlock() {\n    return this._trackingBlock;\n  }\n\n  getCurrentBlock() {\n    return this._currentBlock;\n  }\n\n  async awaitCurrentBlock() {\n    // return if available\n    if (this._currentBlock) return this._currentBlock; // wait for \"sync\" event\n\n    await new Promise(resolve => this.once('latest', resolve)); // return newly set current block\n\n    return this._currentBlock;\n  }\n\n  async start(opts = {}) {\n    // abort if already started\n    if (this._isRunning) return;\n    this._isRunning = true; // if this._currentBlock\n\n    if (opts.fromBlock) {\n      // use specified start point\n      await this._setTrackingBlock((await this._fetchBlockByNumber(opts.fromBlock)));\n    } else {\n      // or query for latest\n      await this._setTrackingBlock((await this._fetchLatestBlock()));\n    }\n\n    if (this._provider.on) {\n      await this._initSubscription();\n    } else {\n      this._performSync().catch(err => {\n        if (err) console.error(err);\n      });\n    }\n  }\n\n  async stop() {\n    this._isRunning = false;\n\n    if (this._provider.on) {\n      await this._removeSubscription();\n    }\n  } //\n  // private\n  //\n\n\n  async _setTrackingBlock(newBlock) {\n    if (this._trackingBlock && this._trackingBlock.hash === newBlock.hash) return; // check for large timestamp lapse\n\n    const previous = this._trackingBlockTimestamp;\n    const now = Date.now(); // check for desynchronization (computer sleep or no internet)\n\n    if (previous && now - previous > this._syncingTimeout) {\n      this._trackingBlockTimestamp = null;\n      await this._warpToLatest();\n    } else {\n      this._trackingBlock = newBlock;\n      this._trackingBlockTimestamp = now;\n      this.emit('block', newBlock);\n    }\n  }\n\n  async _setCurrentBlock(newBlock) {\n    if (this._currentBlock && this._currentBlock.hash === newBlock.hash) return;\n    const oldBlock = this._currentBlock;\n    this._currentBlock = newBlock;\n    this.emit('latest', newBlock);\n    this.emit('sync', {\n      newBlock,\n      oldBlock\n    });\n  }\n\n  async _warpToLatest() {\n    // set latest as tracking block\n    await this._setTrackingBlock((await this._fetchLatestBlock()));\n  }\n\n  async _pollForNextBlock() {\n    setTimeout(() => this._performSync(), this._pollingInterval);\n  }\n\n  async _performSync() {\n    if (!this._isRunning) return;\n    const trackingBlock = this.getTrackingBlock();\n    if (!trackingBlock) throw new Error('RpcBlockTracker - tracking block is missing');\n    const nextNumber = incrementHexNumber(trackingBlock.number);\n\n    try {\n      const newBlock = await this._fetchBlockByNumber(nextNumber);\n\n      if (newBlock) {\n        // set as new tracking block\n        await this._setTrackingBlock(newBlock); // ask for next block\n\n        this._performSync();\n      } else {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock); // setup poll for next block\n\n        this._pollForNextBlock();\n      }\n    } catch (err) {\n      // hotfix for https://github.com/ethereumjs/testrpc/issues/290\n      if (err.message.includes('index out of range') || err.message.includes(\"Couldn't find block by reference\")) {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock); // setup poll for next block\n\n        this._pollForNextBlock();\n      } else {\n        console.error(err);\n\n        this._pollForNextBlock();\n      }\n    }\n  }\n\n  async _handleNewBlockNotification(err, notification) {\n    if (notification.id != this._subscriptionId) return; // this notification isn't for us\n\n    if (err) {\n      this.emit('error', err);\n      await this._removeSubscription();\n    }\n\n    await this._setTrackingBlock((await this._fetchBlockByNumber(notification.result.number)));\n  }\n\n  async _initSubscription() {\n    this._provider.on('data', this._handleNewBlockNotification);\n\n    let result = await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_subscribe',\n      params: ['newHeads']\n    });\n    this._subscriptionId = result.result;\n  }\n\n  async _removeSubscription() {\n    if (!this._subscriptionId) throw new Error(\"Not subscribed.\");\n\n    this._provider.removeListener('data', this._handleNewBlockNotification);\n\n    await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_unsubscribe',\n      params: [this._subscriptionId]\n    });\n    delete this._subscriptionId;\n  }\n\n  _fetchLatestBlock() {\n    return pify(this._query.getBlockByNumber).call(this._query, 'latest', true);\n  }\n\n  _fetchBlockByNumber(hexNumber) {\n    const cleanHex = hexUtils.formatHex(hexNumber);\n    return pify(this._query.getBlockByNumber).call(this._query, cleanHex, true);\n  }\n\n}\n\nmodule.exports = RpcBlockTracker; // ├─ difficulty: 0x2892ddca\n// ├─ extraData: 0xd983010507846765746887676f312e372e348777696e646f7773\n// ├─ gasLimit: 0x47e7c4\n// ├─ gasUsed: 0x6384\n// ├─ hash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n// ├─ logsBloom: 0xn// ├─ miner: 0x01711853335f857442ef6f349b2467c531731318\n// ├─ mixHash: 0xf0d9bec999600eec92e8e4da8fc1182e357468c9ed2f849aa17e0e900412b352\n// ├─ nonce: 0xd556d5a5504198e4\n// ├─ number: 0x72ac8\n// ├─ parentHash: 0xf5239c3ce1085194521435a5052494c02bbb1002b019684dcf368490ea6208e5\n// ├─ receiptsRoot: 0x78c6f8236094b392bcc43b47b0dc1ce93ecd2875bfb5e4e4c3431e5af698ff99\n// ├─ sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n// ├─ size: 0x2ad\n// ├─ stateRoot: 0x0554f145c481df2fa02ecd2da17071672740c3aa948c896f1465e6772f741ac6\n// ├─ timestamp: 0x58955844\n// ├─ totalDifficulty: 0x751d0dfa03c1\n// ├─ transactions\n// │  └─ 0\n// │     ├─ blockHash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n// │     ├─ blockNumber: 0x72ac8\n// │     ├─ from: 0x201354729f8d0f8b64e9a0c353c672c6a66b3857\n// │     ├─ gas: 0x15f90\n// │     ├─ gasPrice: 0x4a817c800\n// │     ├─ hash: 0xd5a15d7c2449150db4f74f42a6ca0702150a24c46c5b406a7e1b3e44908ef44d\n// │     ├─ input: 0xe1fa8e849bc10d87fb03c6b0603b05a3e29043c7e0b7c927119576a4bec457e96c7d7cde\n// │     ├─ nonce: 0x323e\n// │     ├─ to: 0xd10e3be2bc8f959bc8c41cf65f60de721cf89adf\n// │     ├─ transactionIndex: 0x0\n// │     ├─ value: 0x0\n// │     ├─ v: 0x29\n// │     ├─ r: 0xf35f8ab241e6bb3ccaffd21b268dbfc7fcb5df1c1fb83ee5306207e4a1a3e954\n// │     └─ s: 0x1610cdac2782c91065fd43584cd8974f7f3b4e6d46a2aafe7b101788285bf3f2\n// ├─ transactionsRoot: 0xb090c32d840dec1e9752719f21bbae4a73e58333aecb89bc3b8ed559fb2712a3\n// └─ uncles","map":null,"metadata":{},"sourceType":"script"}