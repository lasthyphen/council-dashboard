{"ast":null,"code":"import isIPFS from 'is-ipfs';\nimport { defaultIpfsGateway } from '../endpoints';\nconst SPLIT_IPFS_REGEX = /(Qm[a-zA-Z0-9]{44})/;\nconst TEST_IPFS_REGEX = /(Qm[a-zA-Z0-9]{44})/;\nconst REQUEST_TIMEOUT = 60000;\nexport const ipfsGet = async cid => {\n  const endpoint = `${defaultIpfsGateway}/${cid}`;\n\n  try {\n    const result = await fetch(endpoint, {\n      timeout: REQUEST_TIMEOUT\n    });\n    const data = await result.text();\n    return {\n      data,\n      error: !result.ok\n    };\n  } catch (err) {\n    console.error(`Error requesting data from IPFS for ${endpoint}`, err);\n    return {\n      error: true\n    };\n  }\n};\nexport const getIpfsCidFromUri = string => {\n  const ipfsCid = string.replace(/^ipfs:/, '');\n\n  if (isIPFS.cid(ipfsCid) || isIPFS.cidPath(ipfsCid)) {\n    return ipfsCid;\n  }\n\n  return '';\n};\nexport function transformIPFSHash(str, callback) {\n  return str.split(SPLIT_IPFS_REGEX).map((part, index) => callback(part, TEST_IPFS_REGEX.test(part), index));\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/lib/ipfs-utils.js"],"names":["isIPFS","defaultIpfsGateway","SPLIT_IPFS_REGEX","TEST_IPFS_REGEX","REQUEST_TIMEOUT","ipfsGet","cid","endpoint","result","fetch","timeout","data","text","error","ok","err","console","getIpfsCidFromUri","string","ipfsCid","replace","cidPath","transformIPFSHash","str","callback","split","map","part","index","test"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,SAAnB;AACA,SAASC,kBAAT,QAAmC,cAAnC;AAEA,MAAMC,gBAAgB,GAAG,qBAAzB;AACA,MAAMC,eAAe,GAAG,qBAAxB;AAEA,MAAMC,eAAe,GAAG,KAAxB;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAMC,GAAN,IAAa;AAClC,QAAMC,QAAQ,GAAI,GAAEN,kBAAmB,IAAGK,GAAI,EAA9C;;AACA,MAAI;AACF,UAAME,MAAM,GAAG,MAAMC,KAAK,CAACF,QAAD,EAAW;AAAEG,MAAAA,OAAO,EAAEN;AAAX,KAAX,CAA1B;AACA,UAAMO,IAAI,GAAG,MAAMH,MAAM,CAACI,IAAP,EAAnB;AAEA,WAAO;AAAED,MAAAA,IAAF;AAAQE,MAAAA,KAAK,EAAE,CAACL,MAAM,CAACM;AAAvB,KAAP;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACH,KAAR,CAAe,uCAAsCN,QAAS,EAA9D,EAAiEQ,GAAjE;AACA,WAAO;AAAEF,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD;AACF,CAXM;AAaP,OAAO,MAAMI,iBAAiB,GAAGC,MAAM,IAAI;AACzC,QAAMC,OAAO,GAAGD,MAAM,CAACE,OAAP,CAAe,QAAf,EAAyB,EAAzB,CAAhB;;AAEA,MAAIpB,MAAM,CAACM,GAAP,CAAWa,OAAX,KAAuBnB,MAAM,CAACqB,OAAP,CAAeF,OAAf,CAA3B,EAAoD;AAClD,WAAOA,OAAP;AACD;;AACD,SAAO,EAAP;AACD,CAPM;AASP,OAAO,SAASG,iBAAT,CAA2BC,GAA3B,EAAgCC,QAAhC,EAA0C;AAC/C,SAAOD,GAAG,CACPE,KADI,CACEvB,gBADF,EAEJwB,GAFI,CAEA,CAACC,IAAD,EAAOC,KAAP,KAAiBJ,QAAQ,CAACG,IAAD,EAAOxB,eAAe,CAAC0B,IAAhB,CAAqBF,IAArB,CAAP,EAAmCC,KAAnC,CAFzB,CAAP;AAGD","sourcesContent":["import isIPFS from 'is-ipfs'\nimport { defaultIpfsGateway } from '../endpoints'\n\nconst SPLIT_IPFS_REGEX = /(Qm[a-zA-Z0-9]{44})/\nconst TEST_IPFS_REGEX = /(Qm[a-zA-Z0-9]{44})/\n\nconst REQUEST_TIMEOUT = 60000\n\nexport const ipfsGet = async cid => {\n  const endpoint = `${defaultIpfsGateway}/${cid}`\n  try {\n    const result = await fetch(endpoint, { timeout: REQUEST_TIMEOUT })\n    const data = await result.text()\n\n    return { data, error: !result.ok }\n  } catch (err) {\n    console.error(`Error requesting data from IPFS for ${endpoint}`, err)\n    return { error: true }\n  }\n}\n\nexport const getIpfsCidFromUri = string => {\n  const ipfsCid = string.replace(/^ipfs:/, '')\n\n  if (isIPFS.cid(ipfsCid) || isIPFS.cidPath(ipfsCid)) {\n    return ipfsCid\n  }\n  return ''\n}\n\nexport function transformIPFSHash(str, callback) {\n  return str\n    .split(SPLIT_IPFS_REGEX)\n    .map((part, index) => callback(part, TEST_IPFS_REGEX.test(part), index))\n}\n"]},"metadata":{},"sourceType":"module"}