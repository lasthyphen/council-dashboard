{"ast":null,"code":"import _styled11 from\"styled-components\";import _styled10 from\"styled-components\";import _styled9 from\"styled-components\";import _styled8 from\"styled-components\";import _styled7 from\"styled-components\";import _styled6 from\"styled-components\";import _styled5 from\"styled-components\";import _styled4 from\"styled-components\";import _styled3 from\"styled-components\";import _styled2 from\"styled-components\";import _styled from\"styled-components\";import React from'react';import{Button,ButtonBase,GU,IconCheck,IconCopy,RADIUS,textStyle,useTheme}from'@aragon/ui';import IdentityBadge from'../IdentityBadge';import{getProviderFromUseWalletId}from'../../ethereum-providers';import{useCopyToClipboard}from'../../hooks/useCopyToClipboard';var _StyledDiv=_styled(\"div\").withConfig({displayName:\"ScreenConnected___StyledDiv\",componentId:\"sur7ff-0\"})([\"padding:\",\"px;\"],function(p){return p._css;});var _StyledDiv2=_styled(\"div\").withConfig({displayName:\"ScreenConnected___StyledDiv2\",componentId:\"sur7ff-1\"})([\"display:flex;align-items:center;width:100%;\"]);var _StyledDiv3=_styled(\"div\").withConfig({displayName:\"ScreenConnected___StyledDiv3\",componentId:\"sur7ff-2\"})([\"display:flex;align-items:center;margin-right:\",\"px;\"],function(p){return p._css2;});var _StyledImg=_styled(\"img\").withConfig({displayName:\"ScreenConnected___StyledImg\",componentId:\"sur7ff-3\"})([\"width:\",\"px;height:\",\"px;margin-right:\",\"px;transform:translateY(-2px);\"],function(p){return p._css3;},function(p){return p._css4;},function(p){return p._css5;});var _StyledDiv4=_styled(\"div\").withConfig({displayName:\"ScreenConnected___StyledDiv4\",componentId:\"sur7ff-4\"})([\"display:flex;align-items:center;justify-content:flex-end;width:100%;\"]);var _StyledButtonBase=_styled(ButtonBase).withConfig({displayName:\"ScreenConnected___StyledButtonBase\",componentId:\"sur7ff-5\"})([\"display:flex;align-items:center;justify-self:flex-end;padding:\",\"px;&:active{background:\",\";}\"],function(p){return p._css6;},function(p){return p._css7;});var _StyledIdentityBadge=_styled(IdentityBadge).withConfig({displayName:\"ScreenConnected___StyledIdentityBadge\",componentId:\"sur7ff-6\"})([\"cursor:pointer\"]);var _StyledIconCopy=_styled(IconCopy).withConfig({displayName:\"ScreenConnected___StyledIconCopy\",componentId:\"sur7ff-7\"})([\"color:\",\";\"],function(p){return p._css8;});var _StyledDiv5=_styled(\"div\").withConfig({displayName:\"ScreenConnected___StyledDiv5\",componentId:\"sur7ff-8\"})([\"display:flex;align-items:center;margin-top:\",\"px;color:\",\";\",\";\"],function(p){return p._css9;},function(p){return p._css10;},function(p){return p._css11;});var _StyledSpan=_styled(\"span\").withConfig({displayName:\"ScreenConnected___StyledSpan\",componentId:\"sur7ff-9\"})([\"margin-left:\",\"px;\"],function(p){return p._css12;});var _StyledButton=_styled(Button).withConfig({displayName:\"ScreenConnected___StyledButton\",componentId:\"sur7ff-10\"})([\"margin-top:\",\"px;\"],function(p){return p._css13;});function AccountScreenConnected(_ref){var wallet=_ref.wallet;var theme=useTheme();var copy=useCopyToClipboard();var walletNetworkName=wallet.networkName;var providerInfo=getProviderFromUseWalletId(wallet.connector);return React.createElement(_StyledDiv,{_css:2*GU},React.createElement(_StyledDiv2,null,React.createElement(_StyledDiv3,{_css2:3*GU},React.createElement(_StyledImg,{src:providerInfo.image,alt:\"\",_css3:2.5*GU,_css4:2.5*GU,_css5:0.5*GU}),React.createElement(\"span\",null,providerInfo.id==='unknown'?'Wallet':providerInfo.name)),React.createElement(_StyledDiv4,null,React.createElement(_StyledButtonBase,{onClick:function onClick(){return copy(wallet.account);},focusRingRadius:RADIUS,_css6:0.5*GU,_css7:theme.surfacePressed},React.createElement(_StyledIdentityBadge,{entity:wallet.account,compact:true,badgeOnly:true}),React.createElement(_StyledIconCopy,{_css8:theme.hint})))),React.createElement(_StyledDiv5,{_css9:1*GU,_css10:theme.positive,_css11:textStyle('label2')},React.createElement(IconCheck,{size:\"small\"}),React.createElement(_StyledSpan,{_css12:0.5*GU},\"Connected to Ethereum \".concat(walletNetworkName,\" Network\"))),React.createElement(_StyledButton,{onClick:function onClick(){return wallet.reset();},wide:true,_css13:1*GU},\"Disconnect wallet\"));}export default AccountScreenConnected;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Account/ScreenConnected.js"],"names":["React","Button","ButtonBase","GU","IconCheck","IconCopy","RADIUS","textStyle","useTheme","IdentityBadge","getProviderFromUseWalletId","useCopyToClipboard","AccountScreenConnected","wallet","theme","copy","walletNetworkName","networkName","providerInfo","connector","image","id","name","account","surfacePressed","hint","positive","reset"],"mappings":"ybAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,MADF,CAEEC,UAFF,CAGEC,EAHF,CAIEC,SAJF,CAKEC,QALF,CAMEC,MANF,CAOEC,SAPF,CAQEC,QARF,KASO,YATP,CAUA,MAAOC,CAAAA,aAAP,KAA0B,kBAA1B,CACA,OAASC,0BAAT,KAA2C,0BAA3C,CACA,OAASC,kBAAT,KAAmC,gCAAnC,C,0oEAEA,QAASC,CAAAA,sBAAT,MAA4C,IAAVC,CAAAA,MAAU,MAAVA,MAAU,CAC1C,GAAMC,CAAAA,KAAK,CAAGN,QAAQ,EAAtB,CACA,GAAMO,CAAAA,IAAI,CAAGJ,kBAAkB,EAA/B,CAEA,GAAMK,CAAAA,iBAAiB,CAAGH,MAAM,CAACI,WAAjC,CAEA,GAAMC,CAAAA,YAAY,CAAGR,0BAA0B,CAACG,MAAM,CAACM,SAAR,CAA/C,CAEA,MACE,sCAEe,EAAIhB,EAFnB,EAKE,qCAOE,uCAIoB,EAAIA,EAJxB,EAOE,gCACE,GAAG,CAAEe,YAAY,CAACE,KADpB,CAEE,GAAG,CAAC,EAFN,OAIa,IAAMjB,EAJnB,OAKc,IAAMA,EALpB,OAMoB,IAAMA,EAN1B,EAPF,CAiBE,gCACGe,YAAY,CAACG,EAAb,GAAoB,SAApB,CAAgC,QAAhC,CAA2CH,YAAY,CAACI,IAD3D,CAjBF,CAPF,CA4BE,qCAQE,uCACE,OAAO,CAAE,yBAAMP,CAAAA,IAAI,CAACF,MAAM,CAACU,OAAR,CAAV,EADX,CAEE,eAAe,CAAEjB,MAFnB,OAOe,IAAMH,EAPrB,OASoBW,KAAK,CAACU,cAT1B,EAaE,0CACE,MAAM,CAAEX,MAAM,CAACU,OADjB,CAEE,OAAO,KAFT,CAGE,SAAS,KAHX,EAbF,CAmBE,2CAEaT,KAAK,CAACW,IAFnB,EAnBF,CARF,CA5BF,CALF,CAoEE,uCAIkB,EAAItB,EAJtB,QAKaW,KAAK,CAACY,QALnB,QAMMnB,SAAS,CAAC,QAAD,CANf,EASE,oBAAC,SAAD,EAAW,IAAI,CAAC,OAAhB,EATF,CAUE,wCAEmB,IAAMJ,EAFzB,kCAK4Ba,iBAL5B,aAVF,CApEF,CAuFE,mCACE,OAAO,CAAE,yBAAMH,CAAAA,MAAM,CAACc,KAAP,EAAN,EADX,CAEE,IAAI,KAFN,QAIkB,EAAIxB,EAJtB,sBAvFF,CADF,CAmGD,CAED,cAAeS,CAAAA,sBAAf","sourcesContent":["import React from 'react'\nimport {\n  Button,\n  ButtonBase,\n  GU,\n  IconCheck,\n  IconCopy,\n  RADIUS,\n  textStyle,\n  useTheme,\n} from '@aragon/ui'\nimport IdentityBadge from '../IdentityBadge'\nimport { getProviderFromUseWalletId } from '../../ethereum-providers'\nimport { useCopyToClipboard } from '../../hooks/useCopyToClipboard'\n\nfunction AccountScreenConnected({ wallet }) {\n  const theme = useTheme()\n  const copy = useCopyToClipboard()\n\n  const walletNetworkName = wallet.networkName\n\n  const providerInfo = getProviderFromUseWalletId(wallet.connector)\n\n  return (\n    <div\n      css={`\n        padding: ${2 * GU}px;\n      `}\n    >\n      <div\n        css={`\n          display: flex;\n          align-items: center;\n          width: 100%;\n        `}\n      >\n        <div\n          css={`\n            display: flex;\n            align-items: center;\n            margin-right: ${3 * GU}px;\n          `}\n        >\n          <img\n            src={providerInfo.image}\n            alt=\"\"\n            css={`\n              width: ${2.5 * GU}px;\n              height: ${2.5 * GU}px;\n              margin-right: ${0.5 * GU}px;\n              transform: translateY(-2px);\n            `}\n          />\n          <span>\n            {providerInfo.id === 'unknown' ? 'Wallet' : providerInfo.name}\n          </span>\n        </div>\n        <div\n          css={`\n            display: flex;\n            align-items: center;\n            justify-content: flex-end;\n            width: 100%;\n          `}\n        >\n          <ButtonBase\n            onClick={() => copy(wallet.account)}\n            focusRingRadius={RADIUS}\n            css={`\n              display: flex;\n              align-items: center;\n              justify-self: flex-end;\n              padding: ${0.5 * GU}px;\n              &:active {\n                background: ${theme.surfacePressed};\n              }\n            `}\n          >\n            <IdentityBadge\n              entity={wallet.account}\n              compact\n              badgeOnly\n              css=\"cursor: pointer\"\n            />\n            <IconCopy\n              css={`\n                color: ${theme.hint};\n              `}\n            />\n          </ButtonBase>\n        </div>\n      </div>\n      <div\n        css={`\n          display: flex;\n          align-items: center;\n          margin-top: ${1 * GU}px;\n          color: ${theme.positive};\n          ${textStyle('label2')};\n        `}\n      >\n        <IconCheck size=\"small\" />\n        <span\n          css={`\n            margin-left: ${0.5 * GU}px;\n          `}\n        >\n          {`Connected to Ethereum ${walletNetworkName} Network`}\n        </span>\n      </div>\n\n      <Button\n        onClick={() => wallet.reset()}\n        wide\n        css={`\n          margin-top: ${1 * GU}px;\n        `}\n      >\n        Disconnect wallet\n      </Button>\n    </div>\n  )\n}\n\nexport default AccountScreenConnected\n"]},"metadata":{},"sourceType":"module"}