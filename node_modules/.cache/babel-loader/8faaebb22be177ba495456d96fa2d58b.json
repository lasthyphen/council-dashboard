{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{utils as EthersUtils,BigNumber}from'ethers';export function bigNum(value){return BigNumber.from(value);}export function formatTokenAmount(amount,isIncoming){var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var displaySign=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;return(displaySign?isIncoming?'+':'-':'')+formatUnits(amount,{digits:decimals});}/**\n * Format a decimal-based number back to a normal number\n *\n * @param {string} value the number\n * @param {number} digits number of decimal places\n * @returns {BN} value converted to it's normal representation\n */export function parseUnits(value,digits){return EthersUtils.parseUnits(value,digits);}/**\n * Format an amount of units to be displayed.\n *\n * @param {BigNumber} value Amount of units to format.\n * @param {Number} options.digits Amount of digits on the token.\n * @param {Boolean} options.commas Use comma-separated groups.\n * @param {Boolean} options.replaceZeroBy The string to be returned when value is zero.\n * @param {Boolean} options.precision The precision of the resulting number\n * @returns {String} value formatted\n */export function formatUnits(value){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},_ref$digits=_ref.digits,digits=_ref$digits===void 0?18:_ref$digits,_ref$commas=_ref.commas,commas=_ref$commas===void 0?true:_ref$commas,_ref$replaceZeroBy=_ref.replaceZeroBy,replaceZeroBy=_ref$replaceZeroBy===void 0?'0':_ref$replaceZeroBy,_ref$precision=_ref.precision,precision=_ref$precision===void 0?2:_ref$precision;if(value.lt(0)||digits<0){return'';}var valueBeforeCommas=EthersUtils.formatUnits(value.toString(),digits);// Replace 0 by an empty value\nif(valueBeforeCommas==='0.0'){return replaceZeroBy;}// EthersUtils.formatUnits() adds a decimal even when 0, this removes it.\nvalueBeforeCommas=valueBeforeCommas.replace(/\\.0$/,'');var roundedValue=round(valueBeforeCommas,precision);return commas?EthersUtils.commify(roundedValue):roundedValue;}/**\n * Format an amount of units to be displayed.\n *\n * @param {String} value Value to round\n * @param {Number} precision Rounding precision\n * @returns {String} Value rounded to `precision` decimals\n */export function round(value){var precision=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;var _value$split=value.split('.'),_value$split2=_slicedToArray(_value$split,2),whole=_value$split2[0],decimal=_value$split2[1];if(!decimal||decimal.length<=precision)return value;// Round and keep the last `precision` digits\ndecimal=Math.round(parseInt((decimal||'0').slice(0,precision+2))/100);return\"\".concat(whole).concat(decimal?\".\".concat(decimal):'');}var wordNumbers=['one','two','three','four','five','six','seven','eight','nine'];export function numberToWord(number){return wordNumbers[number];}var ordinalNumbers=['first','second','third','fourth','fifth','sixth','seventh','eighth','ninth'];export function numberToOrdinal(number){return ordinalNumbers[number-1];}export function getPercentage(value,totalValue){if(!totalValue>0)return 0;return Math.round(value*100/totalValue,2);}export function getPercentageBN(value,totalValue){var valueAsNumber=Number(EthersUtils.formatUnits(value,18));var totalValueAsNumber=Number(EthersUtils.formatUnits(totalValue,18));var PERCENT_BN=100;if(totalValue.lte(0))return 0;return valueAsNumber*PERCENT_BN/totalValueAsNumber;}export function generateRandomNumber(){var code=BigNumber.from(EthersUtils.randomBytes(32));return code.toHexString().slice(2);}/**\n * Normalizes a number from another range into a value between 0 and 1.\n *\n * Identical to map(value, low, high, 0, 1)\n * Numbers outside the range are not clamped to 0 and 1, because out-of-range\n * values are often intentional and useful.\n *\n * From Processing.js\n *\n * @param {Number} aNumber The incoming value to be converted\n * @param {Number} low Lower bound of the value's current range\n * @param {Number} high Upper bound of the value's current range\n * @returns {Number} Normalized number\n */export function norm(aNumber,low,high){return(aNumber-low)/(high-low);}/**\n * Calculates a number between two numbers at a specific increment. The\n * progress parameter is the amount to interpolate between the two values where\n * 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is\n * half-way in between, etc. The lerp function is convenient for creating\n * motion along a straight path and for drawing dotted lines.\n *\n * From Processing.js\n *\n * @param {Number} progress Between 0.0 and 1.0\n * @param {Number} value1 First value\n * @param {Number} value2 Second value\n * @returns {Number} Increment value\n */export function lerp(progress,value1,value2){return(value2-value1)*progress+value1;}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/lib/math-utils.js"],"names":["utils","EthersUtils","BigNumber","bigNum","value","from","formatTokenAmount","amount","isIncoming","decimals","displaySign","formatUnits","digits","parseUnits","commas","replaceZeroBy","precision","lt","valueBeforeCommas","toString","replace","roundedValue","round","commify","split","whole","decimal","length","Math","parseInt","slice","wordNumbers","numberToWord","number","ordinalNumbers","numberToOrdinal","getPercentage","totalValue","getPercentageBN","valueAsNumber","Number","totalValueAsNumber","PERCENT_BN","lte","generateRandomNumber","code","randomBytes","toHexString","norm","aNumber","low","high","lerp","progress","value1","value2"],"mappings":"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","sourcesContent":["import { utils as EthersUtils, BigNumber } from 'ethers'\n\nexport function bigNum(value) {\n  return BigNumber.from(value)\n}\n\nexport function formatTokenAmount(\n  amount,\n  isIncoming,\n  decimals = 0,\n  displaySign = false\n) {\n  return (\n    (displaySign ? (isIncoming ? '+' : '-') : '') +\n    formatUnits(amount, { digits: decimals })\n  )\n}\n\n/**\n * Format a decimal-based number back to a normal number\n *\n * @param {string} value the number\n * @param {number} digits number of decimal places\n * @returns {BN} value converted to it's normal representation\n */\nexport function parseUnits(value, digits) {\n  return EthersUtils.parseUnits(value, digits)\n}\n\n/**\n * Format an amount of units to be displayed.\n *\n * @param {BigNumber} value Amount of units to format.\n * @param {Number} options.digits Amount of digits on the token.\n * @param {Boolean} options.commas Use comma-separated groups.\n * @param {Boolean} options.replaceZeroBy The string to be returned when value is zero.\n * @param {Boolean} options.precision The precision of the resulting number\n * @returns {String} value formatted\n */\nexport function formatUnits(\n  value,\n  { digits = 18, commas = true, replaceZeroBy = '0', precision = 2 } = {}\n) {\n  if (value.lt(0) || digits < 0) {\n    return ''\n  }\n\n  let valueBeforeCommas = EthersUtils.formatUnits(value.toString(), digits)\n\n  // Replace 0 by an empty value\n  if (valueBeforeCommas === '0.0') {\n    return replaceZeroBy\n  }\n\n  // EthersUtils.formatUnits() adds a decimal even when 0, this removes it.\n  valueBeforeCommas = valueBeforeCommas.replace(/\\.0$/, '')\n\n  const roundedValue = round(valueBeforeCommas, precision)\n\n  return commas ? EthersUtils.commify(roundedValue) : roundedValue\n}\n\n/**\n * Format an amount of units to be displayed.\n *\n * @param {String} value Value to round\n * @param {Number} precision Rounding precision\n * @returns {String} Value rounded to `precision` decimals\n */\nexport function round(value, precision = 2) {\n  let [whole, decimal] = value.split('.')\n\n  if (!decimal || decimal.length <= precision) return value\n\n  // Round and keep the last `precision` digits\n  decimal = Math.round(parseInt((decimal || '0').slice(0, precision + 2)) / 100)\n\n  return `${whole}${decimal ? `.${decimal}` : ''}`\n}\n\nconst wordNumbers = [\n  'one',\n  'two',\n  'three',\n  'four',\n  'five',\n  'six',\n  'seven',\n  'eight',\n  'nine',\n]\n\nexport function numberToWord(number) {\n  return wordNumbers[number]\n}\n\nconst ordinalNumbers = [\n  'first',\n  'second',\n  'third',\n  'fourth',\n  'fifth',\n  'sixth',\n  'seventh',\n  'eighth',\n  'ninth',\n]\n\nexport function numberToOrdinal(number) {\n  return ordinalNumbers[number - 1]\n}\n\nexport function getPercentage(value, totalValue) {\n  if (!totalValue > 0) return 0\n\n  return Math.round((value * 100) / totalValue, 2)\n}\n\nexport function getPercentageBN(value, totalValue) {\n  const valueAsNumber = Number(EthersUtils.formatUnits(value, 18))\n  const totalValueAsNumber = Number(EthersUtils.formatUnits(totalValue, 18))\n\n  const PERCENT_BN = 100\n\n  if (totalValue.lte(0)) return 0\n\n  return (valueAsNumber * PERCENT_BN) / totalValueAsNumber\n}\n\nexport function generateRandomNumber() {\n  const code = BigNumber.from(EthersUtils.randomBytes(32))\n  return code.toHexString().slice(2)\n}\n\n/**\n * Normalizes a number from another range into a value between 0 and 1.\n *\n * Identical to map(value, low, high, 0, 1)\n * Numbers outside the range are not clamped to 0 and 1, because out-of-range\n * values are often intentional and useful.\n *\n * From Processing.js\n *\n * @param {Number} aNumber The incoming value to be converted\n * @param {Number} low Lower bound of the value's current range\n * @param {Number} high Upper bound of the value's current range\n * @returns {Number} Normalized number\n */\nexport function norm(aNumber, low, high) {\n  return (aNumber - low) / (high - low)\n}\n\n/**\n * Calculates a number between two numbers at a specific increment. The\n * progress parameter is the amount to interpolate between the two values where\n * 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is\n * half-way in between, etc. The lerp function is convenient for creating\n * motion along a straight path and for drawing dotted lines.\n *\n * From Processing.js\n *\n * @param {Number} progress Between 0.0 and 1.0\n * @param {Number} value1 First value\n * @param {Number} value2 Second value\n * @returns {Number} Increment value\n */\nexport function lerp(progress, value1, value2) {\n  return (value2 - value1) * progress + value1\n}\n"]},"metadata":{},"sourceType":"module"}