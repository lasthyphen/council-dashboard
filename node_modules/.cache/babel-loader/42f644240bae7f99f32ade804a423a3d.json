{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useState}from'react';import{useSidePanel}from'./useSidePanel';import{useDisputeActions}from'./useCourtContracts';import{useDispute}from'./useDisputes';export var REQUEST_MODE={NO_REQUEST:Symbol('NO_REQUEST'),COMMIT:Symbol('COMMIT'),REVEAL:Symbol('REVEAL'),APPEAL:Symbol('APPEAL')};export function usePanelRequestMode(requestPanelOpen){var _useState=useState({mode:REQUEST_MODE.NO_REQUEST,data:{}}),_useState2=_slicedToArray(_useState,2),requestMode=_useState2[0],setRequestMode=_useState2[1];var updateMode=useCallback(function(newMode){setRequestMode(newMode);requestPanelOpen();},[requestPanelOpen]);return[requestMode,updateMode];}// Requests to set new mode and open side panel\nexport function usePanelRequestActions(request){var commit=useCallback(function(outcome){request({mode:REQUEST_MODE.COMMIT,data:{outcome:outcome}});},[request]);var reveal=useCallback(function(){request({mode:REQUEST_MODE.REVEAL});},[request]);var appeal=useCallback(function(confirm){request({mode:REQUEST_MODE.APPEAL,data:{confirm:confirm}});},[request]);return{commit:commit,reveal:reveal,appeal:appeal};}export function useDisputeLogic(disputeId){var panelState=useSidePanel();var _usePanelRequestMode=usePanelRequestMode(panelState.requestOpen),_usePanelRequestMode2=_slicedToArray(_usePanelRequestMode,2),requestMode=_usePanelRequestMode2[0],setRequestMode=_usePanelRequestMode2[1];var requests=usePanelRequestActions(setRequestMode);var actions=useDisputeActions();var _useDispute=useDispute(disputeId),_useDispute2=_slicedToArray(_useDispute,3),dispute=_useDispute2[0],disputeFetching=_useDispute2[1],error=_useDispute2[2];return{actions:actions,error:error,dispute:dispute,disputeFetching:disputeFetching,requestMode:requestMode,panelState:panelState,requests:requests};}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/dispute-logic.js"],"names":["useCallback","useState","useSidePanel","useDisputeActions","useDispute","REQUEST_MODE","NO_REQUEST","Symbol","COMMIT","REVEAL","APPEAL","usePanelRequestMode","requestPanelOpen","mode","data","requestMode","setRequestMode","updateMode","newMode","usePanelRequestActions","request","commit","outcome","reveal","appeal","confirm","useDisputeLogic","disputeId","panelState","requestOpen","requests","actions","dispute","disputeFetching","error"],"mappings":"4HAAA,OAASA,WAAT,CAAsBC,QAAtB,KAAsC,OAAtC,CAEA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OAASC,iBAAT,KAAkC,qBAAlC,CACA,OAASC,UAAT,KAA2B,eAA3B,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,CAC1BC,UAAU,CAAEC,MAAM,CAAC,YAAD,CADQ,CAE1BC,MAAM,CAAED,MAAM,CAAC,QAAD,CAFY,CAG1BE,MAAM,CAAEF,MAAM,CAAC,QAAD,CAHY,CAI1BG,MAAM,CAAEH,MAAM,CAAC,QAAD,CAJY,CAArB,CAOP,MAAO,SAASI,CAAAA,mBAAT,CAA6BC,gBAA7B,CAA+C,eACdX,QAAQ,CAAC,CAC7CY,IAAI,CAAER,YAAY,CAACC,UAD0B,CAE7CQ,IAAI,CAAE,EAFuC,CAAD,CADM,wCAC7CC,WAD6C,eAChCC,cADgC,eAMpD,GAAMC,CAAAA,UAAU,CAAGjB,WAAW,CAC5B,SAAAkB,OAAO,CAAI,CACTF,cAAc,CAACE,OAAD,CAAd,CACAN,gBAAgB,GACjB,CAJ2B,CAK5B,CAACA,gBAAD,CAL4B,CAA9B,CAQA,MAAO,CAACG,WAAD,CAAcE,UAAd,CAAP,CACD,CAED;AACA,MAAO,SAASE,CAAAA,sBAAT,CAAgCC,OAAhC,CAAyC,CAC9C,GAAMC,CAAAA,MAAM,CAAGrB,WAAW,CACxB,SAAAsB,OAAO,CAAI,CACTF,OAAO,CAAC,CAAEP,IAAI,CAAER,YAAY,CAACG,MAArB,CAA6BM,IAAI,CAAE,CAAEQ,OAAO,CAAPA,OAAF,CAAnC,CAAD,CAAP,CACD,CAHuB,CAIxB,CAACF,OAAD,CAJwB,CAA1B,CAOA,GAAMG,CAAAA,MAAM,CAAGvB,WAAW,CAAC,UAAM,CAC/BoB,OAAO,CAAC,CAAEP,IAAI,CAAER,YAAY,CAACI,MAArB,CAAD,CAAP,CACD,CAFyB,CAEvB,CAACW,OAAD,CAFuB,CAA1B,CAIA,GAAMI,CAAAA,MAAM,CAAGxB,WAAW,CACxB,SAAAyB,OAAO,CAAI,CACTL,OAAO,CAAC,CAAEP,IAAI,CAAER,YAAY,CAACK,MAArB,CAA6BI,IAAI,CAAE,CAAEW,OAAO,CAAPA,OAAF,CAAnC,CAAD,CAAP,CACD,CAHuB,CAIxB,CAACL,OAAD,CAJwB,CAA1B,CAOA,MAAO,CAAEC,MAAM,CAANA,MAAF,CAAUE,MAAM,CAANA,MAAV,CAAkBC,MAAM,CAANA,MAAlB,CAAP,CACD,CAED,MAAO,SAASE,CAAAA,eAAT,CAAyBC,SAAzB,CAAoC,CACzC,GAAMC,CAAAA,UAAU,CAAG1B,YAAY,EAA/B,CADyC,yBAEHS,mBAAmB,CACvDiB,UAAU,CAACC,WAD4C,CAFhB,8DAElCd,WAFkC,0BAErBC,cAFqB,0BAKzC,GAAMc,CAAAA,QAAQ,CAAGX,sBAAsB,CAACH,cAAD,CAAvC,CAEA,GAAMe,CAAAA,OAAO,CAAG5B,iBAAiB,EAAjC,CAPyC,gBAQCC,UAAU,CAACuB,SAAD,CARX,4CAQlCK,OARkC,iBAQzBC,eARyB,iBAQRC,KARQ,iBAUzC,MAAO,CACLH,OAAO,CAAPA,OADK,CAELG,KAAK,CAALA,KAFK,CAGLF,OAAO,CAAPA,OAHK,CAILC,eAAe,CAAfA,eAJK,CAKLlB,WAAW,CAAXA,WALK,CAMLa,UAAU,CAAVA,UANK,CAOLE,QAAQ,CAARA,QAPK,CAAP,CASD","sourcesContent":["import { useCallback, useState } from 'react'\n\nimport { useSidePanel } from './useSidePanel'\nimport { useDisputeActions } from './useCourtContracts'\nimport { useDispute } from './useDisputes'\n\nexport const REQUEST_MODE = {\n  NO_REQUEST: Symbol('NO_REQUEST'),\n  COMMIT: Symbol('COMMIT'),\n  REVEAL: Symbol('REVEAL'),\n  APPEAL: Symbol('APPEAL'),\n}\n\nexport function usePanelRequestMode(requestPanelOpen) {\n  const [requestMode, setRequestMode] = useState({\n    mode: REQUEST_MODE.NO_REQUEST,\n    data: {},\n  })\n\n  const updateMode = useCallback(\n    newMode => {\n      setRequestMode(newMode)\n      requestPanelOpen()\n    },\n    [requestPanelOpen]\n  )\n\n  return [requestMode, updateMode]\n}\n\n// Requests to set new mode and open side panel\nexport function usePanelRequestActions(request) {\n  const commit = useCallback(\n    outcome => {\n      request({ mode: REQUEST_MODE.COMMIT, data: { outcome } })\n    },\n    [request]\n  )\n\n  const reveal = useCallback(() => {\n    request({ mode: REQUEST_MODE.REVEAL })\n  }, [request])\n\n  const appeal = useCallback(\n    confirm => {\n      request({ mode: REQUEST_MODE.APPEAL, data: { confirm } })\n    },\n    [request]\n  )\n\n  return { commit, reveal, appeal }\n}\n\nexport function useDisputeLogic(disputeId) {\n  const panelState = useSidePanel()\n  const [requestMode, setRequestMode] = usePanelRequestMode(\n    panelState.requestOpen\n  )\n  const requests = usePanelRequestActions(setRequestMode)\n\n  const actions = useDisputeActions()\n  const [dispute, disputeFetching, error] = useDispute(disputeId)\n\n  return {\n    actions,\n    error,\n    dispute,\n    disputeFetching,\n    requestMode,\n    panelState,\n    requests,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}