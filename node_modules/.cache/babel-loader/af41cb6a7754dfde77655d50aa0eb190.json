{"ast":null,"code":"import { toMs } from './date-utils';\nimport { bigNum } from '../lib/math-utils';\nexport function transformSubscriptionModuleDataAttributes(subscriptionModule) {\n  return { ...subscriptionModule,\n    currentPeriod: parseInt(subscriptionModule.currentPeriod, 10),\n    feeAmount: bigNum(subscriptionModule.feeAmount),\n    periodDuration: toMs(parseInt(subscriptionModule.periodDuration)),\n    periods: subscriptionModule.periods.map(period => ({ ...period,\n      id: parseInt(period.id, 10),\n      totalActiveBalance: period.totalActiveBalance,\n      collectedFees: bigNum(period.collectedFees)\n    }))\n  };\n}\nexport function transformClaimedFeesDataAttributes(claimedFee) {\n  return { ...claimedFee,\n    period: {\n      id: parseInt(claimedFee.period.id, 10)\n    }\n  };\n}\nexport function hasJurorClaimed(claimedFees, periodId) {\n  return claimedFees.some(claimedFee => claimedFee.period.id === periodId);\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/utils/subscription-utils.js"],"names":["toMs","bigNum","transformSubscriptionModuleDataAttributes","subscriptionModule","currentPeriod","parseInt","feeAmount","periodDuration","periods","map","period","id","totalActiveBalance","collectedFees","transformClaimedFeesDataAttributes","claimedFee","hasJurorClaimed","claimedFees","periodId","some"],"mappings":"AAAA,SAASA,IAAT,QAAqB,cAArB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AAEA,OAAO,SAASC,yCAAT,CAAmDC,kBAAnD,EAAuE;AAC5E,SAAO,EACL,GAAGA,kBADE;AAELC,IAAAA,aAAa,EAAEC,QAAQ,CAACF,kBAAkB,CAACC,aAApB,EAAmC,EAAnC,CAFlB;AAGLE,IAAAA,SAAS,EAAEL,MAAM,CAACE,kBAAkB,CAACG,SAApB,CAHZ;AAILC,IAAAA,cAAc,EAAEP,IAAI,CAACK,QAAQ,CAACF,kBAAkB,CAACI,cAApB,CAAT,CAJf;AAKLC,IAAAA,OAAO,EAAEL,kBAAkB,CAACK,OAAnB,CAA2BC,GAA3B,CAA+BC,MAAM,KAAK,EACjD,GAAGA,MAD8C;AAEjDC,MAAAA,EAAE,EAAEN,QAAQ,CAACK,MAAM,CAACC,EAAR,EAAY,EAAZ,CAFqC;AAGjDC,MAAAA,kBAAkB,EAAEF,MAAM,CAACE,kBAHsB;AAIjDC,MAAAA,aAAa,EAAEZ,MAAM,CAACS,MAAM,CAACG,aAAR;AAJ4B,KAAL,CAArC;AALJ,GAAP;AAYD;AAED,OAAO,SAASC,kCAAT,CAA4CC,UAA5C,EAAwD;AAC7D,SAAO,EACL,GAAGA,UADE;AAELL,IAAAA,MAAM,EAAE;AACNC,MAAAA,EAAE,EAAEN,QAAQ,CAACU,UAAU,CAACL,MAAX,CAAkBC,EAAnB,EAAuB,EAAvB;AADN;AAFH,GAAP;AAMD;AAED,OAAO,SAASK,eAAT,CAAyBC,WAAzB,EAAsCC,QAAtC,EAAgD;AACrD,SAAOD,WAAW,CAACE,IAAZ,CAAiBJ,UAAU,IAAIA,UAAU,CAACL,MAAX,CAAkBC,EAAlB,KAAyBO,QAAxD,CAAP;AACD","sourcesContent":["import { toMs } from './date-utils'\nimport { bigNum } from '../lib/math-utils'\n\nexport function transformSubscriptionModuleDataAttributes(subscriptionModule) {\n  return {\n    ...subscriptionModule,\n    currentPeriod: parseInt(subscriptionModule.currentPeriod, 10),\n    feeAmount: bigNum(subscriptionModule.feeAmount),\n    periodDuration: toMs(parseInt(subscriptionModule.periodDuration)),\n    periods: subscriptionModule.periods.map(period => ({\n      ...period,\n      id: parseInt(period.id, 10),\n      totalActiveBalance: period.totalActiveBalance,\n      collectedFees: bigNum(period.collectedFees),\n    })),\n  }\n}\n\nexport function transformClaimedFeesDataAttributes(claimedFee) {\n  return {\n    ...claimedFee,\n    period: {\n      id: parseInt(claimedFee.period.id, 10),\n    },\n  }\n}\n\nexport function hasJurorClaimed(claimedFees, periodId) {\n  return claimedFees.some(claimedFee => claimedFee.period.id === periodId)\n}\n"]},"metadata":{},"sourceType":"module"}