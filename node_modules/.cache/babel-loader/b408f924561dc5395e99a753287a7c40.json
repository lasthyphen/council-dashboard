{"ast":null,"code":"var _classCallCheck = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events');\n\nvar dev = process.env.NODE_ENV === 'development';\n\nvar ConnectionManager =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(ConnectionManager, _EventEmitter);\n\n  function ConnectionManager(connections, targets, options) {\n    var _this;\n\n    _classCallCheck(this, ConnectionManager);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ConnectionManager).call(this));\n    _this.targets = targets;\n    _this.connections = connections;\n    _this.connected = false;\n    _this.status = 'loading';\n    _this.interval = options.interval || 5000;\n    _this.name = options.name || 'default';\n    _this.inSetup = true;\n\n    _this.connect();\n\n    return _this;\n  }\n\n  _createClass(ConnectionManager, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (dev && index === 0) console.log(\"\\n\\n\\n\\nA connection cycle started for provider with name: \".concat(this.name));\n\n      if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n        if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider');\n      } else if (this.targets.length === 0) {\n        if (dev) console.log('No valid targets supplied');\n      } else {\n        var _this$targets$index = this.targets[index],\n            protocol = _this$targets$index.protocol,\n            location = _this$targets$index.location;\n        this.connection = this.connections[protocol](location);\n        this.connection.on('error', function (err) {\n          if (!_this2.connected) return _this2.connectionError(index, err);\n          if (_this2.listenerCount('error')) return _this2.emit('error', err);\n          console.warn('eth-provider - Uncaught connection error: ' + err.message);\n        });\n        this.connection.on('close', function (summary) {\n          _this2.connected = false;\n\n          _this2.emit('close');\n\n          if (!_this2.closing) _this2.refresh();\n        });\n        this.connection.on('connect', function () {\n          _this2.connection.target = _this2.targets[index];\n          _this2.connection.index = index;\n          _this2.targets[index].status = _this2.connection.status;\n          _this2.connected = true;\n          _this2.inSetup = false;\n          if (dev) console.log('Successfully connected to: ' + _this2.targets[index].location);\n\n          _this2.emit('connect');\n        });\n        this.connection.on('data', function (data) {\n          return _this2.emit('data', data);\n        });\n        this.connection.on('payload', function (payload) {\n          return _this2.emit('payload', payload);\n        });\n      }\n    }\n  }, {\n    key: \"refresh\",\n    value: function refresh() {\n      var _this3 = this;\n\n      var interval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.interval;\n      if (dev) console.log(\"Reconnect queued for \".concat((interval / 1000).toFixed(2), \"s in the future\"));\n      clearTimeout(this.connectTimer);\n      this.connectTimer = setTimeout(function () {\n        return _this3.connect();\n      }, interval);\n    }\n  }, {\n    key: \"connectionError\",\n    value: function connectionError(index, err) {\n      this.targets[index].status = err;\n\n      if (this.targets.length - 1 === index) {\n        this.inSetup = false;\n        if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets);\n        this.refresh();\n      } else {\n        // Not last target, move on the next connection option\n        this.connect(++index);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.closing = true;\n\n      if (this.connection) {\n        this.connection.close(); // Let event bubble from here\n      } else {\n        this.emit('close');\n      }\n\n      clearTimeout(this.connectTimer);\n    }\n  }, {\n    key: \"error\",\n    value: function error(payload, message) {\n      var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      this.emit('payload', {\n        id: payload.id,\n        jsonrpc: payload.jsonrpc,\n        error: {\n          message: message,\n          code: code\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload) {\n      var _this4 = this;\n\n      if (this.inSetup) {\n        setTimeout(function () {\n          return _this4.send(payload);\n        }, 100);\n      } else if (this.connection.closed) {\n        this.error(payload, 'Not connected');\n      } else {\n        this.connection.send(payload);\n      }\n    }\n  }]);\n\n  return ConnectionManager;\n}(EventEmitter);\n\nmodule.exports = ConnectionManager;","map":null,"metadata":{},"sourceType":"script"}