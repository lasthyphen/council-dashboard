{"ast":null,"code":"const EventEmitter = require('events');\n\nclass EthereumProvider extends EventEmitter {\n  constructor(connection) {\n    super();\n    this.connected = false;\n    this.nextId = 0;\n    this.promises = {};\n    this.subscriptions = [];\n    this.connection = connection;\n    this.connection.on('connect', () => this.checkConnection());\n    this.connection.on('close', () => this.emit('close'));\n    this.connection.on('payload', payload => {\n      const {\n        id,\n        method,\n        error,\n        result\n      } = payload;\n\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) {\n          // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result);\n          delete this.promises[id];\n        }\n      } else if (method && method.indexOf('_subscription') > -1) {\n        // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result);\n        this.emit(method, payload.params); // Latest EIP-1193\n\n        this.emit('data', payload); // Backwards Compatibility\n      }\n    });\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription();\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription();\n      }\n    });\n  }\n\n  async checkConnection() {\n    try {\n      this.emit('connect', (await this._send('net_version')));\n      this.connected = true;\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription();\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription();\n    } catch (e) {\n      this.connected = false;\n    }\n  }\n\n  async startNetworkSubscription() {\n    this.attemptedNetworkSubscription = true;\n\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged');\n      this.on(networkChanged, netId => this.emit('networkChanged', netId));\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e);\n    }\n  }\n\n  async startAccountsSubscription() {\n    this.attemptedAccountsSubscription = true;\n\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged');\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts));\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e);\n    }\n  }\n\n  enable() {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts;\n          this.coinbase = accounts[0];\n          this.emit('enable');\n          resolve(accounts);\n        } else {\n          const err = new Error('User Denied Full Provider');\n          err.code = 4001;\n          reject(err);\n        }\n      }).catch(reject);\n    });\n  }\n\n  _send(method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.');\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.');\n    const payload = {\n      jsonrpc: '2.0',\n      id: this.nextId++,\n      method,\n      params\n    };\n    const promise = new Promise((resolve, reject) => {\n      this.promises[payload.id] = {\n        resolve,\n        reject\n      };\n    });\n    this.connection.send(payload);\n    return promise;\n  }\n\n  send(...args) {\n    // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args);\n  }\n\n  _sendBatch(requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)));\n  }\n\n  subscribe(type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id);\n      return id;\n    });\n  }\n\n  unsubscribe(type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id); // Remove subscription\n\n        this.removeAllListeners(id); // Remove listeners\n\n        return success;\n      }\n    });\n  }\n\n  sendAsync(payload, cb) {\n    // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'));\n    if (!payload) return cb(new Error('Invalid Payload')); // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb);\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, {\n          id: payload.id,\n          jsonrpc: payload.jsonrpc,\n          result\n        });\n      }).catch(err => {\n        cb(err);\n      });\n    }\n  }\n\n  sendAsyncBatch(payload, cb) {\n    return this._sendBatch(payload).then(results => {\n      let result = results.map((entry, index) => {\n        return {\n          id: payload[index].id,\n          jsonrpc: payload[index].jsonrpc,\n          result: entry\n        };\n      });\n      cb(null, result);\n    }).catch(err => {\n      cb(err);\n    });\n  }\n\n  isConnected() {\n    // Backwards Compatibility\n    return this.connected;\n  }\n\n  close() {\n    this.connection.close();\n    this.connected = false;\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`);\n    this.subscriptions.forEach(id => this.emit(id, error)); // Send Error objects to any open subscriptions\n\n    this.subscriptions = []; // Clear subscriptions\n  }\n\n}\n\nmodule.exports = EthereumProvider;","map":null,"metadata":{},"sourceType":"script"}