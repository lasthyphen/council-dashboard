{"ast":null,"code":"import { NETWORKS } from '../params';\nexport function networkFromChainId(chainId) {\n  return NETWORKS.find(function (network) {\n    return network.chainId === chainId;\n  }) || null;\n}\nexport function networkFromName(name) {\n  return NETWORKS.find(function (network) {\n    return network.name === name;\n  }) || null;\n}\n\nfunction networkFromObject(_ref) {\n  var chainId = _ref.chainId,\n      ensAddress = _ref.ensAddress,\n      name = _ref.name;\n\n  var _a;\n\n  if (name === undefined && chainId === undefined) {\n    throw new Error(\"Network: no name or chainId passed. \" + \"Please provide at least one of these.\");\n  } // Handle the case of having a name but no chainId.\n\n\n  if (name !== undefined && chainId === undefined) {\n    chainId = (_a = networkFromName(name)) === null || _a === void 0 ? void 0 : _a.chainId;\n\n    if (chainId === undefined) {\n      throw new Error(\"Network: invalid name provided: \".concat(name, \". \") + \"Please use provide a chainId or use one of the following names: \" + NETWORKS.map(function (network) {\n        return network.chainId;\n      }).join(', ') + \".\");\n    }\n  } // Just a little help for TypeScript, at this\n  // point we know that chainId cannot be undefined.\n\n\n  chainId = chainId;\n  var chainIdNetwork = networkFromChainId(chainId);\n\n  if (!chainIdNetwork) {\n    throw new Error(\"Network: invalid chainId provided: \".concat(chainId, \". \") + \"Please use one of the following: \" + NETWORKS.map(function (network) {\n      return network.chainId;\n    }).join(', ') + \".\");\n  } // We compare with undefined to accept empty strings.\n\n\n  if (name === undefined) {\n    name = chainIdNetwork.name;\n  }\n\n  if (!ensAddress) {\n    ensAddress = chainIdNetwork.ensAddress;\n  }\n\n  return {\n    chainId: chainId,\n    ensAddress: ensAddress,\n    name: name\n  };\n}\n\nexport function toNetwork(network) {\n  if (!network) {\n    throw new Error(\"Network: incorrect value provided.\");\n  }\n\n  if (typeof network === 'string') {\n    return networkFromObject({\n      name: network\n    });\n  }\n\n  if (typeof network === 'number') {\n    return networkFromObject({\n      chainId: network\n    });\n  }\n\n  return networkFromObject(network);\n}","map":null,"metadata":{},"sourceType":"module"}