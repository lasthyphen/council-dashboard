{"ast":null,"code":"import _regeneratorRuntime from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _gql;\n\nimport { toNetwork } from '@aragon/connect-core';\nimport * as queries from './queries';\nimport GraphQLWrapper from './core/GraphQLWrapper';\nimport { parseApp, parseApps, parsePermissions, parseRepo, parseRoles } from './parsers';\n\nfunction getOrgSubgraphUrl(network) {\n  if (network.chainId === 1) {\n    return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-mainnet';\n  }\n\n  if (network.chainId === 43112) {\n    return 'http://20.9.85.213:8000/subgraphs/name/aragon/aragon-court-dijets';\n  }\n\n  if (network.chainId === 4) {\n    return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-rinkeby';\n  }\n\n  if (network.chainId === 100) {\n    return 'https://api.thegraph.com/subgraphs/name/1hive/aragon-xdai';\n  }\n\n  return null;\n}\n\nfunction appFiltersToQueryFilter(appFilters) {\n  var queryFilter = {};\n\n  if (appFilters.name) {\n    queryFilter.repoName_in = appFilters.name.map(function (name) {\n      return name.replace(/\\.aragonpm\\.eth$/, '');\n    });\n  }\n\n  if (appFilters.address) {\n    queryFilter.address_in = appFilters.address;\n  }\n\n  return queryFilter;\n}\n\nvar ConnectorTheGraph =\n/*#__PURE__*/\nfunction () {\n  function ConnectorTheGraph(config) {\n    _classCallCheck(this, ConnectorTheGraph);\n\n    _gql.set(this, void 0);\n\n    this.name = 'thegraph';\n    this.config = config;\n    this.network = toNetwork(config.network);\n    var orgSubgraphUrl = config.orgSubgraphUrl || getOrgSubgraphUrl(this.network);\n\n    if (!orgSubgraphUrl) {\n      throw new Error(\"The chainId \".concat(this.network.chainId, \" is not supported by the TheGraph connector.\"));\n    }\n\n    __classPrivateFieldSet(this, _gql, new GraphQLWrapper(orgSubgraphUrl, {\n      pollInterval: config.pollInterval,\n      verbose: config.verbose\n    }));\n  }\n\n  _createClass(ConnectorTheGraph, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(connection) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.connection = connection;\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect(_x) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"disconnect\",\n    value: function () {\n      var _disconnect = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                __classPrivateFieldGet(this, _gql).close();\n\n                delete this.connection;\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function disconnect() {\n        return _disconnect.apply(this, arguments);\n      }\n\n      return disconnect;\n    }()\n  }, {\n    key: \"rolesForAddress\",\n    value: function () {\n      var _rolesForAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(organization, appAddress) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ROLE_BY_APP_ADDRESS('query'), {\n                  appAddress: appAddress.toLowerCase()\n                }, function (result) {\n                  return parseRoles(result, organization);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function rolesForAddress(_x2, _x3) {\n        return _rolesForAddress.apply(this, arguments);\n      }\n\n      return rolesForAddress;\n    }()\n  }, {\n    key: \"permissionsForOrg\",\n    value: function () {\n      var _permissionsForOrg = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(organization) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_PERMISSIONS('query'), {\n                  orgAddress: organization.address.toLowerCase()\n                }, function (result) {\n                  return parsePermissions(result, organization);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function permissionsForOrg(_x4) {\n        return _permissionsForOrg.apply(this, arguments);\n      }\n\n      return permissionsForOrg;\n    }()\n  }, {\n    key: \"onPermissionsForOrg\",\n    value: function onPermissionsForOrg(organization, callback) {\n      return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_PERMISSIONS('subscription'), {\n        orgAddress: organization.address.toLowerCase()\n      }, callback, function (result) {\n        return parsePermissions(result, organization);\n      });\n    }\n  }, {\n    key: \"appByAddress\",\n    value: function () {\n      var _appByAddress = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(organization, appAddress) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.APP_BY_ADDRESS('query'), {\n                  appAddress: appAddress.toLowerCase()\n                }, function (result) {\n                  return parseApp(result, organization);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function appByAddress(_x5, _x6) {\n        return _appByAddress.apply(this, arguments);\n      }\n\n      return appByAddress;\n    }()\n  }, {\n    key: \"appForOrg\",\n    value: function () {\n      var _appForOrg = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(organization, filters) {\n        var apps;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_APPS('query'), {\n                  appFilter: appFiltersToQueryFilter(filters),\n                  first: 1,\n                  orgAddress: organization.address.toLowerCase()\n                }, function (result) {\n                  return parseApps(result, organization);\n                });\n\n              case 2:\n                apps = _context6.sent;\n                return _context6.abrupt(\"return\", apps[0]);\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function appForOrg(_x7, _x8) {\n        return _appForOrg.apply(this, arguments);\n      }\n\n      return appForOrg;\n    }()\n  }, {\n    key: \"appsForOrg\",\n    value: function () {\n      var _appsForOrg = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7(organization, filters) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_APPS('query'), {\n                  appFilter: appFiltersToQueryFilter(filters),\n                  orgAddress: organization.address.toLowerCase()\n                }, function (result) {\n                  return parseApps(result, organization);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function appsForOrg(_x9, _x10) {\n        return _appsForOrg.apply(this, arguments);\n      }\n\n      return appsForOrg;\n    }()\n  }, {\n    key: \"onAppForOrg\",\n    value: function onAppForOrg(organization, filters, callback) {\n      return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {\n        appFilter: appFiltersToQueryFilter(filters),\n        first: 1,\n        orgAddress: organization.address.toLowerCase()\n      }, function (apps) {\n        return callback(apps[0]);\n      }, function (result) {\n        return parseApps(result, organization);\n      });\n    }\n  }, {\n    key: \"onAppsForOrg\",\n    value: function onAppsForOrg(organization, filters, callback) {\n      return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {\n        appFilter: appFiltersToQueryFilter(filters),\n        orgAddress: organization.address.toLowerCase()\n      }, callback, function (result) {\n        return parseApps(result, organization);\n      });\n    }\n  }, {\n    key: \"repoForApp\",\n    value: function () {\n      var _repoForApp = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8(organization, appAddress) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.REPO_BY_APP_ADDRESS('query'), {\n                  appAddress: appAddress.toLowerCase()\n                }, function (result) {\n                  return parseRepo(result, organization);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function repoForApp(_x11, _x12) {\n        return _repoForApp.apply(this, arguments);\n      }\n\n      return repoForApp;\n    }()\n  }]);\n\n  return ConnectorTheGraph;\n}();\n\n_gql = new WeakMap();\nexport default ConnectorTheGraph;","map":null,"metadata":{},"sourceType":"module"}