{"ast":null,"code":"import _regeneratorRuntime from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _objectSpread from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _client, _pollInterval, _verbose;\n\nimport fetch from 'isomorphic-unfetch';\nimport { Client, createRequest as createRequestUrql } from '@urql/core';\nimport { pipe, subscribe } from 'wonka'; // Average block time is about 13 seconds on the 2020-08-14\n// See https://etherscan.io/chart/blocktime\n\nvar POLL_INTERVAL_DEFAULT = 13 * 1000;\n\nfunction createRequest(query, args) {\n  // Make every operation type a query, until GraphQL subscriptions get added again.\n  if (query.definitions) {\n    query = _objectSpread({}, query, {\n      definitions: query.definitions.map(function (definition) {\n        return _objectSpread({}, definition, {\n          operation: 'query'\n        });\n      })\n    });\n  }\n\n  return createRequestUrql(query, args);\n}\n\nvar GraphQLWrapper =\n/*#__PURE__*/\nfunction () {\n  function GraphQLWrapper(subgraphUrl) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, GraphQLWrapper);\n\n    var _a, _b;\n\n    _client.set(this, void 0);\n\n    _pollInterval.set(this, void 0);\n\n    _verbose.set(this, void 0);\n\n    if (typeof options === 'boolean') {\n      console.warn('GraphQLWrapper: please use `new GraphQLWrapper(url, { verbose })` rather than `new GraphQLWrapper(url, verbose)`.');\n      options = {\n        verbose: options\n      };\n    }\n\n    options = options;\n\n    __classPrivateFieldSet(this, _verbose, (_a = options.verbose) !== null && _a !== void 0 ? _a : false);\n\n    __classPrivateFieldSet(this, _pollInterval, (_b = options.pollInterval) !== null && _b !== void 0 ? _b : POLL_INTERVAL_DEFAULT);\n\n    __classPrivateFieldSet(this, _client, new Client({\n      maskTypename: true,\n      url: subgraphUrl,\n      fetch: fetch\n    }));\n  }\n\n  _createClass(GraphQLWrapper, [{\n    key: \"close\",\n    value: function close() {// Do nothing for now.\n      // Will be used when GraphQL subscriptions will be added again.\n    }\n  }, {\n    key: \"subscribeToQuery\",\n    value: function subscribeToQuery(query) {\n      var _this = this;\n\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var request = createRequest(query, args);\n      return pipe(__classPrivateFieldGet(this, _client).executeQuery(request, {\n        pollInterval: __classPrivateFieldGet(this, _pollInterval),\n        requestPolicy: 'cache-and-network'\n      }), subscribe(function (result) {\n        if (__classPrivateFieldGet(_this, _verbose)) {\n          console.log(_this.describeQueryResult(result));\n        }\n\n        if (result.error) {\n          throw new Error(['Error performing subscription.', \"\".concat(result.error.name, \": \").concat(result.error.message), _this.describeQueryResult(result)].join('\\n'));\n        }\n\n        callback(result);\n      }));\n    }\n  }, {\n    key: \"subscribeToQueryWithParser\",\n    value: function subscribeToQueryWithParser(query) {\n      var _this2 = this;\n\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var parser = arguments.length > 3 ? arguments[3] : undefined;\n      return this.subscribeToQuery(query, args,\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(result) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.t0 = callback;\n                  _context.next = 3;\n                  return _this2.parseQueryResult(parser, result);\n\n                case 3:\n                  _context.t1 = _context.sent;\n                  (0, _context.t0)(_context.t1);\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"performQuery\",\n    value: function () {\n      var _performQuery = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(query) {\n        var args,\n            result,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                args = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                _context2.next = 3;\n                return __classPrivateFieldGet(this, _client).query(query, args).toPromise();\n\n              case 3:\n                result = _context2.sent;\n\n                if (__classPrivateFieldGet(this, _verbose)) {\n                  console.log(this.describeQueryResult(result));\n                }\n\n                if (!result.error) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw new Error(this.describeQueryResultError(result) + this.describeQueryResult(result));\n\n              case 7:\n                return _context2.abrupt(\"return\", result);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function performQuery(_x2) {\n        return _performQuery.apply(this, arguments);\n      }\n\n      return performQuery;\n    }()\n  }, {\n    key: \"performQueryWithParser\",\n    value: function () {\n      var _performQueryWithParser = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(query) {\n        var args,\n            parser,\n            result,\n            _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                args = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                parser = _args3.length > 2 ? _args3[2] : undefined;\n                _context3.next = 4;\n                return this.performQuery(query, args);\n\n              case 4:\n                result = _context3.sent;\n                return _context3.abrupt(\"return\", this.parseQueryResult(parser, result));\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function performQueryWithParser(_x3) {\n        return _performQueryWithParser.apply(this, arguments);\n      }\n\n      return performQueryWithParser;\n    }()\n  }, {\n    key: \"parseQueryResult\",\n    value: function () {\n      var _parseQueryResult = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(parser, result) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                return _context4.abrupt(\"return\", parser(result));\n\n              case 4:\n                _context4.prev = 4;\n                _context4.t0 = _context4[\"catch\"](0);\n                throw new Error(_context4.t0.message + '\\n\\n' + this.describeQueryResult(result));\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 4]]);\n      }));\n\n      function parseQueryResult(_x4, _x5) {\n        return _parseQueryResult.apply(this, arguments);\n      }\n\n      return parseQueryResult;\n    }()\n  }, {\n    key: \"describeQueryResultError\",\n    value: function describeQueryResultError(result) {\n      if (!result.error) {\n        return '';\n      }\n\n      return \"\".concat(result.error.name, \": \").concat(result.error.message, \"\\n\\n\");\n    }\n  }, {\n    key: \"describeQueryResult\",\n    value: function describeQueryResult(result) {\n      var _a;\n\n      var queryStr = (_a = result.operation.query.loc) === null || _a === void 0 ? void 0 : _a.source.body;\n      var dataStr = JSON.stringify(result.data, null, 2);\n      var argsStr = JSON.stringify(result.operation.variables, null, 2);\n      var subgraphUrl = result.operation.context.url;\n      return [\"Subgraph: \".concat(subgraphUrl), \"Arguments: \".concat(argsStr), \"Query: \".concat(queryStr), \"Returned data: \".concat(dataStr)].join('\\n\\n');\n    }\n  }]);\n\n  return GraphQLWrapper;\n}();\n\nexport { GraphQLWrapper as default };\n_client = new WeakMap(), _pollInterval = new WeakMap(), _verbose = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}