{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/Account/AccountModule.js\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { Button, GU, IconConnect, useViewport } from '@aragon/ui';\nimport { shortenAddress } from '../../lib/web3-utils';\nimport AccountButton from './AccountButton';\nimport AccountPopover from './AccountPopover';\nimport ScreenConnected from './ScreenConnected';\nimport ScreenConnecting from './ScreenConnecting';\nimport ScreenError from './ScreenError';\nimport ScreenProviders from './ScreenProviders';\nconst SCREENS = [{\n  id: 'providers',\n  title: 'Use account from'\n}, {\n  id: 'connecting',\n  title: 'Use account from'\n}, {\n  id: 'connected',\n  title: 'Active account'\n}, {\n  id: 'error',\n  title: 'Connection error'\n}];\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"AccountModule___StyledDiv\",\n  componentId: \"sukdq6-0\"\n})([\"display:flex;align-items:center;justify-content:space-around;width:\", \";outline:0;\"], p => p._css);\n\nfunction AccountModule() {\n  const [opened, setOpened] = useState(false);\n  const [activatingDelayed, setActivatingDelayed] = useState(null);\n  const buttonRef = useRef();\n  const {\n    below\n  } = useViewport();\n  const compactMode = below('medium');\n  const wallet = useWallet();\n  const {\n    account,\n    connector,\n    error,\n    status\n  } = wallet;\n  const open = useCallback(() => setOpened(true), []);\n  const toggle = useCallback(() => setOpened(opened => !opened), []);\n  useEffect(() => {\n    let timer;\n\n    if (status === 'error') {\n      setActivatingDelayed(null);\n    }\n\n    if (status === 'connecting') {\n      setActivatingDelayed(connector);\n      timer = setTimeout(() => {\n        setActivatingDelayed(null);\n      }, 400);\n    }\n\n    return () => clearTimeout(timer);\n  }, [connector, status]);\n  const handleResetConnection = useCallback(() => {\n    wallet.reset();\n  }, [wallet]);\n  const handleActivate = useCallback(providerId => wallet.connect(providerId), [wallet]);\n  const previousScreenIndex = useRef(-1);\n  const {\n    screenIndex,\n    direction\n  } = useMemo(() => {\n    const screenId = status === 'disconnected' ? 'providers' : status;\n    const screenIndex = SCREENS.findIndex(screen => screen.id === screenId);\n    const direction = previousScreenIndex.current > screenIndex ? -1 : 1;\n    previousScreenIndex.current = screenIndex;\n    return {\n      direction,\n      screenIndex\n    };\n  }, [status]);\n  const screen = SCREENS[screenIndex];\n  const screenId = screen.id;\n  const handlePopoverClose = useCallback(() => {\n    if (screenId === 'connecting' || screenId === 'error') {\n      // reject closing the popover\n      return false;\n    }\n\n    setOpened(false);\n  }, [screenId]);\n  return React.createElement(_StyledDiv, {\n    ref: buttonRef,\n    tabIndex: \"0\",\n    _css: compactMode ? 'auto' : `${24.5 * GU}px`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, screen.id === 'connected' ? React.createElement(AccountButton, {\n    label: shortenAddress(wallet.account),\n    onClick: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }) : React.createElement(Button, {\n    icon: React.createElement(IconConnect, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }),\n    label: \"Connect account\",\n    onClick: toggle,\n    display: compactMode ? 'icon' : 'all',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(AccountPopover, {\n    direction: direction,\n    heading: screen.title,\n    keys: ({\n      screenId\n    }) => screenId + status + error.name,\n    onClose: handlePopoverClose,\n    onOpen: open,\n    opener: buttonRef.current,\n    screenId: screenId,\n    screenData: {\n      account,\n      activating: activatingDelayed,\n      activationError: error,\n      status,\n      screenId\n    },\n    screenKey: ({\n      account,\n      activating,\n      activationError,\n      screenId\n    }) => (activationError ? activationError.name : '') + account + activating + screenId,\n    visible: opened,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, ({\n    activating,\n    activationError,\n    screenId\n  }) => {\n    if (screenId === 'connecting') {\n      return React.createElement(ScreenConnecting, {\n        providerId: activating,\n        onCancel: handleResetConnection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === 'connected') {\n      return React.createElement(ScreenConnected, {\n        wallet: wallet,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === 'error') {\n      return React.createElement(ScreenError, {\n        error: activationError,\n        onBack: handleResetConnection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(ScreenProviders, {\n      onActivate: handleActivate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    });\n  }));\n}\n\nexport default AccountModule;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Account/AccountModule.js"],"names":["React","useCallback","useEffect","useMemo","useRef","useState","useWallet","Button","GU","IconConnect","useViewport","shortenAddress","AccountButton","AccountPopover","ScreenConnected","ScreenConnecting","ScreenError","ScreenProviders","SCREENS","id","title","AccountModule","opened","setOpened","activatingDelayed","setActivatingDelayed","buttonRef","below","compactMode","wallet","account","connector","error","status","open","toggle","timer","setTimeout","clearTimeout","handleResetConnection","reset","handleActivate","providerId","connect","previousScreenIndex","screenIndex","direction","screenId","findIndex","screen","current","handlePopoverClose","name","activating","activationError"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,OAAxC,EAAiDC,MAAjD,EAAyDC,QAAzD,QAAyE,OAAzE;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,MAAT,EAAiBC,EAAjB,EAAqBC,WAArB,EAAkCC,WAAlC,QAAqD,YAArD;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,MAAMC,OAAO,GAAG,CACd;AAAEC,EAAAA,EAAE,EAAE,WAAN;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CADc,EAEd;AAAED,EAAAA,EAAE,EAAE,YAAN;AAAoBC,EAAAA,KAAK,EAAE;AAA3B,CAFc,EAGd;AAAED,EAAAA,EAAE,EAAE,WAAN;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAHc,EAId;AAAED,EAAAA,EAAE,EAAE,OAAN;AAAeC,EAAAA,KAAK,EAAE;AAAtB,CAJc,CAAhB;;;;;;;AAOA,SAASC,aAAT,GAAyB;AACvB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBlB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACmB,iBAAD,EAAoBC,oBAApB,IAA4CpB,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAMqB,SAAS,GAAGtB,MAAM,EAAxB;AACA,QAAM;AAAEuB,IAAAA;AAAF,MAAYjB,WAAW,EAA7B;AACA,QAAMkB,WAAW,GAAGD,KAAK,CAAC,QAAD,CAAzB;AACA,QAAME,MAAM,GAAGvB,SAAS,EAAxB;AACA,QAAM;AAAEwB,IAAAA,OAAF;AAAWC,IAAAA,SAAX;AAAsBC,IAAAA,KAAtB;AAA6BC,IAAAA;AAA7B,MAAwCJ,MAA9C;AAEA,QAAMK,IAAI,GAAGjC,WAAW,CAAC,MAAMsB,SAAS,CAAC,IAAD,CAAhB,EAAwB,EAAxB,CAAxB;AACA,QAAMY,MAAM,GAAGlC,WAAW,CAAC,MAAMsB,SAAS,CAACD,MAAM,IAAI,CAACA,MAAZ,CAAhB,EAAqC,EAArC,CAA1B;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIkC,KAAJ;;AAEA,QAAIH,MAAM,KAAK,OAAf,EAAwB;AACtBR,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;;AAED,QAAIQ,MAAM,KAAK,YAAf,EAA6B;AAC3BR,MAAAA,oBAAoB,CAACM,SAAD,CAApB;AACAK,MAAAA,KAAK,GAAGC,UAAU,CAAC,MAAM;AACvBZ,QAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD,OAFiB,EAEf,GAFe,CAAlB;AAGD;;AAED,WAAO,MAAMa,YAAY,CAACF,KAAD,CAAzB;AACD,GAfQ,EAeN,CAACL,SAAD,EAAYE,MAAZ,CAfM,CAAT;AAiBA,QAAMM,qBAAqB,GAAGtC,WAAW,CAAC,MAAM;AAC9C4B,IAAAA,MAAM,CAACW,KAAP;AACD,GAFwC,EAEtC,CAACX,MAAD,CAFsC,CAAzC;AAIA,QAAMY,cAAc,GAAGxC,WAAW,CAACyC,UAAU,IAAIb,MAAM,CAACc,OAAP,CAAeD,UAAf,CAAf,EAA2C,CAC3Eb,MAD2E,CAA3C,CAAlC;AAIA,QAAMe,mBAAmB,GAAGxC,MAAM,CAAC,CAAC,CAAF,CAAlC;AAEA,QAAM;AAAEyC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6B3C,OAAO,CAAC,MAAM;AAC/C,UAAM4C,QAAQ,GAAGd,MAAM,KAAK,cAAX,GAA4B,WAA5B,GAA0CA,MAA3D;AAEA,UAAMY,WAAW,GAAG3B,OAAO,CAAC8B,SAAR,CAAkBC,MAAM,IAAIA,MAAM,CAAC9B,EAAP,KAAc4B,QAA1C,CAApB;AACA,UAAMD,SAAS,GAAGF,mBAAmB,CAACM,OAApB,GAA8BL,WAA9B,GAA4C,CAAC,CAA7C,GAAiD,CAAnE;AAEAD,IAAAA,mBAAmB,CAACM,OAApB,GAA8BL,WAA9B;AAEA,WAAO;AAAEC,MAAAA,SAAF;AAAaD,MAAAA;AAAb,KAAP;AACD,GATyC,EASvC,CAACZ,MAAD,CATuC,CAA1C;AAWA,QAAMgB,MAAM,GAAG/B,OAAO,CAAC2B,WAAD,CAAtB;AACA,QAAME,QAAQ,GAAGE,MAAM,CAAC9B,EAAxB;AAEA,QAAMgC,kBAAkB,GAAGlD,WAAW,CAAC,MAAM;AAC3C,QAAI8C,QAAQ,KAAK,YAAb,IAA6BA,QAAQ,KAAK,OAA9C,EAAuD;AACrD;AACA,aAAO,KAAP;AACD;;AACDxB,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GANqC,EAMnC,CAACwB,QAAD,CANmC,CAAtC;AAQA,SACE;AACE,IAAA,GAAG,EAAErB,SADP;AAEE,IAAA,QAAQ,EAAC,GAFX;AAAA,UAOaE,WAAW,GAAG,MAAH,GAAa,GAAE,OAAOpB,EAAG,IAPjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWGyC,MAAM,CAAC9B,EAAP,KAAc,WAAd,GACC,oBAAC,aAAD;AACE,IAAA,KAAK,EAAER,cAAc,CAACkB,MAAM,CAACC,OAAR,CADvB;AAEE,IAAA,OAAO,EAAEK,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAMC,oBAAC,MAAD;AACE,IAAA,IAAI,EAAE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADR;AAEE,IAAA,KAAK,EAAC,iBAFR;AAGE,IAAA,OAAO,EAAEA,MAHX;AAIE,IAAA,OAAO,EAAEP,WAAW,GAAG,MAAH,GAAY,KAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjBJ,EAwBE,oBAAC,cAAD;AACE,IAAA,SAAS,EAAEkB,SADb;AAEE,IAAA,OAAO,EAAEG,MAAM,CAAC7B,KAFlB;AAGE,IAAA,IAAI,EAAE,CAAC;AAAE2B,MAAAA;AAAF,KAAD,KAAkBA,QAAQ,GAAGd,MAAX,GAAoBD,KAAK,CAACoB,IAHpD;AAIE,IAAA,OAAO,EAAED,kBAJX;AAKE,IAAA,MAAM,EAAEjB,IALV;AAME,IAAA,MAAM,EAAER,SAAS,CAACwB,OANpB;AAOE,IAAA,QAAQ,EAAEH,QAPZ;AAQE,IAAA,UAAU,EAAE;AACVjB,MAAAA,OADU;AAEVuB,MAAAA,UAAU,EAAE7B,iBAFF;AAGV8B,MAAAA,eAAe,EAAEtB,KAHP;AAIVC,MAAAA,MAJU;AAKVc,MAAAA;AALU,KARd;AAeE,IAAA,SAAS,EAAE,CAAC;AAAEjB,MAAAA,OAAF;AAAWuB,MAAAA,UAAX;AAAuBC,MAAAA,eAAvB;AAAwCP,MAAAA;AAAxC,KAAD,KACT,CAACO,eAAe,GAAGA,eAAe,CAACF,IAAnB,GAA0B,EAA1C,IACAtB,OADA,GAEAuB,UAFA,GAGAN,QAnBJ;AAqBE,IAAA,OAAO,EAAEzB,MArBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAuBG,CAAC;AAAE+B,IAAAA,UAAF;AAAcC,IAAAA,eAAd;AAA+BP,IAAAA;AAA/B,GAAD,KAA+C;AAC9C,QAAIA,QAAQ,KAAK,YAAjB,EAA+B;AAC7B,aACE,oBAAC,gBAAD;AACE,QAAA,UAAU,EAAEM,UADd;AAEE,QAAA,QAAQ,EAAEd,qBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;AACD,QAAIQ,QAAQ,KAAK,WAAjB,EAA8B;AAC5B,aAAO,oBAAC,eAAD;AAAiB,QAAA,MAAM,EAAElB,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,QAAIkB,QAAQ,KAAK,OAAjB,EAA0B;AACxB,aACE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAEO,eADT;AAEE,QAAA,MAAM,EAAEf,qBAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;AACD,WAAO,oBAAC,eAAD;AAAiB,MAAA,UAAU,EAAEE,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GA5CH,CAxBF,CADF;AAyED;;AAED,eAAepB,aAAf","sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { Button, GU, IconConnect, useViewport } from '@aragon/ui'\nimport { shortenAddress } from '../../lib/web3-utils'\nimport AccountButton from './AccountButton'\nimport AccountPopover from './AccountPopover'\nimport ScreenConnected from './ScreenConnected'\nimport ScreenConnecting from './ScreenConnecting'\nimport ScreenError from './ScreenError'\nimport ScreenProviders from './ScreenProviders'\n\nconst SCREENS = [\n  { id: 'providers', title: 'Use account from' },\n  { id: 'connecting', title: 'Use account from' },\n  { id: 'connected', title: 'Active account' },\n  { id: 'error', title: 'Connection error' },\n]\n\nfunction AccountModule() {\n  const [opened, setOpened] = useState(false)\n  const [activatingDelayed, setActivatingDelayed] = useState(null)\n  const buttonRef = useRef()\n  const { below } = useViewport()\n  const compactMode = below('medium')\n  const wallet = useWallet()\n  const { account, connector, error, status } = wallet\n\n  const open = useCallback(() => setOpened(true), [])\n  const toggle = useCallback(() => setOpened(opened => !opened), [])\n\n  useEffect(() => {\n    let timer\n\n    if (status === 'error') {\n      setActivatingDelayed(null)\n    }\n\n    if (status === 'connecting') {\n      setActivatingDelayed(connector)\n      timer = setTimeout(() => {\n        setActivatingDelayed(null)\n      }, 400)\n    }\n\n    return () => clearTimeout(timer)\n  }, [connector, status])\n\n  const handleResetConnection = useCallback(() => {\n    wallet.reset()\n  }, [wallet])\n\n  const handleActivate = useCallback(providerId => wallet.connect(providerId), [\n    wallet,\n  ])\n\n  const previousScreenIndex = useRef(-1)\n\n  const { screenIndex, direction } = useMemo(() => {\n    const screenId = status === 'disconnected' ? 'providers' : status\n\n    const screenIndex = SCREENS.findIndex(screen => screen.id === screenId)\n    const direction = previousScreenIndex.current > screenIndex ? -1 : 1\n\n    previousScreenIndex.current = screenIndex\n\n    return { direction, screenIndex }\n  }, [status])\n\n  const screen = SCREENS[screenIndex]\n  const screenId = screen.id\n\n  const handlePopoverClose = useCallback(() => {\n    if (screenId === 'connecting' || screenId === 'error') {\n      // reject closing the popover\n      return false\n    }\n    setOpened(false)\n  }, [screenId])\n\n  return (\n    <div\n      ref={buttonRef}\n      tabIndex=\"0\"\n      css={`\n        display: flex;\n        align-items: center;\n        justify-content: space-around;\n        width: ${compactMode ? 'auto' : `${24.5 * GU}px`};\n        outline: 0;\n      `}\n    >\n      {screen.id === 'connected' ? (\n        <AccountButton\n          label={shortenAddress(wallet.account)}\n          onClick={toggle}\n        />\n      ) : (\n        <Button\n          icon={<IconConnect />}\n          label=\"Connect account\"\n          onClick={toggle}\n          display={compactMode ? 'icon' : 'all'}\n        />\n      )}\n      <AccountPopover\n        direction={direction}\n        heading={screen.title}\n        keys={({ screenId }) => screenId + status + error.name}\n        onClose={handlePopoverClose}\n        onOpen={open}\n        opener={buttonRef.current}\n        screenId={screenId}\n        screenData={{\n          account,\n          activating: activatingDelayed,\n          activationError: error,\n          status,\n          screenId,\n        }}\n        screenKey={({ account, activating, activationError, screenId }) =>\n          (activationError ? activationError.name : '') +\n          account +\n          activating +\n          screenId\n        }\n        visible={opened}\n      >\n        {({ activating, activationError, screenId }) => {\n          if (screenId === 'connecting') {\n            return (\n              <ScreenConnecting\n                providerId={activating}\n                onCancel={handleResetConnection}\n              />\n            )\n          }\n          if (screenId === 'connected') {\n            return <ScreenConnected wallet={wallet} />\n          }\n          if (screenId === 'error') {\n            return (\n              <ScreenError\n                error={activationError}\n                onBack={handleResetConnection}\n              />\n            )\n          }\n          return <ScreenProviders onActivate={handleActivate} />\n        }}\n      </AccountPopover>\n    </div>\n  )\n}\n\nexport default AccountModule\n"]},"metadata":{},"sourceType":"module"}