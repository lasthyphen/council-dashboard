{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{connect,describeScript,findAppMethodFromIntent}from'@aragon/connect';import{getContract}from'../web3-contracts';import{logWithSentry}from'../sentry';import env from'../environment';import{DISPUTABLE_ACTIONS}from'./mappings';import{getAragonSubgraph}from'./connect-endpoints';import{addressesEqual,getNetworkType}from'../lib/web3-utils';import{buildArbitrableUrl,isArbitrableKnown}from'./known-arbitrables';// Disputable abi\nimport disputableAbi from'../abi/disputables/IDisputable.json';var cachedDescriptions=new Map([]);var ERROR_MSG='Failed to fetch disputed action';/**\n * Get disputable long and short description as well as the URL where the disputed action is taking place\n * @param {String} disputeId Id of the dispute\n * @param {String} organization Address of the organization where the action is being disputed\n * @param {String} disputableAddress Address of the disputable app where the disputed action is taking place\n * @param {String} disputableActionId Disputed action's id relative to the disputable app (e.g. in the context of a disputable voting app, vote #6)\n * @param {String} arbitrableAddress Address of the arbitrable\n * @returns {Object} Object containing the disputed action short and long description as well as the URL.\n */export function describeDisputedAction(_x,_x2,_x3,_x4,_x5){return _describeDisputedAction.apply(this,arguments);}/**\n * Describes the disputed action script using @aragon/connect\n * @param {String} evmScript The EVM script to describe\n * @param {String} organization Address of the organization in question\n * @returns {Array} Array of items where the first item is an array of transaction requests in the path of the disputed action\n *                    and the second item, the app belonging to the organization where the disputed action is taking place.\n */function _describeDisputedAction(){_describeDisputedAction=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(disputeId,organization,disputableAddress,disputableActionId,arbitrableAddress){var disputableContract,appId,_DISPUTABLE_ACTIONS$g,entityPath,scriptExtractor,evmScript,disputedActionURL,_ref2,_ref3,disputedActionRadspec,disputedActionText,executionPath,disputedActionDescription;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;if(!cachedDescriptions.has(disputeId)){_context.next=3;break;}return _context.abrupt(\"return\",cachedDescriptions.get(disputeId));case 3:// Get disputable appId\ndisputableContract=getContract(disputableAddress,disputableAbi);_context.next=6;return disputableContract.appId();case 6:appId=_context.sent;if(!DISPUTABLE_ACTIONS.has(appId)){_context.next=23;break;}_DISPUTABLE_ACTIONS$g=DISPUTABLE_ACTIONS.get(appId),entityPath=_DISPUTABLE_ACTIONS$g.entityPath,scriptExtractor=_DISPUTABLE_ACTIONS$g.scriptExtractor;_context.next=11;return scriptExtractor(disputableAddress,disputableActionId,appId);case 11:evmScript=_context.sent;disputedActionURL=buildDisputedActionUrl(organization,disputableAddress,entityPath,disputableActionId,arbitrableAddress);_context.next=15;return describeActionScript(evmScript,organization);case 15:_ref2=_context.sent;_ref3=_slicedToArray(_ref2,3);disputedActionRadspec=_ref3[0];disputedActionText=_ref3[1];executionPath=_ref3[2];// Get long and short description corresponding to the disputed action.\ndisputedActionDescription={disputedActionRadspec:disputedActionRadspec,disputedActionText:disputedActionText,// Build URL where the disputed action is taking place\ndisputedActionURL:disputedActionURL,// Transaction path\nexecutionPath:executionPath};// Cache disputed action description\ncachedDescriptions.set(disputeId,disputedActionDescription);return _context.abrupt(\"return\",disputedActionDescription);case 23:_context.next=29;break;case 25:_context.prev=25;_context.t0=_context[\"catch\"](0);console.error('Error describing disputable action',_context.t0);logWithSentry(\"'Error describing disputable action \".concat(_context.t0));case 29:return _context.abrupt(\"return\",{disputedActionRadspec:ERROR_MSG});case 30:case\"end\":return _context.stop();}}},_callee,null,[[0,25]]);}));return _describeDisputedAction.apply(this,arguments);}function describeActionScript(_x6,_x7){return _describeActionScript.apply(this,arguments);}/**\n * Gets the array of all children transactions belonging to first step transactions in a forwarding path\n * @param {Array} transactions Array of transactions corresponding to the first step in a forwarding path\n * @returns {Array} Array of all childrens.\n */function _describeActionScript(){_describeActionScript=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(evmScript,organization){var org,apps,transactionRequests,disputedActionRadspec,terminalActions,executionPath,terminalAction,terminalActionAppAddress,app,method,disputedActionText;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!(evmScript==='0x')){_context2.next=2;break;}return _context2.abrupt(\"return\",[]);case 2:_context2.next=4;return connect(organization,['thegraph',{orgSubgraphUrl:getAragonSubgraph()}],// TODO: Remove when @aragon/connect defaults to own node subgraph urls\n{network:env('CHAIN_ID')});case 4:org=_context2.sent;_context2.next=7;return org.apps();case 7:apps=_context2.sent;_context2.next=10;return describeScript(evmScript,apps,org.provider);case 10:_context2.t0=_context2.sent;if(_context2.t0){_context2.next=13;break;}_context2.t0=[];case 13:transactionRequests=_context2.t0;if(transactionRequests.length){_context2.next=16;break;}return _context2.abrupt(\"return\",[ERROR_MSG]);case 16:// Get disputed action long description\ndisputedActionRadspec=buildDisputedActionRadspec(transactionRequests);// In order to get the terminal action/s we must search through the `transactionRequests` children (if any)\nterminalActions=getTerminalActions(transactionRequests);executionPath=contextualizeExecutionPath(transactionRequests,apps);// Get disputed action short text\n// In most cases we'll have just a single action to describe\n// If we do have multiple, we use the first action.\nterminalAction=terminalActions[0];terminalActionAppAddress=terminalAction.to;// Find the App object corresponding to the app where the terminal action will take place\napp=apps.find(function(app){return addressesEqual(app.address,terminalActionAppAddress);});// Get disputed action short text\n// Find method corresponding to the function of the disputed action.\n_context2.next=24;return findAppMethodFromIntent(app,terminalAction);case 24:method=_context2.sent;disputedActionText=method?buildDisputedActionText(app,method):'';return _context2.abrupt(\"return\",[disputedActionRadspec,disputedActionText,executionPath]);case 27:case\"end\":return _context2.stop();}}},_callee2);}));return _describeActionScript.apply(this,arguments);}function getTerminalActions(transactions){return transactions.map(function(transaction){return transaction.children?getTerminalActions(transaction.children):transaction;}).flat();}/**\n * Gets execution path specified by `transactions`\n * @param {Array} transactions Array of transactions in the execution path\n * @param {Array} apps Array of all the org's apps\n * @returns {Array} Execution path\n */function contextualizeExecutionPath(transactions,apps){return transactions.map(function(transaction){var _ref=apps.find(function(app){return addressesEqual(app.address,transaction.to);})||{},name=_ref.name;var appName=name?describeAppName(name):'Unknown app';return _objectSpread({},transaction,{appName:appName,children:transaction.children?contextualizeExecutionPath(transaction.children,apps):[]});});}/**\n * Describes function signature (e.g grantPermission => Grant permission)\n * @param {String} sig Signature of the function to describe\n * @returns {String} Described signature\n */function describeFunctionSig(sig){return sig.replace(/\\(.*?\\)/,'').split(/(?=[A-Z])/).map(function(s,index){return index===0?capitalize(s):s.toLowerCase();}).join(' ');}/**\n * Builds the disputed action short description\n * @param {App} app App where the disputed terminal action will take place\n * @param {Object} method Method corresponding to the disputed terminal action function\n * @returns {String} Short description of the disputed action\n */function buildDisputedActionText(app,method){var artifact=app.artifact,name=app.name,appId=app.appId;var role=artifact.roles.find(function(role){return method.roles.includes(role.id);});// If the terminal action function is not protected by a role, we'll try to describe the function signature\n// (e.g grantPermission would become Grant permission)\nvar actionText=(role===null||role===void 0?void 0:role.name)||describeFunctionSig(method.sig);// If `name` is null most likely means the app is Kernel or ACL\nvar appName=name?describeAppName(name):\"Unknown app (\".concat(appId,\")\");return\"\".concat(appName,\": \").concat(actionText);}/**\n * Builds the disputed action radspec description\n * Assumes array of transactions not empty\n * @param {Array<Object>} transactions Transactions in the disputed action path\n * @returns {String} Radspec description of the disputed action\n */function buildDisputedActionRadspec(transactions){return transactions.map(function(step){return\"\".concat(step.description||'No description');}).join('\\n');}/**\n * Builds the URL corresponding to the disputed action. (e.g the URL of a vote)\n * @param {String} organization Address of the organization\n * @param {String} appAddress Address of the app\n * @param {String} entityPath Entity where the action is being disputed (e.g vote, delay, etc)\n * @param {String} actionId Disputable action id\n * @param {String} arbitrableAddress Address of the arbitrable\n * @returns {String} URL of the disputed action.\n */function buildDisputedActionUrl(organization,appAddress,entityPath,actionId,arbitrableAddress){var networkType=getNetworkType();var arbitrableKnown=isArbitrableKnown(arbitrableAddress,networkType);var url;if(arbitrableKnown){url=buildArbitrableUrl(arbitrableAddress,actionId,networkType);}else{// Fallback to Aragon client url\nurl=buildClientUrl(organization,appAddress,entityPath,actionId,networkType);}return url;}/**\n * Builds URL of the organization in the Aragon client\n * @param {String} organization Address of the organization in question\n * @param {String} appAddress Address of the app\n * @param {String} entityPath Realtive path where the disputed action is taking place\n * @param {String} actionId Id of the disputed action in the context of the disputable app\n * @param {String} _networkType The network type\n * @returns {String} URL of the organization\n */function buildClientUrl(organization,appAddress,entityPath,actionId,_networkType){return[\"http://localhost:3001/#/\".concat(organization),appAddress,entityPath,actionId].join('/');}var describeAppName=function describeAppName(appName){return appName.split('-').map(capitalize).join(' ');};var capitalize=function capitalize(str){return str.charAt(0).toUpperCase()+str.slice(1);};","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/index.js"],"names":["connect","describeScript","findAppMethodFromIntent","getContract","logWithSentry","env","DISPUTABLE_ACTIONS","getAragonSubgraph","addressesEqual","getNetworkType","buildArbitrableUrl","isArbitrableKnown","disputableAbi","cachedDescriptions","Map","ERROR_MSG","describeDisputedAction","disputeId","organization","disputableAddress","disputableActionId","arbitrableAddress","has","get","disputableContract","appId","entityPath","scriptExtractor","evmScript","disputedActionURL","buildDisputedActionUrl","describeActionScript","disputedActionRadspec","disputedActionText","executionPath","disputedActionDescription","set","console","error","orgSubgraphUrl","network","org","apps","provider","transactionRequests","length","buildDisputedActionRadspec","terminalActions","getTerminalActions","contextualizeExecutionPath","terminalAction","terminalActionAppAddress","to","app","find","address","method","buildDisputedActionText","transactions","map","transaction","children","flat","name","appName","describeAppName","describeFunctionSig","sig","replace","split","s","index","capitalize","toLowerCase","join","artifact","role","roles","includes","id","actionText","step","description","appAddress","actionId","networkType","arbitrableKnown","url","buildClientUrl","_networkType","str","charAt","toUpperCase","slice"],"mappings":"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","sourcesContent":["import {\n  connect,\n  describeScript,\n  findAppMethodFromIntent,\n} from '@aragon/connect'\nimport { getContract } from '../web3-contracts'\nimport { logWithSentry } from '../sentry'\n\nimport env from '../environment'\nimport { DISPUTABLE_ACTIONS } from './mappings'\nimport { getAragonSubgraph } from './connect-endpoints'\nimport { addressesEqual, getNetworkType } from '../lib/web3-utils'\nimport { buildArbitrableUrl, isArbitrableKnown } from './known-arbitrables'\n\n// Disputable abi\nimport disputableAbi from '../abi/disputables/IDisputable.json'\n\nconst cachedDescriptions = new Map([])\n\nconst ERROR_MSG = 'Failed to fetch disputed action'\n\n/**\n * Get disputable long and short description as well as the URL where the disputed action is taking place\n * @param {String} disputeId Id of the dispute\n * @param {String} organization Address of the organization where the action is being disputed\n * @param {String} disputableAddress Address of the disputable app where the disputed action is taking place\n * @param {String} disputableActionId Disputed action's id relative to the disputable app (e.g. in the context of a disputable voting app, vote #6)\n * @param {String} arbitrableAddress Address of the arbitrable\n * @returns {Object} Object containing the disputed action short and long description as well as the URL.\n */\nexport async function describeDisputedAction(\n  disputeId,\n  organization,\n  disputableAddress,\n  disputableActionId,\n  arbitrableAddress\n) {\n  try {\n    if (cachedDescriptions.has(disputeId)) {\n      return cachedDescriptions.get(disputeId)\n    }\n    // Get disputable appId\n    const disputableContract = getContract(disputableAddress, disputableAbi)\n    const appId = await disputableContract.appId()\n\n    if (DISPUTABLE_ACTIONS.has(appId)) {\n      const { entityPath, scriptExtractor } = DISPUTABLE_ACTIONS.get(appId)\n\n      const evmScript = await scriptExtractor(\n        disputableAddress,\n        disputableActionId,\n        appId\n      )\n\n      const disputedActionURL = buildDisputedActionUrl(\n        organization,\n        disputableAddress,\n        entityPath,\n        disputableActionId,\n        arbitrableAddress\n      )\n\n      const [\n        disputedActionRadspec,\n        disputedActionText,\n        executionPath,\n      ] = await describeActionScript(evmScript, organization)\n\n      // Get long and short description corresponding to the disputed action.\n\n      const disputedActionDescription = {\n        disputedActionRadspec,\n        disputedActionText,\n\n        // Build URL where the disputed action is taking place\n        disputedActionURL,\n\n        // Transaction path\n        executionPath,\n      }\n\n      // Cache disputed action description\n      cachedDescriptions.set(disputeId, disputedActionDescription)\n\n      return disputedActionDescription\n    }\n  } catch (err) {\n    console.error('Error describing disputable action', err)\n    logWithSentry(`'Error describing disputable action ${err}`)\n  }\n\n  return { disputedActionRadspec: ERROR_MSG }\n}\n\n/**\n * Describes the disputed action script using @aragon/connect\n * @param {String} evmScript The EVM script to describe\n * @param {String} organization Address of the organization in question\n * @returns {Array} Array of items where the first item is an array of transaction requests in the path of the disputed action\n *                    and the second item, the app belonging to the organization where the disputed action is taking place.\n */\nasync function describeActionScript(evmScript, organization) {\n  // No EVM script, means it's not an executable action (e.g. signaling vote)\n  if (evmScript === '0x') {\n    return []\n  }\n\n  const org = await connect(\n    organization,\n    ['thegraph', { orgSubgraphUrl: getAragonSubgraph() }], // TODO: Remove when @aragon/connect defaults to own node subgraph urls\n    {\n      network: env('CHAIN_ID'),\n    }\n  )\n  const apps = await org.apps()\n\n  const transactionRequests =\n    (await describeScript(evmScript, apps, org.provider)) || []\n\n  if (!transactionRequests.length) {\n    return [ERROR_MSG]\n  }\n\n  // Get disputed action long description\n  const disputedActionRadspec = buildDisputedActionRadspec(transactionRequests)\n  // In order to get the terminal action/s we must search through the `transactionRequests` children (if any)\n  const terminalActions = getTerminalActions(transactionRequests)\n  const executionPath = contextualizeExecutionPath(transactionRequests, apps)\n\n  // Get disputed action short text\n  // In most cases we'll have just a single action to describe\n  // If we do have multiple, we use the first action.\n  const terminalAction = terminalActions[0]\n  const terminalActionAppAddress = terminalAction.to\n\n  // Find the App object corresponding to the app where the terminal action will take place\n  const app = apps.find(app =>\n    addressesEqual(app.address, terminalActionAppAddress)\n  )\n\n  // Get disputed action short text\n  // Find method corresponding to the function of the disputed action.\n  const method = await findAppMethodFromIntent(app, terminalAction)\n  const disputedActionText = method ? buildDisputedActionText(app, method) : ''\n\n  return [disputedActionRadspec, disputedActionText, executionPath]\n}\n\n/**\n * Gets the array of all children transactions belonging to first step transactions in a forwarding path\n * @param {Array} transactions Array of transactions corresponding to the first step in a forwarding path\n * @returns {Array} Array of all childrens.\n */\nfunction getTerminalActions(transactions) {\n  return transactions\n    .map(transaction =>\n      transaction.children\n        ? getTerminalActions(transaction.children)\n        : transaction\n    )\n    .flat()\n}\n\n/**\n * Gets execution path specified by `transactions`\n * @param {Array} transactions Array of transactions in the execution path\n * @param {Array} apps Array of all the org's apps\n * @returns {Array} Execution path\n */\nfunction contextualizeExecutionPath(transactions, apps) {\n  return transactions.map(transaction => {\n    const { name } =\n      apps.find(app => addressesEqual(app.address, transaction.to)) || {}\n    const appName = name ? describeAppName(name) : 'Unknown app'\n\n    return {\n      ...transaction,\n      appName,\n      children: transaction.children\n        ? contextualizeExecutionPath(transaction.children, apps)\n        : [],\n    }\n  })\n}\n\n/**\n * Describes function signature (e.g grantPermission => Grant permission)\n * @param {String} sig Signature of the function to describe\n * @returns {String} Described signature\n */\nfunction describeFunctionSig(sig) {\n  return sig\n    .replace(/\\(.*?\\)/, '')\n    .split(/(?=[A-Z])/)\n    .map((s, index) => (index === 0 ? capitalize(s) : s.toLowerCase()))\n    .join(' ')\n}\n\n/**\n * Builds the disputed action short description\n * @param {App} app App where the disputed terminal action will take place\n * @param {Object} method Method corresponding to the disputed terminal action function\n * @returns {String} Short description of the disputed action\n */\nfunction buildDisputedActionText(app, method) {\n  const { artifact, name, appId } = app\n  const role = artifact.roles.find(role => method.roles.includes(role.id))\n\n  // If the terminal action function is not protected by a role, we'll try to describe the function signature\n  // (e.g grantPermission would become Grant permission)\n  const actionText = role?.name || describeFunctionSig(method.sig)\n\n  // If `name` is null most likely means the app is Kernel or ACL\n  const appName = name ? describeAppName(name) : `Unknown app (${appId})`\n\n  return `${appName}: ${actionText}`\n}\n\n/**\n * Builds the disputed action radspec description\n * Assumes array of transactions not empty\n * @param {Array<Object>} transactions Transactions in the disputed action path\n * @returns {String} Radspec description of the disputed action\n */\nfunction buildDisputedActionRadspec(transactions) {\n  return transactions\n    .map(step => {\n      return `${step.description || 'No description'}`\n    })\n    .join('\\n')\n}\n\n/**\n * Builds the URL corresponding to the disputed action. (e.g the URL of a vote)\n * @param {String} organization Address of the organization\n * @param {String} appAddress Address of the app\n * @param {String} entityPath Entity where the action is being disputed (e.g vote, delay, etc)\n * @param {String} actionId Disputable action id\n * @param {String} arbitrableAddress Address of the arbitrable\n * @returns {String} URL of the disputed action.\n */\nfunction buildDisputedActionUrl(\n  organization,\n  appAddress,\n  entityPath,\n  actionId,\n  arbitrableAddress\n) {\n  const networkType = getNetworkType()\n  const arbitrableKnown = isArbitrableKnown(arbitrableAddress, networkType)\n\n  let url\n  if (arbitrableKnown) {\n    url = buildArbitrableUrl(arbitrableAddress, actionId, networkType)\n  } else {\n    // Fallback to Aragon client url\n    url = buildClientUrl(\n      organization,\n      appAddress,\n      entityPath,\n      actionId,\n      networkType\n    )\n  }\n\n  return url\n}\n\n/**\n * Builds URL of the organization in the Aragon client\n * @param {String} organization Address of the organization in question\n * @param {String} appAddress Address of the app\n * @param {String} entityPath Realtive path where the disputed action is taking place\n * @param {String} actionId Id of the disputed action in the context of the disputable app\n * @param {String} _networkType The network type\n * @returns {String} URL of the organization\n */\nfunction buildClientUrl(\n  organization,\n  appAddress,\n  entityPath,\n  actionId,\n  _networkType\n) {\n  return [\n    `http://localhost:3001/#/${organization}`,\n    appAddress,\n    entityPath,\n    actionId,\n  ].join('/')\n}\n\nconst describeAppName = appName =>\n  appName\n    .split('-')\n    .map(capitalize)\n    .join(' ')\n\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1)\n"]},"metadata":{},"sourceType":"module"}