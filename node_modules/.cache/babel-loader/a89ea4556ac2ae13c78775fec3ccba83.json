{"ast":null,"code":"import _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/Activity/TransactionProgress.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { ProgressBar, GU } from '@aragon/ui';\nimport { Transition, animated } from 'react-spring/renderprops';\nimport { ActivityStatusType } from './prop-types';\nimport TimeTag from './TimeTag';\nimport useNow from '../../hooks/useNow';\nimport { ACTIVITY_STATUS_CONFIRMED, ACTIVITY_STATUS_PENDING } from './activity-statuses';\nimport { norm } from '../../lib/math-utils';\nimport { MINUTE } from '../../utils/date-utils';\nconst DELAY_BEFORE_HIDE = 1000;\nconst TX_DURATION_AVERAGE = 3 * MINUTE; // threshold at which point we switch to displaying the indeterminate progress\n// bar, so that the user doesn’t get confused by a completed progress bar.\n\nconst TX_DURATION_THRESHOLD = TX_DURATION_AVERAGE - MINUTE / 2;\n\nfunction getProgress(status, createdAt, estimate, threshold, now) {\n  if (status === ACTIVITY_STATUS_CONFIRMED) {\n    return 1;\n  }\n\n  return now > threshold ? -1 : norm(now, createdAt, estimate);\n}\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"TransactionProgress___StyledDiv\",\n  componentId: \"sc-1mv78eq-0\"\n})([\"flex-grow:1\"]);\n\nvar _StyledTimeTag = _styled(TimeTag).withConfig({\n  displayName: \"TransactionProgress___StyledTimeTag\",\n  componentId: \"sc-1mv78eq-1\"\n})([\"margin-left:\", \"px;\"], p => p._css);\n\nconst TransactionProgress = React.memo(function TransactionProgress({\n  createdAt,\n  minedAtEstimate,\n  status\n}) {\n  const now = useNow().valueOf(); // Only animate things if the panel is ready (opened).\n\n  const estimate = createdAt + TX_DURATION_AVERAGE;\n  const threshold = createdAt + TX_DURATION_THRESHOLD;\n  const progress = getProgress(status, createdAt, estimate, threshold, now);\n  const showConfirmed = status === ACTIVITY_STATUS_CONFIRMED;\n  const showTimer = !showConfirmed && now < threshold && status === ACTIVITY_STATUS_PENDING;\n  return React.createElement(Transition, {\n    native: true,\n    delay: DELAY_BEFORE_HIDE,\n    items: status === ACTIVITY_STATUS_PENDING,\n    enter: {\n      height: 28,\n      opacity: 1\n    },\n    leave: {\n      height: 0,\n      opacity: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, show => show && (transition => React.createElement(animated.div, {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      paddingTop: `${1 * GU}px`,\n      ...transition\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(_StyledDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(ProgressBar, {\n    animate: true,\n    value: showConfirmed ? 1 : progress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  })), (showTimer || showConfirmed) && React.createElement(_StyledTimeTag, {\n    date: estimate,\n    label: showConfirmed ? 'confirmed' : null,\n    _css: 2 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))));\n});\nTransactionProgress.propTypes = {\n  // unix timestamps\n  createdAt: PropTypes.number.isRequired,\n  minedAtEstimate: PropTypes.number,\n  status: ActivityStatusType.isRequired\n};\nTransactionProgress.defaultProps = {\n  minedAtEstimate: -1\n};\nexport default TransactionProgress;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Activity/TransactionProgress.js"],"names":["React","PropTypes","ProgressBar","GU","Transition","animated","ActivityStatusType","TimeTag","useNow","ACTIVITY_STATUS_CONFIRMED","ACTIVITY_STATUS_PENDING","norm","MINUTE","DELAY_BEFORE_HIDE","TX_DURATION_AVERAGE","TX_DURATION_THRESHOLD","getProgress","status","createdAt","estimate","threshold","now","TransactionProgress","memo","minedAtEstimate","valueOf","progress","showConfirmed","showTimer","height","opacity","show","transition","display","alignItems","paddingTop","propTypes","number","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ProgressBar, GU } from '@aragon/ui'\nimport { Transition, animated } from 'react-spring/renderprops'\nimport { ActivityStatusType } from './prop-types'\nimport TimeTag from './TimeTag'\n\nimport useNow from '../../hooks/useNow'\nimport {\n  ACTIVITY_STATUS_CONFIRMED,\n  ACTIVITY_STATUS_PENDING,\n} from './activity-statuses'\nimport { norm } from '../../lib/math-utils'\nimport { MINUTE } from '../../utils/date-utils'\n\nconst DELAY_BEFORE_HIDE = 1000\nconst TX_DURATION_AVERAGE = 3 * MINUTE\n// threshold at which point we switch to displaying the indeterminate progress\n// bar, so that the user doesn’t get confused by a completed progress bar.\nconst TX_DURATION_THRESHOLD = TX_DURATION_AVERAGE - MINUTE / 2\n\nfunction getProgress(status, createdAt, estimate, threshold, now) {\n  if (status === ACTIVITY_STATUS_CONFIRMED) {\n    return 1\n  }\n  return now > threshold ? -1 : norm(now, createdAt, estimate)\n}\n\nconst TransactionProgress = React.memo(function TransactionProgress({\n  createdAt,\n  minedAtEstimate,\n  status,\n}) {\n  const now = useNow().valueOf()\n\n  // Only animate things if the panel is ready (opened).\n  const estimate = createdAt + TX_DURATION_AVERAGE\n  const threshold = createdAt + TX_DURATION_THRESHOLD\n\n  const progress = getProgress(status, createdAt, estimate, threshold, now)\n  const showConfirmed = status === ACTIVITY_STATUS_CONFIRMED\n  const showTimer =\n    !showConfirmed && now < threshold && status === ACTIVITY_STATUS_PENDING\n\n  return (\n    <Transition\n      native\n      delay={DELAY_BEFORE_HIDE}\n      items={status === ACTIVITY_STATUS_PENDING}\n      enter={{ height: 28, opacity: 1 }}\n      leave={{ height: 0, opacity: 0 }}\n    >\n      {show =>\n        show &&\n        (transition => (\n          <animated.div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              paddingTop: `${1 * GU}px`,\n              ...transition,\n            }}\n          >\n            <div css=\"flex-grow: 1\">\n              <ProgressBar animate value={showConfirmed ? 1 : progress} />\n            </div>\n            {(showTimer || showConfirmed) && (\n              <TimeTag\n                date={estimate}\n                label={showConfirmed ? 'confirmed' : null}\n                css={`\n                  margin-left: ${2 * GU}px;\n                `}\n              />\n            )}\n          </animated.div>\n        ))\n      }\n    </Transition>\n  )\n})\n\nTransactionProgress.propTypes = {\n  // unix timestamps\n  createdAt: PropTypes.number.isRequired,\n  minedAtEstimate: PropTypes.number,\n  status: ActivityStatusType.isRequired,\n}\n\nTransactionProgress.defaultProps = {\n  minedAtEstimate: -1,\n}\n\nexport default TransactionProgress\n"]},"metadata":{},"sourceType":"module"}