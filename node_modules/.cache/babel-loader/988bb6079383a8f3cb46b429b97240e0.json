{"ast":null,"code":"const Mutex = require('async-mutex').Mutex;\n\nconst {\n  createAsyncMiddleware\n} = require('json-rpc-engine');\n\nconst createJsonRpcMiddleware = require('eth-json-rpc-middleware/scaffold');\n\nconst LogFilter = require('./log-filter.js');\n\nconst BlockFilter = require('./block-filter.js');\n\nconst TxFilter = require('./tx-filter.js');\n\nconst {\n  intToHex,\n  hexToInt\n} = require('./hexUtils');\n\nmodule.exports = createEthFilterMiddleware;\n\nfunction createEthFilterMiddleware({\n  blockTracker,\n  provider\n}) {\n  // create filter collection\n  let filterIndex = 0;\n  let filters = {}; // create update mutex\n\n  const mutex = new Mutex();\n  const waitForFree = mutexMiddlewareWrapper({\n    mutex\n  });\n  const middleware = createJsonRpcMiddleware({\n    // install filters\n    eth_newFilter: waitForFree(toFilterCreationMiddleware(newLogFilter)),\n    eth_newBlockFilter: waitForFree(toFilterCreationMiddleware(newBlockFilter)),\n    eth_newPendingTransactionFilter: waitForFree(toFilterCreationMiddleware(newPendingTransactionFilter)),\n    // uninstall filters\n    eth_uninstallFilter: waitForFree(toAsyncRpcMiddleware(uninstallFilterHandler)),\n    // checking filter changes\n    eth_getFilterChanges: waitForFree(toAsyncRpcMiddleware(getFilterChanges)),\n    eth_getFilterLogs: waitForFree(toAsyncRpcMiddleware(getFilterLogs))\n  }); // setup filter updating and destroy handler\n\n  const filterUpdater = async ({\n    oldBlock,\n    newBlock\n  }) => {\n    if (filters.length === 0) return; // lock update reads\n\n    const releaseLock = await mutex.acquire();\n\n    try {\n      // process all filters in parallel\n      await Promise.all(objValues(filters).map(async filter => {\n        try {\n          await filter.update({\n            oldBlock,\n            newBlock\n          });\n        } catch (err) {\n          // handle each error individually so filter update errors don't affect other filters\n          console.error(err);\n        }\n      }));\n    } catch (err) {\n      // log error so we don't skip the releaseLock\n      console.error(err);\n    } // unlock update reads\n\n\n    releaseLock();\n  }; // expose filter methods directly\n\n\n  middleware.newLogFilter = newLogFilter;\n  middleware.newBlockFilter = newBlockFilter;\n  middleware.newPendingTransactionFilter = newPendingTransactionFilter;\n  middleware.uninstallFilter = uninstallFilterHandler;\n  middleware.getFilterChanges = getFilterChanges;\n  middleware.getFilterLogs = getFilterLogs; // expose destroy method for cleanup\n\n  middleware.destroy = () => {\n    uninstallAllFilters();\n  };\n\n  return middleware; //\n  // new filters\n  //\n\n  async function newLogFilter(params) {\n    const filter = new LogFilter({\n      provider,\n      params\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  }\n\n  async function newBlockFilter() {\n    const filter = new BlockFilter({\n      provider\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  }\n\n  async function newPendingTransactionFilter() {\n    const filter = new TxFilter({\n      provider\n    });\n    const filterIndex = await installFilter(filter);\n    return filter;\n  } //\n  // get filter changes\n  //\n\n\n  async function getFilterChanges(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`);\n    }\n\n    const results = filter.getChangesAndClear();\n    return results;\n  }\n\n  async function getFilterLogs(filterIndexHex) {\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n\n    if (!filter) {\n      throw new Error(`No filter for index \"${filterIndex}\"`);\n    } // only return results for log filters\n\n\n    if (filter.type === 'log') {\n      results = filter.getAllResults();\n    } else {\n      results = [];\n    }\n\n    return results;\n  } //\n  // remove filters\n  //\n\n\n  async function uninstallFilterHandler(filterIndexHex) {\n    // check filter exists\n    const filterIndex = hexToInt(filterIndexHex);\n    const filter = filters[filterIndex];\n    const result = Boolean(filter); // uninstall filter\n\n    if (result) {\n      await uninstallFilter(filterIndex);\n    }\n\n    return result;\n  } //\n  // utils\n  //\n\n\n  async function installFilter(filter) {\n    const prevFilterCount = objValues(filters).length; // install filter\n\n    const currentBlock = await blockTracker.getLatestBlock();\n    await filter.initialize({\n      currentBlock\n    });\n    filterIndex++;\n    filters[filterIndex] = filter;\n    filter.id = filterIndex;\n    filter.idHex = intToHex(filterIndex); // update block tracker subs\n\n    const newFilterCount = objValues(filters).length;\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount\n    });\n    return filterIndex;\n  }\n\n  async function uninstallFilter(filterIndex) {\n    const prevFilterCount = objValues(filters).length;\n    delete filters[filterIndex]; // update block tracker subs\n\n    const newFilterCount = objValues(filters).length;\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount\n    });\n  }\n\n  async function uninstallAllFilters() {\n    const prevFilterCount = objValues(filters).length;\n    filters = {}; // update block tracker subs\n\n    updateBlockTrackerSubs({\n      prevFilterCount,\n      newFilterCount: 0\n    });\n  }\n\n  function updateBlockTrackerSubs({\n    prevFilterCount,\n    newFilterCount\n  }) {\n    // subscribe\n    if (prevFilterCount === 0 && newFilterCount > 0) {\n      blockTracker.on('sync', filterUpdater);\n      return;\n    } // unsubscribe\n\n\n    if (prevFilterCount > 0 && newFilterCount === 0) {\n      blockTracker.removeListener('sync', filterUpdater);\n      return;\n    }\n  }\n} // helper for turning filter constructors into rpc middleware\n\n\nfunction toFilterCreationMiddleware(createFilterFn) {\n  return toAsyncRpcMiddleware(async (...args) => {\n    const filter = await createFilterFn(...args);\n    const result = intToHex(filter.id);\n    return result;\n  });\n} // helper for pulling out req.params and setting res.result\n\n\nfunction toAsyncRpcMiddleware(asyncFn) {\n  return createAsyncMiddleware(async (req, res) => {\n    const result = await asyncFn.apply(null, req.params);\n    res.result = result;\n  });\n}\n\nfunction mutexMiddlewareWrapper({\n  mutex\n}) {\n  return middleware => {\n    return async (req, res, next, end) => {\n      // wait for mutex available\n      // we can release immediately because\n      // we just need to make sure updates aren't active\n      const releaseLock = await mutex.acquire();\n      releaseLock();\n      middleware(req, res, next, end);\n    };\n  };\n}\n\nfunction objValues(obj, fn) {\n  const values = [];\n\n  for (let key in obj) {\n    values.push(obj[key]);\n  }\n\n  return values;\n}","map":null,"metadata":{},"sourceType":"script"}