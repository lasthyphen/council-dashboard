{"ast":null,"code":"import { useMemo } from 'react';\nimport { Phase as DisputePhase } from '../types/dispute-status-types';\nimport { getTermEndTime } from '../utils/court-utils';\nimport { getEvidenceSubmissionEndTerm, getPhaseAndTransition, getRoundPhasesAndTime } from '../utils/dispute-utils';\nimport { useCourtConfig } from '../providers/CourtConfig';\nimport { useCourtClock } from '../providers/CourtClock';\n/**\n * Construct dispute timeline for the given dispute\n * @param {Object} dispute The dispute to get the timeline from\n * @param {Object} courtConfig The court configuration\n * @param {Number} currentTerm The court current term\n * @returns {Array} The timeline of the given dispute\n */\n\nexport default function useDisputeTimeline(dispute) {\n  const courtConfig = useCourtConfig();\n  const {\n    currentTermId\n  } = useCourtClock();\n  const {\n    createdAt\n  } = dispute;\n  const currentPhase = getPhaseAndTransition(dispute, currentTermId, courtConfig);\n  const evidenceSubmissionEndTerm = getEvidenceSubmissionEndTerm(dispute, courtConfig);\n  const evidenceSubmissionEndTime = getTermEndTime(evidenceSubmissionEndTerm, courtConfig);\n  return useMemo(() => {\n    const timeLine = [{\n      phase: DisputePhase.Evidence,\n      endTime: evidenceSubmissionEndTime,\n      active: currentPhase.phase === DisputePhase.Evidence,\n      roundId: 0\n    }, {\n      phase: DisputePhase.Created,\n      // create Symbol\n      endTime: createdAt\n    }];\n    const rounds = [];\n    dispute.rounds.forEach(round => {\n      const roundPhases = getRoundPhasesAndTime(round, currentPhase, currentTermId, courtConfig);\n      rounds.unshift([...roundPhases].reverse());\n    });\n\n    if (rounds.length === 0) {\n      return timeLine;\n    }\n\n    timeLine.unshift(rounds);\n\n    if (currentPhase.phase === DisputePhase.ExecuteRuling || currentPhase.phase === DisputePhase.ClaimRewards) {\n      timeLine.unshift({\n        phase: DisputePhase.ExecuteRuling,\n        active: DisputePhase.ExecuteRuling === currentPhase.phase,\n        roundId: currentPhase.roundId\n      });\n    }\n\n    if (currentPhase.phase === DisputePhase.ClaimRewards) {\n      timeLine.unshift({\n        phase: DisputePhase.ClaimRewards,\n        active: currentPhase.phase === DisputePhase.ClaimRewards,\n        roundId: currentPhase.roundId\n      });\n    }\n\n    return timeLine;\n  }, // We are leaving out courtConfig and dispute.rounds as dependencies to prevent the timeline from being recomputed on every poll.\n  // The current phase dependency is sufficient for recomputing it.\n  // If there's a new round, means the phase has changed\n  [createdAt, currentPhase.phase, evidenceSubmissionEndTime] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useDisputeTimeline.js"],"names":["useMemo","Phase","DisputePhase","getTermEndTime","getEvidenceSubmissionEndTerm","getPhaseAndTransition","getRoundPhasesAndTime","useCourtConfig","useCourtClock","useDisputeTimeline","dispute","courtConfig","currentTermId","createdAt","currentPhase","evidenceSubmissionEndTerm","evidenceSubmissionEndTime","timeLine","phase","Evidence","endTime","active","roundId","Created","rounds","forEach","round","roundPhases","unshift","reverse","length","ExecuteRuling","ClaimRewards"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,KAAK,IAAIC,YAAlB,QAAsC,+BAAtC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SACEC,4BADF,EAEEC,qBAFF,EAGEC,qBAHF,QAIO,wBAJP;AAKA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,aAAT,QAA8B,yBAA9B;AAEA;;;;;;;;AAOA,eAAe,SAASC,kBAAT,CAA4BC,OAA5B,EAAqC;AAClD,QAAMC,WAAW,GAAGJ,cAAc,EAAlC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAoBJ,aAAa,EAAvC;AACA,QAAM;AAAEK,IAAAA;AAAF,MAAgBH,OAAtB;AAEA,QAAMI,YAAY,GAAGT,qBAAqB,CACxCK,OADwC,EAExCE,aAFwC,EAGxCD,WAHwC,CAA1C;AAMA,QAAMI,yBAAyB,GAAGX,4BAA4B,CAC5DM,OAD4D,EAE5DC,WAF4D,CAA9D;AAIA,QAAMK,yBAAyB,GAAGb,cAAc,CAC9CY,yBAD8C,EAE9CJ,WAF8C,CAAhD;AAKA,SAAOX,OAAO,CACZ,MAAM;AACJ,UAAMiB,QAAQ,GAAG,CACf;AACEC,MAAAA,KAAK,EAAEhB,YAAY,CAACiB,QADtB;AAEEC,MAAAA,OAAO,EAAEJ,yBAFX;AAGEK,MAAAA,MAAM,EAAEP,YAAY,CAACI,KAAb,KAAuBhB,YAAY,CAACiB,QAH9C;AAIEG,MAAAA,OAAO,EAAE;AAJX,KADe,EAOf;AACEJ,MAAAA,KAAK,EAAEhB,YAAY,CAACqB,OADtB;AAC+B;AAC7BH,MAAAA,OAAO,EAAEP;AAFX,KAPe,CAAjB;AAaA,UAAMW,MAAM,GAAG,EAAf;AACAd,IAAAA,OAAO,CAACc,MAAR,CAAeC,OAAf,CAAuBC,KAAK,IAAI;AAC9B,YAAMC,WAAW,GAAGrB,qBAAqB,CACvCoB,KADuC,EAEvCZ,YAFuC,EAGvCF,aAHuC,EAIvCD,WAJuC,CAAzC;AAMAa,MAAAA,MAAM,CAACI,OAAP,CAAe,CAAC,GAAGD,WAAJ,EAAiBE,OAAjB,EAAf;AACD,KARD;;AAUA,QAAIL,MAAM,CAACM,MAAP,KAAkB,CAAtB,EAAyB;AACvB,aAAOb,QAAP;AACD;;AAEDA,IAAAA,QAAQ,CAACW,OAAT,CAAiBJ,MAAjB;;AAEA,QACEV,YAAY,CAACI,KAAb,KAAuBhB,YAAY,CAAC6B,aAApC,IACAjB,YAAY,CAACI,KAAb,KAAuBhB,YAAY,CAAC8B,YAFtC,EAGE;AACAf,MAAAA,QAAQ,CAACW,OAAT,CAAiB;AACfV,QAAAA,KAAK,EAAEhB,YAAY,CAAC6B,aADL;AAEfV,QAAAA,MAAM,EAAEnB,YAAY,CAAC6B,aAAb,KAA+BjB,YAAY,CAACI,KAFrC;AAGfI,QAAAA,OAAO,EAAER,YAAY,CAACQ;AAHP,OAAjB;AAKD;;AAED,QAAIR,YAAY,CAACI,KAAb,KAAuBhB,YAAY,CAAC8B,YAAxC,EAAsD;AACpDf,MAAAA,QAAQ,CAACW,OAAT,CAAiB;AACfV,QAAAA,KAAK,EAAEhB,YAAY,CAAC8B,YADL;AAEfX,QAAAA,MAAM,EAAEP,YAAY,CAACI,KAAb,KAAuBhB,YAAY,CAAC8B,YAF7B;AAGfV,QAAAA,OAAO,EAAER,YAAY,CAACQ;AAHP,OAAjB;AAKD;;AAED,WAAOL,QAAP;AACD,GApDW,EAsDZ;AACA;AACA;AACA,GAACJ,SAAD,EAAYC,YAAY,CAACI,KAAzB,EAAgCF,yBAAhC,CAzDY,CAyD+C;AAzD/C,GAAd;AA2DD","sourcesContent":["import { useMemo } from 'react'\nimport { Phase as DisputePhase } from '../types/dispute-status-types'\nimport { getTermEndTime } from '../utils/court-utils'\nimport {\n  getEvidenceSubmissionEndTerm,\n  getPhaseAndTransition,\n  getRoundPhasesAndTime,\n} from '../utils/dispute-utils'\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useCourtClock } from '../providers/CourtClock'\n\n/**\n * Construct dispute timeline for the given dispute\n * @param {Object} dispute The dispute to get the timeline from\n * @param {Object} courtConfig The court configuration\n * @param {Number} currentTerm The court current term\n * @returns {Array} The timeline of the given dispute\n */\nexport default function useDisputeTimeline(dispute) {\n  const courtConfig = useCourtConfig()\n  const { currentTermId } = useCourtClock()\n  const { createdAt } = dispute\n\n  const currentPhase = getPhaseAndTransition(\n    dispute,\n    currentTermId,\n    courtConfig\n  )\n\n  const evidenceSubmissionEndTerm = getEvidenceSubmissionEndTerm(\n    dispute,\n    courtConfig\n  )\n  const evidenceSubmissionEndTime = getTermEndTime(\n    evidenceSubmissionEndTerm,\n    courtConfig\n  )\n\n  return useMemo(\n    () => {\n      const timeLine = [\n        {\n          phase: DisputePhase.Evidence,\n          endTime: evidenceSubmissionEndTime,\n          active: currentPhase.phase === DisputePhase.Evidence,\n          roundId: 0,\n        },\n        {\n          phase: DisputePhase.Created, // create Symbol\n          endTime: createdAt,\n        },\n      ]\n\n      const rounds = []\n      dispute.rounds.forEach(round => {\n        const roundPhases = getRoundPhasesAndTime(\n          round,\n          currentPhase,\n          currentTermId,\n          courtConfig\n        )\n        rounds.unshift([...roundPhases].reverse())\n      })\n\n      if (rounds.length === 0) {\n        return timeLine\n      }\n\n      timeLine.unshift(rounds)\n\n      if (\n        currentPhase.phase === DisputePhase.ExecuteRuling ||\n        currentPhase.phase === DisputePhase.ClaimRewards\n      ) {\n        timeLine.unshift({\n          phase: DisputePhase.ExecuteRuling,\n          active: DisputePhase.ExecuteRuling === currentPhase.phase,\n          roundId: currentPhase.roundId,\n        })\n      }\n\n      if (currentPhase.phase === DisputePhase.ClaimRewards) {\n        timeLine.unshift({\n          phase: DisputePhase.ClaimRewards,\n          active: currentPhase.phase === DisputePhase.ClaimRewards,\n          roundId: currentPhase.roundId,\n        })\n      }\n\n      return timeLine\n    },\n\n    // We are leaving out courtConfig and dispute.rounds as dependencies to prevent the timeline from being recomputed on every poll.\n    // The current phase dependency is sufficient for recomputing it.\n    // If there's a new round, means the phase has changed\n    [createdAt, currentPhase.phase, evidenceSubmissionEndTime] // eslint-disable-line react-hooks/exhaustive-deps\n  )\n}\n"]},"metadata":{},"sourceType":"module"}