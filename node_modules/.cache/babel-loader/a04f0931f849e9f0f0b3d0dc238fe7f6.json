{"ast":null,"code":"import _defineProperty from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _stringMapping,_endedStringMapping,_taskActionsMapping;export var ERROR_TYPES={ERROR_FETCHING_IPFS:Symbol('Error fetching ipfs content')};export var Status={Open:Symbol('Open'),Closed:Symbol('Closed'),Voided:Symbol('Voided')};export var Phase={All:Symbol('All'),Invalid:Symbol('Invalid'),Adjudicating:Symbol('Adjudicating'),Ruled:Symbol('Ruled'),Evidence:Symbol('Evidence submission'),NotStarted:Symbol('Not started'),JuryDrafting:Symbol('Jury drafting'),VotingPeriod:Symbol('Voting period'),RevealVote:Symbol('Reveal vote'),AppealRuling:Symbol('Appealing'),ConfirmAppeal:Symbol('ConfirmingAppeal'),ClaimRewards:Symbol('Claim rewards'),Ended:Symbol('Ended'),ExecuteRuling:Symbol('Execute Ruling'),Created:Symbol('Dispute created')};var stringMapping=(_stringMapping={},_defineProperty(_stringMapping,Status.Open,'Open'),_defineProperty(_stringMapping,Status.Closed,'Closed'),_defineProperty(_stringMapping,Phase.All,'All'),_defineProperty(_stringMapping,Phase.Evidence,'Adding arguments'),_defineProperty(_stringMapping,Phase.JuryDrafting,'Jury drafting'),_defineProperty(_stringMapping,Phase.NotStarted,'Starts in'),_defineProperty(_stringMapping,Phase.VotingPeriod,'Voting period'),_defineProperty(_stringMapping,Phase.RevealVote,'Reveal vote'),_defineProperty(_stringMapping,Phase.AppealRuling,'Appeal ruling'),_defineProperty(_stringMapping,Phase.ConfirmAppeal,'Confirm appeal'),_defineProperty(_stringMapping,Phase.ClaimRewards,'Claim rewards'),_defineProperty(_stringMapping,Phase.Invalid,'Invalid'),_defineProperty(_stringMapping,Phase.Ended,'Ended'),_defineProperty(_stringMapping,Phase.ExecuteRuling,'Execute Ruling'),_defineProperty(_stringMapping,Phase.Created,'Dispute created'),_stringMapping);var endedStringMapping=(_endedStringMapping={},_defineProperty(_endedStringMapping,Status.Open,'Open'),_defineProperty(_endedStringMapping,Status.Closed,'Closed'),_defineProperty(_endedStringMapping,Phase.All,'All'),_defineProperty(_endedStringMapping,Phase.Evidence,'Arguments added'),_defineProperty(_endedStringMapping,Phase.JuryDrafting,'Jury drafted'),_defineProperty(_endedStringMapping,Phase.VotingPeriod,'Voting period'),_defineProperty(_endedStringMapping,Phase.RevealVote,'Vote revealed'),_defineProperty(_endedStringMapping,Phase.AppealRuling,'Appeal ruling'),_defineProperty(_endedStringMapping,Phase.ConfirmAppeal,'Appeal confirmed'),_defineProperty(_endedStringMapping,Phase.ClaimRewards,'Claim rewards'),_defineProperty(_endedStringMapping,Phase.Invalid,'Started'),_defineProperty(_endedStringMapping,Phase.Ended,'Ended'),_defineProperty(_endedStringMapping,Phase.ExecuteRuling,'Ruling Executed'),_defineProperty(_endedStringMapping,Phase.Created,'Dispute created'),_endedStringMapping);var symbolMapping={All:Phase.All,Invalid:Phase.Invalid,Committing:Phase.VotingPeriod,Revealing:Phase.RevealVote,Drafting:Phase.JuryDrafting,Adjudicating:Phase.Adjudicating,Appeal:Phase.AppealRuling,ConfirmAppeal:Phase.ConfirmAppeal,ConfirmingAppeal:Phase.ConfirmAppeal,Ruled:Phase.Ruled,Evidence:Phase.Evidence,ExecuteRuling:Phase.ExecuteRuling,Created:Phase.Created};var taskActionsMapping=(_taskActionsMapping={},_defineProperty(_taskActionsMapping,Phase.All,'All'),_defineProperty(_taskActionsMapping,Phase.VotingPeriod,'Commit vote'),_defineProperty(_taskActionsMapping,Phase.RevealVote,'Reveal vote'),_defineProperty(_taskActionsMapping,Phase.AppealRuling,'Appeal ruling'),_defineProperty(_taskActionsMapping,Phase.ConfirmAppeal,'Confirm appeal'),_taskActionsMapping);export function convertFromString(str){return symbolMapping[str];}export function convertToString(symbol){return stringMapping[symbol];}export function getPhaseStringForStatus(symbol,active){if(active){return stringMapping[symbol];}else{return endedStringMapping[symbol];}}export function getTaskActionString(symbol){return taskActionsMapping[symbol];}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/types/dispute-status-types.js"],"names":["ERROR_TYPES","ERROR_FETCHING_IPFS","Symbol","Status","Open","Closed","Voided","Phase","All","Invalid","Adjudicating","Ruled","Evidence","NotStarted","JuryDrafting","VotingPeriod","RevealVote","AppealRuling","ConfirmAppeal","ClaimRewards","Ended","ExecuteRuling","Created","stringMapping","endedStringMapping","symbolMapping","Committing","Revealing","Drafting","Appeal","ConfirmingAppeal","taskActionsMapping","convertFromString","str","convertToString","symbol","getPhaseStringForStatus","active","getTaskActionString"],"mappings":"yLAAA,MAAO,IAAMA,CAAAA,WAAW,CAAG,CACzBC,mBAAmB,CAAEC,MAAM,CAAC,6BAAD,CADF,CAApB,CAIP,MAAO,IAAMC,CAAAA,MAAM,CAAG,CACpBC,IAAI,CAAEF,MAAM,CAAC,MAAD,CADQ,CAEpBG,MAAM,CAAEH,MAAM,CAAC,QAAD,CAFM,CAGpBI,MAAM,CAAEJ,MAAM,CAAC,QAAD,CAHM,CAAf,CAMP,MAAO,IAAMK,CAAAA,KAAK,CAAG,CACnBC,GAAG,CAAEN,MAAM,CAAC,KAAD,CADQ,CAEnBO,OAAO,CAAEP,MAAM,CAAC,SAAD,CAFI,CAGnBQ,YAAY,CAAER,MAAM,CAAC,cAAD,CAHD,CAInBS,KAAK,CAAET,MAAM,CAAC,OAAD,CAJM,CAKnBU,QAAQ,CAAEV,MAAM,CAAC,qBAAD,CALG,CAMnBW,UAAU,CAAEX,MAAM,CAAC,aAAD,CANC,CAOnBY,YAAY,CAAEZ,MAAM,CAAC,eAAD,CAPD,CAQnBa,YAAY,CAAEb,MAAM,CAAC,eAAD,CARD,CASnBc,UAAU,CAAEd,MAAM,CAAC,aAAD,CATC,CAUnBe,YAAY,CAAEf,MAAM,CAAC,WAAD,CAVD,CAWnBgB,aAAa,CAAEhB,MAAM,CAAC,kBAAD,CAXF,CAYnBiB,YAAY,CAAEjB,MAAM,CAAC,eAAD,CAZD,CAanBkB,KAAK,CAAElB,MAAM,CAAC,OAAD,CAbM,CAcnBmB,aAAa,CAAEnB,MAAM,CAAC,gBAAD,CAdF,CAenBoB,OAAO,CAAEpB,MAAM,CAAC,iBAAD,CAfI,CAAd,CAkBP,GAAMqB,CAAAA,aAAa,mDAChBpB,MAAM,CAACC,IADS,CACF,MADE,iCAEhBD,MAAM,CAACE,MAFS,CAEA,QAFA,iCAGhBE,KAAK,CAACC,GAHU,CAGJ,KAHI,iCAIhBD,KAAK,CAACK,QAJU,CAIC,kBAJD,iCAKhBL,KAAK,CAACO,YALU,CAKK,eALL,iCAMhBP,KAAK,CAACM,UANU,CAMG,WANH,iCAOhBN,KAAK,CAACQ,YAPU,CAOK,eAPL,iCAQhBR,KAAK,CAACS,UARU,CAQG,aARH,iCAShBT,KAAK,CAACU,YATU,CASK,eATL,iCAUhBV,KAAK,CAACW,aAVU,CAUM,gBAVN,iCAWhBX,KAAK,CAACY,YAXU,CAWK,eAXL,iCAYhBZ,KAAK,CAACE,OAZU,CAYA,SAZA,iCAahBF,KAAK,CAACa,KAbU,CAaF,OAbE,iCAchBb,KAAK,CAACc,aAdU,CAcM,gBAdN,iCAehBd,KAAK,CAACe,OAfU,CAeA,iBAfA,iBAAnB,CAkBA,GAAME,CAAAA,kBAAkB,6DACrBrB,MAAM,CAACC,IADc,CACP,MADO,sCAErBD,MAAM,CAACE,MAFc,CAEL,QAFK,sCAGrBE,KAAK,CAACC,GAHe,CAGT,KAHS,sCAIrBD,KAAK,CAACK,QAJe,CAIJ,iBAJI,sCAKrBL,KAAK,CAACO,YALe,CAKA,cALA,sCAMrBP,KAAK,CAACQ,YANe,CAMA,eANA,sCAOrBR,KAAK,CAACS,UAPe,CAOF,eAPE,sCAQrBT,KAAK,CAACU,YARe,CAQA,eARA,sCASrBV,KAAK,CAACW,aATe,CASC,kBATD,sCAUrBX,KAAK,CAACY,YAVe,CAUA,eAVA,sCAWrBZ,KAAK,CAACE,OAXe,CAWL,SAXK,sCAYrBF,KAAK,CAACa,KAZe,CAYP,OAZO,sCAarBb,KAAK,CAACc,aAbe,CAaC,iBAbD,sCAcrBd,KAAK,CAACe,OAde,CAcL,iBAdK,sBAAxB,CAiBA,GAAMG,CAAAA,aAAa,CAAG,CACpBjB,GAAG,CAAED,KAAK,CAACC,GADS,CAEpBC,OAAO,CAAEF,KAAK,CAACE,OAFK,CAGpBiB,UAAU,CAAEnB,KAAK,CAACQ,YAHE,CAIpBY,SAAS,CAAEpB,KAAK,CAACS,UAJG,CAKpBY,QAAQ,CAAErB,KAAK,CAACO,YALI,CAMpBJ,YAAY,CAAEH,KAAK,CAACG,YANA,CAOpBmB,MAAM,CAAEtB,KAAK,CAACU,YAPM,CAQpBC,aAAa,CAAEX,KAAK,CAACW,aARD,CASpBY,gBAAgB,CAAEvB,KAAK,CAACW,aATJ,CAUpBP,KAAK,CAAEJ,KAAK,CAACI,KAVO,CAWpBC,QAAQ,CAAEL,KAAK,CAACK,QAXI,CAYpBS,aAAa,CAAEd,KAAK,CAACc,aAZD,CAapBC,OAAO,CAAEf,KAAK,CAACe,OAbK,CAAtB,CAgBA,GAAMS,CAAAA,kBAAkB,6DACrBxB,KAAK,CAACC,GADe,CACT,KADS,sCAErBD,KAAK,CAACQ,YAFe,CAEA,aAFA,sCAGrBR,KAAK,CAACS,UAHe,CAGF,aAHE,sCAIrBT,KAAK,CAACU,YAJe,CAIA,eAJA,sCAKrBV,KAAK,CAACW,aALe,CAKC,gBALD,sBAAxB,CAQA,MAAO,SAASc,CAAAA,iBAAT,CAA2BC,GAA3B,CAAgC,CACrC,MAAOR,CAAAA,aAAa,CAACQ,GAAD,CAApB,CACD,CAED,MAAO,SAASC,CAAAA,eAAT,CAAyBC,MAAzB,CAAiC,CACtC,MAAOZ,CAAAA,aAAa,CAACY,MAAD,CAApB,CACD,CAED,MAAO,SAASC,CAAAA,uBAAT,CAAiCD,MAAjC,CAAyCE,MAAzC,CAAiD,CACtD,GAAIA,MAAJ,CAAY,CACV,MAAOd,CAAAA,aAAa,CAACY,MAAD,CAApB,CACD,CAFD,IAEO,CACL,MAAOX,CAAAA,kBAAkB,CAACW,MAAD,CAAzB,CACD,CACF,CAED,MAAO,SAASG,CAAAA,mBAAT,CAA6BH,MAA7B,CAAqC,CAC1C,MAAOJ,CAAAA,kBAAkB,CAACI,MAAD,CAAzB,CACD","sourcesContent":["export const ERROR_TYPES = {\n  ERROR_FETCHING_IPFS: Symbol('Error fetching ipfs content'),\n}\n\nexport const Status = {\n  Open: Symbol('Open'),\n  Closed: Symbol('Closed'),\n  Voided: Symbol('Voided'),\n}\n\nexport const Phase = {\n  All: Symbol('All'),\n  Invalid: Symbol('Invalid'),\n  Adjudicating: Symbol('Adjudicating'),\n  Ruled: Symbol('Ruled'),\n  Evidence: Symbol('Evidence submission'),\n  NotStarted: Symbol('Not started'),\n  JuryDrafting: Symbol('Jury drafting'),\n  VotingPeriod: Symbol('Voting period'),\n  RevealVote: Symbol('Reveal vote'),\n  AppealRuling: Symbol('Appealing'),\n  ConfirmAppeal: Symbol('ConfirmingAppeal'),\n  ClaimRewards: Symbol('Claim rewards'),\n  Ended: Symbol('Ended'),\n  ExecuteRuling: Symbol('Execute Ruling'),\n  Created: Symbol('Dispute created'),\n}\n\nconst stringMapping = {\n  [Status.Open]: 'Open',\n  [Status.Closed]: 'Closed',\n  [Phase.All]: 'All',\n  [Phase.Evidence]: 'Adding arguments',\n  [Phase.JuryDrafting]: 'Jury drafting',\n  [Phase.NotStarted]: 'Starts in',\n  [Phase.VotingPeriod]: 'Voting period',\n  [Phase.RevealVote]: 'Reveal vote',\n  [Phase.AppealRuling]: 'Appeal ruling',\n  [Phase.ConfirmAppeal]: 'Confirm appeal',\n  [Phase.ClaimRewards]: 'Claim rewards',\n  [Phase.Invalid]: 'Invalid',\n  [Phase.Ended]: 'Ended',\n  [Phase.ExecuteRuling]: 'Execute Ruling',\n  [Phase.Created]: 'Dispute created',\n}\n\nconst endedStringMapping = {\n  [Status.Open]: 'Open',\n  [Status.Closed]: 'Closed',\n  [Phase.All]: 'All',\n  [Phase.Evidence]: 'Arguments added',\n  [Phase.JuryDrafting]: 'Jury drafted',\n  [Phase.VotingPeriod]: 'Voting period',\n  [Phase.RevealVote]: 'Vote revealed',\n  [Phase.AppealRuling]: 'Appeal ruling',\n  [Phase.ConfirmAppeal]: 'Appeal confirmed',\n  [Phase.ClaimRewards]: 'Claim rewards',\n  [Phase.Invalid]: 'Started',\n  [Phase.Ended]: 'Ended',\n  [Phase.ExecuteRuling]: 'Ruling Executed',\n  [Phase.Created]: 'Dispute created',\n}\n\nconst symbolMapping = {\n  All: Phase.All,\n  Invalid: Phase.Invalid,\n  Committing: Phase.VotingPeriod,\n  Revealing: Phase.RevealVote,\n  Drafting: Phase.JuryDrafting,\n  Adjudicating: Phase.Adjudicating,\n  Appeal: Phase.AppealRuling,\n  ConfirmAppeal: Phase.ConfirmAppeal,\n  ConfirmingAppeal: Phase.ConfirmAppeal,\n  Ruled: Phase.Ruled,\n  Evidence: Phase.Evidence,\n  ExecuteRuling: Phase.ExecuteRuling,\n  Created: Phase.Created,\n}\n\nconst taskActionsMapping = {\n  [Phase.All]: 'All',\n  [Phase.VotingPeriod]: 'Commit vote',\n  [Phase.RevealVote]: 'Reveal vote',\n  [Phase.AppealRuling]: 'Appeal ruling',\n  [Phase.ConfirmAppeal]: 'Confirm appeal',\n}\n\nexport function convertFromString(str) {\n  return symbolMapping[str]\n}\n\nexport function convertToString(symbol) {\n  return stringMapping[symbol]\n}\n\nexport function getPhaseStringForStatus(symbol, active) {\n  if (active) {\n    return stringMapping[symbol]\n  } else {\n    return endedStringMapping[symbol]\n  }\n}\n\nexport function getTaskActionString(symbol) {\n  return taskActionsMapping[symbol]\n}\n"]},"metadata":{},"sourceType":"module"}