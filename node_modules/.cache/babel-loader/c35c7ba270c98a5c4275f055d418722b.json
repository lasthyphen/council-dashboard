{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useState,useMemo}from'react';import useTasks from'./useTasks';import{addressesEqual}from'../lib/web3-utils';import{dayjs}from'../utils/date-utils';import*as DisputesTypes from'../types/dispute-status-types';var ALL_FILTER=0;var UNSELECTED_PHASE=-1;var INITIAL_DATE_RANGE={start:null,end:null};var TASKS_ACTIONS_TYPES=[DisputesTypes.Phase.All,DisputesTypes.Phase.VotingPeriod,DisputesTypes.Phase.RevealVote,DisputesTypes.Phase.AppealRuling,DisputesTypes.Phase.ConfirmAppeal];function useFilteredTasks(jurorTasksSelected,connectedAccount){var _useState=useState(INITIAL_DATE_RANGE),_useState2=_slicedToArray(_useState,2),selectedDateRange=_useState2[0],setSelectedDateRange=_useState2[1];var _useState3=useState(UNSELECTED_PHASE),_useState4=_slicedToArray(_useState3,2),selectedPhase=_useState4[0],setSelectedPhase=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),filtersSelected=_useState6[0],setFiltersSelected=_useState6[1];// If My Tasks is selected we need to only show ALL-COMMIT-REVEAL actions\nvar TASKS_ACTIONS_TYPES_STRING=jurorTasksSelected?TASKS_ACTIONS_TYPES.slice(0,3).map(DisputesTypes.getTaskActionString):TASKS_ACTIONS_TYPES.map(DisputesTypes.getTaskActionString);var _useTasks=useTasks(),tasks=_useTasks.openTasks,fetching=_useTasks.fetching,error=_useTasks.error;var jurorTasks=useMemo(function(){return tasks?tasks.filter(function(task){return task.juror==='Anyone'?false:addressesEqual(task.juror,connectedAccount);}):[];},[connectedAccount,tasks]);var tasksToFilter=jurorTasksSelected?jurorTasks:tasks;var handleSelectedDateRangeChange=useCallback(function(range){setFiltersSelected(range!==INITIAL_DATE_RANGE);setSelectedDateRange(range);},[setSelectedDateRange]);var handleSelectedPhaseChange=useCallback(function(index){setFiltersSelected(index!==ALL_FILTER);setSelectedPhase(index||UNSELECTED_PHASE);},[]);var filteredTasks=useMemo(function(){return tasksToFilter.filter(function(_ref){var phaseType=_ref.phaseType,dueDate=_ref.dueDate,open=_ref.open;return(selectedPhase===UNSELECTED_PHASE||selectedPhase===ALL_FILTER||phaseType===TASKS_ACTIONS_TYPES[selectedPhase])&&(!selectedDateRange.start||!selectedDateRange.end||dayjs(dueDate).isBetween(dayjs(selectedDateRange.start).startOf('day'),dayjs(selectedDateRange.end).endOf('day'),'[]'));});},[selectedDateRange.end,selectedDateRange.start,selectedPhase,tasksToFilter]);var handleClearFilters=useCallback(function(){setSelectedPhase(UNSELECTED_PHASE);setSelectedDateRange(INITIAL_DATE_RANGE);setFiltersSelected(false);},[]);var emptyFilterResults=!filteredTasks.length&&(selectedPhase>1||selectedDateRange.start||selectedDateRange.end);return{tasks:filteredTasks,fetching:fetching,error:error,filtersSelected:filtersSelected,setFiltersSelected:setFiltersSelected,emptyFilterResults:emptyFilterResults,handleClearFilters:handleClearFilters,selectedDateRange:selectedDateRange,handleSelectedDateRangeChange:handleSelectedDateRangeChange,selectedPhase:selectedPhase,handleSelectedPhaseChange:handleSelectedPhaseChange,openTasksNumber:tasks.length,jurorOpenTaskNumber:jurorTasks.length,taskActionsString:TASKS_ACTIONS_TYPES_STRING};}export default useFilteredTasks;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useFilteredTasks.js"],"names":["useCallback","useState","useMemo","useTasks","addressesEqual","dayjs","DisputesTypes","ALL_FILTER","UNSELECTED_PHASE","INITIAL_DATE_RANGE","start","end","TASKS_ACTIONS_TYPES","Phase","All","VotingPeriod","RevealVote","AppealRuling","ConfirmAppeal","useFilteredTasks","jurorTasksSelected","connectedAccount","selectedDateRange","setSelectedDateRange","selectedPhase","setSelectedPhase","filtersSelected","setFiltersSelected","TASKS_ACTIONS_TYPES_STRING","slice","map","getTaskActionString","tasks","openTasks","fetching","error","jurorTasks","filter","task","juror","tasksToFilter","handleSelectedDateRangeChange","range","handleSelectedPhaseChange","index","filteredTasks","phaseType","dueDate","open","isBetween","startOf","endOf","handleClearFilters","emptyFilterResults","length","openTasksNumber","jurorOpenTaskNumber","taskActionsString"],"mappings":"4HAAA,OAASA,WAAT,CAAsBC,QAAtB,CAAgCC,OAAhC,KAA+C,OAA/C,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,OAASC,cAAT,KAA+B,mBAA/B,CACA,OAASC,KAAT,KAAsB,qBAAtB,CACA,MAAO,GAAKC,CAAAA,aAAZ,KAA+B,+BAA/B,CAEA,GAAMC,CAAAA,UAAU,CAAG,CAAnB,CACA,GAAMC,CAAAA,gBAAgB,CAAG,CAAC,CAA1B,CACA,GAAMC,CAAAA,kBAAkB,CAAG,CAAEC,KAAK,CAAE,IAAT,CAAeC,GAAG,CAAE,IAApB,CAA3B,CACA,GAAMC,CAAAA,mBAAmB,CAAG,CAC1BN,aAAa,CAACO,KAAd,CAAoBC,GADM,CAE1BR,aAAa,CAACO,KAAd,CAAoBE,YAFM,CAG1BT,aAAa,CAACO,KAAd,CAAoBG,UAHM,CAI1BV,aAAa,CAACO,KAAd,CAAoBI,YAJM,CAK1BX,aAAa,CAACO,KAAd,CAAoBK,aALM,CAA5B,CAQA,QAASC,CAAAA,gBAAT,CAA0BC,kBAA1B,CAA8CC,gBAA9C,CAAgE,eACZpB,QAAQ,CAACQ,kBAAD,CADI,wCACvDa,iBADuD,eACpCC,oBADoC,8BAEpBtB,QAAQ,CAACO,gBAAD,CAFY,yCAEvDgB,aAFuD,eAExCC,gBAFwC,8BAGhBxB,QAAQ,CAAC,KAAD,CAHQ,yCAGvDyB,eAHuD,eAGtCC,kBAHsC,eAK9D;AACA,GAAMC,CAAAA,0BAA0B,CAAGR,kBAAkB,CACjDR,mBAAmB,CAACiB,KAApB,CAA0B,CAA1B,CAA6B,CAA7B,EAAgCC,GAAhC,CAAoCxB,aAAa,CAACyB,mBAAlD,CADiD,CAEjDnB,mBAAmB,CAACkB,GAApB,CAAwBxB,aAAa,CAACyB,mBAAtC,CAFJ,CAN8D,cAUhB5B,QAAQ,EAVQ,CAU3C6B,KAV2C,WAUtDC,SAVsD,CAUpCC,QAVoC,WAUpCA,QAVoC,CAU1BC,KAV0B,WAU1BA,KAV0B,CAY9D,GAAMC,CAAAA,UAAU,CAAGlC,OAAO,CACxB,iBACE8B,CAAAA,KAAK,CACDA,KAAK,CAACK,MAAN,CAAa,SAAAC,IAAI,QACfA,CAAAA,IAAI,CAACC,KAAL,GAAe,QAAf,CACI,KADJ,CAEInC,cAAc,CAACkC,IAAI,CAACC,KAAN,CAAalB,gBAAb,CAHH,EAAjB,CADC,CAMD,EAPN,EADwB,CASxB,CAACA,gBAAD,CAAmBW,KAAnB,CATwB,CAA1B,CAYA,GAAMQ,CAAAA,aAAa,CAAGpB,kBAAkB,CAAGgB,UAAH,CAAgBJ,KAAxD,CAEA,GAAMS,CAAAA,6BAA6B,CAAGzC,WAAW,CAC/C,SAAA0C,KAAK,CAAI,CACPf,kBAAkB,CAACe,KAAK,GAAKjC,kBAAX,CAAlB,CACAc,oBAAoB,CAACmB,KAAD,CAApB,CACD,CAJ8C,CAK/C,CAACnB,oBAAD,CAL+C,CAAjD,CAQA,GAAMoB,CAAAA,yBAAyB,CAAG3C,WAAW,CAAC,SAAA4C,KAAK,CAAI,CACrDjB,kBAAkB,CAACiB,KAAK,GAAKrC,UAAX,CAAlB,CACAkB,gBAAgB,CAACmB,KAAK,EAAIpC,gBAAV,CAAhB,CACD,CAH4C,CAG1C,EAH0C,CAA7C,CAKA,GAAMqC,CAAAA,aAAa,CAAG3C,OAAO,CAC3B,iBACEsC,CAAAA,aAAa,CAACH,MAAd,CACE,kBAAGS,CAAAA,SAAH,MAAGA,SAAH,CAAcC,OAAd,MAAcA,OAAd,CAAuBC,IAAvB,MAAuBA,IAAvB,OACE,CAACxB,aAAa,GAAKhB,gBAAlB,EACCgB,aAAa,GAAKjB,UADnB,EAECuC,SAAS,GAAKlC,mBAAmB,CAACY,aAAD,CAFnC,IAGC,CAACF,iBAAiB,CAACZ,KAAnB,EACC,CAACY,iBAAiB,CAACX,GADpB,EAECN,KAAK,CAAC0C,OAAD,CAAL,CAAeE,SAAf,CACE5C,KAAK,CAACiB,iBAAiB,CAACZ,KAAnB,CAAL,CAA+BwC,OAA/B,CAAuC,KAAvC,CADF,CAEE7C,KAAK,CAACiB,iBAAiB,CAACX,GAAnB,CAAL,CAA6BwC,KAA7B,CAAmC,KAAnC,CAFF,CAGE,IAHF,CALF,CADF,EADF,CADF,EAD2B,CAe3B,CACE7B,iBAAiB,CAACX,GADpB,CAEEW,iBAAiB,CAACZ,KAFpB,CAGEc,aAHF,CAIEgB,aAJF,CAf2B,CAA7B,CAuBA,GAAMY,CAAAA,kBAAkB,CAAGpD,WAAW,CAAC,UAAM,CAC3CyB,gBAAgB,CAACjB,gBAAD,CAAhB,CACAe,oBAAoB,CAACd,kBAAD,CAApB,CACAkB,kBAAkB,CAAC,KAAD,CAAlB,CACD,CAJqC,CAInC,EAJmC,CAAtC,CAMA,GAAM0B,CAAAA,kBAAkB,CACtB,CAACR,aAAa,CAACS,MAAf,GACC9B,aAAa,CAAG,CAAhB,EAAqBF,iBAAiB,CAACZ,KAAvC,EAAgDY,iBAAiB,CAACX,GADnE,CADF,CAIA,MAAO,CACLqB,KAAK,CAAEa,aADF,CAELX,QAAQ,CAARA,QAFK,CAGLC,KAAK,CAALA,KAHK,CAILT,eAAe,CAAfA,eAJK,CAKLC,kBAAkB,CAAlBA,kBALK,CAML0B,kBAAkB,CAAlBA,kBANK,CAOLD,kBAAkB,CAAlBA,kBAPK,CAQL9B,iBAAiB,CAAjBA,iBARK,CASLmB,6BAA6B,CAA7BA,6BATK,CAULjB,aAAa,CAAbA,aAVK,CAWLmB,yBAAyB,CAAzBA,yBAXK,CAYLY,eAAe,CAAEvB,KAAK,CAACsB,MAZlB,CAaLE,mBAAmB,CAAEpB,UAAU,CAACkB,MAb3B,CAcLG,iBAAiB,CAAE7B,0BAdd,CAAP,CAgBD,CAED,cAAeT,CAAAA,gBAAf","sourcesContent":["import { useCallback, useState, useMemo } from 'react'\nimport useTasks from './useTasks'\nimport { addressesEqual } from '../lib/web3-utils'\nimport { dayjs } from '../utils/date-utils'\nimport * as DisputesTypes from '../types/dispute-status-types'\n\nconst ALL_FILTER = 0\nconst UNSELECTED_PHASE = -1\nconst INITIAL_DATE_RANGE = { start: null, end: null }\nconst TASKS_ACTIONS_TYPES = [\n  DisputesTypes.Phase.All,\n  DisputesTypes.Phase.VotingPeriod,\n  DisputesTypes.Phase.RevealVote,\n  DisputesTypes.Phase.AppealRuling,\n  DisputesTypes.Phase.ConfirmAppeal,\n]\n\nfunction useFilteredTasks(jurorTasksSelected, connectedAccount) {\n  const [selectedDateRange, setSelectedDateRange] = useState(INITIAL_DATE_RANGE)\n  const [selectedPhase, setSelectedPhase] = useState(UNSELECTED_PHASE)\n  const [filtersSelected, setFiltersSelected] = useState(false)\n\n  // If My Tasks is selected we need to only show ALL-COMMIT-REVEAL actions\n  const TASKS_ACTIONS_TYPES_STRING = jurorTasksSelected\n    ? TASKS_ACTIONS_TYPES.slice(0, 3).map(DisputesTypes.getTaskActionString)\n    : TASKS_ACTIONS_TYPES.map(DisputesTypes.getTaskActionString)\n\n  const { openTasks: tasks, fetching, error } = useTasks()\n\n  const jurorTasks = useMemo(\n    () =>\n      tasks\n        ? tasks.filter(task =>\n            task.juror === 'Anyone'\n              ? false\n              : addressesEqual(task.juror, connectedAccount)\n          )\n        : [],\n    [connectedAccount, tasks]\n  )\n\n  const tasksToFilter = jurorTasksSelected ? jurorTasks : tasks\n\n  const handleSelectedDateRangeChange = useCallback(\n    range => {\n      setFiltersSelected(range !== INITIAL_DATE_RANGE)\n      setSelectedDateRange(range)\n    },\n    [setSelectedDateRange]\n  )\n\n  const handleSelectedPhaseChange = useCallback(index => {\n    setFiltersSelected(index !== ALL_FILTER)\n    setSelectedPhase(index || UNSELECTED_PHASE)\n  }, [])\n\n  const filteredTasks = useMemo(\n    () =>\n      tasksToFilter.filter(\n        ({ phaseType, dueDate, open }) =>\n          (selectedPhase === UNSELECTED_PHASE ||\n            selectedPhase === ALL_FILTER ||\n            phaseType === TASKS_ACTIONS_TYPES[selectedPhase]) &&\n          (!selectedDateRange.start ||\n            !selectedDateRange.end ||\n            dayjs(dueDate).isBetween(\n              dayjs(selectedDateRange.start).startOf('day'),\n              dayjs(selectedDateRange.end).endOf('day'),\n              '[]'\n            ))\n      ),\n    [\n      selectedDateRange.end,\n      selectedDateRange.start,\n      selectedPhase,\n      tasksToFilter,\n    ]\n  )\n\n  const handleClearFilters = useCallback(() => {\n    setSelectedPhase(UNSELECTED_PHASE)\n    setSelectedDateRange(INITIAL_DATE_RANGE)\n    setFiltersSelected(false)\n  }, [])\n\n  const emptyFilterResults =\n    !filteredTasks.length &&\n    (selectedPhase > 1 || selectedDateRange.start || selectedDateRange.end)\n\n  return {\n    tasks: filteredTasks,\n    fetching,\n    error,\n    filtersSelected,\n    setFiltersSelected,\n    emptyFilterResults,\n    handleClearFilters,\n    selectedDateRange,\n    handleSelectedDateRangeChange,\n    selectedPhase,\n    handleSelectedPhaseChange,\n    openTasksNumber: tasks.length,\n    jurorOpenTaskNumber: jurorTasks.length,\n    taskActionsString: TASKS_ACTIONS_TYPES_STRING,\n  }\n}\n\nexport default useFilteredTasks\n"]},"metadata":{},"sourceType":"module"}