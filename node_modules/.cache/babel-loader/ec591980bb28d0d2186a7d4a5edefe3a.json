{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import{getSubscriptionDetails}from'../services/notificationServiceApi';export function useSubscriptionDetails(address){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),subscriptionDetails=_useState2[0],setSubscriptionDetails=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),fetching=_useState4[0],setFetching=_useState4[1];useEffect(function(){var cancelled=false;var fetchSubscriptionDetails=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(address){_context.next=2;break;}return _context.abrupt(\"return\");case 2:setFetching(true);if(cancelled){_context.next=9;break;}_context.next=6;return getSubscriptionDetails(address);case 6:response=_context.sent;setSubscriptionDetails(response);setFetching(false);case 9:case\"end\":return _context.stop();}}},_callee);}));return function fetchSubscriptionDetails(){return _ref.apply(this,arguments);};}();fetchSubscriptionDetails();return function(){cancelled=true;};},[address]);return{addressVerified:subscriptionDetails===null||subscriptionDetails===void 0?void 0:subscriptionDetails.addressVerified,emailExists:subscriptionDetails===null||subscriptionDetails===void 0?void 0:subscriptionDetails.emailExists,emailVerified:subscriptionDetails===null||subscriptionDetails===void 0?void 0:subscriptionDetails.emailVerified,notificationsDisabled:subscriptionDetails===null||subscriptionDetails===void 0?void 0:subscriptionDetails.notificationsDisabled,fetching:fetching,error:subscriptionDetails.error};}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useEmailNotifications.js"],"names":["useEffect","useState","getSubscriptionDetails","useSubscriptionDetails","address","subscriptionDetails","setSubscriptionDetails","fetching","setFetching","cancelled","fetchSubscriptionDetails","response","addressVerified","emailExists","emailVerified","notificationsDisabled","error"],"mappings":"iXAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,sBAAT,KAAuC,oCAAvC,CAEA,MAAO,SAASC,CAAAA,sBAAT,CAAgCC,OAAhC,CAAyC,eACQH,QAAQ,CAAC,EAAD,CADhB,wCACvCI,mBADuC,eAClBC,sBADkB,8BAEdL,QAAQ,CAAC,IAAD,CAFM,yCAEvCM,QAFuC,eAE7BC,WAF6B,eAI9CR,SAAS,CAAC,UAAM,CACd,GAAIS,CAAAA,SAAS,CAAG,KAAhB,CACA,GAAMC,CAAAA,wBAAwB,0FAAG,mJAC1BN,OAD0B,iEAI/BI,WAAW,CAAC,IAAD,CAAX,CAJ+B,GAK1BC,SAL0B,+CAMNP,CAAAA,sBAAsB,CAACE,OAAD,CANhB,QAMvBO,QANuB,eAO7BL,sBAAsB,CAACK,QAAD,CAAtB,CACAH,WAAW,CAAC,KAAD,CAAX,CAR6B,sDAAH,kBAAxBE,CAAAA,wBAAwB,0CAA9B,CAWAA,wBAAwB,GACxB,MAAO,WAAM,CACXD,SAAS,CAAG,IAAZ,CACD,CAFD,CAGD,CAjBQ,CAiBN,CAACL,OAAD,CAjBM,CAAT,CAmBA,MAAO,CACLQ,eAAe,CAAEP,mBAAF,SAAEA,mBAAF,iBAAEA,mBAAmB,CAAEO,eADjC,CAELC,WAAW,CAAER,mBAAF,SAAEA,mBAAF,iBAAEA,mBAAmB,CAAEQ,WAF7B,CAGLC,aAAa,CAAET,mBAAF,SAAEA,mBAAF,iBAAEA,mBAAmB,CAAES,aAH/B,CAILC,qBAAqB,CAAEV,mBAAF,SAAEA,mBAAF,iBAAEA,mBAAmB,CAAEU,qBAJvC,CAKLR,QAAQ,CAARA,QALK,CAMLS,KAAK,CAAEX,mBAAmB,CAACW,KANtB,CAAP,CAQD","sourcesContent":["import { useEffect, useState } from 'react'\nimport { getSubscriptionDetails } from '../services/notificationServiceApi'\n\nexport function useSubscriptionDetails(address) {\n  const [subscriptionDetails, setSubscriptionDetails] = useState({})\n  const [fetching, setFetching] = useState(true)\n\n  useEffect(() => {\n    let cancelled = false\n    const fetchSubscriptionDetails = async () => {\n      if (!address) {\n        return\n      }\n      setFetching(true)\n      if (!cancelled) {\n        const response = await getSubscriptionDetails(address)\n        setSubscriptionDetails(response)\n        setFetching(false)\n      }\n    }\n    fetchSubscriptionDetails()\n    return () => {\n      cancelled = true\n    }\n  }, [address])\n\n  return {\n    addressVerified: subscriptionDetails?.addressVerified,\n    emailExists: subscriptionDetails?.emailExists,\n    emailVerified: subscriptionDetails?.emailVerified,\n    notificationsDisabled: subscriptionDetails?.notificationsDisabled,\n    fetching,\n    error: subscriptionDetails.error,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}