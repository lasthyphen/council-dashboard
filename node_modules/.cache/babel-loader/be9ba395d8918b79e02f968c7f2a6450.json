{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useReducer}from'react';function stepsReducer(state,_ref){var type=_ref.type,value=_ref.value,steps=_ref.steps;var step=state.step;var newStep=null;if(type==='set'){newStep=value;}if(type==='next'&&step<steps-1){newStep=step+1;}if(type==='prev'&&step>0){newStep=step-1;}if(newStep!==null&&step!==newStep){return{step:newStep,direction:newStep>step?1:-1};}return state;}// Simple hook to manage a given number of steps.\nexport function useSteps(steps){var _useReducer=useReducer(stepsReducer,{step:0,direction:0}),_useReducer2=_slicedToArray(_useReducer,2),_useReducer2$=_useReducer2[0],step=_useReducer2$.step,direction=_useReducer2$.direction,updateStep=_useReducer2[1];// If the number of steps change, we reset the current step\nuseEffect(function(){updateStep({type:'set',value:0,steps:steps});},[steps]);var setStep=useCallback(function(value){updateStep({type:'set',value:value,steps:steps});},[steps]);var next=useCallback(function(){updateStep({type:'next',steps:steps});},[steps]);var prev=useCallback(function(){updateStep({type:'prev',steps:steps});},[steps]);return{direction:direction,next:next,prev:prev,setStep:setStep,step:step};}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useOnboarding.js"],"names":["useCallback","useEffect","useReducer","stepsReducer","state","type","value","steps","step","newStep","direction","useSteps","updateStep","setStep","next","prev"],"mappings":"4HAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,UAAjC,KAAmD,OAAnD,CAEA,QAASC,CAAAA,YAAT,CAAsBC,KAAtB,MAAqD,IAAtBC,CAAAA,IAAsB,MAAtBA,IAAsB,CAAhBC,KAAgB,MAAhBA,KAAgB,CAATC,KAAS,MAATA,KAAS,IAC3CC,CAAAA,IAD2C,CAClCJ,KADkC,CAC3CI,IAD2C,CAGnD,GAAIC,CAAAA,OAAO,CAAG,IAAd,CAEA,GAAIJ,IAAI,GAAK,KAAb,CAAoB,CAClBI,OAAO,CAAGH,KAAV,CACD,CACD,GAAID,IAAI,GAAK,MAAT,EAAmBG,IAAI,CAAGD,KAAK,CAAG,CAAtC,CAAyC,CACvCE,OAAO,CAAGD,IAAI,CAAG,CAAjB,CACD,CACD,GAAIH,IAAI,GAAK,MAAT,EAAmBG,IAAI,CAAG,CAA9B,CAAiC,CAC/BC,OAAO,CAAGD,IAAI,CAAG,CAAjB,CACD,CAED,GAAIC,OAAO,GAAK,IAAZ,EAAoBD,IAAI,GAAKC,OAAjC,CAA0C,CACxC,MAAO,CACLD,IAAI,CAAEC,OADD,CAELC,SAAS,CAAED,OAAO,CAAGD,IAAV,CAAiB,CAAjB,CAAqB,CAAC,CAF5B,CAAP,CAID,CAED,MAAOJ,CAAAA,KAAP,CACD,CACD;AACA,MAAO,SAASO,CAAAA,QAAT,CAAkBJ,KAAlB,CAAyB,iBACYL,UAAU,CAACC,YAAD,CAAe,CACjEK,IAAI,CAAE,CAD2D,CAEjEE,SAAS,CAAE,CAFsD,CAAf,CADtB,0EACrBF,IADqB,eACrBA,IADqB,CACfE,SADe,eACfA,SADe,CACFE,UADE,iBAM9B;AACAX,SAAS,CAAC,UAAM,CACdW,UAAU,CAAC,CAAEP,IAAI,CAAE,KAAR,CAAeC,KAAK,CAAE,CAAtB,CAAyBC,KAAK,CAALA,KAAzB,CAAD,CAAV,CACD,CAFQ,CAEN,CAACA,KAAD,CAFM,CAAT,CAIA,GAAMM,CAAAA,OAAO,CAAGb,WAAW,CACzB,SAAAM,KAAK,CAAI,CACPM,UAAU,CAAC,CAAEP,IAAI,CAAE,KAAR,CAAeC,KAAK,CAALA,KAAf,CAAsBC,KAAK,CAALA,KAAtB,CAAD,CAAV,CACD,CAHwB,CAIzB,CAACA,KAAD,CAJyB,CAA3B,CAOA,GAAMO,CAAAA,IAAI,CAAGd,WAAW,CAAC,UAAM,CAC7BY,UAAU,CAAC,CAAEP,IAAI,CAAE,MAAR,CAAgBE,KAAK,CAALA,KAAhB,CAAD,CAAV,CACD,CAFuB,CAErB,CAACA,KAAD,CAFqB,CAAxB,CAIA,GAAMQ,CAAAA,IAAI,CAAGf,WAAW,CAAC,UAAM,CAC7BY,UAAU,CAAC,CAAEP,IAAI,CAAE,MAAR,CAAgBE,KAAK,CAALA,KAAhB,CAAD,CAAV,CACD,CAFuB,CAErB,CAACA,KAAD,CAFqB,CAAxB,CAIA,MAAO,CACLG,SAAS,CAATA,SADK,CAELI,IAAI,CAAJA,IAFK,CAGLC,IAAI,CAAJA,IAHK,CAILF,OAAO,CAAPA,OAJK,CAKLL,IAAI,CAAJA,IALK,CAAP,CAOD","sourcesContent":["import { useCallback, useEffect, useReducer } from 'react'\n\nfunction stepsReducer(state, { type, value, steps }) {\n  const { step } = state\n\n  let newStep = null\n\n  if (type === 'set') {\n    newStep = value\n  }\n  if (type === 'next' && step < steps - 1) {\n    newStep = step + 1\n  }\n  if (type === 'prev' && step > 0) {\n    newStep = step - 1\n  }\n\n  if (newStep !== null && step !== newStep) {\n    return {\n      step: newStep,\n      direction: newStep > step ? 1 : -1,\n    }\n  }\n\n  return state\n}\n// Simple hook to manage a given number of steps.\nexport function useSteps(steps) {\n  const [{ step, direction }, updateStep] = useReducer(stepsReducer, {\n    step: 0,\n    direction: 0,\n  })\n\n  // If the number of steps change, we reset the current step\n  useEffect(() => {\n    updateStep({ type: 'set', value: 0, steps })\n  }, [steps])\n\n  const setStep = useCallback(\n    value => {\n      updateStep({ type: 'set', value, steps })\n    },\n    [steps]\n  )\n\n  const next = useCallback(() => {\n    updateStep({ type: 'next', steps })\n  }, [steps])\n\n  const prev = useCallback(() => {\n    updateStep({ type: 'prev', steps })\n  }, [steps])\n\n  return {\n    direction,\n    next,\n    prev,\n    setStep,\n    step,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}