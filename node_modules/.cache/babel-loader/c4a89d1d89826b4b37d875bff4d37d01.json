{"ast":null,"code":"export var KnownArbitrables={main:new Map([{address:'0x5b0899c8c5af7696ae4e082b04bd2920304ad2aa',urlBuilder:function urlBuilder(actionId){return\"https://cash.aragon.network/#/proposals/\".concat(actionId);}}].map(function(arbitrable){return[arbitrable.address.toLowerCase(),arbitrable];})),rinkeby:new Map([{address:'0x9c92dbd8a8e5903e2741202321073091109f26be',urlBuilder:function urlBuilder(actionId){return\"https://network-dashboard.vercel.app/#/proposals/\".concat(actionId);}}].map(function(arbitrable){return[arbitrable.address.toLowerCase(),arbitrable];}))};export function isArbitrableKnown(arbitrableAddress,networkType){if(!KnownArbitrables[networkType])return false;return Boolean(KnownArbitrables[networkType].get(arbitrableAddress.toLowerCase()));}export function buildArbitrableUrl(arbitrableAddress,actionId,networkType){var arbitrable=KnownArbitrables[networkType].get(arbitrableAddress.toLowerCase());return(arbitrable===null||arbitrable===void 0?void 0:arbitrable.urlBuilder(actionId))||'';}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/known-arbitrables.js"],"names":["KnownArbitrables","main","Map","address","urlBuilder","actionId","map","arbitrable","toLowerCase","rinkeby","isArbitrableKnown","arbitrableAddress","networkType","Boolean","get","buildArbitrableUrl"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,gBAAgB,CAAG,CAC9BC,IAAI,CAAE,GAAIC,CAAAA,GAAJ,CACJ,CACE,CACEC,OAAO,CAAE,4CADX,CAEEC,UAAU,CAAE,oBAAAC,QAAQ,0DACyBA,QADzB,GAFtB,CADF,EAMEC,GANF,CAMM,SAAAC,UAAU,QAAI,CAACA,UAAU,CAACJ,OAAX,CAAmBK,WAAnB,EAAD,CAAmCD,UAAnC,CAAJ,EANhB,CADI,CADwB,CAU9BE,OAAO,CAAE,GAAIP,CAAAA,GAAJ,CACP,CACE,CACEC,OAAO,CAAE,4CADX,CAEEC,UAAU,CAAE,oBAAAC,QAAQ,mEACkCA,QADlC,GAFtB,CADF,EAMEC,GANF,CAMM,SAAAC,UAAU,QAAI,CAACA,UAAU,CAACJ,OAAX,CAAmBK,WAAnB,EAAD,CAAmCD,UAAnC,CAAJ,EANhB,CADO,CAVqB,CAAzB,CAqBP,MAAO,SAASG,CAAAA,iBAAT,CAA2BC,iBAA3B,CAA8CC,WAA9C,CAA2D,CAChE,GAAI,CAACZ,gBAAgB,CAACY,WAAD,CAArB,CAAoC,MAAO,MAAP,CACpC,MAAOC,CAAAA,OAAO,CACZb,gBAAgB,CAACY,WAAD,CAAhB,CAA8BE,GAA9B,CAAkCH,iBAAiB,CAACH,WAAlB,EAAlC,CADY,CAAd,CAGD,CAED,MAAO,SAASO,CAAAA,kBAAT,CAA4BJ,iBAA5B,CAA+CN,QAA/C,CAAyDO,WAAzD,CAAsE,CAC3E,GAAML,CAAAA,UAAU,CAAGP,gBAAgB,CAACY,WAAD,CAAhB,CAA8BE,GAA9B,CACjBH,iBAAiB,CAACH,WAAlB,EADiB,CAAnB,CAIA,MAAO,CAAAD,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEH,UAAZ,CAAuBC,QAAvB,IAAoC,EAA3C,CACD","sourcesContent":["export const KnownArbitrables = {\n  main: new Map(\n    [\n      {\n        address: '0x5b0899c8c5af7696ae4e082b04bd2920304ad2aa',\n        urlBuilder: actionId =>\n          `https://cash.aragon.network/#/proposals/${actionId}`,\n      },\n    ].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable])\n  ),\n  rinkeby: new Map(\n    [\n      {\n        address: '0x9c92dbd8a8e5903e2741202321073091109f26be',\n        urlBuilder: actionId =>\n          `https://network-dashboard.vercel.app/#/proposals/${actionId}`,\n      },\n    ].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable])\n  ),\n}\n\nexport function isArbitrableKnown(arbitrableAddress, networkType) {\n  if (!KnownArbitrables[networkType]) return false\n  return Boolean(\n    KnownArbitrables[networkType].get(arbitrableAddress.toLowerCase())\n  )\n}\n\nexport function buildArbitrableUrl(arbitrableAddress, actionId, networkType) {\n  const arbitrable = KnownArbitrables[networkType].get(\n    arbitrableAddress.toLowerCase()\n  )\n\n  return arbitrable?.urlBuilder(actionId) || ''\n}\n"]},"metadata":{},"sourceType":"module"}