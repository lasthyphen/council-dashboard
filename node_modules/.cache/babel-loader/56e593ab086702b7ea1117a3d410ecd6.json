{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import{captureException}from'@sentry/browser';import{useCourtConfig}from'../providers/CourtConfig';import{useUniswapAnjPrice}from'./useUniswapAnjPrice';import{bigNum,formatUnits}from'../lib/math-utils';import{getNetworkType}from'../lib/web3-utils';var API_BASE='https://api.0x.org';var UNISWAP_PRECISION=bigNum(10).pow(18);var SELL_TOKEN='USDC';var SELL_TOKEN_PRECISION=bigNum(10).pow(6);/**\n * Convert ANJ amount into USD price\n * @param {BigNum} amount The amount to convert to USD\n * @returns {String} The amount value in USD\n */export function useANJAmountToUsd(amount){var _useCourtConfig=useCourtConfig(),anjToken=_useCourtConfig.anjToken;var anjPrice=useUniswapAnjPrice();if(!amount||anjPrice===0){return'-';}return convertAmount(amount,anjPrice,anjToken.decimals,UNISWAP_PRECISION);}/**\n * Convert a token into a USD price\n *\n * @param {String} symbol The symbol of the token to convert from.\n * @param {Number} decimals The amount of decimals for the token.\n * @param {BigNumber} amount The amount to convert into USD.\n * @returns { Number } The balance value in USD\n */export function useTokenAmountToUsd(symbol,decimals,amount){var _useState=useState('-'),_useState2=_slicedToArray(_useState,2),amountInUsd=_useState2[0],setAmountInUsd=_useState2[1];useEffect(function(){var cancelled=false;if(getNetworkType()!=='main'){return;}var fetchPrice=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _prices$records,res,prices,priceRecord,convertedAmount;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"\".concat(API_BASE,\"/swap/v0/prices?sellToken=\").concat(SELL_TOKEN));case 3:res=_context.sent;_context.next=6;return res.json();case 6:prices=_context.sent;if(!(cancelled||!amount||!(prices===null||prices===void 0?void 0:(_prices$records=prices.records)===null||_prices$records===void 0?void 0:_prices$records.length))){_context.next=9;break;}return _context.abrupt(\"return\");case 9:priceRecord=prices.records.find(function(price){return price.symbol===symbol;});if(priceRecord){_context.next=12;break;}return _context.abrupt(\"return\");case 12:convertedAmount=convertAmount(amount,priceRecord.price,decimals,SELL_TOKEN_PRECISION);setAmountInUsd(convertedAmount);_context.next=20;break;case 16:_context.prev=16;_context.t0=_context[\"catch\"](0);console.error(\"Could not fetch \".concat(symbol,\" USD price\"),_context.t0);captureException(_context.t0);case 20:case\"end\":return _context.stop();}}},_callee,null,[[0,16]]);}));return function fetchPrice(){return _ref.apply(this,arguments);};}();fetchPrice();return function(){cancelled=true;};},[amount,decimals,symbol]);return amountInUsd;}function convertAmount(amount,price,decimals,precision){var rate=(price*precision).toFixed();return formatUnits(amount.mul(rate.toString()).div(precision),{digits:decimals});}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useTokenAmountToUsd.js"],"names":["useEffect","useState","captureException","useCourtConfig","useUniswapAnjPrice","bigNum","formatUnits","getNetworkType","API_BASE","UNISWAP_PRECISION","pow","SELL_TOKEN","SELL_TOKEN_PRECISION","useANJAmountToUsd","amount","anjToken","anjPrice","convertAmount","decimals","useTokenAmountToUsd","symbol","amountInUsd","setAmountInUsd","cancelled","fetchPrice","fetch","res","json","prices","records","length","priceRecord","find","price","convertedAmount","console","error","precision","rate","toFixed","mul","toString","div","digits"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { captureException } from '@sentry/browser'\n\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useUniswapAnjPrice } from './useUniswapAnjPrice'\nimport { bigNum, formatUnits } from '../lib/math-utils'\nimport { getNetworkType } from '../lib/web3-utils'\n\nconst API_BASE = 'https://api.0x.org'\nconst UNISWAP_PRECISION = bigNum(10).pow(18)\n\nconst SELL_TOKEN = 'USDC'\nconst SELL_TOKEN_PRECISION = bigNum(10).pow(6)\n\n/**\n * Convert ANJ amount into USD price\n * @param {BigNum} amount The amount to convert to USD\n * @returns {String} The amount value in USD\n */\nexport function useANJAmountToUsd(amount) {\n  const { anjToken } = useCourtConfig()\n  const anjPrice = useUniswapAnjPrice()\n\n  if (!amount || anjPrice === 0) {\n    return '-'\n  }\n\n  return convertAmount(amount, anjPrice, anjToken.decimals, UNISWAP_PRECISION)\n}\n\n/**\n * Convert a token into a USD price\n *\n * @param {String} symbol The symbol of the token to convert from.\n * @param {Number} decimals The amount of decimals for the token.\n * @param {BigNumber} amount The amount to convert into USD.\n * @returns { Number } The balance value in USD\n */\nexport function useTokenAmountToUsd(symbol, decimals, amount) {\n  const [amountInUsd, setAmountInUsd] = useState('-')\n  useEffect(() => {\n    let cancelled = false\n\n    if (getNetworkType() !== 'main') {\n      return\n    }\n\n    const fetchPrice = async () => {\n      try {\n        const res = await fetch(\n          `${API_BASE}/swap/v0/prices?sellToken=${SELL_TOKEN}`\n        )\n        const prices = await res.json()\n\n        if (cancelled || !amount || !prices?.records?.length) {\n          return\n        }\n\n        const priceRecord = prices.records.find(\n          price => price.symbol === symbol\n        )\n        if (!priceRecord) {\n          return\n        }\n\n        const convertedAmount = convertAmount(\n          amount,\n          priceRecord.price,\n          decimals,\n          SELL_TOKEN_PRECISION\n        )\n        setAmountInUsd(convertedAmount)\n      } catch (err) {\n        console.error(`Could not fetch ${symbol} USD price`, err)\n        captureException(err)\n      }\n    }\n\n    fetchPrice()\n\n    return () => {\n      cancelled = true\n    }\n  }, [amount, decimals, symbol])\n\n  return amountInUsd\n}\n\nfunction convertAmount(amount, price, decimals, precision) {\n  const rate = (price * precision).toFixed()\n\n  return formatUnits(amount.mul(rate.toString()).div(precision), {\n    digits: decimals,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}