{"ast":null,"code":"import _styled10 from \"styled-components\";\nimport _styled9 from \"styled-components\";\nimport _styled8 from \"styled-components\";\nimport _styled7 from \"styled-components\";\nimport _styled6 from \"styled-components\";\nimport _styled5 from \"styled-components\";\nimport _styled4 from \"styled-components\";\nimport _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeActions.js\";\nimport React, { useMemo } from 'react';\nimport { GU, Help, textStyle, useTheme } from '@aragon/ui';\nimport { Phase as DisputePhase, Status as DisputeStatus } from '../../types/dispute-status-types';\nimport DisputeAppeal from './actions/DisputeAppeal';\nimport DisputeAutoReveal from './DisputeAutoReveal';\nimport DisputeDraft from './actions/DisputeDraft';\nimport DisputeExecuteRuling from './actions/DisputeExecuteRuling';\nimport DisputeReveal from './actions/DisputeReveal';\nimport DisputeVoting from './actions/DisputeVoting';\nimport { useWallet } from '../../providers/Wallet';\nimport { getJurorDraft, hasJurorVoted, canJurorReveal } from '../../utils/juror-draft-utils';\nimport { isvoteLeaked, voteOptionToString, OUTCOMES } from '../../utils/crvoting-utils';\nimport { dateFormat } from '../../utils/date-utils';\nimport IconGavelOrange from \"../../assets/IconGavelOrange.svg\";\nimport IconGavelRed from \"../../assets/IconGavelRed.svg\";\nimport { getDisputeLastRound } from '../../utils/dispute-utils';\nimport IconRewardsGreen from \"../../assets/IconRewardsGreen.svg\";\n\nfunction DisputeActions({\n  dispute,\n  onAutoReveal,\n  onDraft,\n  onExecuteRuling,\n  onRequestCommit,\n  onRequestReveal,\n  onRequestAppeal\n}) {\n  const {\n    phase,\n    status\n  } = dispute;\n  const lastRound = getDisputeLastRound(dispute);\n  const wallet = useWallet();\n\n  if (phase === DisputePhase.Evidence) {\n    return null;\n  }\n\n  if (phase === DisputePhase.JuryDrafting) {\n    return React.createElement(DisputeDraft, {\n      disputeId: dispute.id,\n      onDraft: onDraft,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n  const jurorDraft = getJurorDraft(lastRound, wallet.account); // TODO: Should we also show results for past rounds ?\n\n  const isJurorDrafted = !!jurorDraft;\n  const jurorHasVoted = isJurorDrafted && hasJurorVoted(jurorDraft);\n\n  if (phase === DisputePhase.VotingPeriod && !jurorHasVoted) {\n    return React.createElement(DisputeVoting, {\n      draftTermId: lastRound.draftTermId,\n      isFinalRound: dispute.maxAppealReached,\n      isJurorDrafted: isJurorDrafted,\n      onRequestCommit: onRequestCommit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(InformationSection, {\n    phase: phase,\n    status: status,\n    jurorDraft: jurorDraft,\n    hasJurorVoted: jurorHasVoted,\n    lastRound: lastRound,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), (() => {\n    // If connected account not drafted for current dispute\n    if (!isJurorDrafted) return null; // If juror has already voted\n\n    if (phase === DisputePhase.VotingPeriod) return React.createElement(DisputeAutoReveal, {\n      disputeId: dispute.id,\n      commitment: jurorDraft.commitment,\n      onAutoReveal: onAutoReveal,\n      roundId: dispute.lastRoundId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }); // If we are past the voting period && juror hasn't voted\n\n    if (!jurorHasVoted) return null; // If reveal period has already pass\n\n    if (phase !== DisputePhase.RevealVote) return null; // If juror cannot reveal (has already revealed || voted leaked)\n\n    if (!canJurorReveal(jurorDraft)) return null;\n    return React.createElement(DisputeReveal, {\n      disputeId: dispute.id,\n      roundId: dispute.lastRoundId,\n      commitment: jurorDraft.commitment,\n      onRequestReveal: onRequestReveal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    });\n  })(), (phase === DisputePhase.AppealRuling || phase === DisputePhase.ConfirmAppeal) && React.createElement(DisputeAppeal, {\n    disputeId: dispute.id,\n    roundId: dispute.lastRoundId,\n    onRequestAppeal: onRequestAppeal,\n    confirm: phase === DisputePhase.ConfirmAppeal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), phase === DisputePhase.ExecuteRuling && React.createElement(DisputeExecuteRuling, {\n    disputeId: dispute.id,\n    onExecuteRuling: onExecuteRuling,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }));\n}\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"DisputeActions___StyledDiv\",\n  componentId: \"sc-24ucd8-0\"\n})([\"background:\", \";padding:\", \"px;display:flex;\"], p => p._css, p => p._css2);\n\nvar _StyledDiv2 = _styled(\"div\").withConfig({\n  displayName: \"DisputeActions___StyledDiv2\",\n  componentId: \"sc-24ucd8-1\"\n})([\"display:flex;align-items:center;margin:0 auto;\"]);\n\nvar _StyledDiv3 = _styled(\"div\").withConfig({\n  displayName: \"DisputeActions___StyledDiv3\",\n  componentId: \"sc-24ucd8-2\"\n})([\"margin-right:\", \"px;\"], p => p._css3);\n\nvar _StyledImg = _styled(\"img\").withConfig({\n  displayName: \"DisputeActions___StyledImg\",\n  componentId: \"sc-24ucd8-3\"\n})([\"display:block;\"]);\n\nvar _StyledDiv4 = _styled(\"div\").withConfig({\n  displayName: \"DisputeActions___StyledDiv4\",\n  componentId: \"sc-24ucd8-4\"\n})([\"\", \"\"], p => p._css4);\n\nvar _StyledSpan = _styled(\"span\").withConfig({\n  displayName: \"DisputeActions___StyledSpan\",\n  componentId: \"sc-24ucd8-5\"\n})([\"\", \" color:\", \";\"], p => p._css5, p => p._css6);\n\nfunction InformationSection({\n  hasJurorVoted,\n  jurorDraft,\n  lastRound,\n  phase,\n  status\n}) {\n  const theme = useTheme();\n  const {\n    title,\n    paragraph,\n    background,\n    icon,\n    hint\n  } = useInfoAttributes({\n    hasJurorVoted,\n    jurorDraft,\n    lastRound,\n    phase,\n    status\n  });\n  if (!jurorDraft) return null;\n  return React.createElement(_StyledDiv, {\n    _css: background,\n    _css2: 3 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }, React.createElement(_StyledDiv2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, React.createElement(_StyledDiv3, {\n    _css3: 1 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(_StyledImg, {\n    alt: \"\",\n    src: icon,\n    height: \"42\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(_StyledDiv4, {\n    _css4: textStyle('body1'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, title), React.createElement(_StyledSpan, {\n    _css5: textStyle('body2'),\n    _css6: theme.contentSecondary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, paragraph, \" \", hint && React.createElement(Help, {\n    hint: hint,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  })))));\n} // Helper function that returns main attributes for the YourVoteInfo component\n// TODO: Contemplate final round cases (when a juror has voted, the ANJ amount is pre-slashed)\n\n\nconst useInfoAttributes = ({\n  hasJurorVoted,\n  jurorDraft,\n  lastRound,\n  phase,\n  status\n}) => {\n  const theme = useTheme();\n  const positiveBackground = theme.positive.alpha(0.1);\n  const negativeBackground = theme.accent.alpha(0.2);\n  return useMemo(() => {\n    if (!jurorDraft) return {}; // If the dispute is in the execute ruling phase it means that the final ruling can already be ensured.\n    // If the dispute is closed it means that the final ruling was already ensured.\n\n    const finalRulingConfirmed = status === DisputeStatus.Closed || phase === DisputePhase.ExecuteRuling; // Note that we can assume that the evidence submission and drafting phases have already passed since we do an early return above\n\n    const votingPeriodEnded = phase !== DisputePhase.VotingPeriod && phase !== DisputePhase.RevealVote;\n    const voteLeaked = isvoteLeaked(jurorDraft.outcome); // If vote leaked or juror hasn't voted\n\n    if (!hasJurorVoted || voteLeaked) {\n      return {\n        title: voteLeaked ? 'Unfortunately, your vote has been leaked' : 'Your vote wasnâ€™t cast on time.',\n        paragraph: React.createElement(ANJDiscountedMessage, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }),\n        background: negativeBackground,\n        icon: IconGavelRed,\n        hintText: voteLeaked ? 'Vote leaked (complete)' : null // TODO: Add hint for leaked vote\n\n      };\n    } // If juror voted and the voting (commit) period has ended\n\n\n    if (hasJurorVoted && votingPeriodEnded) {\n      // If the juror didn't revealed\n      if (!jurorDraft.outcome) {\n        return {\n          title: \"Your vote wasn't revealed on time\",\n          paragraph: React.createElement(ANJDiscountedMessage, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247\n            },\n            __self: this\n          }),\n          background: negativeBackground,\n          icon: IconGavelRed\n        };\n      } // Juror has revealed\n      // Check if has voted in consensus with the plurality for the last round\n\n\n      const hasVotedInConsensus = lastRound.vote && jurorDraft.outcome === lastRound.vote.winningOutcome; // We must check if the penalties were already settled so we can tell the jurors\n      // wether their ANJ locked balance has been discounted or they can claim rewards\n      // Note that if the penalties for the round are settled it means that the dispute has already ended\n\n      const settledPenalties = lastRound.settledPenalties;\n      const title = hasVotedInConsensus ? 'You have voted in consensus with the plurality' : 'You have not voted in consensus with the plurality';\n      const background = hasVotedInConsensus ? positiveBackground : negativeBackground; // If penalties settled then the locked ANJ has been redistributed\n\n      if (settledPenalties) {\n        return {\n          title,\n          paragraph: hasVotedInConsensus ? React.createElement(ANJRewardsMessage, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 275\n            },\n            __self: this\n          }) : React.createElement(ANJSlashedMessage, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 277\n            },\n            __self: this\n          }),\n          background,\n          icon: hasVotedInConsensus ? IconRewardsGreen : IconGavelRed\n        };\n      } // Includes the cases where penalties weren't settled or the last round hasn't ended\n\n\n      return {\n        title,\n        paragraph: React.createElement(ANJLockedMessage, {\n          finalRulingConfirmed: finalRulingConfirmed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288\n          },\n          __self: this\n        }),\n        background,\n        icon: hasVotedInConsensus ? IconGavelOrange : IconGavelRed\n      };\n    } // Juror has voted and reveal period hasn't ended\n\n\n    return {\n      title: `Your vote was cast ${jurorDraft.outcome ? 'and revealed' : ''} successfully.`,\n      paragraph: React.createElement(VoteInfo, {\n        commitmentDate: jurorDraft.commitmentDate,\n        outcome: jurorDraft.outcome,\n        revealDate: jurorDraft.revealDate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }),\n      background: theme.accent.alpha(0.05),\n      icon: IconGavelOrange\n    };\n  }, [hasJurorVoted, jurorDraft, lastRound.settledPenalties, lastRound.vote, negativeBackground, phase, positiveBackground, status, theme.accent]);\n};\n\nconst ANJLockedMessage = ({\n  finalRulingConfirmed\n}) => {\n  return React.createElement(ANJMessage, {\n    result: `will remain locked until ${finalRulingConfirmed ? 'penalties are settled' : 'the dispute has been resolved'}. `,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  });\n};\n\nconst ANJDiscountedMessage = () => {\n  return React.createElement(ANJMessage, {\n    result: \"will be discounted\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336\n    },\n    __self: this\n  });\n};\n\nconst ANJSlashedMessage = () => {\n  return React.createElement(ANJMessage, {\n    result: \"has been slashed and redistributed to other jurors\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  });\n};\n\nvar _StyledSpan2 = _styled(\"span\").withConfig({\n  displayName: \"DisputeActions___StyledSpan2\",\n  componentId: \"sc-24ucd8-6\"\n})([\"color:\", \";\"], p => p._css7);\n\nconst ANJMessage = ({\n  result\n}) => {\n  const theme = useTheme();\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349\n    },\n    __self: this\n  }, \"Your\", ' ', React.createElement(_StyledSpan2, {\n    _css7: theme.help,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351\n    },\n    __self: this\n  }, \"ANJ locked balance\"), ' ', result);\n};\n\nvar _StyledSpan3 = _styled(\"span\").withConfig({\n  displayName: \"DisputeActions___StyledSpan3\",\n  componentId: \"sc-24ucd8-7\"\n})([\"color:\", \";\"], p => p._css8);\n\nconst ANJRewardsMessage = () => {\n  const theme = useTheme();\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367\n    },\n    __self: this\n  }, \"You can now claim your\", React.createElement(_StyledSpan3, {\n    _css8: theme.help,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369\n    },\n    __self: this\n  }, ' ', \"rewards\"), ' ', \"in the dashboard.\");\n};\n\nvar _StyledSpan4 = _styled(\"span\").withConfig({\n  displayName: \"DisputeActions___StyledSpan4\",\n  componentId: \"sc-24ucd8-8\"\n})([\"text-transform:uppercase;color:\", \";\"], p => p._css9);\n\nvar _StyledSpan5 = _styled(\"span\").withConfig({\n  displayName: \"DisputeActions___StyledSpan5\",\n  componentId: \"sc-24ucd8-9\"\n})([\"color:\", \";\"], p => p._css10);\n\nconst VoteInfo = ({\n  commitmentDate,\n  outcome,\n  revealDate\n}) => {\n  const theme = useTheme();\n  const formattedDate = dateFormat(new Date(revealDate || commitmentDate), 'standard');\n  const outcomeDescription = useMemo(() => {\n    if (outcome === OUTCOMES.Refused) {\n      return {\n        text: 'Refused to vote'\n      };\n    }\n\n    return {\n      prefix: 'voted ',\n      text: voteOptionToString(outcome)\n    };\n  }, [outcome]);\n  return React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, \"You \", outcomeDescription.prefix, React.createElement(_StyledSpan4, {\n    _css9: theme.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401\n    },\n    __self: this\n  }, outcomeDescription.text), ' ', \"on\", ' ', React.createElement(_StyledSpan5, {\n    _css10: theme.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410\n    },\n    __self: this\n  }, formattedDate));\n};\n\nexport default DisputeActions;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeActions.js"],"names":["React","useMemo","GU","Help","textStyle","useTheme","Phase","DisputePhase","Status","DisputeStatus","DisputeAppeal","DisputeAutoReveal","DisputeDraft","DisputeExecuteRuling","DisputeReveal","DisputeVoting","useWallet","getJurorDraft","hasJurorVoted","canJurorReveal","isvoteLeaked","voteOptionToString","OUTCOMES","dateFormat","getDisputeLastRound","DisputeActions","dispute","onAutoReveal","onDraft","onExecuteRuling","onRequestCommit","onRequestReveal","onRequestAppeal","phase","status","lastRound","wallet","Evidence","JuryDrafting","id","jurorDraft","account","isJurorDrafted","jurorHasVoted","VotingPeriod","draftTermId","maxAppealReached","commitment","lastRoundId","RevealVote","AppealRuling","ConfirmAppeal","ExecuteRuling","InformationSection","theme","title","paragraph","background","icon","hint","useInfoAttributes","contentSecondary","positiveBackground","positive","alpha","negativeBackground","accent","finalRulingConfirmed","Closed","votingPeriodEnded","voteLeaked","outcome","IconGavelRed","hintText","hasVotedInConsensus","vote","winningOutcome","settledPenalties","IconRewardsGreen","IconGavelOrange","commitmentDate","revealDate","ANJLockedMessage","ANJDiscountedMessage","ANJSlashedMessage","ANJMessage","result","help","ANJRewardsMessage","VoteInfo","formattedDate","Date","outcomeDescription","Refused","text","prefix","content"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport { GU, Help, textStyle, useTheme } from '@aragon/ui'\nimport {\n  Phase as DisputePhase,\n  Status as DisputeStatus,\n} from '../../types/dispute-status-types'\nimport DisputeAppeal from './actions/DisputeAppeal'\nimport DisputeAutoReveal from './DisputeAutoReveal'\nimport DisputeDraft from './actions/DisputeDraft'\nimport DisputeExecuteRuling from './actions/DisputeExecuteRuling'\nimport DisputeReveal from './actions/DisputeReveal'\nimport DisputeVoting from './actions/DisputeVoting'\nimport { useWallet } from '../../providers/Wallet'\nimport {\n  getJurorDraft,\n  hasJurorVoted,\n  canJurorReveal,\n} from '../../utils/juror-draft-utils'\nimport {\n  isvoteLeaked,\n  voteOptionToString,\n  OUTCOMES,\n} from '../../utils/crvoting-utils'\nimport { dateFormat } from '../../utils/date-utils'\n\nimport IconGavelOrange from '../../assets/IconGavelOrange.svg'\nimport IconGavelRed from '../../assets/IconGavelRed.svg'\nimport { getDisputeLastRound } from '../../utils/dispute-utils'\nimport IconRewardsGreen from '../../assets/IconRewardsGreen.svg'\n\nfunction DisputeActions({\n  dispute,\n  onAutoReveal,\n  onDraft,\n  onExecuteRuling,\n  onRequestCommit,\n  onRequestReveal,\n  onRequestAppeal,\n}) {\n  const { phase, status } = dispute\n  const lastRound = getDisputeLastRound(dispute)\n\n  const wallet = useWallet()\n\n  if (phase === DisputePhase.Evidence) {\n    return null\n  }\n\n  if (phase === DisputePhase.JuryDrafting) {\n    return <DisputeDraft disputeId={dispute.id} onDraft={onDraft} />\n  }\n\n  const jurorDraft = getJurorDraft(lastRound, wallet.account) // TODO: Should we also show results for past rounds ?\n  const isJurorDrafted = !!jurorDraft\n\n  const jurorHasVoted = isJurorDrafted && hasJurorVoted(jurorDraft)\n\n  if (phase === DisputePhase.VotingPeriod && !jurorHasVoted) {\n    return (\n      <DisputeVoting\n        draftTermId={lastRound.draftTermId}\n        isFinalRound={dispute.maxAppealReached}\n        isJurorDrafted={isJurorDrafted}\n        onRequestCommit={onRequestCommit}\n      />\n    )\n  }\n\n  return (\n    <React.Fragment>\n      <InformationSection\n        phase={phase}\n        status={status}\n        jurorDraft={jurorDraft}\n        hasJurorVoted={jurorHasVoted}\n        lastRound={lastRound}\n      />\n      {(() => {\n        // If connected account not drafted for current dispute\n        if (!isJurorDrafted) return null\n\n        // If juror has already voted\n        if (phase === DisputePhase.VotingPeriod)\n          return (\n            <DisputeAutoReveal\n              disputeId={dispute.id}\n              commitment={jurorDraft.commitment}\n              onAutoReveal={onAutoReveal}\n              roundId={dispute.lastRoundId}\n            />\n          )\n\n        // If we are past the voting period && juror hasn't voted\n        if (!jurorHasVoted) return null\n\n        // If reveal period has already pass\n        if (phase !== DisputePhase.RevealVote) return null\n\n        // If juror cannot reveal (has already revealed || voted leaked)\n        if (!canJurorReveal(jurorDraft)) return null\n\n        return (\n          <DisputeReveal\n            disputeId={dispute.id}\n            roundId={dispute.lastRoundId}\n            commitment={jurorDraft.commitment}\n            onRequestReveal={onRequestReveal}\n          />\n        )\n      })()}\n\n      {(phase === DisputePhase.AppealRuling ||\n        phase === DisputePhase.ConfirmAppeal) && (\n        <DisputeAppeal\n          disputeId={dispute.id}\n          roundId={dispute.lastRoundId}\n          onRequestAppeal={onRequestAppeal}\n          confirm={phase === DisputePhase.ConfirmAppeal}\n        />\n      )}\n      {phase === DisputePhase.ExecuteRuling && (\n        <DisputeExecuteRuling\n          disputeId={dispute.id}\n          onExecuteRuling={onExecuteRuling}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n\nfunction InformationSection({\n  hasJurorVoted,\n  jurorDraft,\n  lastRound,\n  phase,\n  status,\n}) {\n  const theme = useTheme()\n\n  const { title, paragraph, background, icon, hint } = useInfoAttributes({\n    hasJurorVoted,\n    jurorDraft,\n    lastRound,\n    phase,\n    status,\n  })\n\n  if (!jurorDraft) return null\n\n  return (\n    <div\n      css={`\n        background: ${background};\n        padding: ${3 * GU}px;\n        display: flex;\n      `}\n    >\n      <div\n        css={`\n          display: flex;\n          align-items: center;\n          margin: 0 auto;\n        `}\n      >\n        <div\n          css={`\n            margin-right: ${1 * GU}px;\n          `}\n        >\n          <img\n            alt=\"\"\n            src={icon}\n            height=\"42\"\n            css={`\n              display: block;\n            `}\n          />\n        </div>\n        <div>\n          <div\n            css={`\n              ${textStyle('body1')}\n            `}\n          >\n            {title}\n          </div>\n          <span\n            css={`\n              ${textStyle('body2')}\n              color: ${theme.contentSecondary};\n            `}\n          >\n            {paragraph} {hint && <Help hint={hint} />}\n          </span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Helper function that returns main attributes for the YourVoteInfo component\n// TODO: Contemplate final round cases (when a juror has voted, the ANJ amount is pre-slashed)\nconst useInfoAttributes = ({\n  hasJurorVoted,\n  jurorDraft,\n  lastRound,\n  phase,\n  status,\n}) => {\n  const theme = useTheme()\n  const positiveBackground = theme.positive.alpha(0.1)\n  const negativeBackground = theme.accent.alpha(0.2)\n\n  return useMemo(() => {\n    if (!jurorDraft) return {}\n\n    // If the dispute is in the execute ruling phase it means that the final ruling can already be ensured.\n    // If the dispute is closed it means that the final ruling was already ensured.\n    const finalRulingConfirmed =\n      status === DisputeStatus.Closed || phase === DisputePhase.ExecuteRuling\n\n    // Note that we can assume that the evidence submission and drafting phases have already passed since we do an early return above\n    const votingPeriodEnded =\n      phase !== DisputePhase.VotingPeriod && phase !== DisputePhase.RevealVote\n\n    const voteLeaked = isvoteLeaked(jurorDraft.outcome)\n\n    // If vote leaked or juror hasn't voted\n    if (!hasJurorVoted || voteLeaked) {\n      return {\n        title: voteLeaked\n          ? 'Unfortunately, your vote has been leaked'\n          : 'Your vote wasnâ€™t cast on time.',\n        paragraph: <ANJDiscountedMessage />,\n        background: negativeBackground,\n        icon: IconGavelRed,\n        hintText: voteLeaked ? 'Vote leaked (complete)' : null, // TODO: Add hint for leaked vote\n      }\n    }\n\n    // If juror voted and the voting (commit) period has ended\n    if (hasJurorVoted && votingPeriodEnded) {\n      // If the juror didn't revealed\n      if (!jurorDraft.outcome) {\n        return {\n          title: \"Your vote wasn't revealed on time\",\n          paragraph: <ANJDiscountedMessage />,\n          background: negativeBackground,\n          icon: IconGavelRed,\n        }\n      }\n\n      // Juror has revealed\n      // Check if has voted in consensus with the plurality for the last round\n      const hasVotedInConsensus =\n        lastRound.vote && jurorDraft.outcome === lastRound.vote.winningOutcome\n\n      // We must check if the penalties were already settled so we can tell the jurors\n      // wether their ANJ locked balance has been discounted or they can claim rewards\n      // Note that if the penalties for the round are settled it means that the dispute has already ended\n      const settledPenalties = lastRound.settledPenalties\n\n      const title = hasVotedInConsensus\n        ? 'You have voted in consensus with the plurality'\n        : 'You have not voted in consensus with the plurality'\n      const background = hasVotedInConsensus\n        ? positiveBackground\n        : negativeBackground\n\n      // If penalties settled then the locked ANJ has been redistributed\n      if (settledPenalties) {\n        return {\n          title,\n          paragraph: hasVotedInConsensus ? (\n            <ANJRewardsMessage />\n          ) : (\n            <ANJSlashedMessage />\n          ),\n          background,\n          icon: hasVotedInConsensus ? IconRewardsGreen : IconGavelRed,\n        }\n      }\n\n      // Includes the cases where penalties weren't settled or the last round hasn't ended\n      return {\n        title,\n        paragraph: (\n          <ANJLockedMessage finalRulingConfirmed={finalRulingConfirmed} />\n        ),\n        background,\n        icon: hasVotedInConsensus ? IconGavelOrange : IconGavelRed,\n      }\n    }\n\n    // Juror has voted and reveal period hasn't ended\n    return {\n      title: `Your vote was cast ${\n        jurorDraft.outcome ? 'and revealed' : ''\n      } successfully.`,\n      paragraph: (\n        <VoteInfo\n          commitmentDate={jurorDraft.commitmentDate}\n          outcome={jurorDraft.outcome}\n          revealDate={jurorDraft.revealDate}\n        />\n      ),\n      background: theme.accent.alpha(0.05),\n      icon: IconGavelOrange,\n    }\n  }, [\n    hasJurorVoted,\n    jurorDraft,\n    lastRound.settledPenalties,\n    lastRound.vote,\n    negativeBackground,\n    phase,\n    positiveBackground,\n    status,\n    theme.accent,\n  ])\n}\n\nconst ANJLockedMessage = ({ finalRulingConfirmed }) => {\n  return (\n    <ANJMessage\n      result={`will remain locked until ${\n        finalRulingConfirmed\n          ? 'penalties are settled'\n          : 'the dispute has been resolved'\n      }. `}\n    />\n  )\n}\n\nconst ANJDiscountedMessage = () => {\n  return <ANJMessage result=\"will be discounted\" />\n}\n\nconst ANJSlashedMessage = () => {\n  return (\n    <ANJMessage result=\"has been slashed and redistributed to other jurors\" />\n  )\n}\n\nconst ANJMessage = ({ result }) => {\n  const theme = useTheme()\n\n  return (\n    <span>\n      Your{' '}\n      <span\n        css={`\n          color: ${theme.help};\n        `}\n      >\n        ANJ locked balance\n      </span>{' '}\n      {result}\n    </span>\n  )\n}\n\nconst ANJRewardsMessage = () => {\n  const theme = useTheme()\n\n  return (\n    <span>\n      You can now claim your\n      <span\n        css={`\n          color: ${theme.help};\n        `}\n      >\n        {' '}\n        rewards\n      </span>{' '}\n      in the dashboard.\n    </span>\n  )\n}\n\nconst VoteInfo = ({ commitmentDate, outcome, revealDate }) => {\n  const theme = useTheme()\n\n  const formattedDate = dateFormat(\n    new Date(revealDate || commitmentDate),\n    'standard'\n  )\n\n  const outcomeDescription = useMemo(() => {\n    if (outcome === OUTCOMES.Refused) {\n      return { text: 'Refused to vote' }\n    }\n\n    return { prefix: 'voted ', text: voteOptionToString(outcome) }\n  }, [outcome])\n\n  return (\n    <span>\n      You {outcomeDescription.prefix}\n      <span\n        css={`\n          text-transform: uppercase;\n          color: ${theme.content};\n        `}\n      >\n        {outcomeDescription.text}\n      </span>{' '}\n      on{' '}\n      <span\n        css={`\n          color: ${theme.content};\n        `}\n      >\n        {formattedDate}\n      </span>\n    </span>\n  )\n}\n\nexport default DisputeActions\n"]},"metadata":{},"sourceType":"module"}