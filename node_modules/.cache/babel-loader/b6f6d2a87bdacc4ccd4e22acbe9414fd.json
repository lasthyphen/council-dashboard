{"ast":null,"code":"import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{addressesEqual}from'../lib/web3-utils';import{isvoteLeaked}from'./crvoting-utils';import{bigNum}from'../lib/math-utils';import{toMs}from'./date-utils';export function getJurorDraft(round,jurorId){if(!round)return null;return round.jurors.find(function(jurorDraft){return addressesEqual(jurorDraft.juror.id,jurorId);});}export function hasJurorVoted(jurorDraft){return!!jurorDraft.commitment;}export function canJurorReveal(jurorDraft){var hasNotRevealed=!jurorDraft.outcome;return hasNotRevealed&&hasJurorVoted(jurorDraft)&&!isvoteLeaked(jurorDraft.outcome);}export function isJurorCoherent(jurorDraft){var dispute=jurorDraft.round.dispute;return dispute.finalRuling!==0&&jurorDraft.outcome===dispute.finalRuling;}export function transformJurorDataAttributes(jurorDraft){var rewardedAt=jurorDraft.rewardedAt,round=jurorDraft.round,weight=jurorDraft.weight;return _objectSpread({},jurorDraft,{rewardedAt:toMs(parseInt(rewardedAt||0,10)),weight:bigNum(weight),round:_objectSpread({},round,{number:parseInt(round.number,10),collectedTokens:bigNum(round.collectedTokens),jurorFees:bigNum(round.jurorFees)})});}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/utils/juror-draft-utils.js"],"names":["addressesEqual","isvoteLeaked","bigNum","toMs","getJurorDraft","round","jurorId","jurors","find","jurorDraft","juror","id","hasJurorVoted","commitment","canJurorReveal","hasNotRevealed","outcome","isJurorCoherent","dispute","finalRuling","transformJurorDataAttributes","rewardedAt","weight","parseInt","number","collectedTokens","jurorFees"],"mappings":"2HAAA,OAASA,cAAT,KAA+B,mBAA/B,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,MAAT,KAAuB,mBAAvB,CACA,OAASC,IAAT,KAAqB,cAArB,CAEA,MAAO,SAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8BC,OAA9B,CAAuC,CAC5C,GAAI,CAACD,KAAL,CAAY,MAAO,KAAP,CAEZ,MAAOA,CAAAA,KAAK,CAACE,MAAN,CAAaC,IAAb,CAAkB,SAAAC,UAAU,QACjCT,CAAAA,cAAc,CAACS,UAAU,CAACC,KAAX,CAAiBC,EAAlB,CAAsBL,OAAtB,CADmB,EAA5B,CAAP,CAGD,CAED,MAAO,SAASM,CAAAA,aAAT,CAAuBH,UAAvB,CAAmC,CACxC,MAAO,CAAC,CAACA,UAAU,CAACI,UAApB,CACD,CAED,MAAO,SAASC,CAAAA,cAAT,CAAwBL,UAAxB,CAAoC,CACzC,GAAMM,CAAAA,cAAc,CAAG,CAACN,UAAU,CAACO,OAAnC,CACA,MACED,CAAAA,cAAc,EACdH,aAAa,CAACH,UAAD,CADb,EAEA,CAACR,YAAY,CAACQ,UAAU,CAACO,OAAZ,CAHf,CAKD,CAED,MAAO,SAASC,CAAAA,eAAT,CAAyBR,UAAzB,CAAqC,IAClCS,CAAAA,OADkC,CACtBT,UAAU,CAACJ,KADW,CAClCa,OADkC,CAE1C,MAAOA,CAAAA,OAAO,CAACC,WAAR,GAAwB,CAAxB,EAA6BV,UAAU,CAACO,OAAX,GAAuBE,OAAO,CAACC,WAAnE,CACD,CAED,MAAO,SAASC,CAAAA,4BAAT,CAAsCX,UAAtC,CAAkD,IAC/CY,CAAAA,UAD+C,CACjBZ,UADiB,CAC/CY,UAD+C,CACnChB,KADmC,CACjBI,UADiB,CACnCJ,KADmC,CAC5BiB,MAD4B,CACjBb,UADiB,CAC5Ba,MAD4B,CAGvD,wBACKb,UADL,EAEEY,UAAU,CAAElB,IAAI,CAACoB,QAAQ,CAACF,UAAU,EAAI,CAAf,CAAkB,EAAlB,CAAT,CAFlB,CAGEC,MAAM,CAAEpB,MAAM,CAACoB,MAAD,CAHhB,CAIEjB,KAAK,kBACAA,KADA,EAEHmB,MAAM,CAAED,QAAQ,CAAClB,KAAK,CAACmB,MAAP,CAAe,EAAf,CAFb,CAGHC,eAAe,CAAEvB,MAAM,CAACG,KAAK,CAACoB,eAAP,CAHpB,CAIHC,SAAS,CAAExB,MAAM,CAACG,KAAK,CAACqB,SAAP,CAJd,EAJP,GAWD","sourcesContent":["import { addressesEqual } from '../lib/web3-utils'\nimport { isvoteLeaked } from './crvoting-utils'\nimport { bigNum } from '../lib/math-utils'\nimport { toMs } from './date-utils'\n\nexport function getJurorDraft(round, jurorId) {\n  if (!round) return null\n\n  return round.jurors.find(jurorDraft =>\n    addressesEqual(jurorDraft.juror.id, jurorId)\n  )\n}\n\nexport function hasJurorVoted(jurorDraft) {\n  return !!jurorDraft.commitment\n}\n\nexport function canJurorReveal(jurorDraft) {\n  const hasNotRevealed = !jurorDraft.outcome\n  return (\n    hasNotRevealed &&\n    hasJurorVoted(jurorDraft) &&\n    !isvoteLeaked(jurorDraft.outcome)\n  )\n}\n\nexport function isJurorCoherent(jurorDraft) {\n  const { dispute } = jurorDraft.round\n  return dispute.finalRuling !== 0 && jurorDraft.outcome === dispute.finalRuling\n}\n\nexport function transformJurorDataAttributes(jurorDraft) {\n  const { rewardedAt, round, weight } = jurorDraft\n\n  return {\n    ...jurorDraft,\n    rewardedAt: toMs(parseInt(rewardedAt || 0, 10)),\n    weight: bigNum(weight),\n    round: {\n      ...round,\n      number: parseInt(round.number, 10),\n      collectedTokens: bigNum(round.collectedTokens),\n      jurorFees: bigNum(round.jurorFees),\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}