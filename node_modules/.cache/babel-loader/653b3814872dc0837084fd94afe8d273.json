{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = void 0;\n/**\n* @module radspec/helpers/HelperManager\n*/\n\n/**\n* Class for managing the execution of helper functions\n*\n* @class HelperManager\n* @param {Object} availableHelpers Defined helpers\n*/\n\nclass HelperManager {\n  constructor(availableHelpers = {}) {\n    this.availableHelpers = availableHelpers;\n  }\n  /**\n  * Does a helper exist\n  *\n  * @param  {string} helper Helper name\n  * @return {bool}\n  */\n\n\n  exists(helper) {\n    return !!this.availableHelpers[helper];\n  }\n  /**\n  * Execute a helper with some inputs\n  *\n  * @param  {string} helper Helper name\n  * @param  {Array<radspec/evaluator/TypedValue>} inputs\n  * @param  {Object} config Configuration for running helper\n  * @param {ethers.providers.Provider} config.provider Current provider\n  * @param  {radspec/evaluator/Evaluator} config.evaluator Current evaluator\n  * @return {Promise<radspec/evaluator/TypedValue>}\n  */\n\n\n  execute(helper, inputs, {\n    provider,\n    evaluator\n  }) {\n    // pass values directly\n    return inputs = inputs.map(input => input.value), this.availableHelpers[helper](provider, evaluator)(...inputs);\n  }\n  /**\n  * Get all registered helpers as a key-value mapping\n  *\n  * @return {Object}\n  */\n\n\n  getHelpers() {\n    return this.availableHelpers;\n  }\n\n}\n\nexports.default = HelperManager;","map":null,"metadata":{},"sourceType":"script"}