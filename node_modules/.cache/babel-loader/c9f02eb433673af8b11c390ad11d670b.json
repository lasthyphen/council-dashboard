{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _metadata;\n\nimport { resolveManifest, resolveArtifact } from '../utils/metadata';\nexport default class App {\n  constructor(data, metadata, organization) {\n    _metadata.set(this, void 0);\n\n    __classPrivateFieldSet(this, _metadata, metadata);\n\n    this.address = data.address;\n    this.appId = data.appId;\n    this.codeAddress = data.codeAddress;\n    this.contentUri = data.contentUri;\n    this.isForwarder = data.isForwarder;\n    this.isUpgradeable = data.isUpgradeable;\n    this.kernelAddress = data.kernelAddress;\n    this.name = data.name;\n    this.organization = organization;\n    this.registry = data.registry;\n    this.registryAddress = data.registryAddress;\n    this.repoAddress = data.repoAddress;\n    this.version = data.version;\n  }\n\n  static async create(data, organization) {\n    const artifact = await resolveArtifact(data);\n    const manifest = await resolveManifest(data);\n    const metadata = [artifact, manifest];\n    return new App(data, metadata, organization);\n  }\n\n  orgConnector() {\n    return this.organization.connection.orgConnector;\n  }\n\n  async repo() {\n    return this.orgConnector().repoForApp(this.organization, this.address);\n  }\n\n  async roles() {\n    return this.orgConnector().rolesForAddress(this.organization, this.address);\n  }\n\n  get artifact() {\n    return __classPrivateFieldGet(this, _metadata)[0];\n  }\n\n  get manifest() {\n    return __classPrivateFieldGet(this, _metadata)[1];\n  }\n\n  get abi() {\n    return this.artifact.abi;\n  }\n\n  get intents() {\n    return this.artifact.functions;\n  }\n\n  get deprecatedIntents() {\n    return this.artifact.deprecatedFunctions;\n  }\n\n  get appName() {\n    return this.artifact.appName;\n  }\n\n}\n_metadata = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}