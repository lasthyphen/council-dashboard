{"ast":null,"code":"var _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/providers/ClientTheme.js\";\nimport React, { useCallback, useContext, useMemo, useState } from 'react';\nimport { getClientTheme, setClientTheme } from '../local-settings';\nconst SETTINGS_THEME = getClientTheme();\nconst ClientThemeContext = React.createContext(SETTINGS_THEME);\n\nfunction ClientThemeProvider(props) {\n  const [appearance, setAppearance] = useState(SETTINGS_THEME.appearance);\n  const [theme, setTheme] = useState(SETTINGS_THEME.theme);\n  const toggleAppearance = useCallback(() => {\n    const newAppearance = appearance === 'light' ? 'dark' : 'light';\n    setAppearance(newAppearance);\n    setTheme(null);\n    setClientTheme(newAppearance);\n  }, [appearance]);\n  const clientTheme = useMemo(() => ({\n    appearance,\n    theme,\n    toggleAppearance\n  }), [appearance, theme, toggleAppearance]);\n  return React.createElement(ClientThemeContext.Provider, Object.assign({\n    value: clientTheme\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n}\n\nfunction useClientTheme() {\n  return useContext(ClientThemeContext);\n}\n\nexport { ClientThemeProvider, useClientTheme };","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/providers/ClientTheme.js"],"names":["React","useCallback","useContext","useMemo","useState","getClientTheme","setClientTheme","SETTINGS_THEME","ClientThemeContext","createContext","ClientThemeProvider","props","appearance","setAppearance","theme","setTheme","toggleAppearance","newAppearance","clientTheme","useClientTheme"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,UAA7B,EAAyCC,OAAzC,EAAkDC,QAAlD,QAAkE,OAAlE;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,mBAA/C;AAEA,MAAMC,cAAc,GAAGF,cAAc,EAArC;AACA,MAAMG,kBAAkB,GAAGR,KAAK,CAACS,aAAN,CAAoBF,cAApB,CAA3B;;AAEA,SAASG,mBAAT,CAA6BC,KAA7B,EAAoC;AAClC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAACG,cAAc,CAACK,UAAhB,CAA5C;AACA,QAAM,CAACE,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACG,cAAc,CAACO,KAAhB,CAAlC;AAEA,QAAME,gBAAgB,GAAGf,WAAW,CAAC,MAAM;AACzC,UAAMgB,aAAa,GAAGL,UAAU,KAAK,OAAf,GAAyB,MAAzB,GAAkC,OAAxD;AACAC,IAAAA,aAAa,CAACI,aAAD,CAAb;AACAF,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAT,IAAAA,cAAc,CAACW,aAAD,CAAd;AACD,GALmC,EAKjC,CAACL,UAAD,CALiC,CAApC;AAOA,QAAMM,WAAW,GAAGf,OAAO,CACzB,OAAO;AACLS,IAAAA,UADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP,CADyB,EAMzB,CAACJ,UAAD,EAAaE,KAAb,EAAoBE,gBAApB,CANyB,CAA3B;AASA,SAAO,oBAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEE;AAApC,KAAqDP,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAED,SAASQ,cAAT,GAA0B;AACxB,SAAOjB,UAAU,CAACM,kBAAD,CAAjB;AACD;;AAED,SAASE,mBAAT,EAA8BS,cAA9B","sourcesContent":["import React, { useCallback, useContext, useMemo, useState } from 'react'\nimport { getClientTheme, setClientTheme } from '../local-settings'\n\nconst SETTINGS_THEME = getClientTheme()\nconst ClientThemeContext = React.createContext(SETTINGS_THEME)\n\nfunction ClientThemeProvider(props) {\n  const [appearance, setAppearance] = useState(SETTINGS_THEME.appearance)\n  const [theme, setTheme] = useState(SETTINGS_THEME.theme)\n\n  const toggleAppearance = useCallback(() => {\n    const newAppearance = appearance === 'light' ? 'dark' : 'light'\n    setAppearance(newAppearance)\n    setTheme(null)\n    setClientTheme(newAppearance)\n  }, [appearance])\n\n  const clientTheme = useMemo(\n    () => ({\n      appearance,\n      theme,\n      toggleAppearance,\n    }),\n    [appearance, theme, toggleAppearance]\n  )\n\n  return <ClientThemeContext.Provider value={clientTheme} {...props} />\n}\n\nfunction useClientTheme() {\n  return useContext(ClientThemeContext)\n}\n\nexport { ClientThemeProvider, useClientTheme }\n"]},"metadata":{},"sourceType":"module"}