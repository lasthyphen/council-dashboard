{"ast":null,"code":"const EventEmitter = require('events');\n\nconst parse = require('../parse');\n\nconst dev = process.env.NODE_ENV === 'development';\nlet WebSocket;\n\nclass WebSocketConnection extends EventEmitter {\n  constructor(_WebSocket, url, options) {\n    super();\n    WebSocket = _WebSocket;\n    setTimeout(() => this.create(url, options), 0);\n  }\n\n  create(url, options) {\n    if (!WebSocket) this.emit('error', new Error('No WebSocket transport available'));\n\n    try {\n      this.socket = new WebSocket(url);\n    } catch (e) {\n      return this.emit('error', e);\n    }\n\n    this.socket.addEventListener('error', err => this.emit('error', err));\n    this.socket.addEventListener('open', () => {\n      this.emit('connect');\n      this.socket.addEventListener('message', message => {\n        const data = typeof message.data === 'string' ? message.data : '';\n        parse(data, (err, payloads) => {\n          if (err) return; //\n\n          payloads.forEach(load => {\n            if (Array.isArray(load)) {\n              load.forEach(payload => this.emit('payload', payload));\n            } else {\n              this.emit('payload', load);\n            }\n          });\n        });\n      });\n      this.socket.addEventListener('close', () => this.onClose());\n    });\n  }\n\n  onClose() {\n    this.socket = null;\n    this.closed = true;\n    if (dev) console.log('Closing WebSocket connection');\n    this.emit('close');\n    this.removeAllListeners();\n  }\n\n  close() {\n    if (this.socket) {\n      this.socket.close();\n    } else {\n      this.onClose();\n    }\n  }\n\n  error(payload, message, code = -1) {\n    this.emit('payload', {\n      id: payload.id,\n      jsonrpc: payload.jsonrpc,\n      error: {\n        message,\n        code\n      }\n    });\n  }\n\n  send(payload) {\n    if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n      setTimeout(_ => this.send(payload), 10);\n    } else if (!this.socket || this.socket.readyState > 1) {\n      this.connected = false;\n      this.error(payload, 'Not connected');\n    } else {\n      this.socket.send(JSON.stringify(payload));\n    }\n  }\n\n}\n\nmodule.exports = WebSocket => (url, cb) => new WebSocketConnection(WebSocket, url, cb);","map":null,"metadata":{},"sourceType":"script"}