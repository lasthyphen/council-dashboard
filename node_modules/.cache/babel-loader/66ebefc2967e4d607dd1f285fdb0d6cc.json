{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { isAddress } from '@aragon/ui'; // https://github.com/react-spring/react-spring/blob/31200a79843ce85200b2a7692e8f14788e60f9e9/types/renderprops-universal.d.ts#L133\n\nexport const ReactSpringStateType = PropTypes.oneOf(['enter', 'update', 'leave']);\n\nfunction validatorCreator(nonRequiredFunction) {\n  const validator = nonRequiredFunction;\n\n  validator.isRequired = (props, propName, componentName) => {\n    const value = props[propName];\n\n    if (value === null || value === undefined || value === '') {\n      return new Error(`Property ${propName} is required on ${componentName}, but ${value} was given.`);\n    }\n\n    return nonRequiredFunction(props, propName, componentName);\n  };\n\n  return validator;\n}\n\nfunction ethereumAddressValidator(props, propName, componentName) {\n  const value = props[propName];\n\n  if (value === null || value === undefined || value === '') {\n    return null;\n  }\n\n  if (!isAddress(value)) {\n    const valueType = typeof value;\n    let nonAddress = null;\n\n    if (valueType !== 'object') {\n      nonAddress = value.toString();\n    }\n\n    return new Error(`Invalid prop ${propName} supplied to ${componentName}. The provided value is not a valid ethereum address.${nonAddress && ` You provided \"${nonAddress}\"`}`);\n  }\n\n  return null;\n}\n\nexport const EthereumAddressType = validatorCreator(ethereumAddressValidator);","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/prop-types.js"],"names":["PropTypes","isAddress","ReactSpringStateType","oneOf","validatorCreator","nonRequiredFunction","validator","isRequired","props","propName","componentName","value","undefined","Error","ethereumAddressValidator","valueType","nonAddress","toString","EthereumAddressType"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,YAA1B,C,CAEA;;AACA,OAAO,MAAMC,oBAAoB,GAAGF,SAAS,CAACG,KAAV,CAAgB,CAClD,OADkD,EAElD,QAFkD,EAGlD,OAHkD,CAAhB,CAA7B;;AAMP,SAASC,gBAAT,CAA0BC,mBAA1B,EAA+C;AAC7C,QAAMC,SAAS,GAAGD,mBAAlB;;AACAC,EAAAA,SAAS,CAACC,UAAV,GAAuB,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,KAAoC;AACzD,UAAMC,KAAK,GAAGH,KAAK,CAACC,QAAD,CAAnB;;AACA,QAAIE,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA5B,IAAyCD,KAAK,KAAK,EAAvD,EAA2D;AACzD,aAAO,IAAIE,KAAJ,CACJ,YAAWJ,QAAS,mBAAkBC,aAAc,SAAQC,KAAM,aAD9D,CAAP;AAGD;;AACD,WAAON,mBAAmB,CAACG,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,CAA1B;AACD,GARD;;AASA,SAAOJ,SAAP;AACD;;AAED,SAASQ,wBAAT,CAAkCN,KAAlC,EAAyCC,QAAzC,EAAmDC,aAAnD,EAAkE;AAChE,QAAMC,KAAK,GAAGH,KAAK,CAACC,QAAD,CAAnB;;AACA,MAAIE,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAA5B,IAAyCD,KAAK,KAAK,EAAvD,EAA2D;AACzD,WAAO,IAAP;AACD;;AACD,MAAI,CAACV,SAAS,CAACU,KAAD,CAAd,EAAuB;AACrB,UAAMI,SAAS,GAAG,OAAOJ,KAAzB;AACA,QAAIK,UAAU,GAAG,IAAjB;;AACA,QAAID,SAAS,KAAK,QAAlB,EAA4B;AAC1BC,MAAAA,UAAU,GAAGL,KAAK,CAACM,QAAN,EAAb;AACD;;AACD,WAAO,IAAIJ,KAAJ,CACJ,gBAAeJ,QAAS,gBAAeC,aAAc,wDAAuDM,UAAU,IACpH,kBAAiBA,UAAW,GAAG,EAF7B,CAAP;AAID;;AACD,SAAO,IAAP;AACD;;AAED,OAAO,MAAME,mBAAmB,GAAGd,gBAAgB,CAACU,wBAAD,CAA5C","sourcesContent":["import PropTypes from 'prop-types'\nimport { isAddress } from '@aragon/ui'\n\n// https://github.com/react-spring/react-spring/blob/31200a79843ce85200b2a7692e8f14788e60f9e9/types/renderprops-universal.d.ts#L133\nexport const ReactSpringStateType = PropTypes.oneOf([\n  'enter',\n  'update',\n  'leave',\n])\n\nfunction validatorCreator(nonRequiredFunction) {\n  const validator = nonRequiredFunction\n  validator.isRequired = (props, propName, componentName) => {\n    const value = props[propName]\n    if (value === null || value === undefined || value === '') {\n      return new Error(\n        `Property ${propName} is required on ${componentName}, but ${value} was given.`\n      )\n    }\n    return nonRequiredFunction(props, propName, componentName)\n  }\n  return validator\n}\n\nfunction ethereumAddressValidator(props, propName, componentName) {\n  const value = props[propName]\n  if (value === null || value === undefined || value === '') {\n    return null\n  }\n  if (!isAddress(value)) {\n    const valueType = typeof value\n    let nonAddress = null\n    if (valueType !== 'object') {\n      nonAddress = value.toString()\n    }\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. The provided value is not a valid ethereum address.${nonAddress &&\n        ` You provided \"${nonAddress}\"`}`\n    )\n  }\n  return null\n}\n\nexport const EthereumAddressType = validatorCreator(ethereumAddressValidator)\n"]},"metadata":{},"sourceType":"module"}