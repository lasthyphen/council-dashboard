{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useSidePanel } from './useSidePanel';\nimport { useDisputeActions } from './useCourtContracts';\nimport { useDispute } from './useDisputes';\nexport const REQUEST_MODE = {\n  NO_REQUEST: Symbol('NO_REQUEST'),\n  COMMIT: Symbol('COMMIT'),\n  REVEAL: Symbol('REVEAL'),\n  APPEAL: Symbol('APPEAL')\n};\nexport function usePanelRequestMode(requestPanelOpen) {\n  const [requestMode, setRequestMode] = useState({\n    mode: REQUEST_MODE.NO_REQUEST,\n    data: {}\n  });\n  const updateMode = useCallback(newMode => {\n    setRequestMode(newMode);\n    requestPanelOpen();\n  }, [requestPanelOpen]);\n  return [requestMode, updateMode];\n} // Requests to set new mode and open side panel\n\nexport function usePanelRequestActions(request) {\n  const commit = useCallback(outcome => {\n    request({\n      mode: REQUEST_MODE.COMMIT,\n      data: {\n        outcome\n      }\n    });\n  }, [request]);\n  const reveal = useCallback(() => {\n    request({\n      mode: REQUEST_MODE.REVEAL\n    });\n  }, [request]);\n  const appeal = useCallback(confirm => {\n    request({\n      mode: REQUEST_MODE.APPEAL,\n      data: {\n        confirm\n      }\n    });\n  }, [request]);\n  return {\n    commit,\n    reveal,\n    appeal\n  };\n}\nexport function useDisputeLogic(disputeId) {\n  const panelState = useSidePanel();\n  const [requestMode, setRequestMode] = usePanelRequestMode(panelState.requestOpen);\n  const requests = usePanelRequestActions(setRequestMode);\n  const actions = useDisputeActions();\n  const [dispute, disputeFetching, error] = useDispute(disputeId);\n  return {\n    actions,\n    error,\n    dispute,\n    disputeFetching,\n    requestMode,\n    panelState,\n    requests\n  };\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/dispute-logic.js"],"names":["useCallback","useState","useSidePanel","useDisputeActions","useDispute","REQUEST_MODE","NO_REQUEST","Symbol","COMMIT","REVEAL","APPEAL","usePanelRequestMode","requestPanelOpen","requestMode","setRequestMode","mode","data","updateMode","newMode","usePanelRequestActions","request","commit","outcome","reveal","appeal","confirm","useDisputeLogic","disputeId","panelState","requestOpen","requests","actions","dispute","disputeFetching","error"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,UAAU,EAAEC,MAAM,CAAC,YAAD,CADQ;AAE1BC,EAAAA,MAAM,EAAED,MAAM,CAAC,QAAD,CAFY;AAG1BE,EAAAA,MAAM,EAAEF,MAAM,CAAC,QAAD,CAHY;AAI1BG,EAAAA,MAAM,EAAEH,MAAM,CAAC,QAAD;AAJY,CAArB;AAOP,OAAO,SAASI,mBAAT,CAA6BC,gBAA7B,EAA+C;AACpD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC;AAC7Cc,IAAAA,IAAI,EAAEV,YAAY,CAACC,UAD0B;AAE7CU,IAAAA,IAAI,EAAE;AAFuC,GAAD,CAA9C;AAKA,QAAMC,UAAU,GAAGjB,WAAW,CAC5BkB,OAAO,IAAI;AACTJ,IAAAA,cAAc,CAACI,OAAD,CAAd;AACAN,IAAAA,gBAAgB;AACjB,GAJ2B,EAK5B,CAACA,gBAAD,CAL4B,CAA9B;AAQA,SAAO,CAACC,WAAD,EAAcI,UAAd,CAAP;AACD,C,CAED;;AACA,OAAO,SAASE,sBAAT,CAAgCC,OAAhC,EAAyC;AAC9C,QAAMC,MAAM,GAAGrB,WAAW,CACxBsB,OAAO,IAAI;AACTF,IAAAA,OAAO,CAAC;AAAEL,MAAAA,IAAI,EAAEV,YAAY,CAACG,MAArB;AAA6BQ,MAAAA,IAAI,EAAE;AAAEM,QAAAA;AAAF;AAAnC,KAAD,CAAP;AACD,GAHuB,EAIxB,CAACF,OAAD,CAJwB,CAA1B;AAOA,QAAMG,MAAM,GAAGvB,WAAW,CAAC,MAAM;AAC/BoB,IAAAA,OAAO,CAAC;AAAEL,MAAAA,IAAI,EAAEV,YAAY,CAACI;AAArB,KAAD,CAAP;AACD,GAFyB,EAEvB,CAACW,OAAD,CAFuB,CAA1B;AAIA,QAAMI,MAAM,GAAGxB,WAAW,CACxByB,OAAO,IAAI;AACTL,IAAAA,OAAO,CAAC;AAAEL,MAAAA,IAAI,EAAEV,YAAY,CAACK,MAArB;AAA6BM,MAAAA,IAAI,EAAE;AAAES,QAAAA;AAAF;AAAnC,KAAD,CAAP;AACD,GAHuB,EAIxB,CAACL,OAAD,CAJwB,CAA1B;AAOA,SAAO;AAAEC,IAAAA,MAAF;AAAUE,IAAAA,MAAV;AAAkBC,IAAAA;AAAlB,GAAP;AACD;AAED,OAAO,SAASE,eAAT,CAAyBC,SAAzB,EAAoC;AACzC,QAAMC,UAAU,GAAG1B,YAAY,EAA/B;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCH,mBAAmB,CACvDiB,UAAU,CAACC,WAD4C,CAAzD;AAGA,QAAMC,QAAQ,GAAGX,sBAAsB,CAACL,cAAD,CAAvC;AAEA,QAAMiB,OAAO,GAAG5B,iBAAiB,EAAjC;AACA,QAAM,CAAC6B,OAAD,EAAUC,eAAV,EAA2BC,KAA3B,IAAoC9B,UAAU,CAACuB,SAAD,CAApD;AAEA,SAAO;AACLI,IAAAA,OADK;AAELG,IAAAA,KAFK;AAGLF,IAAAA,OAHK;AAILC,IAAAA,eAJK;AAKLpB,IAAAA,WALK;AAMLe,IAAAA,UANK;AAOLE,IAAAA;AAPK,GAAP;AASD","sourcesContent":["import { useCallback, useState } from 'react'\n\nimport { useSidePanel } from './useSidePanel'\nimport { useDisputeActions } from './useCourtContracts'\nimport { useDispute } from './useDisputes'\n\nexport const REQUEST_MODE = {\n  NO_REQUEST: Symbol('NO_REQUEST'),\n  COMMIT: Symbol('COMMIT'),\n  REVEAL: Symbol('REVEAL'),\n  APPEAL: Symbol('APPEAL'),\n}\n\nexport function usePanelRequestMode(requestPanelOpen) {\n  const [requestMode, setRequestMode] = useState({\n    mode: REQUEST_MODE.NO_REQUEST,\n    data: {},\n  })\n\n  const updateMode = useCallback(\n    newMode => {\n      setRequestMode(newMode)\n      requestPanelOpen()\n    },\n    [requestPanelOpen]\n  )\n\n  return [requestMode, updateMode]\n}\n\n// Requests to set new mode and open side panel\nexport function usePanelRequestActions(request) {\n  const commit = useCallback(\n    outcome => {\n      request({ mode: REQUEST_MODE.COMMIT, data: { outcome } })\n    },\n    [request]\n  )\n\n  const reveal = useCallback(() => {\n    request({ mode: REQUEST_MODE.REVEAL })\n  }, [request])\n\n  const appeal = useCallback(\n    confirm => {\n      request({ mode: REQUEST_MODE.APPEAL, data: { confirm } })\n    },\n    [request]\n  )\n\n  return { commit, reveal, appeal }\n}\n\nexport function useDisputeLogic(disputeId) {\n  const panelState = useSidePanel()\n  const [requestMode, setRequestMode] = usePanelRequestMode(\n    panelState.requestOpen\n  )\n  const requests = usePanelRequestActions(setRequestMode)\n\n  const actions = useDisputeActions()\n  const [dispute, disputeFetching, error] = useDispute(disputeId)\n\n  return {\n    actions,\n    error,\n    dispute,\n    disputeFetching,\n    requestMode,\n    panelState,\n    requests,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}