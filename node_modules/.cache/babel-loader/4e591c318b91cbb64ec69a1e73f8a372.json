{"ast":null,"code":"import { ethers } from 'ethers';\nexport const CALLSCRIPT_ID = '0x00000001';\n\nfunction decodeSegment(script) {\n  // Get address\n  const to = `0x${script.substring(0, 40)}`;\n  script = script.substring(40); // Get data\n\n  const dataLength = parseInt(`0x${script.substring(0, 8)}`, 16) * 2;\n  script = script.substring(8);\n  const data = `0x${script.substring(0, dataLength)}`; // Return rest of script for processing\n\n  script = script.substring(dataLength);\n  return {\n    segment: {\n      to,\n      data\n    },\n    scriptLeft: script\n  };\n}\n/**\n * Checks whether a EVMScript bytes string is a call script.\n */\n\n\nexport function isCallScript(script) {\n  // Get script identifier (0x prefix + bytes4)\n  const scriptId = script.substring(0, 10);\n  return scriptId === CALLSCRIPT_ID;\n}\n/**\n * Decode a call script bytes string into its actions.\n *\n * Will return an array containing objects with:\n *\n *  - `to`: to address\n *  - `data`: call data\n *\n */\n\nexport function decodeCallScript(script) {\n  if (!isCallScript(script)) {\n    throw new Error(`Not a call script: ${script}`);\n  }\n\n  let scriptData = script.substring(10);\n  const segments = [];\n\n  while (scriptData.length > 0) {\n    const {\n      segment,\n      scriptLeft\n    } = decodeSegment(scriptData);\n    segments.push(segment);\n    scriptData = scriptLeft;\n  }\n\n  return segments;\n}\n/**\n * Encode a call script\n *\n * Example:\n *\n * input:\n * [\n *  { to: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, data: 0x11111111 },\n *  { to: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, data: 0x2222222222 }\n * ]\n *\n * output:\n * 0x00000001\n *   aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000411111111\n *   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb000000052222222222\n *\n *\n * @param {Array<CallScriptAction>} actions\n * @returns {string}\n */\n\nexport function encodeCallScript(actions) {\n  return actions.reduce((script, {\n    to,\n    data\n  }) => {\n    const address = ethers.utils.defaultAbiCoder.encode(['address'], [to]);\n    const dataLength = ethers.utils.defaultAbiCoder.encode(['uint256'], [(data.length - 2) / 2]);\n    return script + address.slice(26) + dataLength.slice(58) + data.slice(2);\n  }, CALLSCRIPT_ID);\n}","map":null,"metadata":{},"sourceType":"module"}