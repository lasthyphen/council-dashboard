{"ast":null,"code":"import { ethers } from 'ethers';\nexport const apmAppId = appName => ethers.utils.namehash(`${appName}.aragonpm.eth`); // Is the given method a full signature, e.g. 'foo(arg1,arg2,...)'\n\nexport const isFullMethodSignature = methodSignature => {\n  return Boolean(methodSignature) && methodSignature.includes('(') && methodSignature.includes(')');\n};\nexport function validateMethod(destination, methodSignature, destinationApp) {\n  const methods = destinationApp.intents;\n\n  if (!methods) {\n    throw new Error(`No functions specified in artifact for ${destination}`);\n  } // Find the relevant method information\n\n\n  const method = methods.find(method => isFullMethodSignature(methodSignature) ? method.sig === methodSignature : // If the full signature isn't given, just select the first overload declared\n  method.sig.split('(')[0] === methodSignature);\n\n  if (!method) {\n    throw new Error(`No method named ${methodSignature} on ${destination}`);\n  }\n\n  return method;\n}\n/**\n * Find the method descriptor corresponding to the data component of a\n * transaction sent to `app`.\n *\n * @param  {Object} app App artifact\n * @param  {Object} data Data component of a transaction to app\n * @return {Object|void} Method with radspec notice and function signature, or undefined if none was found\n */\n\nexport function findAppMethodFromIntent(app, transaction) {\n  const methodId = transaction.data.substring(0, 10);\n\n  const checkMethodSignature = siganture => {\n    // Hash signature with Ethereum Identity and silce bytes\n    const sigHash = ethers.utils.hexDataSlice(ethers.utils.id(siganture), 0, 4);\n    return sigHash === methodId;\n  };\n\n  const {\n    deprecatedIntents,\n    intents\n  } = app || {};\n  let method; // First try to find the method in the current functions\n\n  if (Array.isArray(intents)) {\n    method = intents.find(method => checkMethodSignature(method.sig));\n  }\n\n  if (!method) {\n    // The current functions didn't have it; try with each deprecated version's functions\n    const deprecatedFunctionsFromVersions = Object.values(deprecatedIntents || {});\n\n    if (deprecatedFunctionsFromVersions.every(Array.isArray)) {\n      // Flatten all the deprecated functions\n      const allDeprecatedFunctions = [].concat(...deprecatedFunctionsFromVersions);\n      method = allDeprecatedFunctions.find(method => checkMethodSignature(method.sig));\n    }\n  }\n\n  return method;\n}","map":null,"metadata":{},"sourceType":"module"}