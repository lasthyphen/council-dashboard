{"ast":null,"code":"import gql from 'graphql-tag';\nimport * as fragments from './fragments';\nexport const ORGANIZATION_APPS = type => gql`\n  ${type} Organization($orgAddress: String!, $appFilter: App_filter!, $first: Int) {\n    organization(id: $orgAddress) {\n      apps(where: $appFilter, first: $first) {\n        ...App_app\n      }\n    }\n  }\n  ${fragments.APP_FRAGMENT}\n`;\nexport const APP_BY_ADDRESS = type => gql`\n  ${type} App($appAddress: String!) {\n    app(id: $appAddress) {\n      ...App_app\n    }\n  }\n  ${fragments.APP_FRAGMENT}\n`;\nexport const REPO_BY_APP_ADDRESS = type => gql`\n  ${type} App($appAddress: String!) {\n    app(id: $appAddress) {\n      repo {\n        ...Repo_repo\n      }\n      version {\n        ...Version_version\n      }\n    }\n  }\n  ${fragments.REPO_FRAGMENT}\n  ${fragments.VERSION_FRAGMENT}\n`;\nexport const ORGANIZATION_PERMISSIONS = type => gql`\n  ${type} Organization($orgAddress: String!) {\n    organization(id: $orgAddress) {\n      permissions {\n        ...Permission_permission\n      }\n    }\n  }\n  ${fragments.PERMISSION_FRAGMENT}\n`;\nexport const ROLE_BY_APP_ADDRESS = type => gql`\n  ${type} App($appAddress: String!) {\n    app(id: $appAddress) {\n      appId\n      version{\n        ...Version_version\n      }\n      roles {\n        ...Role_role\n      }\n    }\n  }\n  ${fragments.VERSION_FRAGMENT}\n  ${fragments.ROLE_FRAGMENT}\n`;","map":null,"metadata":{},"sourceType":"module"}