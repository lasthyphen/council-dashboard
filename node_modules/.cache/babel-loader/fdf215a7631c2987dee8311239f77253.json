{"ast":null,"code":"import _styled2 from\"styled-components\";import _styled from\"styled-components\";import React,{useMemo}from'react';import{textStyle,useTheme,IconClose,IconCheck}from'@aragon/ui';import{Phase as DisputePhase}from'../../types/dispute-status-types';import{appealRulingToString,finalRulingToString,juryOutcomeToString,OUTCOMES}from'../../utils/crvoting-utils';var _StyledDiv=_styled(\"div\").withConfig({displayName:\"DisputeOutcomeText___StyledDiv\",componentId:\"sascqc-0\"})([\"color:\",\";display:flex;align-items:center;\"],function(p){return p._css;});var _StyledSpan=_styled(\"span\").withConfig({displayName:\"DisputeOutcomeText___StyledSpan\",componentId:\"sascqc-1\"})([\"\",\"\"],function(p){return p._css2;});function DisputeOutcomeText(_ref){var action=_ref.action,isFinalRuling=_ref.isFinalRuling,outcome=_ref.outcome,phase=_ref.phase,_ref$verbose=_ref.verbose,verbose=_ref$verbose===void 0?false:_ref$verbose;var _useOutcomeStyle=useOutcomeStyle(outcome),Icon=_useOutcomeStyle.Icon,color=_useOutcomeStyle.color;var outcomeText=useMemo(function(){if(isFinalRuling){return finalRulingToString(outcome);}if(phase===DisputePhase.AppealRuling||phase===DisputePhase.ConfirmAppeal){var confirm=phase===DisputePhase.ConfirmAppeal;return appealRulingToString(outcome,confirm);}return juryOutcomeToString(outcome);},[isFinalRuling,outcome,phase]);return React.createElement(\"div\",null,React.createElement(_StyledDiv,{_css:color},React.createElement(Icon,{size:\"medium\"}),React.createElement(_StyledSpan,{_css2:textStyle('body2')},outcomeText,verbose&&React.createElement(\"span\",null,\": \",action))));}function useOutcomeStyle(outcome){var theme=useTheme();if(!outcome||outcome===OUTCOMES.Refused){return{Icon:IconClose,color:theme.disabledIcon};}if(outcome===OUTCOMES.Against){return{Icon:IconClose,color:theme.negative};}if(outcome===OUTCOMES.InFavor){return{Icon:IconCheck,color:theme.positive};}}export default DisputeOutcomeText;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeOutcomeText.js"],"names":["React","useMemo","textStyle","useTheme","IconClose","IconCheck","Phase","DisputePhase","appealRulingToString","finalRulingToString","juryOutcomeToString","OUTCOMES","DisputeOutcomeText","action","isFinalRuling","outcome","phase","verbose","useOutcomeStyle","Icon","color","outcomeText","AppealRuling","ConfirmAppeal","confirm","theme","Refused","disabledIcon","Against","negative","InFavor","positive"],"mappings":"+EAAA,MAAOA,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,OAASC,SAAT,CAAoBC,QAApB,CAA8BC,SAA9B,CAAyCC,SAAzC,KAA0D,YAA1D,CAEA,OAASC,KAAK,GAAIC,CAAAA,YAAlB,KAAsC,kCAAtC,CACA,OACEC,oBADF,CAEEC,mBAFF,CAGEC,mBAHF,CAIEC,QAJF,KAKO,4BALP,C,qVAOA,QAASC,CAAAA,kBAAT,MAMG,IALDC,CAAAA,MAKC,MALDA,MAKC,CAJDC,aAIC,MAJDA,aAIC,CAHDC,OAGC,MAHDA,OAGC,CAFDC,KAEC,MAFDA,KAEC,mBADDC,OACC,CADDA,OACC,uBADS,KACT,mCACuBC,eAAe,CAACH,OAAD,CADtC,CACOI,IADP,kBACOA,IADP,CACaC,KADb,kBACaA,KADb,CAGD,GAAMC,CAAAA,WAAW,CAAGpB,OAAO,CAAC,UAAM,CAChC,GAAIa,aAAJ,CAAmB,CACjB,MAAOL,CAAAA,mBAAmB,CAACM,OAAD,CAA1B,CACD,CAED,GACEC,KAAK,GAAKT,YAAY,CAACe,YAAvB,EACAN,KAAK,GAAKT,YAAY,CAACgB,aAFzB,CAGE,CACA,GAAMC,CAAAA,OAAO,CAAGR,KAAK,GAAKT,YAAY,CAACgB,aAAvC,CACA,MAAOf,CAAAA,oBAAoB,CAACO,OAAD,CAAUS,OAAV,CAA3B,CACD,CAED,MAAOd,CAAAA,mBAAmB,CAACK,OAAD,CAA1B,CACD,CAd0B,CAcxB,CAACD,aAAD,CAAgBC,OAAhB,CAAyBC,KAAzB,CAdwB,CAA3B,CAgBA,MACE,gCACE,qCAEaI,KAFb,EAOE,oBAAC,IAAD,EAAM,IAAI,CAAC,QAAX,EAPF,CAQE,uCAEMlB,SAAS,CAAC,OAAD,CAFf,EAKGmB,WALH,CAMGJ,OAAO,EAAI,qCAASJ,MAAT,CANd,CARF,CADF,CADF,CAqBD,CAED,QAASK,CAAAA,eAAT,CAAyBH,OAAzB,CAAkC,CAChC,GAAMU,CAAAA,KAAK,CAAGtB,QAAQ,EAAtB,CAEA,GAAI,CAACY,OAAD,EAAYA,OAAO,GAAKJ,QAAQ,CAACe,OAArC,CAA8C,CAC5C,MAAO,CACLP,IAAI,CAAEf,SADD,CAELgB,KAAK,CAAEK,KAAK,CAACE,YAFR,CAAP,CAID,CAED,GAAIZ,OAAO,GAAKJ,QAAQ,CAACiB,OAAzB,CAAkC,CAChC,MAAO,CACLT,IAAI,CAAEf,SADD,CAELgB,KAAK,CAAEK,KAAK,CAACI,QAFR,CAAP,CAID,CAED,GAAId,OAAO,GAAKJ,QAAQ,CAACmB,OAAzB,CAAkC,CAChC,MAAO,CACLX,IAAI,CAAEd,SADD,CAELe,KAAK,CAAEK,KAAK,CAACM,QAFR,CAAP,CAID,CACF,CAED,cAAenB,CAAAA,kBAAf","sourcesContent":["import React, { useMemo } from 'react'\nimport { textStyle, useTheme, IconClose, IconCheck } from '@aragon/ui'\n\nimport { Phase as DisputePhase } from '../../types/dispute-status-types'\nimport {\n  appealRulingToString,\n  finalRulingToString,\n  juryOutcomeToString,\n  OUTCOMES,\n} from '../../utils/crvoting-utils'\n\nfunction DisputeOutcomeText({\n  action,\n  isFinalRuling,\n  outcome,\n  phase,\n  verbose = false,\n}) {\n  const { Icon, color } = useOutcomeStyle(outcome)\n\n  const outcomeText = useMemo(() => {\n    if (isFinalRuling) {\n      return finalRulingToString(outcome)\n    }\n\n    if (\n      phase === DisputePhase.AppealRuling ||\n      phase === DisputePhase.ConfirmAppeal\n    ) {\n      const confirm = phase === DisputePhase.ConfirmAppeal\n      return appealRulingToString(outcome, confirm)\n    }\n\n    return juryOutcomeToString(outcome)\n  }, [isFinalRuling, outcome, phase])\n\n  return (\n    <div>\n      <div\n        css={`\n          color: ${color};\n          display: flex;\n          align-items: center;\n        `}\n      >\n        <Icon size=\"medium\" />\n        <span\n          css={`\n            ${textStyle('body2')}\n          `}\n        >\n          {outcomeText}\n          {verbose && <span>: {action}</span>}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nfunction useOutcomeStyle(outcome) {\n  const theme = useTheme()\n\n  if (!outcome || outcome === OUTCOMES.Refused) {\n    return {\n      Icon: IconClose,\n      color: theme.disabledIcon,\n    }\n  }\n\n  if (outcome === OUTCOMES.Against) {\n    return {\n      Icon: IconClose,\n      color: theme.negative,\n    }\n  }\n\n  if (outcome === OUTCOMES.InFavor) {\n    return {\n      Icon: IconCheck,\n      color: theme.positive,\n    }\n  }\n}\n\nexport default DisputeOutcomeText\n"]},"metadata":{},"sourceType":"module"}