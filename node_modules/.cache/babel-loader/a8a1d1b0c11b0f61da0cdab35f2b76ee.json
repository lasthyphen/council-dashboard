{"ast":null,"code":"const EventEmitter = require('events');\n\nconst EthereumProvider = require('ethereum-provider');\n\nconst ConnectionManager = require('../ConnectionManager');\n\nconst monitor = provider => {\n  function update(status) {\n    provider.status = status;\n    if (provider instanceof EventEmitter) provider.emit('status', status);\n  }\n\n  async function check() {\n    if (provider.inSetup) return setTimeout(check, 1000);\n\n    try {\n      if (await provider.send('eth_syncing')) {\n        update('syncing');\n        setTimeout(() => check(), 5000);\n      } else {\n        update('connected');\n      }\n    } catch (e) {\n      update('disconnected');\n    }\n  }\n\n  update('loading');\n  check();\n  provider.on('connect', () => check());\n  provider.on('close', () => update('disconnected'));\n  return provider;\n};\n\nmodule.exports = (connections, targets, options) => {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(t => t.type).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider;\n    return monitor(connections.injected);\n  }\n\n  const provider = new EthereumProvider(new ConnectionManager(connections, targets, options));\n  provider.setMaxListeners(128);\n  return monitor(provider);\n};","map":null,"metadata":{},"sourceType":"script"}