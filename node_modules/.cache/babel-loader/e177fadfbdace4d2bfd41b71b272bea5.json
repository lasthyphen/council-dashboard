{"ast":null,"code":"var _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/GlobalPreferences/Notifications/NotificationsManager.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useWallet } from '../../../providers/Wallet';\nimport { verifyJurorEmail, getJurorEmail } from '../../../services/notificationServiceApi';\nimport { useSubscriptionDetails } from '../../../hooks/useEmailNotifications';\nimport EmailNotificationsManager from '../../EmailNotifications/EmailNotificationsManager';\nimport { EMAIL_NOTIFICATIONS_FORM_SCREEN, NOTIFICATIONS_PREFERENCES_SCREEN, UNLOCK_NOTIFICATIONS_SCREEN, VERIFICATION_ERROR_SCREEN, VERIFICATION_SUCCESS_SCREEN, VERIFY_EMAIL_ADDRESS_PREFERENCES, LOADING_SCREEN } from '../../EmailNotifications/constants';\nconst NotificationsManager = React.memo(function NotificationsManager({\n  onReturnToDashboard\n}) {\n  const {\n    account\n  } = useWallet();\n  const {\n    search\n  } = useLocation();\n  const [startingScreenId, setStartingScreenId] = useState();\n  const [jurorNeedsSignature, setJurorNeedsSignature] = useState();\n  const [jurorEmail, setJurorEmail] = useState('');\n  const [fetchingEmail, setFetchingEmail] = useState();\n  const {\n    emailExists,\n    emailVerified,\n    notificationsDisabled,\n    fetching: fetchingSubscriptionData\n  } = useSubscriptionDetails(account);\n  const searchParams = new URLSearchParams(search);\n  const address = searchParams.get('address');\n  const token = searchParams.get('token');\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!token || !address) {\n      return;\n    }\n\n    const verifyEmailAddress = async () => {\n      const {\n        error\n      } = await verifyJurorEmail(address, token);\n\n      if (!cancelled) {\n        if (error) {\n          return setStartingScreenId(VERIFICATION_ERROR_SCREEN);\n        }\n\n        return setStartingScreenId(VERIFICATION_SUCCESS_SCREEN);\n      }\n    };\n\n    verifyEmailAddress();\n    return () => {\n      cancelled = true;\n    };\n  }, [account, address, token]);\n  useEffect(() => {\n    if (token || address) {\n      return;\n    }\n\n    if (!account) {\n      return setStartingScreenId(UNLOCK_NOTIFICATIONS_SCREEN);\n    }\n\n    if (fetchingSubscriptionData || fetchingEmail) {\n      return setStartingScreenId(LOADING_SCREEN);\n    }\n\n    if (jurorNeedsSignature) {\n      return setStartingScreenId(UNLOCK_NOTIFICATIONS_SCREEN);\n    }\n\n    if (!emailVerified && emailExists) {\n      return setStartingScreenId(VERIFY_EMAIL_ADDRESS_PREFERENCES);\n    }\n\n    if (!emailVerified) {\n      return setStartingScreenId(EMAIL_NOTIFICATIONS_FORM_SCREEN);\n    }\n\n    if (emailVerified && !jurorNeedsSignature) {\n      return setStartingScreenId(NOTIFICATIONS_PREFERENCES_SCREEN);\n    }\n  }, [account, emailExists, emailVerified, fetchingEmail, fetchingSubscriptionData, jurorNeedsSignature, address, token]);\n  useEffect(() => {\n    let cancelled = false;\n\n    const getEmail = async () => {\n      if (address || token || !account) {\n        return;\n      }\n\n      setFetchingEmail(true);\n\n      if (!cancelled) {\n        const {\n          needsSignature,\n          email\n        } = await getJurorEmail(account);\n        setJurorNeedsSignature(needsSignature);\n        setJurorEmail(email);\n        setFetchingEmail(false);\n      }\n    };\n\n    getEmail();\n    return () => {\n      cancelled = true;\n    };\n  }, [address, account, token]);\n  return startingScreenId && React.createElement(EmailNotificationsManager, {\n    needsUnlockSettings: jurorNeedsSignature,\n    emailExists: emailExists,\n    emailVerified: emailVerified,\n    notificationsDisabled: notificationsDisabled,\n    email: jurorEmail,\n    startingScreen: startingScreenId,\n    onReturnToDashboard: onReturnToDashboard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  });\n});\nexport default NotificationsManager;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/GlobalPreferences/Notifications/NotificationsManager.js"],"names":["React","useEffect","useState","useLocation","useWallet","verifyJurorEmail","getJurorEmail","useSubscriptionDetails","EmailNotificationsManager","EMAIL_NOTIFICATIONS_FORM_SCREEN","NOTIFICATIONS_PREFERENCES_SCREEN","UNLOCK_NOTIFICATIONS_SCREEN","VERIFICATION_ERROR_SCREEN","VERIFICATION_SUCCESS_SCREEN","VERIFY_EMAIL_ADDRESS_PREFERENCES","LOADING_SCREEN","NotificationsManager","memo","onReturnToDashboard","account","search","startingScreenId","setStartingScreenId","jurorNeedsSignature","setJurorNeedsSignature","jurorEmail","setJurorEmail","fetchingEmail","setFetchingEmail","emailExists","emailVerified","notificationsDisabled","fetching","fetchingSubscriptionData","searchParams","URLSearchParams","address","get","token","cancelled","verifyEmailAddress","error","getEmail","needsSignature","email"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useWallet } from '../../../providers/Wallet'\nimport {\n  verifyJurorEmail,\n  getJurorEmail,\n} from '../../../services/notificationServiceApi'\nimport { useSubscriptionDetails } from '../../../hooks/useEmailNotifications'\nimport EmailNotificationsManager from '../../EmailNotifications/EmailNotificationsManager'\nimport {\n  EMAIL_NOTIFICATIONS_FORM_SCREEN,\n  NOTIFICATIONS_PREFERENCES_SCREEN,\n  UNLOCK_NOTIFICATIONS_SCREEN,\n  VERIFICATION_ERROR_SCREEN,\n  VERIFICATION_SUCCESS_SCREEN,\n  VERIFY_EMAIL_ADDRESS_PREFERENCES,\n  LOADING_SCREEN,\n} from '../../EmailNotifications/constants'\n\nconst NotificationsManager = React.memo(function NotificationsManager({\n  onReturnToDashboard,\n}) {\n  const { account } = useWallet()\n  const { search } = useLocation()\n  const [startingScreenId, setStartingScreenId] = useState()\n  const [jurorNeedsSignature, setJurorNeedsSignature] = useState()\n  const [jurorEmail, setJurorEmail] = useState('')\n  const [fetchingEmail, setFetchingEmail] = useState()\n\n  const {\n    emailExists,\n    emailVerified,\n    notificationsDisabled,\n    fetching: fetchingSubscriptionData,\n  } = useSubscriptionDetails(account)\n\n  const searchParams = new URLSearchParams(search)\n  const address = searchParams.get('address')\n  const token = searchParams.get('token')\n\n  useEffect(() => {\n    let cancelled = false\n\n    if (!token || !address) {\n      return\n    }\n\n    const verifyEmailAddress = async () => {\n      const { error } = await verifyJurorEmail(address, token)\n\n      if (!cancelled) {\n        if (error) {\n          return setStartingScreenId(VERIFICATION_ERROR_SCREEN)\n        }\n        return setStartingScreenId(VERIFICATION_SUCCESS_SCREEN)\n      }\n    }\n\n    verifyEmailAddress()\n    return () => {\n      cancelled = true\n    }\n  }, [account, address, token])\n\n  useEffect(() => {\n    if (token || address) {\n      return\n    }\n    if (!account) {\n      return setStartingScreenId(UNLOCK_NOTIFICATIONS_SCREEN)\n    }\n\n    if (fetchingSubscriptionData || fetchingEmail) {\n      return setStartingScreenId(LOADING_SCREEN)\n    }\n    if (jurorNeedsSignature) {\n      return setStartingScreenId(UNLOCK_NOTIFICATIONS_SCREEN)\n    }\n\n    if (!emailVerified && emailExists) {\n      return setStartingScreenId(VERIFY_EMAIL_ADDRESS_PREFERENCES)\n    }\n    if (!emailVerified) {\n      return setStartingScreenId(EMAIL_NOTIFICATIONS_FORM_SCREEN)\n    }\n\n    if (emailVerified && !jurorNeedsSignature) {\n      return setStartingScreenId(NOTIFICATIONS_PREFERENCES_SCREEN)\n    }\n  }, [\n    account,\n    emailExists,\n    emailVerified,\n    fetchingEmail,\n    fetchingSubscriptionData,\n    jurorNeedsSignature,\n    address,\n    token,\n  ])\n\n  useEffect(() => {\n    let cancelled = false\n    const getEmail = async () => {\n      if (address || token || !account) {\n        return\n      }\n      setFetchingEmail(true)\n\n      if (!cancelled) {\n        const { needsSignature, email } = await getJurorEmail(account)\n\n        setJurorNeedsSignature(needsSignature)\n        setJurorEmail(email)\n        setFetchingEmail(false)\n      }\n    }\n    getEmail()\n    return () => {\n      cancelled = true\n    }\n  }, [address, account, token])\n\n  return (\n    startingScreenId && (\n      <EmailNotificationsManager\n        needsUnlockSettings={jurorNeedsSignature}\n        emailExists={emailExists}\n        emailVerified={emailVerified}\n        notificationsDisabled={notificationsDisabled}\n        email={jurorEmail}\n        startingScreen={startingScreenId}\n        onReturnToDashboard={onReturnToDashboard}\n      />\n    )\n  )\n})\n\nexport default NotificationsManager\n"]},"metadata":{},"sourceType":"module"}