{"ast":null,"code":"import _toConsumableArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useMemo}from'react';import{Phase as DisputePhase}from'../types/dispute-status-types';import{getTermEndTime}from'../utils/court-utils';import{getEvidenceSubmissionEndTerm,getPhaseAndTransition,getRoundPhasesAndTime}from'../utils/dispute-utils';import{useCourtConfig}from'../providers/CourtConfig';import{useCourtClock}from'../providers/CourtClock';/**\n * Construct dispute timeline for the given dispute\n * @param {Object} dispute The dispute to get the timeline from\n * @param {Object} courtConfig The court configuration\n * @param {Number} currentTerm The court current term\n * @returns {Array} The timeline of the given dispute\n */export default function useDisputeTimeline(dispute){var courtConfig=useCourtConfig();var _useCourtClock=useCourtClock(),currentTermId=_useCourtClock.currentTermId;var createdAt=dispute.createdAt;var currentPhase=getPhaseAndTransition(dispute,currentTermId,courtConfig);var evidenceSubmissionEndTerm=getEvidenceSubmissionEndTerm(dispute,courtConfig);var evidenceSubmissionEndTime=getTermEndTime(evidenceSubmissionEndTerm,courtConfig);return useMemo(function(){var timeLine=[{phase:DisputePhase.Evidence,endTime:evidenceSubmissionEndTime,active:currentPhase.phase===DisputePhase.Evidence,roundId:0},{phase:DisputePhase.Created,// create Symbol\nendTime:createdAt}];var rounds=[];dispute.rounds.forEach(function(round){var roundPhases=getRoundPhasesAndTime(round,currentPhase,currentTermId,courtConfig);rounds.unshift(_toConsumableArray(roundPhases).reverse());});if(rounds.length===0){return timeLine;}timeLine.unshift(rounds);if(currentPhase.phase===DisputePhase.ExecuteRuling||currentPhase.phase===DisputePhase.ClaimRewards){timeLine.unshift({phase:DisputePhase.ExecuteRuling,active:DisputePhase.ExecuteRuling===currentPhase.phase,roundId:currentPhase.roundId});}if(currentPhase.phase===DisputePhase.ClaimRewards){timeLine.unshift({phase:DisputePhase.ClaimRewards,active:currentPhase.phase===DisputePhase.ClaimRewards,roundId:currentPhase.roundId});}return timeLine;},// We are leaving out courtConfig and dispute.rounds as dependencies to prevent the timeline from being recomputed on every poll.\n// The current phase dependency is sufficient for recomputing it.\n// If there's a new round, means the phase has changed\n[createdAt,currentPhase.phase,evidenceSubmissionEndTime]// eslint-disable-line react-hooks/exhaustive-deps\n);}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useDisputeTimeline.js"],"names":["useMemo","Phase","DisputePhase","getTermEndTime","getEvidenceSubmissionEndTerm","getPhaseAndTransition","getRoundPhasesAndTime","useCourtConfig","useCourtClock","useDisputeTimeline","dispute","courtConfig","currentTermId","createdAt","currentPhase","evidenceSubmissionEndTerm","evidenceSubmissionEndTime","timeLine","phase","Evidence","endTime","active","roundId","Created","rounds","forEach","round","roundPhases","unshift","reverse","length","ExecuteRuling","ClaimRewards"],"mappings":"oIAAA,OAASA,OAAT,KAAwB,OAAxB,CACA,OAASC,KAAK,GAAIC,CAAAA,YAAlB,KAAsC,+BAAtC,CACA,OAASC,cAAT,KAA+B,sBAA/B,CACA,OACEC,4BADF,CAEEC,qBAFF,CAGEC,qBAHF,KAIO,wBAJP,CAKA,OAASC,cAAT,KAA+B,0BAA/B,CACA,OAASC,aAAT,KAA8B,yBAA9B,CAEA;;;;;;GAOA,cAAe,SAASC,CAAAA,kBAAT,CAA4BC,OAA5B,CAAqC,CAClD,GAAMC,CAAAA,WAAW,CAAGJ,cAAc,EAAlC,CADkD,mBAExBC,aAAa,EAFW,CAE1CI,aAF0C,gBAE1CA,aAF0C,IAG1CC,CAAAA,SAH0C,CAG5BH,OAH4B,CAG1CG,SAH0C,CAKlD,GAAMC,CAAAA,YAAY,CAAGT,qBAAqB,CACxCK,OADwC,CAExCE,aAFwC,CAGxCD,WAHwC,CAA1C,CAMA,GAAMI,CAAAA,yBAAyB,CAAGX,4BAA4B,CAC5DM,OAD4D,CAE5DC,WAF4D,CAA9D,CAIA,GAAMK,CAAAA,yBAAyB,CAAGb,cAAc,CAC9CY,yBAD8C,CAE9CJ,WAF8C,CAAhD,CAKA,MAAOX,CAAAA,OAAO,CACZ,UAAM,CACJ,GAAMiB,CAAAA,QAAQ,CAAG,CACf,CACEC,KAAK,CAAEhB,YAAY,CAACiB,QADtB,CAEEC,OAAO,CAAEJ,yBAFX,CAGEK,MAAM,CAAEP,YAAY,CAACI,KAAb,GAAuBhB,YAAY,CAACiB,QAH9C,CAIEG,OAAO,CAAE,CAJX,CADe,CAOf,CACEJ,KAAK,CAAEhB,YAAY,CAACqB,OADtB,CAC+B;AAC7BH,OAAO,CAAEP,SAFX,CAPe,CAAjB,CAaA,GAAMW,CAAAA,MAAM,CAAG,EAAf,CACAd,OAAO,CAACc,MAAR,CAAeC,OAAf,CAAuB,SAAAC,KAAK,CAAI,CAC9B,GAAMC,CAAAA,WAAW,CAAGrB,qBAAqB,CACvCoB,KADuC,CAEvCZ,YAFuC,CAGvCF,aAHuC,CAIvCD,WAJuC,CAAzC,CAMAa,MAAM,CAACI,OAAP,CAAe,mBAAID,WAAJ,EAAiBE,OAAjB,EAAf,EACD,CARD,EAUA,GAAIL,MAAM,CAACM,MAAP,GAAkB,CAAtB,CAAyB,CACvB,MAAOb,CAAAA,QAAP,CACD,CAEDA,QAAQ,CAACW,OAAT,CAAiBJ,MAAjB,EAEA,GACEV,YAAY,CAACI,KAAb,GAAuBhB,YAAY,CAAC6B,aAApC,EACAjB,YAAY,CAACI,KAAb,GAAuBhB,YAAY,CAAC8B,YAFtC,CAGE,CACAf,QAAQ,CAACW,OAAT,CAAiB,CACfV,KAAK,CAAEhB,YAAY,CAAC6B,aADL,CAEfV,MAAM,CAAEnB,YAAY,CAAC6B,aAAb,GAA+BjB,YAAY,CAACI,KAFrC,CAGfI,OAAO,CAAER,YAAY,CAACQ,OAHP,CAAjB,EAKD,CAED,GAAIR,YAAY,CAACI,KAAb,GAAuBhB,YAAY,CAAC8B,YAAxC,CAAsD,CACpDf,QAAQ,CAACW,OAAT,CAAiB,CACfV,KAAK,CAAEhB,YAAY,CAAC8B,YADL,CAEfX,MAAM,CAAEP,YAAY,CAACI,KAAb,GAAuBhB,YAAY,CAAC8B,YAF7B,CAGfV,OAAO,CAAER,YAAY,CAACQ,OAHP,CAAjB,EAKD,CAED,MAAOL,CAAAA,QAAP,CACD,CApDW,CAsDZ;AACA;AACA;AACA,CAACJ,SAAD,CAAYC,YAAY,CAACI,KAAzB,CAAgCF,yBAAhC,CAA2D;AAzD/C,CAAd,CA2DD","sourcesContent":["import { useMemo } from 'react'\nimport { Phase as DisputePhase } from '../types/dispute-status-types'\nimport { getTermEndTime } from '../utils/court-utils'\nimport {\n  getEvidenceSubmissionEndTerm,\n  getPhaseAndTransition,\n  getRoundPhasesAndTime,\n} from '../utils/dispute-utils'\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useCourtClock } from '../providers/CourtClock'\n\n/**\n * Construct dispute timeline for the given dispute\n * @param {Object} dispute The dispute to get the timeline from\n * @param {Object} courtConfig The court configuration\n * @param {Number} currentTerm The court current term\n * @returns {Array} The timeline of the given dispute\n */\nexport default function useDisputeTimeline(dispute) {\n  const courtConfig = useCourtConfig()\n  const { currentTermId } = useCourtClock()\n  const { createdAt } = dispute\n\n  const currentPhase = getPhaseAndTransition(\n    dispute,\n    currentTermId,\n    courtConfig\n  )\n\n  const evidenceSubmissionEndTerm = getEvidenceSubmissionEndTerm(\n    dispute,\n    courtConfig\n  )\n  const evidenceSubmissionEndTime = getTermEndTime(\n    evidenceSubmissionEndTerm,\n    courtConfig\n  )\n\n  return useMemo(\n    () => {\n      const timeLine = [\n        {\n          phase: DisputePhase.Evidence,\n          endTime: evidenceSubmissionEndTime,\n          active: currentPhase.phase === DisputePhase.Evidence,\n          roundId: 0,\n        },\n        {\n          phase: DisputePhase.Created, // create Symbol\n          endTime: createdAt,\n        },\n      ]\n\n      const rounds = []\n      dispute.rounds.forEach(round => {\n        const roundPhases = getRoundPhasesAndTime(\n          round,\n          currentPhase,\n          currentTermId,\n          courtConfig\n        )\n        rounds.unshift([...roundPhases].reverse())\n      })\n\n      if (rounds.length === 0) {\n        return timeLine\n      }\n\n      timeLine.unshift(rounds)\n\n      if (\n        currentPhase.phase === DisputePhase.ExecuteRuling ||\n        currentPhase.phase === DisputePhase.ClaimRewards\n      ) {\n        timeLine.unshift({\n          phase: DisputePhase.ExecuteRuling,\n          active: DisputePhase.ExecuteRuling === currentPhase.phase,\n          roundId: currentPhase.roundId,\n        })\n      }\n\n      if (currentPhase.phase === DisputePhase.ClaimRewards) {\n        timeLine.unshift({\n          phase: DisputePhase.ClaimRewards,\n          active: currentPhase.phase === DisputePhase.ClaimRewards,\n          roundId: currentPhase.roundId,\n        })\n      }\n\n      return timeLine\n    },\n\n    // We are leaving out courtConfig and dispute.rounds as dependencies to prevent the timeline from being recomputed on every poll.\n    // The current phase dependency is sufficient for recomputing it.\n    // If there's a new round, means the phase has changed\n    [createdAt, currentPhase.phase, evidenceSubmissionEndTime] // eslint-disable-line react-hooks/exhaustive-deps\n  )\n}\n"]},"metadata":{},"sourceType":"module"}