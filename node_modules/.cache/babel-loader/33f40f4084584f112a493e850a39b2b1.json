{"ast":null,"code":"\"use strict\";\n\nvar _ethers = require(\"ethers\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.formatBN = exports.tenPow = void 0;\n\nfunction sameFraction(first, second) {\n  // Check that these two values are the same.\n  // Note that leading zeros ARE meaningful, and so we do the comparision after\n  // appending a one as the first digit.\n  //\n  // For example, .001 and .00100 are the same value, but .0001 and .001 are not.\n  return first = first.replace(/0+$/, \"\"), second = second.replace(/0+$/, \"\"), _ethers.BigNumber.from(`1${first}`).eq(_ethers.BigNumber.from(`1${second}`));\n}\n\nconst tenPow = x => _ethers.BigNumber.from(10).pow(_ethers.BigNumber.from(x));\n\nexports.tenPow = tenPow;\n\nconst formatBN = (amount, base, precision, fixed = !1) => {\n  // Inspired by: https://github.com/ethjs/ethjs-unit/blob/35d870eae1c32c652da88837a71e252a63a83ebb/src/index.js#L83\n  const baseLength = base.toString().length,\n        whole = amount.div(base).toString();\n  let fraction = amount.mod(base).toString();\n  const zeros = \"0\".repeat(Math.max(0, baseLength - fraction.length - 1));\n  fraction = `${zeros}${fraction}`;\n  const fractionWithoutTrailingZeros = fraction.replace(/0+$/, \"\"),\n        fractionAfterPrecision = (fixed ? fraction : fractionWithoutTrailingZeros).slice(0, precision);\n  if (!fixed && (\"\" === fractionAfterPrecision || 0 === parseInt(fractionAfterPrecision, 10))) return whole;\n  const prefix = sameFraction(fractionAfterPrecision, fraction) ? \"\" : \"~\";\n  return `${prefix}${whole}.${fractionAfterPrecision}`;\n};\n\nexports.formatBN = formatBN;","map":null,"metadata":{},"sourceType":"script"}