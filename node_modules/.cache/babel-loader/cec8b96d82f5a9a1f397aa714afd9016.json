{"ast":null,"code":"import _toConsumableArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";// Disputable apps extractors\nimport{dandelionVotingExtractor,delayExtractor,votingExtractor}from'./scriptExtractors';import{DANDELION_VOTING_APP_IDS,DELAY_APP_IDS,VOTING_APP_IDS}from'./known-appIds';var disputableVotingAction={entityPath:'vote',scriptExtractor:votingExtractor};var disputableDandelionAction={entityPath:'vote',scriptExtractor:dandelionVotingExtractor};var disputableDelayAction={entityPath:'delay',scriptExtractor:delayExtractor};// Mapping of all disputable apps appId to their\n// corresponding method for describing a disputed action.\n// TODO: Add Conviction Voting\nexport var DISPUTABLE_ACTIONS=new Map([].concat(_toConsumableArray(DANDELION_VOTING_APP_IDS.map(function(appId){return[appId,disputableDandelionAction];})),_toConsumableArray(DELAY_APP_IDS.map(function(appId){return[appId,disputableDelayAction];})),_toConsumableArray(VOTING_APP_IDS.map(function(appId){return[appId,disputableVotingAction];}))));// Mapping of all disputable apps appId to their\n// corresponding subgraph urls by network\nexport var DISPUTABLE_SUBGRAPH_URLS=new Map(_toConsumableArray(VOTING_APP_IDS.map(function(appId){return[appId,{main:'https://graph.backend.aragon.org/subgraphs/name/aragon/aragon-dvoting-mainnet-staging',// TODO: Update to main subgraph when available\nrinkeby:'https://api.thegraph.com/subgraphs/name/aragon/aragon-dvoting-rinkeby',dijets:'http://20.9.85.213:8000/subgraphs/name/aragon/aragon-court-dijets',ropsten:'https://api.thegraph.com/subgraphs/name/aragon/aragon-dvoting-ropsten'}];})));","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/mappings.js"],"names":["dandelionVotingExtractor","delayExtractor","votingExtractor","DANDELION_VOTING_APP_IDS","DELAY_APP_IDS","VOTING_APP_IDS","disputableVotingAction","entityPath","scriptExtractor","disputableDandelionAction","disputableDelayAction","DISPUTABLE_ACTIONS","Map","map","appId","DISPUTABLE_SUBGRAPH_URLS","main","rinkeby","dijets","ropsten"],"mappings":"oIAAA;AACA,OACEA,wBADF,CAEEC,cAFF,CAGEC,eAHF,KAIO,oBAJP,CAKA,OACEC,wBADF,CAEEC,aAFF,CAGEC,cAHF,KAIO,gBAJP,CAMA,GAAMC,CAAAA,sBAAsB,CAAG,CAC7BC,UAAU,CAAE,MADiB,CAE7BC,eAAe,CAAEN,eAFY,CAA/B,CAKA,GAAMO,CAAAA,yBAAyB,CAAG,CAChCF,UAAU,CAAE,MADoB,CAEhCC,eAAe,CAAER,wBAFe,CAAlC,CAKA,GAAMU,CAAAA,qBAAqB,CAAG,CAC5BH,UAAU,CAAE,OADgB,CAE5BC,eAAe,CAAEP,cAFW,CAA9B,CAKA;AACA;AACA;AACA,MAAO,IAAMU,CAAAA,kBAAkB,CAAG,GAAIC,CAAAA,GAAJ,8BAC7BT,wBAAwB,CAACU,GAAzB,CAA6B,SAAAC,KAAK,QAAI,CAACA,KAAD,CAAQL,yBAAR,CAAJ,EAAlC,CAD6B,qBAE7BL,aAAa,CAACS,GAAd,CAAkB,SAAAC,KAAK,QAAI,CAACA,KAAD,CAAQJ,qBAAR,CAAJ,EAAvB,CAF6B,qBAG7BL,cAAc,CAACQ,GAAf,CAAmB,SAAAC,KAAK,QAAI,CAACA,KAAD,CAAQR,sBAAR,CAAJ,EAAxB,CAH6B,GAA3B,CAMP;AACA;AACA,MAAO,IAAMS,CAAAA,wBAAwB,CAAG,GAAIH,CAAAA,GAAJ,oBACnCP,cAAc,CAACQ,GAAf,CAAmB,SAAAC,KAAK,QAAI,CAC7BA,KAD6B,CAE7B,CACEE,IAAI,CACF,uFAFJ,CAE6F;AAC3FC,OAAO,CACL,uEAJJ,CAKEC,MAAM,CACJ,mEANJ,CAOEC,OAAO,CACL,uEARJ,CAF6B,CAAJ,EAAxB,CADmC,EAAjC","sourcesContent":["// Disputable apps extractors\nimport {\n  dandelionVotingExtractor,\n  delayExtractor,\n  votingExtractor,\n} from './scriptExtractors'\nimport {\n  DANDELION_VOTING_APP_IDS,\n  DELAY_APP_IDS,\n  VOTING_APP_IDS,\n} from './known-appIds'\n\nconst disputableVotingAction = {\n  entityPath: 'vote',\n  scriptExtractor: votingExtractor,\n}\n\nconst disputableDandelionAction = {\n  entityPath: 'vote',\n  scriptExtractor: dandelionVotingExtractor,\n}\n\nconst disputableDelayAction = {\n  entityPath: 'delay',\n  scriptExtractor: delayExtractor,\n}\n\n// Mapping of all disputable apps appId to their\n// corresponding method for describing a disputed action.\n// TODO: Add Conviction Voting\nexport const DISPUTABLE_ACTIONS = new Map([\n  ...DANDELION_VOTING_APP_IDS.map(appId => [appId, disputableDandelionAction]),\n  ...DELAY_APP_IDS.map(appId => [appId, disputableDelayAction]),\n  ...VOTING_APP_IDS.map(appId => [appId, disputableVotingAction]),\n])\n\n// Mapping of all disputable apps appId to their\n// corresponding subgraph urls by network\nexport const DISPUTABLE_SUBGRAPH_URLS = new Map([\n  ...VOTING_APP_IDS.map(appId => [\n    appId,\n    {\n      main:\n        'https://graph.backend.aragon.org/subgraphs/name/aragon/aragon-dvoting-mainnet-staging', // TODO: Update to main subgraph when available\n      rinkeby:\n        'https://api.thegraph.com/subgraphs/name/aragon/aragon-dvoting-rinkeby',\n      dijets:\n        'http://20.9.85.213:8000/subgraphs/name/aragon/aragon-court-dijets',\n      ropsten:\n        'https://api.thegraph.com/subgraphs/name/aragon/aragon-dvoting-ropsten',\n    },\n  ]),\n])\n"]},"metadata":{},"sourceType":"module"}