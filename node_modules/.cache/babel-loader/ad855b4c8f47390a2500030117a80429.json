{"ast":null,"code":"import _regeneratorRuntime from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { addressesEqual, ANY_ENTITY } from '../address';\nimport { getKernelNamespace } from '../kernel';\n/**\n * Look for known addresses and roles in a radspec description and substitute them with a human string\n *\n * @param  {string} description\n * @return {Promise<Object>} Description and annotated description\n */\n\nexport function postprocessRadspecDescription(_x, _x2) {\n  return _postprocessRadspecDescription.apply(this, arguments);\n}\n\nfunction _postprocessRadspecDescription() {\n  _postprocessRadspecDescription = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(description, apps) {\n    var addressRegexStr, addressRegex, bytes32RegexStr, bytes32Regex, combinedRegex, tokens, roles, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, app, appRoles, annotateAddress, annotateBytes32, annotateText, annotatedTokens, compiled;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            addressRegexStr = '0x[a-fA-F0-9]{40}';\n            addressRegex = new RegExp(\"^\".concat(addressRegexStr, \"$\"));\n            bytes32RegexStr = '0x[a-f0-9]{64}';\n            bytes32Regex = new RegExp(\"^\".concat(bytes32RegexStr, \"$\"));\n            combinedRegex = new RegExp(\"\\\\b(\".concat(addressRegexStr, \"|\").concat(bytes32RegexStr, \")\\\\b\"));\n            tokens = description.split(combinedRegex).map(function (token) {\n              return token.trim();\n            }).filter(function (token) {\n              return token;\n            });\n\n            if (!(tokens.length < 1)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", {\n              description: description\n            });\n\n          case 8:\n            roles = [];\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _iteratorError = undefined;\n            _context.prev = 12;\n            _iterator = apps[Symbol.iterator]();\n\n          case 14:\n            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n              _context.next = 23;\n              break;\n            }\n\n            app = _step.value;\n            _context.next = 18;\n            return app.roles();\n\n          case 18:\n            appRoles = _context.sent;\n            roles.concat(appRoles);\n\n          case 20:\n            _iteratorNormalCompletion = true;\n            _context.next = 14;\n            break;\n\n          case 23:\n            _context.next = 29;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t0 = _context[\"catch\"](12);\n            _didIteratorError = true;\n            _iteratorError = _context.t0;\n\n          case 29:\n            _context.prev = 29;\n            _context.prev = 30;\n\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n\n          case 32:\n            _context.prev = 32;\n\n            if (!_didIteratorError) {\n              _context.next = 35;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 35:\n            return _context.finish(32);\n\n          case 36:\n            return _context.finish(29);\n\n          case 37:\n            annotateAddress = function annotateAddress(input) {\n              if (addressesEqual(input, ANY_ENTITY)) {\n                return [input, '\"Any account\"', {\n                  type: 'any-account',\n                  value: ANY_ENTITY\n                }];\n              }\n\n              var app = apps.find(function (_ref) {\n                var address = _ref.address;\n                return addressesEqual(address, input);\n              });\n\n              if (app) {\n                var replacement = \"\".concat(app.name).concat(app.appId ? \" (\".concat(app.appId, \")\") : '');\n                return [input, \"\\u201C\".concat(replacement, \"\\u201D\"), {\n                  type: 'app',\n                  value: app\n                }];\n              }\n\n              return [input, input, {\n                type: 'address',\n                value: input\n              }];\n            };\n\n            annotateBytes32 = function annotateBytes32(input) {\n              var role = roles.find(function (_ref2) {\n                var hash = _ref2.hash;\n                return hash === input;\n              });\n\n              if (role && role.name) {\n                return [input, \"\\u201C\".concat(role.name, \"\\u201D\"), {\n                  type: 'role',\n                  value: role\n                }];\n              }\n\n              var app = apps.find(function (_ref3) {\n                var appId = _ref3.appId;\n                return appId === input;\n              });\n\n              if (app) {\n                // return the entire app as it contains APM package details\n                return [input, \"\\u201C\".concat(app.appName, \"\\u201D\"), {\n                  type: 'apmPackage',\n                  value: app\n                }];\n              }\n\n              var namespace = getKernelNamespace(input);\n\n              if (namespace) {\n                return [input, \"\\u201C\".concat(namespace.name, \"\\u201D\"), {\n                  type: 'kernelNamespace',\n                  value: namespace\n                }];\n              }\n\n              return [input, input, {\n                type: 'bytes32',\n                value: input\n              }];\n            };\n\n            annotateText = function annotateText(input) {\n              return [input, input, {\n                type: 'text',\n                value: input\n              }];\n            };\n\n            annotatedTokens = tokens.map(function (token) {\n              if (addressRegex.test(token)) {\n                return annotateAddress(token);\n              }\n\n              if (bytes32Regex.test(token)) {\n                return annotateBytes32(token);\n              }\n\n              return annotateText(token);\n            });\n            compiled = annotatedTokens.reduce( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            function (acc, _ref4) {\n              var _ref5 = _slicedToArray(_ref4, 3),\n                  _ = _ref5[0],\n                  replacement = _ref5[1],\n                  annotation = _ref5[2];\n\n              acc.description.push(replacement);\n              acc.annotatedDescription.push(annotation);\n              return acc;\n            }, {\n              annotatedDescription: [],\n              description: []\n            });\n            return _context.abrupt(\"return\", {\n              annotatedDescription: compiled.annotatedDescription,\n              description: compiled.description.join(' ')\n            });\n\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[12, 25, 29, 37], [30,, 32, 36]]);\n  }));\n  return _postprocessRadspecDescription.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module"}