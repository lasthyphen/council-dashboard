{"ast":null,"code":"export const KnownArbitrables = {\n  main: new Map([{\n    address: '0x5b0899c8c5af7696ae4e082b04bd2920304ad2aa',\n    urlBuilder: actionId => `https://cash.aragon.network/#/proposals/${actionId}`\n  }].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable])),\n  rinkeby: new Map([{\n    address: '0x9c92dbd8a8e5903e2741202321073091109f26be',\n    urlBuilder: actionId => `https://network-dashboard.vercel.app/#/proposals/${actionId}`\n  }].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable])),\n  dijets: new Map([{\n    address: '0xa28a4B8c614aCF3F3448daD91cA80A2B3034A8D9',\n    urlBuilder: actionId => `http://localhost:3001/#/proposals/${actionId}`\n  }].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable]))\n};\nexport function isArbitrableKnown(arbitrableAddress, networkType) {\n  if (!KnownArbitrables[networkType]) return false;\n  return Boolean(KnownArbitrables[networkType].get(arbitrableAddress.toLowerCase()));\n}\nexport function buildArbitrableUrl(arbitrableAddress, actionId, networkType) {\n  const arbitrable = KnownArbitrables[networkType].get(arbitrableAddress.toLowerCase());\n  return (arbitrable === null || arbitrable === void 0 ? void 0 : arbitrable.urlBuilder(actionId)) || '';\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/known-arbitrables.js"],"names":["KnownArbitrables","main","Map","address","urlBuilder","actionId","map","arbitrable","toLowerCase","rinkeby","dijets","isArbitrableKnown","arbitrableAddress","networkType","Boolean","get","buildArbitrableUrl"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG;AAC9BC,EAAAA,IAAI,EAAE,IAAIC,GAAJ,CACJ,CACE;AACEC,IAAAA,OAAO,EAAE,4CADX;AAEEC,IAAAA,UAAU,EAAEC,QAAQ,IACjB,2CAA0CA,QAAS;AAHxD,GADF,EAMEC,GANF,CAMMC,UAAU,IAAI,CAACA,UAAU,CAACJ,OAAX,CAAmBK,WAAnB,EAAD,EAAmCD,UAAnC,CANpB,CADI,CADwB;AAU9BE,EAAAA,OAAO,EAAE,IAAIP,GAAJ,CACP,CACE;AACEC,IAAAA,OAAO,EAAE,4CADX;AAEEC,IAAAA,UAAU,EAAEC,QAAQ,IACjB,oDAAmDA,QAAS;AAHjE,GADF,EAMEC,GANF,CAMMC,UAAU,IAAI,CAACA,UAAU,CAACJ,OAAX,CAAmBK,WAAnB,EAAD,EAAmCD,UAAnC,CANpB,CADO,CAVqB;AAmB9BG,EAAAA,MAAM,EAAE,IAAIR,GAAJ,CACN,CACE;AACEC,IAAAA,OAAO,EAAE,4CADX;AAEEC,IAAAA,UAAU,EAAEC,QAAQ,IAAK,qCAAoCA,QAAS;AAFxE,GADF,EAKEC,GALF,CAKMC,UAAU,IAAI,CAACA,UAAU,CAACJ,OAAX,CAAmBK,WAAnB,EAAD,EAAmCD,UAAnC,CALpB,CADM;AAnBsB,CAAzB;AA6BP,OAAO,SAASI,iBAAT,CAA2BC,iBAA3B,EAA8CC,WAA9C,EAA2D;AAChE,MAAI,CAACb,gBAAgB,CAACa,WAAD,CAArB,EAAoC,OAAO,KAAP;AACpC,SAAOC,OAAO,CACZd,gBAAgB,CAACa,WAAD,CAAhB,CAA8BE,GAA9B,CAAkCH,iBAAiB,CAACJ,WAAlB,EAAlC,CADY,CAAd;AAGD;AAED,OAAO,SAASQ,kBAAT,CAA4BJ,iBAA5B,EAA+CP,QAA/C,EAAyDQ,WAAzD,EAAsE;AAC3E,QAAMN,UAAU,GAAGP,gBAAgB,CAACa,WAAD,CAAhB,CAA8BE,GAA9B,CACjBH,iBAAiB,CAACJ,WAAlB,EADiB,CAAnB;AAIA,SAAO,CAAAD,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEH,UAAZ,CAAuBC,QAAvB,MAAoC,EAA3C;AACD","sourcesContent":["export const KnownArbitrables = {\n  main: new Map(\n    [\n      {\n        address: '0x5b0899c8c5af7696ae4e082b04bd2920304ad2aa',\n        urlBuilder: actionId =>\n          `https://cash.aragon.network/#/proposals/${actionId}`,\n      },\n    ].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable])\n  ),\n  rinkeby: new Map(\n    [\n      {\n        address: '0x9c92dbd8a8e5903e2741202321073091109f26be',\n        urlBuilder: actionId =>\n          `https://network-dashboard.vercel.app/#/proposals/${actionId}`,\n      },\n    ].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable])\n  ),\n  dijets: new Map(\n    [\n      {\n        address: '0xa28a4B8c614aCF3F3448daD91cA80A2B3034A8D9',\n        urlBuilder: actionId => `http://localhost:3001/#/proposals/${actionId}`,\n      },\n    ].map(arbitrable => [arbitrable.address.toLowerCase(), arbitrable])\n  ),\n}\n\nexport function isArbitrableKnown(arbitrableAddress, networkType) {\n  if (!KnownArbitrables[networkType]) return false\n  return Boolean(\n    KnownArbitrables[networkType].get(arbitrableAddress.toLowerCase())\n  )\n}\n\nexport function buildArbitrableUrl(arbitrableAddress, actionId, networkType) {\n  const arbitrable = KnownArbitrables[networkType].get(\n    arbitrableAddress.toLowerCase()\n  )\n\n  return arbitrable?.urlBuilder(actionId) || ''\n}\n"]},"metadata":{},"sourceType":"module"}