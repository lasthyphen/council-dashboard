{"ast":null,"code":"import _toConsumableArray from \"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { ethers } from 'ethers';\nexport var apmAppId = function apmAppId(appName) {\n  return ethers.utils.namehash(\"\".concat(appName, \".aragonpm.eth\"));\n}; // Is the given method a full signature, e.g. 'foo(arg1,arg2,...)'\n\nexport var isFullMethodSignature = function isFullMethodSignature(methodSignature) {\n  return Boolean(methodSignature) && methodSignature.includes('(') && methodSignature.includes(')');\n};\nexport function validateMethod(destination, methodSignature, destinationApp) {\n  var methods = destinationApp.intents;\n\n  if (!methods) {\n    throw new Error(\"No functions specified in artifact for \".concat(destination));\n  } // Find the relevant method information\n\n\n  var method = methods.find(function (method) {\n    return isFullMethodSignature(methodSignature) ? method.sig === methodSignature : // If the full signature isn't given, just select the first overload declared\n    method.sig.split('(')[0] === methodSignature;\n  });\n\n  if (!method) {\n    throw new Error(\"No method named \".concat(methodSignature, \" on \").concat(destination));\n  }\n\n  return method;\n}\n/**\n * Find the method descriptor corresponding to the data component of a\n * transaction sent to `app`.\n *\n * @param  {Object} app App artifact\n * @param  {Object} data Data component of a transaction to app\n * @return {Object|void} Method with radspec notice and function signature, or undefined if none was found\n */\n\nexport function findAppMethodFromIntent(app, transaction) {\n  var methodId = transaction.data.substring(0, 10);\n\n  var checkMethodSignature = function checkMethodSignature(siganture) {\n    // Hash signature with Ethereum Identity and silce bytes\n    var sigHash = ethers.utils.hexDataSlice(ethers.utils.id(siganture), 0, 4);\n    return sigHash === methodId;\n  };\n\n  var _ref = app || {},\n      deprecatedIntents = _ref.deprecatedIntents,\n      intents = _ref.intents;\n\n  var method; // First try to find the method in the current functions\n\n  if (Array.isArray(intents)) {\n    method = intents.find(function (method) {\n      return checkMethodSignature(method.sig);\n    });\n  }\n\n  if (!method) {\n    // The current functions didn't have it; try with each deprecated version's functions\n    var deprecatedFunctionsFromVersions = Object.values(deprecatedIntents || {});\n\n    if (deprecatedFunctionsFromVersions.every(Array.isArray)) {\n      var _ref2;\n\n      // Flatten all the deprecated functions\n      var allDeprecatedFunctions = (_ref2 = []).concat.apply(_ref2, _toConsumableArray(deprecatedFunctionsFromVersions));\n\n      method = allDeprecatedFunctions.find(function (method) {\n        return checkMethodSignature(method.sig);\n      });\n    }\n  }\n\n  return method;\n}","map":null,"metadata":{},"sourceType":"module"}