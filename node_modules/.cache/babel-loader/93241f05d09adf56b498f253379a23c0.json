{"ast":null,"code":"import { useCallback, useEffect, useReducer } from 'react';\n\nfunction stepsReducer(state, {\n  type,\n  value,\n  steps\n}) {\n  const {\n    step\n  } = state;\n  let newStep = null;\n\n  if (type === 'set') {\n    newStep = value;\n  }\n\n  if (type === 'next' && step < steps - 1) {\n    newStep = step + 1;\n  }\n\n  if (type === 'prev' && step > 0) {\n    newStep = step - 1;\n  }\n\n  if (newStep !== null && step !== newStep) {\n    return {\n      step: newStep,\n      direction: newStep > step ? 1 : -1\n    };\n  }\n\n  return state;\n} // Simple hook to manage a given number of steps.\n\n\nexport function useSteps(steps) {\n  const [{\n    step,\n    direction\n  }, updateStep] = useReducer(stepsReducer, {\n    step: 0,\n    direction: 0\n  }); // If the number of steps change, we reset the current step\n\n  useEffect(() => {\n    updateStep({\n      type: 'set',\n      value: 0,\n      steps\n    });\n  }, [steps]);\n  const setStep = useCallback(value => {\n    updateStep({\n      type: 'set',\n      value,\n      steps\n    });\n  }, [steps]);\n  const next = useCallback(() => {\n    updateStep({\n      type: 'next',\n      steps\n    });\n  }, [steps]);\n  const prev = useCallback(() => {\n    updateStep({\n      type: 'prev',\n      steps\n    });\n  }, [steps]);\n  return {\n    direction,\n    next,\n    prev,\n    setStep,\n    step\n  };\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useOnboarding.js"],"names":["useCallback","useEffect","useReducer","stepsReducer","state","type","value","steps","step","newStep","direction","useSteps","updateStep","setStep","next","prev"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,OAAnD;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAA7B,EAAqD;AACnD,QAAM;AAAEC,IAAAA;AAAF,MAAWJ,KAAjB;AAEA,MAAIK,OAAO,GAAG,IAAd;;AAEA,MAAIJ,IAAI,KAAK,KAAb,EAAoB;AAClBI,IAAAA,OAAO,GAAGH,KAAV;AACD;;AACD,MAAID,IAAI,KAAK,MAAT,IAAmBG,IAAI,GAAGD,KAAK,GAAG,CAAtC,EAAyC;AACvCE,IAAAA,OAAO,GAAGD,IAAI,GAAG,CAAjB;AACD;;AACD,MAAIH,IAAI,KAAK,MAAT,IAAmBG,IAAI,GAAG,CAA9B,EAAiC;AAC/BC,IAAAA,OAAO,GAAGD,IAAI,GAAG,CAAjB;AACD;;AAED,MAAIC,OAAO,KAAK,IAAZ,IAAoBD,IAAI,KAAKC,OAAjC,EAA0C;AACxC,WAAO;AACLD,MAAAA,IAAI,EAAEC,OADD;AAELC,MAAAA,SAAS,EAAED,OAAO,GAAGD,IAAV,GAAiB,CAAjB,GAAqB,CAAC;AAF5B,KAAP;AAID;;AAED,SAAOJ,KAAP;AACD,C,CACD;;;AACA,OAAO,SAASO,QAAT,CAAkBJ,KAAlB,EAAyB;AAC9B,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQE,IAAAA;AAAR,GAAD,EAAsBE,UAAtB,IAAoCV,UAAU,CAACC,YAAD,EAAe;AACjEK,IAAAA,IAAI,EAAE,CAD2D;AAEjEE,IAAAA,SAAS,EAAE;AAFsD,GAAf,CAApD,CAD8B,CAM9B;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,UAAU,CAAC;AAAEP,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAK,EAAE,CAAtB;AAAyBC,MAAAA;AAAzB,KAAD,CAAV;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,QAAMM,OAAO,GAAGb,WAAW,CACzBM,KAAK,IAAI;AACPM,IAAAA,UAAU,CAAC;AAAEP,MAAAA,IAAI,EAAE,KAAR;AAAeC,MAAAA,KAAf;AAAsBC,MAAAA;AAAtB,KAAD,CAAV;AACD,GAHwB,EAIzB,CAACA,KAAD,CAJyB,CAA3B;AAOA,QAAMO,IAAI,GAAGd,WAAW,CAAC,MAAM;AAC7BY,IAAAA,UAAU,CAAC;AAAEP,MAAAA,IAAI,EAAE,MAAR;AAAgBE,MAAAA;AAAhB,KAAD,CAAV;AACD,GAFuB,EAErB,CAACA,KAAD,CAFqB,CAAxB;AAIA,QAAMQ,IAAI,GAAGf,WAAW,CAAC,MAAM;AAC7BY,IAAAA,UAAU,CAAC;AAAEP,MAAAA,IAAI,EAAE,MAAR;AAAgBE,MAAAA;AAAhB,KAAD,CAAV;AACD,GAFuB,EAErB,CAACA,KAAD,CAFqB,CAAxB;AAIA,SAAO;AACLG,IAAAA,SADK;AAELI,IAAAA,IAFK;AAGLC,IAAAA,IAHK;AAILF,IAAAA,OAJK;AAKLL,IAAAA;AALK,GAAP;AAOD","sourcesContent":["import { useCallback, useEffect, useReducer } from 'react'\n\nfunction stepsReducer(state, { type, value, steps }) {\n  const { step } = state\n\n  let newStep = null\n\n  if (type === 'set') {\n    newStep = value\n  }\n  if (type === 'next' && step < steps - 1) {\n    newStep = step + 1\n  }\n  if (type === 'prev' && step > 0) {\n    newStep = step - 1\n  }\n\n  if (newStep !== null && step !== newStep) {\n    return {\n      step: newStep,\n      direction: newStep > step ? 1 : -1,\n    }\n  }\n\n  return state\n}\n// Simple hook to manage a given number of steps.\nexport function useSteps(steps) {\n  const [{ step, direction }, updateStep] = useReducer(stepsReducer, {\n    step: 0,\n    direction: 0,\n  })\n\n  // If the number of steps change, we reset the current step\n  useEffect(() => {\n    updateStep({ type: 'set', value: 0, steps })\n  }, [steps])\n\n  const setStep = useCallback(\n    value => {\n      updateStep({ type: 'set', value, steps })\n    },\n    [steps]\n  )\n\n  const next = useCallback(() => {\n    updateStep({ type: 'next', steps })\n  }, [steps])\n\n  const prev = useCallback(() => {\n    updateStep({ type: 'prev', steps })\n  }, [steps])\n\n  return {\n    direction,\n    next,\n    prev,\n    setStep,\n    step,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}