{"ast":null,"code":"import{networkConfigs,getInternalNetworkName,getNetworkConfig,RINKEBY_COURT,RINKEBY_STAGING_COURT}from'../networks';import env from'../environment';var VOIDED_DISPUTES={main:new Map([[networkConfigs.dijets.court,new Map([{id:'0',link:'https://blog.aragon.one/update-on-aragon-courts-first-mock-dispute/',description:'Dispute #0 is void and all related content has been removed from the Dashboard. Aragon One has made the decision to void the dispute and consider it non-existent when considering precedence for future Aragon Court cases.',text:'This dispute has been voided and discontinued'}].map(function(dispute){return[dispute.id,dispute];}))]]),rinkeby:new Map([[RINKEBY_COURT,new Map([])],[RINKEBY_STAGING_COURT,new Map([])]]),ropsten:new Map([[networkConfigs.ropsten.court,new Map([])]]),local:new Map([[networkConfigs.local.court,new Map([])]]),dijets:new Map([[networkConfigs.dijets.court,new Map([])]])};export function getVoidedDisputesByCourt(){if(env('SKIP_VOIDING')){return new Map([]);}var courtAddress=getNetworkConfig().court;return VOIDED_DISPUTES[getInternalNetworkName()].get(courtAddress);}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/flagged-disputes/voided-disputes.js"],"names":["networkConfigs","getInternalNetworkName","getNetworkConfig","RINKEBY_COURT","RINKEBY_STAGING_COURT","env","VOIDED_DISPUTES","main","Map","dijets","court","id","link","description","text","map","dispute","rinkeby","ropsten","local","getVoidedDisputesByCourt","courtAddress","get"],"mappings":"AAAA,OACEA,cADF,CAEEC,sBAFF,CAGEC,gBAHF,CAIEC,aAJF,CAKEC,qBALF,KAMO,aANP,CAOA,MAAOC,CAAAA,GAAP,KAAgB,gBAAhB,CAEA,GAAMC,CAAAA,eAAe,CAAG,CACtBC,IAAI,CAAE,GAAIC,CAAAA,GAAJ,CAAQ,CACZ,CACER,cAAc,CAACS,MAAf,CAAsBC,KADxB,CAEE,GAAIF,CAAAA,GAAJ,CACE,CACE,CACEG,EAAE,CAAE,GADN,CAEEC,IAAI,CACF,qEAHJ,CAIEC,WAAW,CACT,8NALJ,CAMEC,IAAI,CAAE,+CANR,CADF,EASEC,GATF,CASM,SAAAC,OAAO,QAAI,CAACA,OAAO,CAACL,EAAT,CAAaK,OAAb,CAAJ,EATb,CADF,CAFF,CADY,CAAR,CADgB,CAkBtBC,OAAO,CAAE,GAAIT,CAAAA,GAAJ,CAAQ,CACf,CAACL,aAAD,CAAgB,GAAIK,CAAAA,GAAJ,CAAQ,EAAR,CAAhB,CADe,CAEf,CAACJ,qBAAD,CAAwB,GAAII,CAAAA,GAAJ,CAAQ,EAAR,CAAxB,CAFe,CAAR,CAlBa,CAsBtBU,OAAO,CAAE,GAAIV,CAAAA,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACkB,OAAf,CAAuBR,KAAxB,CAA+B,GAAIF,CAAAA,GAAJ,CAAQ,EAAR,CAA/B,CAAD,CAAR,CAtBa,CAuBtBW,KAAK,CAAE,GAAIX,CAAAA,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACmB,KAAf,CAAqBT,KAAtB,CAA6B,GAAIF,CAAAA,GAAJ,CAAQ,EAAR,CAA7B,CAAD,CAAR,CAvBe,CAwBtBC,MAAM,CAAE,GAAID,CAAAA,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACS,MAAf,CAAsBC,KAAvB,CAA8B,GAAIF,CAAAA,GAAJ,CAAQ,EAAR,CAA9B,CAAD,CAAR,CAxBc,CAAxB,CA2BA,MAAO,SAASY,CAAAA,wBAAT,EAAoC,CACzC,GAAIf,GAAG,CAAC,cAAD,CAAP,CAAyB,CACvB,MAAO,IAAIG,CAAAA,GAAJ,CAAQ,EAAR,CAAP,CACD,CACD,GAAMa,CAAAA,YAAY,CAAGnB,gBAAgB,GAAGQ,KAAxC,CAEA,MAAOJ,CAAAA,eAAe,CAACL,sBAAsB,EAAvB,CAAf,CAA0CqB,GAA1C,CAA8CD,YAA9C,CAAP,CACD","sourcesContent":["import {\n  networkConfigs,\n  getInternalNetworkName,\n  getNetworkConfig,\n  RINKEBY_COURT,\n  RINKEBY_STAGING_COURT,\n} from '../networks'\nimport env from '../environment'\n\nconst VOIDED_DISPUTES = {\n  main: new Map([\n    [\n      networkConfigs.dijets.court,\n      new Map(\n        [\n          {\n            id: '0',\n            link:\n              'https://blog.aragon.one/update-on-aragon-courts-first-mock-dispute/',\n            description:\n              'Dispute #0 is void and all related content has been removed from the Dashboard. Aragon One has made the decision to void the dispute and consider it non-existent when considering precedence for future Aragon Court cases.',\n            text: 'This dispute has been voided and discontinued',\n          },\n        ].map(dispute => [dispute.id, dispute])\n      ),\n    ],\n  ]),\n  rinkeby: new Map([\n    [RINKEBY_COURT, new Map([])],\n    [RINKEBY_STAGING_COURT, new Map([])],\n  ]),\n  ropsten: new Map([[networkConfigs.ropsten.court, new Map([])]]),\n  local: new Map([[networkConfigs.local.court, new Map([])]]),\n  dijets: new Map([[networkConfigs.dijets.court, new Map([])]]),\n}\n\nexport function getVoidedDisputesByCourt() {\n  if (env('SKIP_VOIDING')) {\n    return new Map([])\n  }\n  const courtAddress = getNetworkConfig().court\n\n  return VOIDED_DISPUTES[getInternalNetworkName()].get(courtAddress)\n}\n"]},"metadata":{},"sourceType":"module"}