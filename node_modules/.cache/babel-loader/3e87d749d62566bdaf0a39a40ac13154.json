{"ast":null,"code":"import React,{useContext,useMemo}from'react';import useNow from'../hooks/useNow';import{useCourtConfig}from'./CourtConfig';import{getTermPeriod,getExpectedCurrentTermId}from'../utils/court-utils';var CourtClockContext=React.createContext();function CourtClockProvider(_ref){var children=_ref.children;var now=useNow();var courtConfig=useCourtConfig();var _ref2=courtConfig||{},actualCurrentTerm=_ref2.currentTerm,_ref2$terms=_ref2.terms,terms=_ref2$terms===void 0?[]:_ref2$terms,_ref2$termDuration=_ref2.termDuration,termDuration=_ref2$termDuration===void 0?0:_ref2$termDuration;var expectedCurrentTerm=0;var termStartTime=0,termEndTime=0;if(terms.length>0){expectedCurrentTerm=getExpectedCurrentTermId(now,{terms:terms,termDuration:termDuration});var termPeriod=getTermPeriod(expectedCurrentTerm,{terms:terms,termDuration:termDuration});termStartTime=termPeriod[0];termEndTime=termPeriod[1];}var courtClock=useMemo(function(){return{currentTermId:expectedCurrentTerm,currentTermStartDate:new Date(termStartTime),currentTermEndDate:new Date(termEndTime),isSynced:expectedCurrentTerm===actualCurrentTerm,neededTransitions:expectedCurrentTerm-actualCurrentTerm};},[actualCurrentTerm,expectedCurrentTerm,termEndTime,termStartTime]);return React.createElement(CourtClockContext.Provider,{value:courtClock},children);}function useCourtClock(){return useContext(CourtClockContext);}export{CourtClockProvider,useCourtClock};","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/providers/CourtClock.js"],"names":["React","useContext","useMemo","useNow","useCourtConfig","getTermPeriod","getExpectedCurrentTermId","CourtClockContext","createContext","CourtClockProvider","children","now","courtConfig","actualCurrentTerm","currentTerm","terms","termDuration","expectedCurrentTerm","termStartTime","termEndTime","length","termPeriod","courtClock","currentTermId","currentTermStartDate","Date","currentTermEndDate","isSynced","neededTransitions","useCourtClock"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,OAA5B,KAA2C,OAA3C,CAGA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,OAASC,cAAT,KAA+B,eAA/B,CACA,OAASC,aAAT,CAAwBC,wBAAxB,KAAwD,sBAAxD,CAEA,GAAMC,CAAAA,iBAAiB,CAAGP,KAAK,CAACQ,aAAN,EAA1B,CAEA,QAASC,CAAAA,kBAAT,MAA0C,IAAZC,CAAAA,QAAY,MAAZA,QAAY,CACxC,GAAMC,CAAAA,GAAG,CAAGR,MAAM,EAAlB,CACA,GAAMS,CAAAA,WAAW,CAAGR,cAAc,EAAlC,CAFwC,UAKtCQ,WAAW,EAAI,EALuB,CAInBC,iBAJmB,OAIhCC,WAJgC,mBAIAC,KAJA,CAIAA,KAJA,sBAIQ,EAJR,sCAIYC,YAJZ,CAIYA,YAJZ,6BAI2B,CAJ3B,oBAOxC,GAAIC,CAAAA,mBAAmB,CAAG,CAA1B,CAPwC,GAQnCC,CAAAA,aARmC,CAQJ,CARI,CAQpBC,WARoB,CAQD,CARC,CAUxC,GAAIJ,KAAK,CAACK,MAAN,CAAe,CAAnB,CAAsB,CACpBH,mBAAmB,CAAGX,wBAAwB,CAACK,GAAD,CAAM,CAClDI,KAAK,CAALA,KADkD,CAElDC,YAAY,CAAZA,YAFkD,CAAN,CAA9C,CAKA,GAAMK,CAAAA,UAAU,CAAGhB,aAAa,CAACY,mBAAD,CAAsB,CACpDF,KAAK,CAALA,KADoD,CAEpDC,YAAY,CAAZA,YAFoD,CAAtB,CAAhC,CAKAE,aAAa,CAAGG,UAAU,CAAC,CAAD,CAA1B,CACAF,WAAW,CAAGE,UAAU,CAAC,CAAD,CAAxB,CACD,CAED,GAAMC,CAAAA,UAAU,CAAGpB,OAAO,CACxB,iBAAO,CACLqB,aAAa,CAAEN,mBADV,CAELO,oBAAoB,CAAE,GAAIC,CAAAA,IAAJ,CAASP,aAAT,CAFjB,CAGLQ,kBAAkB,CAAE,GAAID,CAAAA,IAAJ,CAASN,WAAT,CAHf,CAILQ,QAAQ,CAAEV,mBAAmB,GAAKJ,iBAJ7B,CAKLe,iBAAiB,CAAEX,mBAAmB,CAAGJ,iBALpC,CAAP,EADwB,CAQxB,CAACA,iBAAD,CAAoBI,mBAApB,CAAyCE,WAAzC,CAAsDD,aAAtD,CARwB,CAA1B,CAWA,MACE,qBAAC,iBAAD,CAAmB,QAAnB,EAA4B,KAAK,CAAEI,UAAnC,EACGZ,QADH,CADF,CAKD,CAMD,QAASmB,CAAAA,aAAT,EAAyB,CACvB,MAAO5B,CAAAA,UAAU,CAACM,iBAAD,CAAjB,CACD,CAED,OAASE,kBAAT,CAA6BoB,aAA7B","sourcesContent":["import React, { useContext, useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport useNow from '../hooks/useNow'\nimport { useCourtConfig } from './CourtConfig'\nimport { getTermPeriod, getExpectedCurrentTermId } from '../utils/court-utils'\n\nconst CourtClockContext = React.createContext()\n\nfunction CourtClockProvider({ children }) {\n  const now = useNow()\n  const courtConfig = useCourtConfig()\n\n  const { currentTerm: actualCurrentTerm, terms = [], termDuration = 0 } =\n    courtConfig || {}\n\n  let expectedCurrentTerm = 0\n  let [termStartTime, termEndTime] = [0, 0]\n\n  if (terms.length > 0) {\n    expectedCurrentTerm = getExpectedCurrentTermId(now, {\n      terms,\n      termDuration,\n    })\n\n    const termPeriod = getTermPeriod(expectedCurrentTerm, {\n      terms,\n      termDuration,\n    })\n\n    termStartTime = termPeriod[0]\n    termEndTime = termPeriod[1]\n  }\n\n  const courtClock = useMemo(\n    () => ({\n      currentTermId: expectedCurrentTerm,\n      currentTermStartDate: new Date(termStartTime),\n      currentTermEndDate: new Date(termEndTime),\n      isSynced: expectedCurrentTerm === actualCurrentTerm,\n      neededTransitions: expectedCurrentTerm - actualCurrentTerm,\n    }),\n    [actualCurrentTerm, expectedCurrentTerm, termEndTime, termStartTime]\n  )\n\n  return (\n    <CourtClockContext.Provider value={courtClock}>\n      {children}\n    </CourtClockContext.Provider>\n  )\n}\n\nCourtClockProvider.propTypes = {\n  children: PropTypes.node,\n}\n\nfunction useCourtClock() {\n  return useContext(CourtClockContext)\n}\n\nexport { CourtClockProvider, useCourtClock }\n"]},"metadata":{},"sourceType":"module"}