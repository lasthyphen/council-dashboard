{"ast":null,"code":"import gql from 'graphql-tag';\nimport { Client } from 'urql';\nimport { getSubgraphByAppId } from './connect-endpoints';\nexport function performDisputableVotingQuery(id, voteId, appId) {\n  // Disputable voting now saves the hash of the evmScript so we need to get it from the subgraph.\n  const subgraphUrl = getSubgraphByAppId(appId);\n  return performQuery(subgraphUrl, disputableVotingQuery, {\n    id,\n    voteId\n  });\n}\n\nfunction performQuery(subgraph, query, args) {\n  const client = new Client({\n    url: subgraph\n  });\n  return client.query(query, args).toPromise();\n}\n\nexport const disputableVotingQuery = gql`\n  query DisputableVoting($id: ID!, $voteId: BigInt!) {\n    disputableVoting(id: $id) {\n      votes(where: { voteId: $voteId }) {\n        script\n      }\n    }\n  }\n`;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/queries.js"],"names":["gql","Client","getSubgraphByAppId","performDisputableVotingQuery","id","voteId","appId","subgraphUrl","performQuery","disputableVotingQuery","subgraph","query","args","client","url","toPromise"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,MAAT,QAAuB,MAAvB;AACA,SAASC,kBAAT,QAAmC,qBAAnC;AAEA,OAAO,SAASC,4BAAT,CAAsCC,EAAtC,EAA0CC,MAA1C,EAAkDC,KAAlD,EAAyD;AAC9D;AACA,QAAMC,WAAW,GAAGL,kBAAkB,CAACI,KAAD,CAAtC;AAEA,SAAOE,YAAY,CAACD,WAAD,EAAcE,qBAAd,EAAqC;AACtDL,IAAAA,EADsD;AAEtDC,IAAAA;AAFsD,GAArC,CAAnB;AAID;;AAED,SAASG,YAAT,CAAsBE,QAAtB,EAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AAC3C,QAAMC,MAAM,GAAG,IAAIZ,MAAJ,CAAW;AAAEa,IAAAA,GAAG,EAAEJ;AAAP,GAAX,CAAf;AAEA,SAAOG,MAAM,CAACF,KAAP,CAAaA,KAAb,EAAoBC,IAApB,EAA0BG,SAA1B,EAAP;AACD;;AAED,OAAO,MAAMN,qBAAqB,GAAGT,GAAI;;;;;;;;CAAlC","sourcesContent":["import gql from 'graphql-tag'\nimport { Client } from 'urql'\nimport { getSubgraphByAppId } from './connect-endpoints'\n\nexport function performDisputableVotingQuery(id, voteId, appId) {\n  // Disputable voting now saves the hash of the evmScript so we need to get it from the subgraph.\n  const subgraphUrl = getSubgraphByAppId(appId)\n\n  return performQuery(subgraphUrl, disputableVotingQuery, {\n    id,\n    voteId,\n  })\n}\n\nfunction performQuery(subgraph, query, args) {\n  const client = new Client({ url: subgraph })\n\n  return client.query(query, args).toPromise()\n}\n\nexport const disputableVotingQuery = gql`\n  query DisputableVoting($id: ID!, $voteId: BigInt!) {\n    disputableVoting(id: $id) {\n      votes(where: { voteId: $voteId }) {\n        script\n      }\n    }\n  }\n`\n"]},"metadata":{},"sourceType":"module"}