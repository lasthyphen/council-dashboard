{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LinkFlow = void 0;\n\nconst preact_1 = require(\"preact\");\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst LinkDialog_1 = require(\"./LinkDialog\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst TryExtensionLinkDialog_1 = require(\"./TryExtensionLinkDialog\");\n\nclass LinkFlow {\n  constructor(options) {\n    this.extensionUI$ = new rxjs_1.BehaviorSubject({});\n    this.subscriptions = new rxjs_1.Subscription();\n    this.isConnected = false;\n    this.isOpen = false;\n    this.onCancel = null;\n    this.root = null; // if true, hide QR code in LinkFlow (which happens if no jsonRpcUrl is provided)\n\n    this.connectDisabled = false;\n    this.darkMode = options.darkMode;\n    this.version = options.version;\n    this.sessionId = options.sessionId;\n    this.sessionSecret = options.sessionSecret;\n    this.walletLinkUrl = options.walletLinkUrl;\n    this.isParentConnection = options.isParentConnection;\n    this.connected$ = options.connected$; // Check if extension UI is enabled\n\n    fetch(\"https://api.wallet.coinbase.com/rpc/v2/getFeatureFlags\").then(res => res.json()).then(json => {\n      const enabled = json.result.desktop.extension_ui;\n\n      if (typeof enabled === \"undefined\") {\n        this.extensionUI$.next({\n          value: false\n        });\n      } else {\n        this.extensionUI$.next({\n          value: enabled\n        });\n      }\n    }).catch(_ => {\n      this.extensionUI$.next({\n        value: false\n      });\n    });\n  }\n\n  attach(el) {\n    this.root = document.createElement(\"div\");\n    this.root.className = \"-walletlink-link-flow-root\";\n    el.appendChild(this.root);\n    this.render();\n    this.subscriptions.add(this.connected$.subscribe(v => {\n      if (this.isConnected !== v) {\n        this.isConnected = v;\n        this.render();\n      }\n    }));\n  }\n\n  detach() {\n    var _a;\n\n    if (!this.root) {\n      return;\n    }\n\n    this.subscriptions.unsubscribe();\n    preact_1.render(null, this.root);\n    (_a = this.root.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.root);\n  }\n\n  setConnectDisabled(connectDisabled) {\n    this.connectDisabled = connectDisabled;\n  }\n\n  open(options) {\n    this.isOpen = true;\n    this.onCancel = options.onCancel;\n    this.render();\n  }\n\n  close() {\n    this.isOpen = false;\n    this.onCancel = null;\n    this.render();\n  }\n\n  render() {\n    if (!this.root) {\n      return;\n    }\n\n    const subscription = this.extensionUI$.pipe(operators_1.first(enabled => enabled.value !== undefined)) // wait for a valid value before rendering\n    .subscribe(enabled => {\n      if (!this.root) {\n        return;\n      }\n\n      preact_1.render(enabled.value ? preact_1.h(TryExtensionLinkDialog_1.TryExtensionLinkDialog, {\n        darkMode: this.darkMode,\n        version: this.version,\n        sessionId: this.sessionId,\n        sessionSecret: this.sessionSecret,\n        walletLinkUrl: this.walletLinkUrl,\n        isOpen: this.isOpen,\n        isConnected: this.isConnected,\n        isParentConnection: this.isParentConnection,\n        onCancel: this.onCancel,\n        connectDisabled: this.connectDisabled\n      }) : preact_1.h(LinkDialog_1.LinkDialog, {\n        darkMode: this.darkMode,\n        version: this.version,\n        sessionId: this.sessionId,\n        sessionSecret: this.sessionSecret,\n        walletLinkUrl: this.walletLinkUrl,\n        isOpen: this.isOpen,\n        isConnected: this.isConnected,\n        isParentConnection: this.isParentConnection,\n        onCancel: this.onCancel\n      }), this.root);\n    });\n    this.subscriptions.add(subscription);\n  }\n\n}\n\nexports.LinkFlow = LinkFlow;","map":null,"metadata":{},"sourceType":"script"}