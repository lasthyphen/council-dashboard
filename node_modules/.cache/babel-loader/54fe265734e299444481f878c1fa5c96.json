{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";function _templateObject(){var data=_taggedTemplateLiteral([\"\\n  query DisputableVoting($id: ID!, $voteId: BigInt!) {\\n    disputableVoting(id: $id) {\\n      votes(where: { voteId: $voteId }) {\\n        script\\n      }\\n    }\\n  }\\n\"]);_templateObject=function _templateObject(){return data;};return data;}import gql from'graphql-tag';import{Client}from'urql';import{getSubgraphByAppId}from'./connect-endpoints';export function performDisputableVotingQuery(id,voteId,appId){// Disputable voting now saves the hash of the evmScript so we need to get it from the subgraph.\nvar subgraphUrl=getSubgraphByAppId(appId);return performQuery(subgraphUrl,disputableVotingQuery,{id:id,voteId:voteId});}function performQuery(subgraph,query,args){var client=new Client({url:subgraph});return client.query(query,args).toPromise();}export var disputableVotingQuery=gql(_templateObject());","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/disputables/queries.js"],"names":["gql","Client","getSubgraphByAppId","performDisputableVotingQuery","id","voteId","appId","subgraphUrl","performQuery","disputableVotingQuery","subgraph","query","args","client","url","toPromise"],"mappings":"8bAAA,MAAOA,CAAAA,GAAP,KAAgB,aAAhB,CACA,OAASC,MAAT,KAAuB,MAAvB,CACA,OAASC,kBAAT,KAAmC,qBAAnC,CAEA,MAAO,SAASC,CAAAA,4BAAT,CAAsCC,EAAtC,CAA0CC,MAA1C,CAAkDC,KAAlD,CAAyD,CAC9D;AACA,GAAMC,CAAAA,WAAW,CAAGL,kBAAkB,CAACI,KAAD,CAAtC,CAEA,MAAOE,CAAAA,YAAY,CAACD,WAAD,CAAcE,qBAAd,CAAqC,CACtDL,EAAE,CAAFA,EADsD,CAEtDC,MAAM,CAANA,MAFsD,CAArC,CAAnB,CAID,CAED,QAASG,CAAAA,YAAT,CAAsBE,QAAtB,CAAgCC,KAAhC,CAAuCC,IAAvC,CAA6C,CAC3C,GAAMC,CAAAA,MAAM,CAAG,GAAIZ,CAAAA,MAAJ,CAAW,CAAEa,GAAG,CAAEJ,QAAP,CAAX,CAAf,CAEA,MAAOG,CAAAA,MAAM,CAACF,KAAP,CAAaA,KAAb,CAAoBC,IAApB,EAA0BG,SAA1B,EAAP,CACD,CAED,MAAO,IAAMN,CAAAA,qBAAqB,CAAGT,GAAH,mBAA3B","sourcesContent":["import gql from 'graphql-tag'\nimport { Client } from 'urql'\nimport { getSubgraphByAppId } from './connect-endpoints'\n\nexport function performDisputableVotingQuery(id, voteId, appId) {\n  // Disputable voting now saves the hash of the evmScript so we need to get it from the subgraph.\n  const subgraphUrl = getSubgraphByAppId(appId)\n\n  return performQuery(subgraphUrl, disputableVotingQuery, {\n    id,\n    voteId,\n  })\n}\n\nfunction performQuery(subgraph, query, args) {\n  const client = new Client({ url: subgraph })\n\n  return client.query(query, args).toPromise()\n}\n\nexport const disputableVotingQuery = gql`\n  query DisputableVoting($id: ID!, $voteId: BigInt!) {\n    disputableVoting(id: $id) {\n      votes(where: { voteId: $voteId }) {\n        script\n      }\n    }\n  }\n`\n"]},"metadata":{},"sourceType":"module"}