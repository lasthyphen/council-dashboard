{"ast":null,"code":"import environment from'./environment';import{isLocalOrUnknownNetwork,getNetworkType}from'./lib/web3-utils';import{getNetworkConfig}from'./networks';import{getDefaultEthNode,getIpfsGateway,getSubgraphHttpEndpoint}from'./local-settings';var CHAIN_ID=environment('CHAIN_ID');var COURT_SERVER_NAME=environment('COURT_SERVER_NAME');// IPFS endpoint\nexport var IPFS_ENDPOINT=isLocalOrUnknownNetwork(CHAIN_ID)?'http://localhost:8080/ipfs':'http://localhost:8080/ipfs';// Court server endpoint\nexport function courtServerEndpoint(){if(isLocalOrUnknownNetwork(CHAIN_ID)){return'http://127.0.0.1:8000';}var networkType=getNetworkType(CHAIN_ID);return\"http://localhost:8000\".concat(networkType==='dijets'?'':\"-\".concat(COURT_SERVER_NAME||networkType));}export function graphEndpoint(){var _getNetworkConfig=getNetworkConfig(),nodes=_getNetworkConfig.nodes;return nodes.subgraph;}export var defaultEthNode=getDefaultEthNode()||getNetworkConfig().nodes.defaultEth;export var defaultIpfsGateway=getIpfsGateway();export var defaultSubgraphHttpEndpoint=getSubgraphHttpEndpoint();","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/endpoints.js"],"names":["environment","isLocalOrUnknownNetwork","getNetworkType","getNetworkConfig","getDefaultEthNode","getIpfsGateway","getSubgraphHttpEndpoint","CHAIN_ID","COURT_SERVER_NAME","IPFS_ENDPOINT","courtServerEndpoint","networkType","graphEndpoint","nodes","subgraph","defaultEthNode","defaultEth","defaultIpfsGateway","defaultSubgraphHttpEndpoint"],"mappings":"AAAA,MAAOA,CAAAA,WAAP,KAAwB,eAAxB,CAEA,OAASC,uBAAT,CAAkCC,cAAlC,KAAwD,kBAAxD,CACA,OAASC,gBAAT,KAAiC,YAAjC,CACA,OACEC,iBADF,CAEEC,cAFF,CAGEC,uBAHF,KAIO,kBAJP,CAMA,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,CAAC,UAAD,CAA5B,CACA,GAAMQ,CAAAA,iBAAiB,CAAGR,WAAW,CAAC,mBAAD,CAArC,CAEA;AACA,MAAO,IAAMS,CAAAA,aAAa,CAAGR,uBAAuB,CAACM,QAAD,CAAvB,CACzB,4BADyB,CAEzB,4BAFG,CAIP;AACA,MAAO,SAASG,CAAAA,mBAAT,EAA+B,CACpC,GAAIT,uBAAuB,CAACM,QAAD,CAA3B,CAAuC,CACrC,MAAO,uBAAP,CACD,CAED,GAAMI,CAAAA,WAAW,CAAGT,cAAc,CAACK,QAAD,CAAlC,CACA,qCACEI,WAAW,GAAK,QAAhB,CAA2B,EAA3B,YAAoCH,iBAAiB,EAAIG,WAAzD,CADF,EAGD,CAED,MAAO,SAASC,CAAAA,aAAT,EAAyB,uBACZT,gBAAgB,EADJ,CACtBU,KADsB,mBACtBA,KADsB,CAE9B,MAAOA,CAAAA,KAAK,CAACC,QAAb,CACD,CAED,MAAO,IAAMC,CAAAA,cAAc,CACzBX,iBAAiB,IAAMD,gBAAgB,GAAGU,KAAnB,CAAyBG,UAD3C,CAGP,MAAO,IAAMC,CAAAA,kBAAkB,CAAGZ,cAAc,EAAzC,CAEP,MAAO,IAAMa,CAAAA,2BAA2B,CAAGZ,uBAAuB,EAA3D","sourcesContent":["import environment from './environment'\n\nimport { isLocalOrUnknownNetwork, getNetworkType } from './lib/web3-utils'\nimport { getNetworkConfig } from './networks'\nimport {\n  getDefaultEthNode,\n  getIpfsGateway,\n  getSubgraphHttpEndpoint,\n} from './local-settings'\n\nconst CHAIN_ID = environment('CHAIN_ID')\nconst COURT_SERVER_NAME = environment('COURT_SERVER_NAME')\n\n// IPFS endpoint\nexport const IPFS_ENDPOINT = isLocalOrUnknownNetwork(CHAIN_ID)\n  ? 'http://localhost:8080/ipfs'\n  : 'http://localhost:8080/ipfs'\n\n// Court server endpoint\nexport function courtServerEndpoint() {\n  if (isLocalOrUnknownNetwork(CHAIN_ID)) {\n    return 'http://127.0.0.1:8000'\n  }\n\n  const networkType = getNetworkType(CHAIN_ID)\n  return `http://localhost:8000${\n    networkType === 'dijets' ? '' : `-${COURT_SERVER_NAME || networkType}`\n  }`\n}\n\nexport function graphEndpoint() {\n  const { nodes } = getNetworkConfig()\n  return nodes.subgraph\n}\n\nexport const defaultEthNode =\n  getDefaultEthNode() || getNetworkConfig().nodes.defaultEth\n\nexport const defaultIpfsGateway = getIpfsGateway()\n\nexport const defaultSubgraphHttpEndpoint = getSubgraphHttpEndpoint()\n"]},"metadata":{},"sourceType":"module"}