{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{courtServerEndpoint}from'../endpoints';import{getVoteId,hashPassword}from'../utils/crvoting-utils';var COURT_SERVER_ENDPOINT=courtServerEndpoint();export function requestAutoReveal(_x,_x2,_x3,_x4,_x5){return _requestAutoReveal.apply(this,arguments);}function _requestAutoReveal(){_requestAutoReveal=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(juror,disputeId,roundId,outcome,password){var voteId,salt,rawResponse,response,errors;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:voteId=getVoteId(disputeId,roundId).toString();salt=hashPassword(password);_context.prev=2;_context.next=5;return fetch(\"\".concat(COURT_SERVER_ENDPOINT,\"/reveals\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({juror:juror.toLowerCase(),voteId:voteId,outcome:outcome.toString(),salt:salt})});case 5:rawResponse=_context.sent;if(!rawResponse.ok){_context.next=8;break;}return _context.abrupt(\"return\");case 8:_context.next=10;return rawResponse.json();case 10:response=_context.sent;errors=response.errors.map(function(err){return Object.values(err).join(', ');}).join(', ');throw new Error(\"Failed to request auto-reveal service due to errors: \".concat(errors));case 15:_context.prev=15;_context.t0=_context[\"catch\"](2);console.error(_context.t0);throw _context.t0;case 19:case\"end\":return _context.stop();}}},_callee,null,[[2,15]]);}));return _requestAutoReveal.apply(this,arguments);}export function getAutoRevealRequest(_x6,_x7,_x8){return _getAutoRevealRequest.apply(this,arguments);}function _getAutoRevealRequest(){_getAutoRevealRequest=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(juror,disputeId,roundId){var voteId,rawResponse,_ref,reveal;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:voteId=getVoteId(disputeId,roundId).toString();_context2.prev=1;_context2.next=4;return fetch(\"\".concat(COURT_SERVER_ENDPOINT,\"/reveals/\").concat(juror,\"/\").concat(voteId),{method:'GET',headers:{'Content-Type':'application/json'}});case 4:rawResponse=_context2.sent;if(!rawResponse.ok){_context2.next=11;break;}_context2.next=8;return rawResponse.json();case 8:_ref=_context2.sent;reveal=_ref.reveal;return _context2.abrupt(\"return\",reveal);case 11:return _context2.abrupt(\"return\",null);case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](1);console.error(_context2.t0);throw _context2.t0;case 18:case\"end\":return _context2.stop();}}},_callee2,null,[[1,14]]);}));return _getAutoRevealRequest.apply(this,arguments);}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/services/autoReveal.js"],"names":["courtServerEndpoint","getVoteId","hashPassword","COURT_SERVER_ENDPOINT","requestAutoReveal","juror","disputeId","roundId","outcome","password","voteId","toString","salt","fetch","method","headers","body","JSON","stringify","toLowerCase","rawResponse","ok","json","response","errors","map","err","Object","values","join","Error","console","error","getAutoRevealRequest","reveal"],"mappings":"qPAAA,OAASA,mBAAT,KAAoC,cAApC,CACA,OAASC,SAAT,CAAoBC,YAApB,KAAwC,yBAAxC,CAEA,GAAMC,CAAAA,qBAAqB,CAAGH,mBAAmB,EAAjD,CAEA,eAAsBI,CAAAA,iBAAtB,sE,yGAAO,iBACLC,KADK,CAELC,SAFK,CAGLC,OAHK,CAILC,OAJK,CAKLC,QALK,8JAOCC,MAPD,CAOUT,SAAS,CAACK,SAAD,CAAYC,OAAZ,CAAT,CAA8BI,QAA9B,EAPV,CAQCC,IARD,CAQQV,YAAY,CAACO,QAAD,CARpB,uCAWuBI,CAAAA,KAAK,WAAIV,qBAAJ,aAAqC,CAClEW,MAAM,CAAE,MAD0D,CAElEC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFyD,CAGlEC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBb,KAAK,CAAEA,KAAK,CAACc,WAAN,EADY,CAEnBT,MAAM,CAANA,MAFmB,CAGnBF,OAAO,CAAEA,OAAO,CAACG,QAAR,EAHU,CAInBC,IAAI,CAAJA,IAJmB,CAAf,CAH4D,CAArC,CAX5B,QAWGQ,WAXH,mBAsBCA,WAAW,CAACC,EAtBb,wFA0BoBD,CAAAA,WAAW,CAACE,IAAZ,EA1BpB,SA0BGC,QA1BH,eA2BGC,MA3BH,CA2BYD,QAAQ,CAACC,MAAT,CACZC,GADY,CACR,SAAAC,GAAG,QAAIC,CAAAA,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmBG,IAAnB,CAAwB,IAAxB,CAAJ,EADK,EAEZA,IAFY,CAEP,IAFO,CA3BZ,MA+BG,IAAIC,CAAAA,KAAJ,gEACoDN,MADpD,EA/BH,2DAmCHO,OAAO,CAACC,KAAR,cAnCG,uF,oDAwCP,eAAsBC,CAAAA,oBAAtB,kE,+GAAO,kBAAoC5B,KAApC,CAA2CC,SAA3C,CAAsDC,OAAtD,yJACCG,MADD,CACUT,SAAS,CAACK,SAAD,CAAYC,OAAZ,CAAT,CAA8BI,QAA9B,EADV,yCAIuBE,CAAAA,KAAK,WAC1BV,qBAD0B,qBACOE,KADP,aACgBK,MADhB,EAE7B,CACEI,MAAM,CAAE,KADV,CAEEC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFX,CAF6B,CAJ5B,QAIGK,WAJH,oBAYCA,WAAW,CAACC,EAZb,kDAawBD,CAAAA,WAAW,CAACE,IAAZ,EAbxB,4BAaOY,MAbP,MAaOA,MAbP,kCAcMA,MAdN,2CAiBI,IAjBJ,+DAmBHH,OAAO,CAACC,KAAR,eAnBG,0F","sourcesContent":["import { courtServerEndpoint } from '../endpoints'\nimport { getVoteId, hashPassword } from '../utils/crvoting-utils'\n\nconst COURT_SERVER_ENDPOINT = courtServerEndpoint()\n\nexport async function requestAutoReveal(\n  juror,\n  disputeId,\n  roundId,\n  outcome,\n  password\n) {\n  const voteId = getVoteId(disputeId, roundId).toString()\n  const salt = hashPassword(password)\n\n  try {\n    const rawResponse = await fetch(`${COURT_SERVER_ENDPOINT}/reveals`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        juror: juror.toLowerCase(),\n        voteId,\n        outcome: outcome.toString(),\n        salt,\n      }),\n    })\n\n    if (rawResponse.ok) {\n      return\n    }\n\n    const response = await rawResponse.json()\n    const errors = response.errors\n      .map(err => Object.values(err).join(', '))\n      .join(', ')\n\n    throw new Error(\n      `Failed to request auto-reveal service due to errors: ${errors}`\n    )\n  } catch (err) {\n    console.error(err)\n    throw err\n  }\n}\n\nexport async function getAutoRevealRequest(juror, disputeId, roundId) {\n  const voteId = getVoteId(disputeId, roundId).toString()\n\n  try {\n    const rawResponse = await fetch(\n      `${COURT_SERVER_ENDPOINT}/reveals/${juror}/${voteId}`,\n      {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      }\n    )\n\n    if (rawResponse.ok) {\n      const { reveal } = await rawResponse.json()\n      return reveal\n    }\n\n    return null\n  } catch (err) {\n    console.error(err)\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"module"}