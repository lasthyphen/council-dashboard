{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useQuery}from'urql';import{JurorFirstANJActivationMovement}from'../queries/balances';import{ActiveJurors,JurorFeesClaimed}from'../queries/juror';import{JurorDrafts}from'../queries/jurorDrafts';export function useJurorDraftQuery(jurorId){var _useQuery=useQuery({query:JurorDrafts,variables:{id:jurorId===null||jurorId===void 0?void 0:jurorId.toLowerCase()},pause:!jurorId}),_useQuery2=_slicedToArray(_useQuery,1),result=_useQuery2[0];if(result.fetching||result.error){return[];}var _ref=result.data||{},juror=_ref.juror;return juror?juror.drafts.map(function(draft){return draft.round.dispute.id;}):[];}/**\n * Queries if the juror  by id `jurorId` has ever claimed rewards\n * Rewards can be claimed from two places: Subscriptions fees or Dispute fees (the later includes appeal and juror fees)\n *\n * @param {String} jurorId Address of the juror\n * @returns {Boolean} True if juror has ever claimed rewards\n */export function useJurorRewardsEverClaimedQuery(jurorId){var _useQuery3=useQuery({query:JurorFeesClaimed,variables:{owner:jurorId.toLowerCase()}}),_useQuery4=_slicedToArray(_useQuery3,1),data=_useQuery4[0].data;if(!data){return false;}return data.feeMovements.length>0;}export function useFirstANJActivationQuery(jurorId,_ref2){var _ref2$pause=_ref2.pause,pause=_ref2$pause===void 0?false:_ref2$pause;var _useQuery5=useQuery({query:JurorFirstANJActivationMovement,variables:{id:jurorId.toLowerCase()},pause:pause}),_useQuery6=_slicedToArray(_useQuery5,1),result=_useQuery6[0];var _ref3=result.data||{},juror=_ref3.juror;return juror?juror.anjMovements[0]:null;}export function useActiveJurorsNumber(){var _data$jurors;var _useQuery7=useQuery({query:ActiveJurors}),_useQuery8=_slicedToArray(_useQuery7,1),_useQuery8$=_useQuery8[0],data=_useQuery8$.data,error=_useQuery8$.error;return[data===null||data===void 0?void 0:(_data$jurors=data.jurors)===null||_data$jurors===void 0?void 0:_data$jurors.length,error];}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/query-hooks.js"],"names":["useQuery","JurorFirstANJActivationMovement","ActiveJurors","JurorFeesClaimed","JurorDrafts","useJurorDraftQuery","jurorId","query","variables","id","toLowerCase","pause","result","fetching","error","data","juror","drafts","map","draft","round","dispute","useJurorRewardsEverClaimedQuery","owner","feeMovements","length","useFirstANJActivationQuery","anjMovements","useActiveJurorsNumber","jurors"],"mappings":"4HAAA,OAASA,QAAT,KAAyB,MAAzB,CAEA,OAASC,+BAAT,KAAgD,qBAAhD,CACA,OAASC,YAAT,CAAuBC,gBAAvB,KAA+C,kBAA/C,CACA,OAASC,WAAT,KAA4B,wBAA5B,CAEA,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,OAA5B,CAAqC,eACzBN,QAAQ,CAAC,CACxBO,KAAK,CAAEH,WADiB,CAExBI,SAAS,CAAE,CAAEC,EAAE,CAAEH,OAAF,SAAEA,OAAF,iBAAEA,OAAO,CAAEI,WAAT,EAAN,CAFa,CAGxBC,KAAK,CAAE,CAACL,OAHgB,CAAD,CADiB,wCACnCM,MADmC,eAO1C,GAAIA,MAAM,CAACC,QAAP,EAAmBD,MAAM,CAACE,KAA9B,CAAqC,CACnC,MAAO,EAAP,CACD,CATyC,SAWxBF,MAAM,CAACG,IAAP,EAAe,EAXS,CAWlCC,KAXkC,MAWlCA,KAXkC,CAa1C,MAAOA,CAAAA,KAAK,CAAGA,KAAK,CAACC,MAAN,CAAaC,GAAb,CAAiB,SAAAC,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAN,CAAYC,OAAZ,CAAoBZ,EAAxB,EAAtB,CAAH,CAAuD,EAAnE,CACD,CAED;;;;;;GAOA,MAAO,SAASa,CAAAA,+BAAT,CAAyChB,OAAzC,CAAkD,gBACpCN,QAAQ,CAAC,CAC1BO,KAAK,CAAEJ,gBADmB,CAE1BK,SAAS,CAAE,CAAEe,KAAK,CAAEjB,OAAO,CAACI,WAAR,EAAT,CAFe,CAAD,CAD4B,yCAC9CK,IAD8C,eAC9CA,IAD8C,CAMvD,GAAI,CAACA,IAAL,CAAW,CACT,MAAO,MAAP,CACD,CAED,MAAOA,CAAAA,IAAI,CAACS,YAAL,CAAkBC,MAAlB,CAA2B,CAAlC,CACD,CAED,MAAO,SAASC,CAAAA,0BAAT,CAAoCpB,OAApC,OAAgE,uBAAjBK,KAAiB,CAAjBA,KAAiB,sBAAT,KAAS,4BACpDX,QAAQ,CAAC,CACxBO,KAAK,CAAEN,+BADiB,CAExBO,SAAS,CAAE,CAAEC,EAAE,CAAEH,OAAO,CAACI,WAAR,EAAN,CAFa,CAGxBC,KAAK,CAALA,KAHwB,CAAD,CAD4C,yCAC9DC,MAD8D,yBAOnDA,MAAM,CAACG,IAAP,EAAe,EAPoC,CAO7DC,KAP6D,OAO7DA,KAP6D,CASrE,MAAOA,CAAAA,KAAK,CAAGA,KAAK,CAACW,YAAN,CAAmB,CAAnB,CAAH,CAA2B,IAAvC,CACD,CAED,MAAO,SAASC,CAAAA,qBAAT,EAAiC,iCACZ5B,QAAQ,CAAC,CACjCO,KAAK,CAAEL,YAD0B,CAAD,CADI,mEAC7Ba,IAD6B,aAC7BA,IAD6B,CACvBD,KADuB,aACvBA,KADuB,CAKtC,MAAO,CAACC,IAAD,SAACA,IAAD,+BAACA,IAAI,CAAEc,MAAP,uCAAC,aAAcJ,MAAf,CAAuBX,KAAvB,CAAP,CACD","sourcesContent":["import { useQuery } from 'urql'\n\nimport { JurorFirstANJActivationMovement } from '../queries/balances'\nimport { ActiveJurors, JurorFeesClaimed } from '../queries/juror'\nimport { JurorDrafts } from '../queries/jurorDrafts'\n\nexport function useJurorDraftQuery(jurorId) {\n  const [result] = useQuery({\n    query: JurorDrafts,\n    variables: { id: jurorId?.toLowerCase() },\n    pause: !jurorId,\n  })\n\n  if (result.fetching || result.error) {\n    return []\n  }\n\n  const { juror } = result.data || {}\n\n  return juror ? juror.drafts.map(draft => draft.round.dispute.id) : []\n}\n\n/**\n * Queries if the juror  by id `jurorId` has ever claimed rewards\n * Rewards can be claimed from two places: Subscriptions fees or Dispute fees (the later includes appeal and juror fees)\n *\n * @param {String} jurorId Address of the juror\n * @returns {Boolean} True if juror has ever claimed rewards\n */\nexport function useJurorRewardsEverClaimedQuery(jurorId) {\n  const [{ data }] = useQuery({\n    query: JurorFeesClaimed,\n    variables: { owner: jurorId.toLowerCase() },\n  })\n\n  if (!data) {\n    return false\n  }\n\n  return data.feeMovements.length > 0\n}\n\nexport function useFirstANJActivationQuery(jurorId, { pause = false }) {\n  const [result] = useQuery({\n    query: JurorFirstANJActivationMovement,\n    variables: { id: jurorId.toLowerCase() },\n    pause,\n  })\n\n  const { juror } = result.data || {}\n\n  return juror ? juror.anjMovements[0] : null\n}\n\nexport function useActiveJurorsNumber() {\n  const [{ data, error }] = useQuery({\n    query: ActiveJurors,\n  })\n\n  return [data?.jurors?.length, error]\n}\n"]},"metadata":{},"sourceType":"module"}