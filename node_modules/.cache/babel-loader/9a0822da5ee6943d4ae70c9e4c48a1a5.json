{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar EventEmitter = require('events');\n\nvar EthereumProvider = require('ethereum-provider');\n\nvar ConnectionManager = require('../ConnectionManager');\n\nvar monitor = function monitor(provider) {\n  function update(status) {\n    provider.status = status;\n    if (provider instanceof EventEmitter) provider.emit('status', status);\n  }\n\n  function check() {\n    return _check.apply(this, arguments);\n  }\n\n  function _check() {\n    _check = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!provider.inSetup) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setTimeout(check, 1000));\n\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return provider.send('eth_syncing');\n\n            case 5:\n              if (!_context.sent) {\n                _context.next = 10;\n                break;\n              }\n\n              update('syncing');\n              setTimeout(function () {\n                return check();\n              }, 5000);\n              _context.next = 11;\n              break;\n\n            case 10:\n              update('connected');\n\n            case 11:\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n              update('disconnected');\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 13]]);\n    }));\n    return _check.apply(this, arguments);\n  }\n\n  update('loading');\n  check();\n  provider.on('connect', function () {\n    return check();\n  });\n  provider.on('close', function () {\n    return update('disconnected');\n  });\n  return provider;\n};\n\nmodule.exports = function (connections, targets, options) {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(function (t) {\n    return t.type;\n  }).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider;\n    return monitor(connections.injected);\n  }\n\n  var provider = new EthereumProvider(new ConnectionManager(connections, targets, options));\n  provider.setMaxListeners(128);\n  return monitor(provider);\n};","map":null,"metadata":{},"sourceType":"script"}