{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = void 0;\n\nvar _ethers = require(\"ethers\"),\n    _token = require(\"./lib/token\"),\n    _formatBN = require(\"./lib/formatBN\"),\n    _default = function _default(provider) {\n  return (\n    /*#__PURE__*/\n\n    /**\n    * Format token amounts taking decimals into account\n    *\n    * @param {string} tokenAddress The address of the token\n    * @param {*} amount The absolute amount for the token quantity (wei)\n    * @param {bool} showSymbol Whether the token symbol will be printed after the amount\n    * @param {*} precision The number of decimal places to format to. If set, the precision is always enforced.\n    * @return {Promise<radspec/evaluator/TypedValue>}\n    */\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(tokenAddress, amount) {\n        var showSymbol,\n            precision,\n            amountBn,\n            fixed,\n            decimals,\n            symbol,\n            token,\n            formattedAmount,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                showSymbol = _args.length > 2 && _args[2] !== undefined ? _args[2] : !0;\n                precision = _args.length > 3 ? _args[3] : undefined;\n                amountBn = _ethers.BigNumber.from(amount), fixed = !!precision;\n\n                if (!(tokenAddress === _token.ETH)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                decimals = _ethers.BigNumber.from(18), showSymbol && (symbol = \"ETH\");\n                _context.next = 33;\n                break;\n\n              case 7:\n                token = new _ethers.ethers.Contract(tokenAddress, _token.ERC20_SYMBOL_DECIMALS_ABI, provider);\n                _context.t0 = _ethers.BigNumber;\n                _context.next = 11;\n                return token.decimals();\n\n              case 11:\n                _context.t1 = _context.sent;\n                decimals = _context.t0.from.call(_context.t0, _context.t1);\n\n                if (!showSymbol) {\n                  _context.next = 33;\n                  break;\n                }\n\n                _context.prev = 14;\n                _context.next = 17;\n                return token.symbol();\n\n              case 17:\n                _context.t2 = _context.sent;\n\n                if (_context.t2) {\n                  _context.next = 20;\n                  break;\n                }\n\n                _context.t2 = \"\";\n\n              case 20:\n                symbol = _context.t2;\n                _context.next = 33;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t3 = _context[\"catch\"](14);\n                token = new _ethers.ethers.Contract(tokenAddress, _token.ERC20_SYMBOL_BYTES32_ABI, provider);\n                _context.next = 28;\n                return token.symbol();\n\n              case 28:\n                _context.t4 = _context.sent;\n\n                if (_context.t4) {\n                  _context.next = 31;\n                  break;\n                }\n\n                _context.t4 = \"\";\n\n              case 31:\n                symbol = _context.t4;\n                symbol = symbol && _ethers.ethers.utils.toUtf8String(symbol);\n\n              case 33:\n                precision = precision || decimals;\n                formattedAmount = (0, _formatBN.formatBN)(amountBn, (0, _formatBN.tenPow)(decimals), +precision, fixed);\n                return _context.abrupt(\"return\", {\n                  type: \"string\",\n                  value: showSymbol ? \"\".concat(formattedAmount, \" \").concat(symbol) : formattedAmount\n                });\n\n              case 36:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[14, 23]]);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}