{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import isIPFS from'is-ipfs';import{defaultIpfsGateway}from'../endpoints';var SPLIT_IPFS_REGEX=/(Qm[a-zA-Z0-9]{44})/;var TEST_IPFS_REGEX=/(Qm[a-zA-Z0-9]{44})/;var REQUEST_TIMEOUT=60000;export var ipfsGet=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(cid){var endpoint,result,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:endpoint=\"\".concat(defaultIpfsGateway,\"/\").concat(cid);_context.prev=1;_context.next=4;return fetch(endpoint,{timeout:REQUEST_TIMEOUT});case 4:result=_context.sent;_context.next=7;return result.text();case 7:data=_context.sent;return _context.abrupt(\"return\",{data:data,error:!result.ok});case 11:_context.prev=11;_context.t0=_context[\"catch\"](1);console.error(\"Error requesting data from IPFS for \".concat(endpoint),_context.t0);return _context.abrupt(\"return\",{error:true});case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,11]]);}));return function ipfsGet(_x){return _ref.apply(this,arguments);};}();export var getIpfsCidFromUri=function getIpfsCidFromUri(string){var ipfsCid=string.replace(/^ipfs:/,'');if(isIPFS.cid(ipfsCid)||isIPFS.cidPath(ipfsCid)){return ipfsCid;}return'';};export function transformIPFSHash(str,callback){return str.split(SPLIT_IPFS_REGEX).map(function(part,index){return callback(part,TEST_IPFS_REGEX.test(part),index);});}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/lib/ipfs-utils.js"],"names":["isIPFS","defaultIpfsGateway","SPLIT_IPFS_REGEX","TEST_IPFS_REGEX","REQUEST_TIMEOUT","ipfsGet","cid","endpoint","fetch","timeout","result","text","data","error","ok","console","getIpfsCidFromUri","string","ipfsCid","replace","cidPath","transformIPFSHash","str","callback","split","map","part","index","test"],"mappings":"qPAAA,MAAOA,CAAAA,MAAP,KAAmB,SAAnB,CACA,OAASC,kBAAT,KAAmC,cAAnC,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,qBAAzB,CACA,GAAMC,CAAAA,eAAe,CAAG,qBAAxB,CAEA,GAAMC,CAAAA,eAAe,CAAG,KAAxB,CAEA,MAAO,IAAMC,CAAAA,OAAO,0FAAG,iBAAMC,GAAN,2IACfC,QADe,WACDN,kBADC,aACqBK,GADrB,wCAGEE,CAAAA,KAAK,CAACD,QAAD,CAAW,CAAEE,OAAO,CAAEL,eAAX,CAAX,CAHP,QAGbM,MAHa,qCAIAA,CAAAA,MAAM,CAACC,IAAP,EAJA,QAIbC,IAJa,+CAMZ,CAAEA,IAAI,CAAJA,IAAF,CAAQC,KAAK,CAAE,CAACH,MAAM,CAACI,EAAvB,CANY,4DAQnBC,OAAO,CAACF,KAAR,+CAAqDN,QAArD,eARmB,gCASZ,CAAEM,KAAK,CAAE,IAAT,CATY,uEAAH,kBAAPR,CAAAA,OAAO,4CAAb,CAaP,MAAO,IAAMW,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,MAAM,CAAI,CACzC,GAAMC,CAAAA,OAAO,CAAGD,MAAM,CAACE,OAAP,CAAe,QAAf,CAAyB,EAAzB,CAAhB,CAEA,GAAInB,MAAM,CAACM,GAAP,CAAWY,OAAX,GAAuBlB,MAAM,CAACoB,OAAP,CAAeF,OAAf,CAA3B,CAAoD,CAClD,MAAOA,CAAAA,OAAP,CACD,CACD,MAAO,EAAP,CACD,CAPM,CASP,MAAO,SAASG,CAAAA,iBAAT,CAA2BC,GAA3B,CAAgCC,QAAhC,CAA0C,CAC/C,MAAOD,CAAAA,GAAG,CACPE,KADI,CACEtB,gBADF,EAEJuB,GAFI,CAEA,SAACC,IAAD,CAAOC,KAAP,QAAiBJ,CAAAA,QAAQ,CAACG,IAAD,CAAOvB,eAAe,CAACyB,IAAhB,CAAqBF,IAArB,CAAP,CAAmCC,KAAnC,CAAzB,EAFA,CAAP,CAGD","sourcesContent":["import isIPFS from 'is-ipfs'\nimport { defaultIpfsGateway } from '../endpoints'\n\nconst SPLIT_IPFS_REGEX = /(Qm[a-zA-Z0-9]{44})/\nconst TEST_IPFS_REGEX = /(Qm[a-zA-Z0-9]{44})/\n\nconst REQUEST_TIMEOUT = 60000\n\nexport const ipfsGet = async cid => {\n  const endpoint = `${defaultIpfsGateway}/${cid}`\n  try {\n    const result = await fetch(endpoint, { timeout: REQUEST_TIMEOUT })\n    const data = await result.text()\n\n    return { data, error: !result.ok }\n  } catch (err) {\n    console.error(`Error requesting data from IPFS for ${endpoint}`, err)\n    return { error: true }\n  }\n}\n\nexport const getIpfsCidFromUri = string => {\n  const ipfsCid = string.replace(/^ipfs:/, '')\n\n  if (isIPFS.cid(ipfsCid) || isIPFS.cidPath(ipfsCid)) {\n    return ipfsCid\n  }\n  return ''\n}\n\nexport function transformIPFSHash(str, callback) {\n  return str\n    .split(SPLIT_IPFS_REGEX)\n    .map((part, index) => callback(part, TEST_IPFS_REGEX.test(part), index))\n}\n"]},"metadata":{},"sourceType":"module"}