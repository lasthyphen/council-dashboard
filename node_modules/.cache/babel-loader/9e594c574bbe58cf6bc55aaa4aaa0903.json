{"ast":null,"code":"import { courtServerEndpoint } from '../endpoints';\nimport { getVoteId, hashPassword } from '../utils/crvoting-utils';\nconst COURT_SERVER_ENDPOINT = courtServerEndpoint();\nexport async function requestAutoReveal(juror, disputeId, roundId, outcome, password) {\n  const voteId = getVoteId(disputeId, roundId).toString();\n  const salt = hashPassword(password);\n\n  try {\n    const rawResponse = await fetch(`${COURT_SERVER_ENDPOINT}/reveals`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        juror: juror.toLowerCase(),\n        voteId,\n        outcome: outcome.toString(),\n        salt\n      })\n    });\n\n    if (rawResponse.ok) {\n      return;\n    }\n\n    const response = await rawResponse.json();\n    const errors = response.errors.map(err => Object.values(err).join(', ')).join(', ');\n    throw new Error(`Failed to request auto-reveal service due to errors: ${errors}`);\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n}\nexport async function getAutoRevealRequest(juror, disputeId, roundId) {\n  const voteId = getVoteId(disputeId, roundId).toString();\n\n  try {\n    const rawResponse = await fetch(`${COURT_SERVER_ENDPOINT}/reveals/${juror}/${voteId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (rawResponse.ok) {\n      const {\n        reveal\n      } = await rawResponse.json();\n      return reveal;\n    }\n\n    return null;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/services/autoReveal.js"],"names":["courtServerEndpoint","getVoteId","hashPassword","COURT_SERVER_ENDPOINT","requestAutoReveal","juror","disputeId","roundId","outcome","password","voteId","toString","salt","rawResponse","fetch","method","headers","body","JSON","stringify","toLowerCase","ok","response","json","errors","map","err","Object","values","join","Error","console","error","getAutoRevealRequest","reveal"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,cAApC;AACA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,yBAAxC;AAEA,MAAMC,qBAAqB,GAAGH,mBAAmB,EAAjD;AAEA,OAAO,eAAeI,iBAAf,CACLC,KADK,EAELC,SAFK,EAGLC,OAHK,EAILC,OAJK,EAKLC,QALK,EAML;AACA,QAAMC,MAAM,GAAGT,SAAS,CAACK,SAAD,EAAYC,OAAZ,CAAT,CAA8BI,QAA9B,EAAf;AACA,QAAMC,IAAI,GAAGV,YAAY,CAACO,QAAD,CAAzB;;AAEA,MAAI;AACF,UAAMI,WAAW,GAAG,MAAMC,KAAK,CAAE,GAAEX,qBAAsB,UAA1B,EAAqC;AAClEY,MAAAA,MAAM,EAAE,MAD0D;AAElEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFyD;AAGlEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBd,QAAAA,KAAK,EAAEA,KAAK,CAACe,WAAN,EADY;AAEnBV,QAAAA,MAFmB;AAGnBF,QAAAA,OAAO,EAAEA,OAAO,CAACG,QAAR,EAHU;AAInBC,QAAAA;AAJmB,OAAf;AAH4D,KAArC,CAA/B;;AAWA,QAAIC,WAAW,CAACQ,EAAhB,EAAoB;AAClB;AACD;;AAED,UAAMC,QAAQ,GAAG,MAAMT,WAAW,CAACU,IAAZ,EAAvB;AACA,UAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAT,CACZC,GADY,CACRC,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcF,GAAd,EAAmBG,IAAnB,CAAwB,IAAxB,CADC,EAEZA,IAFY,CAEP,IAFO,CAAf;AAIA,UAAM,IAAIC,KAAJ,CACH,wDAAuDN,MAAO,EAD3D,CAAN;AAGD,GAxBD,CAwBE,OAAOE,GAAP,EAAY;AACZK,IAAAA,OAAO,CAACC,KAAR,CAAcN,GAAd;AACA,UAAMA,GAAN;AACD;AACF;AAED,OAAO,eAAeO,oBAAf,CAAoC5B,KAApC,EAA2CC,SAA3C,EAAsDC,OAAtD,EAA+D;AACpE,QAAMG,MAAM,GAAGT,SAAS,CAACK,SAAD,EAAYC,OAAZ,CAAT,CAA8BI,QAA9B,EAAf;;AAEA,MAAI;AACF,UAAME,WAAW,GAAG,MAAMC,KAAK,CAC5B,GAAEX,qBAAsB,YAAWE,KAAM,IAAGK,MAAO,EADvB,EAE7B;AACEK,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFX,KAF6B,CAA/B;;AAQA,QAAIH,WAAW,CAACQ,EAAhB,EAAoB;AAClB,YAAM;AAAEa,QAAAA;AAAF,UAAa,MAAMrB,WAAW,CAACU,IAAZ,EAAzB;AACA,aAAOW,MAAP;AACD;;AAED,WAAO,IAAP;AACD,GAfD,CAeE,OAAOR,GAAP,EAAY;AACZK,IAAAA,OAAO,CAACC,KAAR,CAAcN,GAAd;AACA,UAAMA,GAAN;AACD;AACF","sourcesContent":["import { courtServerEndpoint } from '../endpoints'\nimport { getVoteId, hashPassword } from '../utils/crvoting-utils'\n\nconst COURT_SERVER_ENDPOINT = courtServerEndpoint()\n\nexport async function requestAutoReveal(\n  juror,\n  disputeId,\n  roundId,\n  outcome,\n  password\n) {\n  const voteId = getVoteId(disputeId, roundId).toString()\n  const salt = hashPassword(password)\n\n  try {\n    const rawResponse = await fetch(`${COURT_SERVER_ENDPOINT}/reveals`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        juror: juror.toLowerCase(),\n        voteId,\n        outcome: outcome.toString(),\n        salt,\n      }),\n    })\n\n    if (rawResponse.ok) {\n      return\n    }\n\n    const response = await rawResponse.json()\n    const errors = response.errors\n      .map(err => Object.values(err).join(', '))\n      .join(', ')\n\n    throw new Error(\n      `Failed to request auto-reveal service due to errors: ${errors}`\n    )\n  } catch (err) {\n    console.error(err)\n    throw err\n  }\n}\n\nexport async function getAutoRevealRequest(juror, disputeId, roundId) {\n  const voteId = getVoteId(disputeId, roundId).toString()\n\n  try {\n    const rawResponse = await fetch(\n      `${COURT_SERVER_ENDPOINT}/reveals/${juror}/${voteId}`,\n      {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      }\n    )\n\n    if (rawResponse.ok) {\n      const { reveal } = await rawResponse.json()\n      return reveal\n    }\n\n    return null\n  } catch (err) {\n    console.error(err)\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"module"}