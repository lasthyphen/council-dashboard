{"ast":null,"code":"import { ethers } from 'ethers';\nimport { getApmInternalAppInfo, getAragonOsInternalAppInfo, hasAppInfo } from './overrides/index';\nimport { DEFAULT_IPFS_GATEWAY } from '../params';\nexport function parseMetadata(name, metadata) {\n  try {\n    return JSON.parse(metadata);\n  } catch (error) {\n    throw new Error(`Can't parse ${name} file, invalid JSON.`);\n  }\n}\nexport async function fetchMetadata(fileName, contentUri) {\n  const contentHashRegEx = contentUri.match(/ipfs:(.*)/);\n\n  if (contentHashRegEx) {\n    const url = `${DEFAULT_IPFS_GATEWAY}/ipfs/${contentHashRegEx[1]}/${fileName}`;\n    let metadata;\n\n    try {\n      metadata = await ethers.utils.fetchJson(url);\n    } catch (error) {\n      throw new Error(`Can't fetch ${url}, failed with error: {error}.`);\n    }\n\n    return metadata;\n  }\n\n  return {};\n}\nexport async function resolveMetadata(fileName, contentUri, metadata) {\n  if (metadata) {\n    return parseMetadata(fileName, metadata);\n  }\n\n  if (contentUri) {\n    return fetchMetadata(fileName, contentUri);\n  }\n\n  return {};\n}\nexport async function resolveManifest(data) {\n  return resolveMetadata('manifest.json', data.contentUri, data.manifest);\n}\nexport async function resolveArtifact(data) {\n  if (hasAppInfo(data.appId, 'apm')) {\n    return getApmInternalAppInfo(data.appId);\n  }\n\n  if (hasAppInfo(data.appId, 'aragon')) {\n    return getAragonOsInternalAppInfo(data.appId);\n  }\n\n  return resolveMetadata('artifact.json', data.contentUri, data.artifact);\n}","map":null,"metadata":{},"sourceType":"module"}