{"ast":null,"code":"import { addressesEqual, ANY_ENTITY } from '../address';\nimport { getKernelNamespace } from '../kernel';\n/**\n * Look for known addresses and roles in a radspec description and substitute them with a human string\n *\n * @param  {string} description\n * @return {Promise<Object>} Description and annotated description\n */\n\nexport async function postprocessRadspecDescription(description, apps) {\n  const addressRegexStr = '0x[a-fA-F0-9]{40}';\n  const addressRegex = new RegExp(`^${addressRegexStr}$`);\n  const bytes32RegexStr = '0x[a-f0-9]{64}';\n  const bytes32Regex = new RegExp(`^${bytes32RegexStr}$`);\n  const combinedRegex = new RegExp(`\\\\b(${addressRegexStr}|${bytes32RegexStr})\\\\b`);\n  const tokens = description.split(combinedRegex).map(token => token.trim()).filter(token => token);\n\n  if (tokens.length < 1) {\n    return {\n      description\n    };\n  }\n\n  const roles = [];\n\n  for (const app of apps) {\n    const appRoles = await app.roles();\n    roles.concat(appRoles);\n  }\n\n  const annotateAddress = input => {\n    if (addressesEqual(input, ANY_ENTITY)) {\n      return [input, '\"Any account\"', {\n        type: 'any-account',\n        value: ANY_ENTITY\n      }];\n    }\n\n    const app = apps.find(({\n      address\n    }) => addressesEqual(address, input));\n\n    if (app) {\n      const replacement = `${app.name}${app.appId ? ` (${app.appId})` : ''}`;\n      return [input, `“${replacement}”`, {\n        type: 'app',\n        value: app\n      }];\n    }\n\n    return [input, input, {\n      type: 'address',\n      value: input\n    }];\n  };\n\n  const annotateBytes32 = input => {\n    const role = roles.find(({\n      hash\n    }) => hash === input);\n\n    if (role && role.name) {\n      return [input, `“${role.name}”`, {\n        type: 'role',\n        value: role\n      }];\n    }\n\n    const app = apps.find(({\n      appId\n    }) => appId === input);\n\n    if (app) {\n      // return the entire app as it contains APM package details\n      return [input, `“${app.appName}”`, {\n        type: 'apmPackage',\n        value: app\n      }];\n    }\n\n    const namespace = getKernelNamespace(input);\n\n    if (namespace) {\n      return [input, `“${namespace.name}”`, {\n        type: 'kernelNamespace',\n        value: namespace\n      }];\n    }\n\n    return [input, input, {\n      type: 'bytes32',\n      value: input\n    }];\n  };\n\n  const annotateText = input => {\n    return [input, input, {\n      type: 'text',\n      value: input\n    }];\n  };\n\n  const annotatedTokens = tokens.map(token => {\n    if (addressRegex.test(token)) {\n      return annotateAddress(token);\n    }\n\n    if (bytes32Regex.test(token)) {\n      return annotateBytes32(token);\n    }\n\n    return annotateText(token);\n  });\n  const compiled = annotatedTokens.reduce( // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  (acc, [_, replacement, annotation]) => {\n    acc.description.push(replacement);\n    acc.annotatedDescription.push(annotation);\n    return acc;\n  }, {\n    annotatedDescription: [],\n    description: []\n  });\n  return {\n    annotatedDescription: compiled.annotatedDescription,\n    description: compiled.description.join(' ')\n  };\n}","map":null,"metadata":{},"sourceType":"module"}