{"ast":null,"code":"import _toConsumableArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useMemo}from'react';import{useQuery}from'urql';import{useCourtConfig}from'../providers/CourtConfig';// queries\nimport{OpenTasks}from'../queries/tasks';import{CourtConfig,FeeMovements,JurorsRegistryModule}from'../queries/court';import{AllDisputes,SingleDispute}from'../queries/disputes';import{AppealsByMaker,AppealsByTaker}from'../queries/appeals';import{JurorANJBalances,JurorANJWalletBalance,JurorTreasuryBalances}from'../queries/balances';import{JurorDraftsFrom,JurorDraftsRewards}from'../queries/jurorDrafts';// utils\nimport{bigNum}from'../lib/math-utils';import{dayjs,toMs}from'../utils/date-utils';import{groupMovements}from'../utils/anj-movement-utils';import{transformAppealDataAttributes}from'../utils/appeal-utils';import{transformRoundDataAttributes,transformDisputeDataAttributes}from'../utils/dispute-utils';import{transformJurorDataAttributes}from'../utils/juror-draft-utils';import{transformClaimedFeesDataAttributes}from'../utils/subscription-utils';import{getModuleAddress,transformCourtConfigDataAttributes}from'../utils/court-utils';// types\nimport{CourtModuleType}from'../types/court-module-types';import{JurorLastFeeWithdrawal}from'../queries/juror';var NO_AMOUNT=bigNum(0);function useQuerySub(query){var variables=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};return useQuery(_objectSpread({query:query,variables:variables,requestPolicy:'cache-and-network',pollInterval:13*1000},options));}// Subscription to get juror's wallet balance\nfunction useANJBalance(jurorId){var _useQuerySub=useQuerySub(JurorANJWalletBalance,{id:jurorId.toLowerCase()}),_useQuerySub2=_slicedToArray(_useQuerySub,1),_useQuerySub2$=_useQuerySub2[0],data=_useQuerySub2$.data,error=_useQuerySub2$.error;return{data:data,error:error};}// Subscription to get juror's active, inactive and\n// locked balances and all 24 hrs movements\nfunction useJuror(jurorId){// get 24hs from current time (seconds)\nvar yesterday=dayjs().subtract(1,'day').unix();var _useQuerySub3=useQuerySub(JurorANJBalances,{id:jurorId.toLowerCase(),from:yesterday}),_useQuerySub4=_slicedToArray(_useQuerySub3,1),_useQuerySub4$=_useQuerySub4[0],data=_useQuerySub4$.data,error=_useQuerySub4$.error;return{data:data,error:error};}// Subscription to get all treasury balances of juror with id `jurorId`\nfunction useJurorTreasuryBalances(jurorId){var _useQuerySub5=useQuerySub(JurorTreasuryBalances,{owner:jurorId.toLowerCase()}),_useQuerySub6=_slicedToArray(_useQuerySub5,1),_useQuerySub6$=_useQuerySub6[0],data=_useQuerySub6$.data,error=_useQuerySub6$.error;return{data:data,error:error};}/**\n * Subscribes to all juror balances as well as to the latest 24h movements and all subscription fees claimed by the juror\n * @param {String} jurorId Address of the juror\n * @returns {Object} Object containing al juror balances (Wallet, Inactive, Active, Locked, Deactivation Process, Treasury),\n * latest 24h movements and all subscription fees claimed by the juror\n */export function useJurorBalancesSubscription(jurorId){// Juror wallet balance\nvar _useANJBalance=useANJBalance(jurorId),anjBalanceData=_useANJBalance.data,anjBalanceError=_useANJBalance.error;// Juror ANJ balances, 24h movements and subscritpion claimed fees\nvar _useJuror=useJuror(jurorId),jurorData=_useJuror.data,jurorError=_useJuror.error;var _useJurorTreasuryBala=useJurorTreasuryBalances(jurorId),treasuryBalancesData=_useJurorTreasuryBala.data,treasuryBalancesError=_useJurorTreasuryBala.error;var errors=[anjBalanceError,jurorError,treasuryBalancesError].filter(function(err){return err;});var _useMemo=useMemo(function(){// Means it's still fetching\nif(!jurorData||!anjBalanceData||!treasuryBalancesData){return{};}// If the account doesn't hold any ANJ we set 0 as default\nvar _ref=anjBalanceData.anjbalance||{},_ref$amount=_ref.amount,walletBalance=_ref$amount===void 0?NO_AMOUNT:_ref$amount;// If the juror is null then means that the connnected account is not a juror but we are already done fetching\n// We set 0 as default values\nvar _ref2=jurorData.juror||{},_ref2$activeBalance=_ref2.activeBalance,activeBalance=_ref2$activeBalance===void 0?NO_AMOUNT:_ref2$activeBalance,_ref2$anjMovements=_ref2.anjMovements,anjMovements=_ref2$anjMovements===void 0?[]:_ref2$anjMovements,_ref2$availableBalanc=_ref2.availableBalance,availableBalance=_ref2$availableBalanc===void 0?NO_AMOUNT:_ref2$availableBalanc,_ref2$claimedSubscrip=_ref2.claimedSubscriptionFees,claimedSubscriptionFees=_ref2$claimedSubscrip===void 0?[]:_ref2$claimedSubscrip,_ref2$deactivationBal=_ref2.deactivationBalance,deactivationBalance=_ref2$deactivationBal===void 0?NO_AMOUNT:_ref2$deactivationBal,_ref2$lockedBalance=_ref2.lockedBalance,lockedBalance=_ref2$lockedBalance===void 0?NO_AMOUNT:_ref2$lockedBalance;var _ref3=treasuryBalancesData||{},_ref3$treasuryBalance=_ref3.treasuryBalances,treasuryBalances=_ref3$treasuryBalance===void 0?[]:_ref3$treasuryBalance;return{anjBalances:{activeBalance:bigNum(activeBalance),deactivationBalance:bigNum(deactivationBalance),inactiveBalance:bigNum(availableBalance),lockedBalance:bigNum(lockedBalance),walletBalance:bigNum(walletBalance)},anjMovements:groupMovements(anjMovements),claimedSubscriptionFees:claimedSubscriptionFees.map(transformClaimedFeesDataAttributes),treasury:treasuryBalances.map(function(balance){return _objectSpread({},balance,{amount:bigNum(balance.amount)});})};},[anjBalanceData,jurorData,treasuryBalancesData]),anjBalances=_useMemo.anjBalances,anjMovements=_useMemo.anjMovements,claimedSubscriptionFees=_useMemo.claimedSubscriptionFees,treasury=_useMemo.treasury;return{anjBalances:anjBalances,anjMovements:anjMovements,claimedSubscriptionFees:claimedSubscriptionFees,treasury:treasury,fetching:!anjBalances&&errors.length===0,errors:errors};}/**\n * Subscribes to the court configuration data\n * @param {String} courtAddress Adrress of the court contract\n * @returns {Object} Court configuration data\n */export function useCourtConfigSubscription(courtAddress){var _useQuerySub7=useQuerySub(CourtConfig,{id:courtAddress.toLowerCase()}),_useQuerySub8=_slicedToArray(_useQuerySub7,1),data=_useQuerySub8[0].data;// TODO: handle possible errors\nvar courtConfig=useMemo(function(){return(data===null||data===void 0?void 0:data.courtConfig)?transformCourtConfigDataAttributes(data.courtConfig):null;},[data]);return courtConfig;}/**\n * Subscribes to the dispute with id == `id`\n * @param {String} id Id of the dispute\n * @returns {Object} Dispute by `id`\n */export function useSingleDisputeSubscription(id){var _useQuerySub9=useQuerySub(SingleDispute,{id:id}),_useQuerySub10=_slicedToArray(_useQuerySub9,1),_useQuerySub10$=_useQuerySub10[0],data=_useQuerySub10$.data,error=_useQuerySub10$.error;var dispute=useMemo(function(){return data&&data.dispute?transformDisputeDataAttributes(data.dispute):null;},[data]);return{dispute:dispute,fetching:!data&&!error,error:error};}/**\n * Subscribes to all existing disputes on the court\n * @returns {Object} All disputes\n */export function useDisputesSubscription(){var courtConfig=useCourtConfig();var _useQuerySub11=useQuerySub(AllDisputes),_useQuerySub12=_slicedToArray(_useQuerySub11,1),_useQuerySub12$=_useQuerySub12[0],data=_useQuerySub12$.data,error=_useQuerySub12$.error;var disputes=useMemo(function(){return(data===null||data===void 0?void 0:data.disputes)?data.disputes.map(function(dispute){return transformDisputeDataAttributes(dispute,courtConfig);}):null;},[courtConfig,data]);return{disputes:disputes,fetching:!data&&!error,error:error};}/**\n * Subscribe to all `jurorId` drafts for the current term\n * @param {String} jurorId Address of the juror\n * @param {Number} termStartTime Start time of the term inseconds\n * @param {Boolean} pause Tells whether to pause the subscription or not\n * @returns {Object} All `jurorId` drafts for the current term\n */export function useCurrentTermJurorDraftsSubscription(jurorId,termStartTime,pause){var _useQuerySub13=useQuerySub(JurorDraftsFrom,{id:jurorId.toLowerCase(),from:termStartTime},{pause:pause}),_useQuerySub14=_slicedToArray(_useQuerySub13,1),result=_useQuerySub14[0];var _ref4=result.data||{},juror=_ref4.juror;return juror&&juror.drafts?juror.drafts:[];}/**\n * Subscribes to all `jurorId` drafts\n * @dev This subscription is useful to get all rewards pending for claiming as well\n * as for the amount of locked ANJ a juror has per dispute\n * Ideally we would check that the round is not settled but we cannot do nested filters for now\n *\n * @param {String} jurorId Address of the juror\n * @returns {Object} All `jurorId` drafts\n */export function useJurorDraftsRewardsSubscription(jurorId){var _useQuerySub15=useQuerySub(JurorDraftsRewards,{id:jurorId.toLowerCase()}),_useQuerySub16=_slicedToArray(_useQuerySub15,1),_useQuerySub16$=_useQuerySub16[0],data=_useQuerySub16$.data,error=_useQuerySub16$.error;var jurorDrafts=useMemo(function(){var _data$juror;if(!data){return null;}return((_data$juror=data.juror)===null||_data$juror===void 0?void 0:_data$juror.drafts.map(transformJurorDataAttributes))||[];},[data]);return{jurorDrafts:jurorDrafts,fetching:!jurorDrafts&&!error,error:error};}function useAppealsByMaker(jurorId){var _useQuerySub17=useQuerySub(AppealsByMaker,{maker:jurorId.toLowerCase()}),_useQuerySub18=_slicedToArray(_useQuerySub17,1),_useQuerySub18$=_useQuerySub18[0],data=_useQuerySub18$.data,error=_useQuerySub18$.error;return{data:data,error:error};}function useAppealsByTaker(jurorId){var _useQuerySub19=useQuerySub(AppealsByTaker,{taker:jurorId.toLowerCase()}),_useQuerySub20=_slicedToArray(_useQuerySub19,1),_useQuerySub20$=_useQuerySub20[0],data=_useQuerySub20$.data,error=_useQuerySub20$.error;return{data:data,error:error};}/**\n * Subscribes to all `jurorId` appeal collaterals\n * @dev Since we cannot do or operators on graphql queries, we need to get appeals by taker and maker separately\n *\n * @param {String} jurorId Address of the juror\n * @returns {Object} All `jurorId` appeal collaterals\n */export function useAppealsByUserSubscription(jurorId){var _useAppealsByMaker=useAppealsByMaker(jurorId),makerAppealsData=_useAppealsByMaker.data,makerAppealsError=_useAppealsByMaker.error;var _useAppealsByTaker=useAppealsByTaker(jurorId),takerAppealsData=_useAppealsByTaker.data,takerAppealsError=_useAppealsByTaker.error;var appeals=useMemo(function(){if(!makerAppealsData||!takerAppealsData){return null;}var makerAppeals=makerAppealsData.appeals;var takerAppeals=takerAppealsData.appeals;return[].concat(_toConsumableArray(makerAppeals),_toConsumableArray(takerAppeals)).map(transformAppealDataAttributes);},[makerAppealsData,takerAppealsData]);var errors=[makerAppealsError,takerAppealsError].filter(function(err){return err;});return{appeals:appeals,fetching:!appeals&&errors.length===0,errors:errors};}export function useTasksSubscription(){// 1- Committing, 4-Confirming Appeal , 5- Ended\nvar subscriptionVariables={state:[1,4]};var _useQuerySub21=useQuerySub(OpenTasks,subscriptionVariables),_useQuerySub22=_slicedToArray(_useQuerySub21,1),_useQuerySub22$=_useQuerySub22[0],data=_useQuerySub22$.data,error=_useQuerySub22$.error;var tasks=(data===null||data===void 0?void 0:data.adjudicationRounds.map(transformRoundDataAttributes))||null;return{tasks:tasks,fetching:!data&&!error,error:error};}export function useJurorRegistrySubscription(){var _useCourtConfig=useCourtConfig(),modules=_useCourtConfig.modules;var jurorRegistryAddress=getModuleAddress(modules,CourtModuleType.JurorsRegistry);var _useQuerySub23=useQuerySub(JurorsRegistryModule,{id:jurorRegistryAddress}),_useQuerySub24=_slicedToArray(_useQuerySub23,1),_useQuerySub24$=_useQuerySub24[0],data=_useQuerySub24$.data,error=_useQuerySub24$.error;var jurorRegistryStats=(data===null||data===void 0?void 0:data.jurorsRegistryModule)||null;return{data:jurorRegistryStats,error:error};}export function useTotalRewardsSubscription(){var _useQuerySub25=useQuerySub(FeeMovements),_useQuerySub26=_slicedToArray(_useQuerySub25,1),_useQuerySub26$=_useQuerySub26[0],data=_useQuerySub26$.data,error=_useQuerySub26$.error;var rewards=(data===null||data===void 0?void 0:data.feeMovements)||null;return{data:rewards,error:error};}/**\n * Queries for the last withdrawal fee movement time made by the given juror\n * @param {String} jurorId Address of the juror\n * @returns {Number} Juror's last withdrawal fee movement date in unix time\n */export function useJurorLastWithdrawalTimeSubscription(jurorId){var _useQuerySub27=useQuerySub(JurorLastFeeWithdrawal,{owner:jurorId===null||jurorId===void 0?void 0:jurorId.toLowerCase()},{pause:!jurorId}),_useQuerySub28=_slicedToArray(_useQuerySub27,1),data=_useQuerySub28[0].data;if(!data){return null;}if(data.feeMovements.length===0){return-1;}return toMs(data.feeMovements[0].createdAt);}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/subscription-hooks.js"],"names":["useMemo","useQuery","useCourtConfig","OpenTasks","CourtConfig","FeeMovements","JurorsRegistryModule","AllDisputes","SingleDispute","AppealsByMaker","AppealsByTaker","JurorANJBalances","JurorANJWalletBalance","JurorTreasuryBalances","JurorDraftsFrom","JurorDraftsRewards","bigNum","dayjs","toMs","groupMovements","transformAppealDataAttributes","transformRoundDataAttributes","transformDisputeDataAttributes","transformJurorDataAttributes","transformClaimedFeesDataAttributes","getModuleAddress","transformCourtConfigDataAttributes","CourtModuleType","JurorLastFeeWithdrawal","NO_AMOUNT","useQuerySub","query","variables","options","requestPolicy","pollInterval","useANJBalance","jurorId","id","toLowerCase","data","error","useJuror","yesterday","subtract","unix","from","useJurorTreasuryBalances","owner","useJurorBalancesSubscription","anjBalanceData","anjBalanceError","jurorData","jurorError","treasuryBalancesData","treasuryBalancesError","errors","filter","err","anjbalance","amount","walletBalance","juror","activeBalance","anjMovements","availableBalance","claimedSubscriptionFees","deactivationBalance","lockedBalance","treasuryBalances","anjBalances","inactiveBalance","map","treasury","balance","fetching","length","useCourtConfigSubscription","courtAddress","courtConfig","useSingleDisputeSubscription","dispute","useDisputesSubscription","disputes","useCurrentTermJurorDraftsSubscription","termStartTime","pause","result","drafts","useJurorDraftsRewardsSubscription","jurorDrafts","useAppealsByMaker","maker","useAppealsByTaker","taker","useAppealsByUserSubscription","makerAppealsData","makerAppealsError","takerAppealsData","takerAppealsError","appeals","makerAppeals","takerAppeals","useTasksSubscription","subscriptionVariables","state","tasks","adjudicationRounds","useJurorRegistrySubscription","modules","jurorRegistryAddress","JurorsRegistry","jurorRegistryStats","jurorsRegistryModule","useTotalRewardsSubscription","rewards","feeMovements","useJurorLastWithdrawalTimeSubscription","createdAt"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\nimport { useQuery } from 'urql'\nimport { useCourtConfig } from '../providers/CourtConfig'\n\n// queries\nimport { OpenTasks } from '../queries/tasks'\nimport {\n  CourtConfig,\n  FeeMovements,\n  JurorsRegistryModule,\n} from '../queries/court'\nimport { AllDisputes, SingleDispute } from '../queries/disputes'\nimport { AppealsByMaker, AppealsByTaker } from '../queries/appeals'\nimport {\n  JurorANJBalances,\n  JurorANJWalletBalance,\n  JurorTreasuryBalances,\n} from '../queries/balances'\nimport { JurorDraftsFrom, JurorDraftsRewards } from '../queries/jurorDrafts'\n\n// utils\nimport { bigNum } from '../lib/math-utils'\nimport { dayjs, toMs } from '../utils/date-utils'\nimport { groupMovements } from '../utils/anj-movement-utils'\nimport { transformAppealDataAttributes } from '../utils/appeal-utils'\nimport {\n  transformRoundDataAttributes,\n  transformDisputeDataAttributes,\n} from '../utils/dispute-utils'\nimport { transformJurorDataAttributes } from '../utils/juror-draft-utils'\nimport { transformClaimedFeesDataAttributes } from '../utils/subscription-utils'\nimport {\n  getModuleAddress,\n  transformCourtConfigDataAttributes,\n} from '../utils/court-utils'\n\n// types\nimport { CourtModuleType } from '../types/court-module-types'\nimport { JurorLastFeeWithdrawal } from '../queries/juror'\n\nconst NO_AMOUNT = bigNum(0)\n\nfunction useQuerySub(query, variables = {}, options = {}) {\n  return useQuery({\n    query: query,\n    variables: variables,\n    requestPolicy: 'cache-and-network',\n    pollInterval: 13 * 1000,\n    ...options,\n  })\n}\n\n// Subscription to get juror's wallet balance\nfunction useANJBalance(jurorId) {\n  const [{ data, error }] = useQuerySub(JurorANJWalletBalance, {\n    id: jurorId.toLowerCase(),\n  })\n  return { data, error }\n}\n\n// Subscription to get juror's active, inactive and\n// locked balances and all 24 hrs movements\nfunction useJuror(jurorId) {\n  // get 24hs from current time (seconds)\n  const yesterday = dayjs()\n    .subtract(1, 'day')\n    .unix()\n\n  const [{ data, error }] = useQuerySub(JurorANJBalances, {\n    id: jurorId.toLowerCase(),\n    from: yesterday,\n  })\n\n  return { data, error }\n}\n\n// Subscription to get all treasury balances of juror with id `jurorId`\nfunction useJurorTreasuryBalances(jurorId) {\n  const [{ data, error }] = useQuerySub(JurorTreasuryBalances, {\n    owner: jurorId.toLowerCase(),\n  })\n  return { data, error }\n}\n\n/**\n * Subscribes to all juror balances as well as to the latest 24h movements and all subscription fees claimed by the juror\n * @param {String} jurorId Address of the juror\n * @returns {Object} Object containing al juror balances (Wallet, Inactive, Active, Locked, Deactivation Process, Treasury),\n * latest 24h movements and all subscription fees claimed by the juror\n */\nexport function useJurorBalancesSubscription(jurorId) {\n  // Juror wallet balance\n  const { data: anjBalanceData, error: anjBalanceError } = useANJBalance(\n    jurorId\n  )\n\n  // Juror ANJ balances, 24h movements and subscritpion claimed fees\n  const { data: jurorData, error: jurorError } = useJuror(jurorId)\n  const {\n    data: treasuryBalancesData,\n    error: treasuryBalancesError,\n  } = useJurorTreasuryBalances(jurorId)\n\n  const errors = [anjBalanceError, jurorError, treasuryBalancesError].filter(\n    err => err\n  )\n\n  const {\n    anjBalances,\n    anjMovements,\n    claimedSubscriptionFees,\n    treasury,\n  } = useMemo(() => {\n    // Means it's still fetching\n    if (!jurorData || !anjBalanceData || !treasuryBalancesData) {\n      return {}\n    }\n\n    // If the account doesn't hold any ANJ we set 0 as default\n    const { amount: walletBalance = NO_AMOUNT } =\n      anjBalanceData.anjbalance || {}\n\n    // If the juror is null then means that the connnected account is not a juror but we are already done fetching\n    // We set 0 as default values\n    const {\n      activeBalance = NO_AMOUNT,\n      anjMovements = [],\n      availableBalance = NO_AMOUNT,\n      claimedSubscriptionFees = [],\n      deactivationBalance = NO_AMOUNT,\n      lockedBalance = NO_AMOUNT,\n    } = jurorData.juror || {}\n\n    const { treasuryBalances = [] } = treasuryBalancesData || {}\n\n    return {\n      anjBalances: {\n        activeBalance: bigNum(activeBalance),\n        deactivationBalance: bigNum(deactivationBalance),\n        inactiveBalance: bigNum(availableBalance),\n        lockedBalance: bigNum(lockedBalance),\n        walletBalance: bigNum(walletBalance),\n      },\n      anjMovements: groupMovements(anjMovements),\n      claimedSubscriptionFees: claimedSubscriptionFees.map(\n        transformClaimedFeesDataAttributes\n      ),\n      treasury: treasuryBalances.map(balance => ({\n        ...balance,\n        amount: bigNum(balance.amount),\n      })),\n    }\n  }, [anjBalanceData, jurorData, treasuryBalancesData])\n\n  return {\n    anjBalances,\n    anjMovements,\n    claimedSubscriptionFees,\n    treasury,\n    fetching: !anjBalances && errors.length === 0,\n    errors,\n  }\n}\n\n/**\n * Subscribes to the court configuration data\n * @param {String} courtAddress Adrress of the court contract\n * @returns {Object} Court configuration data\n */\nexport function useCourtConfigSubscription(courtAddress) {\n  const [{ data }] = useQuerySub(CourtConfig, {\n    id: courtAddress.toLowerCase(),\n  })\n\n  // TODO: handle possible errors\n  const courtConfig = useMemo(\n    () =>\n      data?.courtConfig\n        ? transformCourtConfigDataAttributes(data.courtConfig)\n        : null,\n    [data]\n  )\n\n  return courtConfig\n}\n\n/**\n * Subscribes to the dispute with id == `id`\n * @param {String} id Id of the dispute\n * @returns {Object} Dispute by `id`\n */\nexport function useSingleDisputeSubscription(id) {\n  const [{ data, error }] = useQuerySub(SingleDispute, { id })\n\n  const dispute = useMemo(\n    () =>\n      data && data.dispute\n        ? transformDisputeDataAttributes(data.dispute)\n        : null,\n    [data]\n  )\n\n  return { dispute, fetching: !data && !error, error }\n}\n\n/**\n * Subscribes to all existing disputes on the court\n * @returns {Object} All disputes\n */\nexport function useDisputesSubscription() {\n  const courtConfig = useCourtConfig()\n  const [{ data, error }] = useQuerySub(AllDisputes)\n\n  const disputes = useMemo(\n    () =>\n      data?.disputes\n        ? data.disputes.map(dispute =>\n            transformDisputeDataAttributes(dispute, courtConfig)\n          )\n        : null,\n    [courtConfig, data]\n  )\n\n  return { disputes, fetching: !data && !error, error }\n}\n\n/**\n * Subscribe to all `jurorId` drafts for the current term\n * @param {String} jurorId Address of the juror\n * @param {Number} termStartTime Start time of the term inseconds\n * @param {Boolean} pause Tells whether to pause the subscription or not\n * @returns {Object} All `jurorId` drafts for the current term\n */\nexport function useCurrentTermJurorDraftsSubscription(\n  jurorId,\n  termStartTime,\n  pause\n) {\n  const [result] = useQuerySub(\n    JurorDraftsFrom,\n    { id: jurorId.toLowerCase(), from: termStartTime },\n    { pause }\n  )\n\n  const { juror } = result.data || {}\n  return juror && juror.drafts ? juror.drafts : []\n}\n\n/**\n * Subscribes to all `jurorId` drafts\n * @dev This subscription is useful to get all rewards pending for claiming as well\n * as for the amount of locked ANJ a juror has per dispute\n * Ideally we would check that the round is not settled but we cannot do nested filters for now\n *\n * @param {String} jurorId Address of the juror\n * @returns {Object} All `jurorId` drafts\n */\nexport function useJurorDraftsRewardsSubscription(jurorId) {\n  const [{ data, error }] = useQuerySub(JurorDraftsRewards, {\n    id: jurorId.toLowerCase(),\n  })\n\n  const jurorDrafts = useMemo(() => {\n    if (!data) {\n      return null\n    }\n\n    return data.juror?.drafts.map(transformJurorDataAttributes) || []\n  }, [data])\n\n  return { jurorDrafts, fetching: !jurorDrafts && !error, error }\n}\n\nfunction useAppealsByMaker(jurorId) {\n  const [{ data, error }] = useQuerySub(AppealsByMaker, {\n    maker: jurorId.toLowerCase(),\n  })\n  return { data, error }\n}\n\nfunction useAppealsByTaker(jurorId) {\n  const [{ data, error }] = useQuerySub(AppealsByTaker, {\n    taker: jurorId.toLowerCase(),\n  })\n  return { data, error }\n}\n\n/**\n * Subscribes to all `jurorId` appeal collaterals\n * @dev Since we cannot do or operators on graphql queries, we need to get appeals by taker and maker separately\n *\n * @param {String} jurorId Address of the juror\n * @returns {Object} All `jurorId` appeal collaterals\n */\nexport function useAppealsByUserSubscription(jurorId) {\n  const {\n    data: makerAppealsData,\n    error: makerAppealsError,\n  } = useAppealsByMaker(jurorId)\n  const {\n    data: takerAppealsData,\n    error: takerAppealsError,\n  } = useAppealsByTaker(jurorId)\n\n  const appeals = useMemo(() => {\n    if (!makerAppealsData || !takerAppealsData) {\n      return null\n    }\n\n    const makerAppeals = makerAppealsData.appeals\n    const takerAppeals = takerAppealsData.appeals\n\n    return [...makerAppeals, ...takerAppeals].map(transformAppealDataAttributes)\n  }, [makerAppealsData, takerAppealsData])\n\n  const errors = [makerAppealsError, takerAppealsError].filter(err => err)\n\n  return { appeals, fetching: !appeals && errors.length === 0, errors }\n}\n\nexport function useTasksSubscription() {\n  // 1- Committing, 4-Confirming Appeal , 5- Ended\n  const subscriptionVariables = { state: [1, 4] }\n\n  const [{ data, error }] = useQuerySub(OpenTasks, subscriptionVariables)\n\n  const tasks =\n    data?.adjudicationRounds.map(transformRoundDataAttributes) || null\n\n  return { tasks, fetching: !data && !error, error }\n}\n\nexport function useJurorRegistrySubscription() {\n  const { modules } = useCourtConfig()\n  const jurorRegistryAddress = getModuleAddress(\n    modules,\n    CourtModuleType.JurorsRegistry\n  )\n\n  const [{ data, error }] = useQuerySub(JurorsRegistryModule, {\n    id: jurorRegistryAddress,\n  })\n\n  const jurorRegistryStats = data?.jurorsRegistryModule || null\n\n  return { data: jurorRegistryStats, error }\n}\n\nexport function useTotalRewardsSubscription() {\n  const [{ data, error }] = useQuerySub(FeeMovements)\n\n  const rewards = data?.feeMovements || null\n\n  return { data: rewards, error }\n}\n\n/**\n * Queries for the last withdrawal fee movement time made by the given juror\n * @param {String} jurorId Address of the juror\n * @returns {Number} Juror's last withdrawal fee movement date in unix time\n */\nexport function useJurorLastWithdrawalTimeSubscription(jurorId) {\n  const [{ data }] = useQuerySub(\n    JurorLastFeeWithdrawal,\n    { owner: jurorId?.toLowerCase() },\n    { pause: !jurorId }\n  )\n\n  if (!data) {\n    return null\n  }\n\n  if (data.feeMovements.length === 0) {\n    return -1\n  }\n\n  return toMs(data.feeMovements[0].createdAt)\n}\n"]},"metadata":{},"sourceType":"module"}