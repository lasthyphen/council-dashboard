{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _org, _provider;\n\nimport TransactionPath from './TransactionPath';\nimport { calculateTransactionPath } from '../utils/path/calculatePath';\nimport { describeTransactionPath } from '../utils/descriptions';\nexport default class TransactionIntent {\n  constructor(data, org, provider) {\n    _org.set(this, void 0);\n\n    _provider.set(this, void 0);\n\n    __classPrivateFieldSet(this, _org, org);\n\n    __classPrivateFieldSet(this, _provider, provider);\n\n    this.contractAddress = data.contractAddress;\n    this.functionArgs = data.functionArgs;\n    this.functionName = data.functionName;\n  }\n\n  async paths(account, // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  options) {\n    const apps = await __classPrivateFieldGet(this, _org).apps();\n    const {\n      forwardingFeePretransaction,\n      path\n    } = await calculateTransactionPath(account, this.contractAddress, this.functionName, this.functionArgs, apps, __classPrivateFieldGet(this, _provider));\n    const describedPath = await describeTransactionPath(path, apps, __classPrivateFieldGet(this, _provider));\n    return new TransactionPath({\n      apps: apps.filter(app => path.map(transaction => transaction.to).some(address => address === app.address)),\n      destination: apps.find(app => app.address == this.contractAddress),\n      forwardingFeePretransaction,\n      transactions: describedPath\n    });\n  }\n\n  async transactions(account, options) {\n    return (await this.paths(account, options)).transactions;\n  }\n\n}\n_org = new WeakMap(), _provider = new WeakMap();","map":null,"metadata":{},"sourceType":"module"}