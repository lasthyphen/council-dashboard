{"ast":null,"code":"import TransactionRequest from '../transactions/TransactionRequest';\nimport { decodeTransactionPath } from './path/decodePath';\nimport { tryEvaluatingRadspec, postprocessRadspecDescription } from './radspec/index';\nexport async function describeTransaction(transaction, apps, provider) {\n  if (!transaction.to) {\n    throw new Error(`Could not describe transaction: missing 'to'`);\n  }\n\n  if (!transaction.data) {\n    throw new Error(`Could not describe transaction: missing 'data'`);\n  }\n\n  let description, descriptionAnnotated;\n\n  try {\n    description = await tryEvaluatingRadspec(transaction, apps, provider);\n\n    if (description) {\n      const processed = await postprocessRadspecDescription(description, apps);\n      descriptionAnnotated = processed.annotatedDescription;\n      description = processed.description;\n    }\n\n    if (transaction.children) {\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      transaction.children = await describeTransactionPath(transaction.children, apps, provider);\n    }\n  } catch (err) {\n    throw new Error(`Could not describe transaction: ${err}`);\n  }\n\n  return new TransactionRequest({ ...transaction,\n    description,\n    descriptionAnnotated\n  });\n}\n/**\n * Use radspec to create a human-readable description for each transaction in the given `path`\n *\n */\n\nexport async function describeTransactionPath(path, apps, provider) {\n  return Promise.all(path.map(step => describeTransaction(step, apps, provider)));\n}\nexport async function describeScript(script, apps, provider) {\n  const path = decodeTransactionPath(script);\n  return describeTransactionPath(path, apps, provider);\n}","map":null,"metadata":{},"sourceType":"module"}