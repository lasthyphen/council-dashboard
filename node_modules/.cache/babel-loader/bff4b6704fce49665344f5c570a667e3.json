{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import{useWallet}from'use-wallet';import{useCourtConfig}from'../providers/CourtConfig';import{useCourtSubscriptionActions}from'./useCourtContracts';import{useDashboardState}from'../components/Dashboard/DashboardStateProvider';import{hasJurorClaimed}from'../utils/subscription-utils';export default function useJurorSubscriptionFees(){var wallet=useWallet();var _useCourtConfig=useCourtConfig(),subscriptionModule=_useCourtConfig.subscriptionModule;var _useCourtSubscription=useCourtSubscriptionActions(),getters=_useCourtSubscription.getters;var _useDashboardState=useDashboardState(),claimedSubscriptionFees=_useDashboardState.claimedSubscriptionFees;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),subscriptionFees=_useState2[0],setSubscriptionFees=_useState2[1];var periods=(subscriptionModule===null||subscriptionModule===void 0?void 0:subscriptionModule.periods)||[];useEffect(function(){var cancelled=false;var fetchSubscriptionFees=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var jurorSubscriptionsFees,index,period,periodId,jurorShare;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(periods.length===0||!getters||!claimedSubscriptionFees)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:_context.prev=2;jurorSubscriptionsFees=[];// Subscription fees can be only claimed for past periods\nindex=0;case 5:if(!(index<periods.length-1)){_context.next=18;break;}if(!cancelled){_context.next=8;break;}return _context.abrupt(\"break\",18);case 8:period=periods[index];if(!period.collectedFees.gt(0)){_context.next=15;break;}periodId=period.id;// TODO: See if we can get the juror share directly from the period data\n_context.next=13;return getters.getJurorShare(wallet.account,periodId);case 13:jurorShare=_context.sent;// jurorShare is conformed by [address: token, BigNum: shareAmount]\nif(jurorShare[1].gt(0)&&!hasJurorClaimed(claimedSubscriptionFees,periodId)){jurorSubscriptionsFees.push({periodId:periodId,amount:jurorShare[1]});}case 15:index++;_context.next=5;break;case 18:if(!cancelled){setSubscriptionFees(jurorSubscriptionsFees);}_context.next=24;break;case 21:_context.prev=21;_context.t0=_context[\"catch\"](2);console.error(\"Error fetching juror subscription fees: \".concat(_context.t0));case 24:case\"end\":return _context.stop();}}},_callee,null,[[2,21]]);}));return function fetchSubscriptionFees(){return _ref.apply(this,arguments);};}();fetchSubscriptionFees();return function(){cancelled=true;};},[claimedSubscriptionFees,getters,periods,wallet.account]);return subscriptionFees;}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useJurorSubscriptionFees.js"],"names":["useEffect","useState","useWallet","useCourtConfig","useCourtSubscriptionActions","useDashboardState","hasJurorClaimed","useJurorSubscriptionFees","wallet","subscriptionModule","getters","claimedSubscriptionFees","subscriptionFees","setSubscriptionFees","periods","cancelled","fetchSubscriptionFees","length","jurorSubscriptionsFees","index","period","collectedFees","gt","periodId","id","getJurorShare","account","jurorShare","push","amount","console","error"],"mappings":"iXAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,SAAT,KAA0B,YAA1B,CACA,OAASC,cAAT,KAA+B,0BAA/B,CACA,OAASC,2BAAT,KAA4C,qBAA5C,CACA,OAASC,iBAAT,KAAkC,gDAAlC,CAEA,OAASC,eAAT,KAAgC,6BAAhC,CAEA,cAAe,SAASC,CAAAA,wBAAT,EAAoC,CACjD,GAAMC,CAAAA,MAAM,CAAGN,SAAS,EAAxB,CADiD,oBAElBC,cAAc,EAFI,CAEzCM,kBAFyC,iBAEzCA,kBAFyC,2BAG7BL,2BAA2B,EAHE,CAGzCM,OAHyC,uBAGzCA,OAHyC,wBAIbL,iBAAiB,EAJJ,CAIzCM,uBAJyC,oBAIzCA,uBAJyC,eAMDV,QAAQ,CAAC,EAAD,CANP,wCAM1CW,gBAN0C,eAMxBC,mBANwB,eAQjD,GAAMC,CAAAA,OAAO,CAAG,CAAAL,kBAAkB,OAAlB,EAAAA,kBAAkB,SAAlB,QAAAA,kBAAkB,CAAEK,OAApB,GAA+B,EAA/C,CAEAd,SAAS,CAAC,UAAM,CACd,GAAIe,CAAAA,SAAS,CAAG,KAAhB,CAEA,GAAMC,CAAAA,qBAAqB,0FAAG,oMACxBF,OAAO,CAACG,MAAR,GAAmB,CAAnB,EAAwB,CAACP,OAAzB,EAAoC,CAACC,uBADb,kFAMpBO,sBANoB,CAMK,EANL,CAO1B;AACSC,KARiB,CAQT,CARS,aAQNA,KAAK,CAAGL,OAAO,CAACG,MAAR,CAAiB,CARnB,+BASpBF,SAToB,mEAalBK,MAbkB,CAaTN,OAAO,CAACK,KAAD,CAbE,KAcpBC,MAAM,CAACC,aAAP,CAAqBC,EAArB,CAAwB,CAAxB,CAdoB,0BAehBC,QAfgB,CAeLH,MAAM,CAACI,EAfF,CAiBtB;AAjBsB,uBAkBGd,CAAAA,OAAO,CAACe,aAAR,CACvBjB,MAAM,CAACkB,OADgB,CAEvBH,QAFuB,CAlBH,SAkBhBI,UAlBgB,eAuBtB;AACA,GACEA,UAAU,CAAC,CAAD,CAAV,CAAcL,EAAd,CAAiB,CAAjB,GACA,CAAChB,eAAe,CAACK,uBAAD,CAA0BY,QAA1B,CAFlB,CAGE,CACAL,sBAAsB,CAACU,IAAvB,CAA4B,CAC1BL,QAAQ,CAARA,QAD0B,CAE1BM,MAAM,CAAEF,UAAU,CAAC,CAAD,CAFQ,CAA5B,EAID,CAhCqB,QAQsBR,KAAK,EAR3B,+BAoC1B,GAAI,CAACJ,SAAL,CAAgB,CACdF,mBAAmB,CAACK,sBAAD,CAAnB,CACD,CAtCyB,iFAwC1BY,OAAO,CAACC,KAAR,iEAxC0B,qEAAH,kBAArBf,CAAAA,qBAAqB,0CAA3B,CA4CAA,qBAAqB,GAErB,MAAO,WAAM,CACXD,SAAS,CAAG,IAAZ,CACD,CAFD,CAGD,CApDQ,CAoDN,CAACJ,uBAAD,CAA0BD,OAA1B,CAAmCI,OAAnC,CAA4CN,MAAM,CAACkB,OAAnD,CApDM,CAAT,CAsDA,MAAOd,CAAAA,gBAAP,CACD","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useCourtSubscriptionActions } from './useCourtContracts'\nimport { useDashboardState } from '../components/Dashboard/DashboardStateProvider'\n\nimport { hasJurorClaimed } from '../utils/subscription-utils'\n\nexport default function useJurorSubscriptionFees() {\n  const wallet = useWallet()\n  const { subscriptionModule } = useCourtConfig()\n  const { getters } = useCourtSubscriptionActions()\n  const { claimedSubscriptionFees } = useDashboardState()\n\n  const [subscriptionFees, setSubscriptionFees] = useState([])\n\n  const periods = subscriptionModule?.periods || []\n\n  useEffect(() => {\n    let cancelled = false\n\n    const fetchSubscriptionFees = async () => {\n      if (periods.length === 0 || !getters || !claimedSubscriptionFees) {\n        return\n      }\n\n      try {\n        const jurorSubscriptionsFees = []\n        // Subscription fees can be only claimed for past periods\n        for (let index = 0; index < periods.length - 1; index++) {\n          if (cancelled) {\n            break\n          }\n\n          const period = periods[index]\n          if (period.collectedFees.gt(0)) {\n            const periodId = period.id\n\n            // TODO: See if we can get the juror share directly from the period data\n            const jurorShare = await getters.getJurorShare(\n              wallet.account,\n              periodId\n            )\n\n            // jurorShare is conformed by [address: token, BigNum: shareAmount]\n            if (\n              jurorShare[1].gt(0) &&\n              !hasJurorClaimed(claimedSubscriptionFees, periodId)\n            ) {\n              jurorSubscriptionsFees.push({\n                periodId,\n                amount: jurorShare[1],\n              })\n            }\n          }\n        }\n\n        if (!cancelled) {\n          setSubscriptionFees(jurorSubscriptionsFees)\n        }\n      } catch (err) {\n        console.error(`Error fetching juror subscription fees: ${err}`)\n      }\n    }\n\n    fetchSubscriptionFees()\n\n    return () => {\n      cancelled = true\n    }\n  }, [claimedSubscriptionFees, getters, periods, wallet.account])\n\n  return subscriptionFees\n}\n"]},"metadata":{},"sourceType":"module"}