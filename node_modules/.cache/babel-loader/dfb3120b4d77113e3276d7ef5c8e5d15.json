{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { useCourtConfig } from '../providers/CourtConfig';\nimport { useCourtSubscriptionActions } from './useCourtContracts';\nimport { useDashboardState } from '../components/Dashboard/DashboardStateProvider';\nimport { hasJurorClaimed } from '../utils/subscription-utils';\nexport default function useJurorSubscriptionFees() {\n  const wallet = useWallet();\n  const {\n    subscriptionModule\n  } = useCourtConfig();\n  const {\n    getters\n  } = useCourtSubscriptionActions();\n  const {\n    claimedSubscriptionFees\n  } = useDashboardState();\n  const [subscriptionFees, setSubscriptionFees] = useState([]);\n  const periods = (subscriptionModule === null || subscriptionModule === void 0 ? void 0 : subscriptionModule.periods) || [];\n  useEffect(() => {\n    let cancelled = false;\n\n    const fetchSubscriptionFees = async () => {\n      if (periods.length === 0 || !getters || !claimedSubscriptionFees) {\n        return;\n      }\n\n      try {\n        const jurorSubscriptionsFees = []; // Subscription fees can be only claimed for past periods\n\n        for (let index = 0; index < periods.length - 1; index++) {\n          if (cancelled) {\n            break;\n          }\n\n          const period = periods[index];\n\n          if (period.collectedFees.gt(0)) {\n            const periodId = period.id; // TODO: See if we can get the juror share directly from the period data\n\n            const jurorShare = await getters.getJurorShare(wallet.account, periodId); // jurorShare is conformed by [address: token, BigNum: shareAmount]\n\n            if (jurorShare[1].gt(0) && !hasJurorClaimed(claimedSubscriptionFees, periodId)) {\n              jurorSubscriptionsFees.push({\n                periodId,\n                amount: jurorShare[1]\n              });\n            }\n          }\n        }\n\n        if (!cancelled) {\n          setSubscriptionFees(jurorSubscriptionsFees);\n        }\n      } catch (err) {\n        console.error(`Error fetching juror subscription fees: ${err}`);\n      }\n    };\n\n    fetchSubscriptionFees();\n    return () => {\n      cancelled = true;\n    };\n  }, [claimedSubscriptionFees, getters, periods, wallet.account]);\n  return subscriptionFees;\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useJurorSubscriptionFees.js"],"names":["useEffect","useState","useWallet","useCourtConfig","useCourtSubscriptionActions","useDashboardState","hasJurorClaimed","useJurorSubscriptionFees","wallet","subscriptionModule","getters","claimedSubscriptionFees","subscriptionFees","setSubscriptionFees","periods","cancelled","fetchSubscriptionFees","length","jurorSubscriptionsFees","index","period","collectedFees","gt","periodId","id","jurorShare","getJurorShare","account","push","amount","err","console","error"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,YAA1B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AACA,SAASC,2BAAT,QAA4C,qBAA5C;AACA,SAASC,iBAAT,QAAkC,gDAAlC;AAEA,SAASC,eAAT,QAAgC,6BAAhC;AAEA,eAAe,SAASC,wBAAT,GAAoC;AACjD,QAAMC,MAAM,GAAGN,SAAS,EAAxB;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAyBN,cAAc,EAA7C;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAcN,2BAA2B,EAA/C;AACA,QAAM;AAAEO,IAAAA;AAAF,MAA8BN,iBAAiB,EAArD;AAEA,QAAM,CAACO,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,EAAD,CAAxD;AAEA,QAAMa,OAAO,GAAG,CAAAL,kBAAkB,SAAlB,IAAAA,kBAAkB,WAAlB,YAAAA,kBAAkB,CAAEK,OAApB,KAA+B,EAA/C;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,SAAS,GAAG,KAAhB;;AAEA,UAAMC,qBAAqB,GAAG,YAAY;AACxC,UAAIF,OAAO,CAACG,MAAR,KAAmB,CAAnB,IAAwB,CAACP,OAAzB,IAAoC,CAACC,uBAAzC,EAAkE;AAChE;AACD;;AAED,UAAI;AACF,cAAMO,sBAAsB,GAAG,EAA/B,CADE,CAEF;;AACA,aAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGL,OAAO,CAACG,MAAR,GAAiB,CAA7C,EAAgDE,KAAK,EAArD,EAAyD;AACvD,cAAIJ,SAAJ,EAAe;AACb;AACD;;AAED,gBAAMK,MAAM,GAAGN,OAAO,CAACK,KAAD,CAAtB;;AACA,cAAIC,MAAM,CAACC,aAAP,CAAqBC,EAArB,CAAwB,CAAxB,CAAJ,EAAgC;AAC9B,kBAAMC,QAAQ,GAAGH,MAAM,CAACI,EAAxB,CAD8B,CAG9B;;AACA,kBAAMC,UAAU,GAAG,MAAMf,OAAO,CAACgB,aAAR,CACvBlB,MAAM,CAACmB,OADgB,EAEvBJ,QAFuB,CAAzB,CAJ8B,CAS9B;;AACA,gBACEE,UAAU,CAAC,CAAD,CAAV,CAAcH,EAAd,CAAiB,CAAjB,KACA,CAAChB,eAAe,CAACK,uBAAD,EAA0BY,QAA1B,CAFlB,EAGE;AACAL,cAAAA,sBAAsB,CAACU,IAAvB,CAA4B;AAC1BL,gBAAAA,QAD0B;AAE1BM,gBAAAA,MAAM,EAAEJ,UAAU,CAAC,CAAD;AAFQ,eAA5B;AAID;AACF;AACF;;AAED,YAAI,CAACV,SAAL,EAAgB;AACdF,UAAAA,mBAAmB,CAACK,sBAAD,CAAnB;AACD;AACF,OAlCD,CAkCE,OAAOY,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAe,2CAA0CF,GAAI,EAA7D;AACD;AACF,KA1CD;;AA4CAd,IAAAA,qBAAqB;AAErB,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GApDQ,EAoDN,CAACJ,uBAAD,EAA0BD,OAA1B,EAAmCI,OAAnC,EAA4CN,MAAM,CAACmB,OAAnD,CApDM,CAAT;AAsDA,SAAOf,gBAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react'\nimport { useWallet } from 'use-wallet'\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useCourtSubscriptionActions } from './useCourtContracts'\nimport { useDashboardState } from '../components/Dashboard/DashboardStateProvider'\n\nimport { hasJurorClaimed } from '../utils/subscription-utils'\n\nexport default function useJurorSubscriptionFees() {\n  const wallet = useWallet()\n  const { subscriptionModule } = useCourtConfig()\n  const { getters } = useCourtSubscriptionActions()\n  const { claimedSubscriptionFees } = useDashboardState()\n\n  const [subscriptionFees, setSubscriptionFees] = useState([])\n\n  const periods = subscriptionModule?.periods || []\n\n  useEffect(() => {\n    let cancelled = false\n\n    const fetchSubscriptionFees = async () => {\n      if (periods.length === 0 || !getters || !claimedSubscriptionFees) {\n        return\n      }\n\n      try {\n        const jurorSubscriptionsFees = []\n        // Subscription fees can be only claimed for past periods\n        for (let index = 0; index < periods.length - 1; index++) {\n          if (cancelled) {\n            break\n          }\n\n          const period = periods[index]\n          if (period.collectedFees.gt(0)) {\n            const periodId = period.id\n\n            // TODO: See if we can get the juror share directly from the period data\n            const jurorShare = await getters.getJurorShare(\n              wallet.account,\n              periodId\n            )\n\n            // jurorShare is conformed by [address: token, BigNum: shareAmount]\n            if (\n              jurorShare[1].gt(0) &&\n              !hasJurorClaimed(claimedSubscriptionFees, periodId)\n            ) {\n              jurorSubscriptionsFees.push({\n                periodId,\n                amount: jurorShare[1],\n              })\n            }\n          }\n        }\n\n        if (!cancelled) {\n          setSubscriptionFees(jurorSubscriptionsFees)\n        }\n      } catch (err) {\n        console.error(`Error fetching juror subscription fees: ${err}`)\n      }\n    }\n\n    fetchSubscriptionFees()\n\n    return () => {\n      cancelled = true\n    }\n  }, [claimedSubscriptionFees, getters, periods, wallet.account])\n\n  return subscriptionFees\n}\n"]},"metadata":{},"sourceType":"module"}