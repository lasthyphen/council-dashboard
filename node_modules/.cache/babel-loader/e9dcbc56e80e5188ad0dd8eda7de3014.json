{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.evaluate = evaluate, Object.defineProperty(exports, \"evaluateRaw\", {\n  enumerable: !0,\n  get: function get() {\n    return _lib.evaluateRaw;\n  }\n}), Object.defineProperty(exports, \"parse\", {\n  enumerable: !0,\n  get: function get() {\n    return _parser.parse;\n  }\n}), Object.defineProperty(exports, \"scan\", {\n  enumerable: !0,\n  get: function get() {\n    return _scanner.scan;\n  }\n}), exports.default = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\")),\n    _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\")),\n    _ethers = require(\"ethers\"),\n    _helpers = require(\"./helpers\"),\n    _lib = require(\"./lib\"),\n    _parser = require(\"./parser\"),\n    _scanner = require(\"./scanner\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var source, i = 1; i < arguments.length; i++) {\n    source = null == arguments[i] ? {} : arguments[i], i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n* Evaluate a radspec expression (`source`) for a transaction (`call`)\n*\n* @example\n* import * as radspec from 'radspec'\n*\n* const expression = 'Will multiply `a` by 7 and return `a * 7`.'\n* const call = {\n*   abi: ['function multiply(uint256 a) public view returns(uint256)'],\n*   transaction: {\n*     to: '0x8521742d3f456bd237e312d6e30724960f72517a',\n*     data: '0xc6888fa1000000000000000000000000000000000000000000000000000000000000007a'\n*   }\n* }\n*\n* radspec.evaluate(expression, call)\n*   .then(console.log) // => \"Will multiply 122 by 7 and return 854.\"\n* @param {string} source The radspec expression\n* @param {Object} call The call that determines the bindings for this evaluation\n* @param {Array} call.abi The ABI used to decode the transaction data\n* @param {Object} call.transaction The transaction to decode for this evaluation\n* @param {string} call.transaction.to The destination address for this transaction\n* @param {string} call.transaction.data The transaction data\n* @param {?Object} options An options object\n* @param {?ethers.providers.Provider} options.provider EIP 1193 provider\n* @param {?Object} options.userHelpers User defined helpers\n* @return {Promise<string>} The result of the evaluation\n*/\n\n\nfunction evaluate(source, call) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var _ref$userHelpers = _ref.userHelpers,\n      userHelpers = _ref$userHelpers === void 0 ? {} : _ref$userHelpers,\n      options = (0, _objectWithoutProperties2.default)(_ref, [\"userHelpers\"]); // Create ethers interface object\n\n  var ethersInterface = new _ethers.ethers.utils.Interface(call.abi),\n      _ethersInterface$pars = ethersInterface.parseTransaction(call.transaction),\n      args = _ethersInterface$pars.args,\n      functionFragment = _ethersInterface$pars.functionFragment,\n      parameters = functionFragment.inputs.reduce(function (parameters, input) {\n    return _objectSpread(_defineProperty({}, input.name, {\n      type: input.type,\n      value: args[input.name]\n    }), parameters);\n  }, {}),\n      availableHelpers = _objectSpread({}, _helpers.defaultHelpers, {}, userHelpers),\n      _call$transaction = call.transaction,\n      from = _call$transaction.from,\n      to = _call$transaction.to,\n      value = _call$transaction.value,\n      data = _call$transaction.data; // Parse as an ethers TransactionDescription\n  // Evaluate expression with bindings from the transaction data\n\n\n  return (0, _lib.evaluateRaw)(source, parameters, _objectSpread({}, options, {\n    availableHelpers: availableHelpers,\n    from: from,\n    to: to,\n    value: value,\n    data: data\n  }));\n}\n\nvar _default = evaluate;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}