{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _styled from\"styled-components\";import React,{useCallback,useEffect,useState}from'react';import{Button,GU,Info}from'@aragon/ui';import{useWallet}from'../../providers/Wallet';import{getAutoRevealRequest}from'../../services/autoReveal';import{getAutoRevealPreference,getCodeFromLocalStorage,getOutcomeFromCommitment,getVoteId}from'../../utils/crvoting-utils';function DisputeAutoReveal(_ref){var commitment=_ref.commitment,disputeId=_ref.disputeId,onAutoReveal=_ref.onAutoReveal,roundId=_ref.roundId;var _useWallet=useWallet(),account=_useWallet.account;// We need to poll for the auto reveal request as we are using the request queue processor for processing juror's request to re-register\n// to the service and since the request flow is asynchronous, we can't ensure whether it was succesful or not.\nvar _useAutoRevealPolling=useAutoRevealPolling(account,disputeId,roundId),_useAutoRevealPolling2=_slicedToArray(_useAutoRevealPolling,2),autoRevealRequested=_useAutoRevealPolling2[0],loading=_useAutoRevealPolling2[1];if(loading){return null;}// Juror already requested the auto reveal service for this dispute\nif(autoRevealRequested){return React.createElement(Info,null,\"Auto reveal requested!\");}// Juror requested the auto reveal service and failed or juror didn't request the service at all.\n// For the later case it's still useful to give the juror the option to do so.\nreturn React.createElement(RequestAutoReveal,{commitment:commitment,disputeId:disputeId,onAutoReveal:onAutoReveal,roundId:roundId});}var _StyledInfo=_styled(Info).withConfig({displayName:\"DisputeAutoReveal___StyledInfo\",componentId:\"f0ndr2-0\"})([\"margin-top:\",\"px;\"],function(p){return p._css;});function RequestAutoReveal(_ref2){var commitment=_ref2.commitment,disputeId=_ref2.disputeId,onAutoReveal=_ref2.onAutoReveal,roundId=_ref2.roundId;var _useWallet2=useWallet(),account=_useWallet2.account;var voteId=getVoteId(disputeId,roundId);var autoRevealPreviouslyRequested=getAutoRevealPreference(account,voteId);var handleSubmit=useCallback(function(event){event.preventDefault();var password=getCodeFromLocalStorage(account,disputeId);var outcome=getOutcomeFromCommitment(commitment,password);onAutoReveal(account,disputeId,roundId,outcome,password);},[account,commitment,disputeId,onAutoReveal,roundId]);return React.createElement(\"form\",{onSubmit:handleSubmit},React.createElement(Button,{label:\"Reveal your vote with auto-reveal service\",mode:\"strong\",type:\"submit\",wide:true}),autoRevealPreviouslyRequested&&React.createElement(_StyledInfo,{mode:\"warning\",_css:2*GU},\"Your previous request to enable the auto-reveal service for this vote failed.\"));}function useAutoRevealPolling(account,disputeId,roundId){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),autoRevealRequested=_useState2[0],setAutoRevealRequested=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),loading=_useState4[0],setLoading=_useState4[1];var timer=3000;useEffect(function(){if(autoRevealRequested){return;}var cancelled=false;// Assumes jurorDraft exists\nvar pollAutoReveal=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var reveal;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return getAutoRevealRequest(account,disputeId,roundId);case 3:reveal=_context.sent;if(!cancelled){setAutoRevealRequested(Boolean(reveal));}_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error(\"Error fetching auto reveal: \".concat(_context.t0,\" retrying\\u2026\"));case 10:if(!cancelled){setLoading(false);// Stop the polling once we know the juror successfully requested the auto reveal\nif(!autoRevealRequested){setTimeout(pollAutoReveal,timer);}}case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function pollAutoReveal(){return _ref3.apply(this,arguments);};}();pollAutoReveal();return function(){cancelled=true;};},[account,autoRevealRequested,disputeId,roundId]);return[autoRevealRequested,loading];}export default DisputeAutoReveal;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Disputes/DisputeAutoReveal.js"],"names":["React","useCallback","useEffect","useState","Button","GU","Info","useWallet","getAutoRevealRequest","getAutoRevealPreference","getCodeFromLocalStorage","getOutcomeFromCommitment","getVoteId","DisputeAutoReveal","commitment","disputeId","onAutoReveal","roundId","account","useAutoRevealPolling","autoRevealRequested","loading","RequestAutoReveal","voteId","autoRevealPreviouslyRequested","handleSubmit","event","preventDefault","password","outcome","setAutoRevealRequested","setLoading","timer","cancelled","pollAutoReveal","reveal","Boolean","console","error","setTimeout"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { Button, GU, Info } from '@aragon/ui'\nimport { useWallet } from '../../providers/Wallet'\n\nimport { getAutoRevealRequest } from '../../services/autoReveal'\nimport {\n  getAutoRevealPreference,\n  getCodeFromLocalStorage,\n  getOutcomeFromCommitment,\n  getVoteId,\n} from '../../utils/crvoting-utils'\n\nfunction DisputeAutoReveal({ commitment, disputeId, onAutoReveal, roundId }) {\n  const { account } = useWallet()\n\n  // We need to poll for the auto reveal request as we are using the request queue processor for processing juror's request to re-register\n  // to the service and since the request flow is asynchronous, we can't ensure whether it was succesful or not.\n  const [autoRevealRequested, loading] = useAutoRevealPolling(\n    account,\n    disputeId,\n    roundId\n  )\n\n  if (loading) {\n    return null\n  }\n\n  // Juror already requested the auto reveal service for this dispute\n  if (autoRevealRequested) {\n    return <Info>Auto reveal requested!</Info>\n  }\n\n  // Juror requested the auto reveal service and failed or juror didn't request the service at all.\n  // For the later case it's still useful to give the juror the option to do so.\n  return (\n    <RequestAutoReveal\n      commitment={commitment}\n      disputeId={disputeId}\n      onAutoReveal={onAutoReveal}\n      roundId={roundId}\n    />\n  )\n}\n\nfunction RequestAutoReveal({ commitment, disputeId, onAutoReveal, roundId }) {\n  const { account } = useWallet()\n  const voteId = getVoteId(disputeId, roundId)\n  const autoRevealPreviouslyRequested = getAutoRevealPreference(account, voteId)\n\n  const handleSubmit = useCallback(\n    event => {\n      event.preventDefault()\n\n      const password = getCodeFromLocalStorage(account, disputeId)\n      const outcome = getOutcomeFromCommitment(commitment, password)\n\n      onAutoReveal(account, disputeId, roundId, outcome, password)\n    },\n    [account, commitment, disputeId, onAutoReveal, roundId]\n  )\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Button\n        label=\"Reveal your vote with auto-reveal service\"\n        mode=\"strong\"\n        type=\"submit\"\n        wide\n      />\n      {autoRevealPreviouslyRequested && (\n        <Info\n          mode=\"warning\"\n          css={`\n            margin-top: ${2 * GU}px;\n          `}\n        >\n          Your previous request to enable the auto-reveal service for this vote\n          failed.\n        </Info>\n      )}\n    </form>\n  )\n}\n\nfunction useAutoRevealPolling(account, disputeId, roundId) {\n  const [autoRevealRequested, setAutoRevealRequested] = useState(false)\n  const [loading, setLoading] = useState(true)\n  const timer = 3000\n\n  useEffect(() => {\n    if (autoRevealRequested) {\n      return\n    }\n\n    let cancelled = false\n\n    // Assumes jurorDraft exists\n    const pollAutoReveal = async () => {\n      try {\n        const reveal = await getAutoRevealRequest(account, disputeId, roundId)\n        if (!cancelled) {\n          setAutoRevealRequested(Boolean(reveal))\n        }\n      } catch (err) {\n        console.error(`Error fetching auto reveal: ${err} retrying…`)\n      }\n\n      if (!cancelled) {\n        setLoading(false)\n\n        // Stop the polling once we know the juror successfully requested the auto reveal\n        if (!autoRevealRequested) {\n          setTimeout(pollAutoReveal, timer)\n        }\n      }\n    }\n\n    pollAutoReveal()\n\n    return () => {\n      cancelled = true\n    }\n  }, [account, autoRevealRequested, disputeId, roundId])\n\n  return [autoRevealRequested, loading]\n}\n\nexport default DisputeAutoReveal\n"]},"metadata":{},"sourceType":"module"}