{"ast":null,"code":"var _toConsumableArray = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events');\n\nvar EthereumProvider =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(EthereumProvider, _EventEmitter);\n\n  function EthereumProvider(connection) {\n    var _this;\n\n    _classCallCheck(this, EthereumProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EthereumProvider).call(this));\n    _this.connected = false;\n    _this.nextId = 0;\n    _this.promises = {};\n    _this.subscriptions = [];\n    _this.connection = connection;\n\n    _this.connection.on('connect', function () {\n      return _this.checkConnection();\n    });\n\n    _this.connection.on('close', function () {\n      return _this.emit('close');\n    });\n\n    _this.connection.on('payload', function (payload) {\n      var id = payload.id,\n          method = payload.method,\n          error = payload.error,\n          result = payload.result;\n\n      if (typeof id !== 'undefined') {\n        if (_this.promises[id]) {\n          // Fulfill promise\n          payload.error ? _this.promises[id].reject(error) : _this.promises[id].resolve(result);\n          delete _this.promises[id];\n        }\n      } else if (method && method.indexOf('_subscription') > -1) {\n        // Emit subscription result\n        _this.emit(payload.params.subscription, payload.params.result);\n\n        _this.emit(method, payload.params); // Latest EIP-1193\n\n\n        _this.emit('data', payload); // Backwards Compatibility\n\n      }\n    });\n\n    _this.on('newListener', function (event, listener) {\n      if (event === 'networkChanged') {\n        if (!_this.attemptedNetworkSubscription && _this.connected) _this.startNetworkSubscription();\n      } else if (event === 'accountsChanged') {\n        if (!_this.attemptedAccountsSubscription && _this.connected) _this.startAccountsSubscription();\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(EthereumProvider, [{\n    key: \"checkConnection\",\n    value: function () {\n      var _checkConnection = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.t0 = this;\n                _context.next = 4;\n                return this._send('net_version');\n\n              case 4:\n                _context.t1 = _context.sent;\n\n                _context.t0.emit.call(_context.t0, 'connect', _context.t1);\n\n                this.connected = true;\n                if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription();\n                if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription();\n                _context.next = 14;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t2 = _context[\"catch\"](0);\n                this.connected = false;\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 11]]);\n      }));\n\n      function checkConnection() {\n        return _checkConnection.apply(this, arguments);\n      }\n\n      return checkConnection;\n    }()\n  }, {\n    key: \"startNetworkSubscription\",\n    value: function () {\n      var _startNetworkSubscription = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var networkChanged;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.attemptedNetworkSubscription = true;\n                _context2.prev = 1;\n                _context2.next = 4;\n                return this.subscribe('eth_subscribe', 'networkChanged');\n\n              case 4:\n                networkChanged = _context2.sent;\n                this.on(networkChanged, function (netId) {\n                  return _this2.emit('networkChanged', netId);\n                });\n                _context2.next = 11;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](1);\n                console.warn('Unable to subscribe to networkChanged', _context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[1, 8]]);\n      }));\n\n      function startNetworkSubscription() {\n        return _startNetworkSubscription.apply(this, arguments);\n      }\n\n      return startNetworkSubscription;\n    }()\n  }, {\n    key: \"startAccountsSubscription\",\n    value: function () {\n      var _startAccountsSubscription = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this3 = this;\n\n        var accountsChanged;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.attemptedAccountsSubscription = true;\n                _context3.prev = 1;\n                _context3.next = 4;\n                return this.subscribe('eth_subscribe', 'accountsChanged');\n\n              case 4:\n                accountsChanged = _context3.sent;\n                this.on(accountsChanged, function (accounts) {\n                  return _this3.emit('accountsChanged', accounts);\n                });\n                _context3.next = 11;\n                break;\n\n              case 8:\n                _context3.prev = 8;\n                _context3.t0 = _context3[\"catch\"](1);\n                console.warn('Unable to subscribe to accountsChanged', _context3.t0);\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[1, 8]]);\n      }));\n\n      function startAccountsSubscription() {\n        return _startAccountsSubscription.apply(this, arguments);\n      }\n\n      return startAccountsSubscription;\n    }()\n  }, {\n    key: \"enable\",\n    value: function enable() {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this4._send('eth_accounts').then(function (accounts) {\n          if (accounts.length > 0) {\n            _this4.accounts = accounts;\n            _this4.coinbase = accounts[0];\n\n            _this4.emit('enable');\n\n            resolve(accounts);\n          } else {\n            var err = new Error('User Denied Full Provider');\n            err.code = 4001;\n            reject(err);\n          }\n        }).catch(reject);\n      });\n    }\n  }, {\n    key: \"_send\",\n    value: function _send(method) {\n      var _this5 = this;\n\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (!method || typeof method !== 'string') return new Error('Method is not a valid string.');\n      if (!(params instanceof Array)) return new Error('Params is not a valid array.');\n      var payload = {\n        jsonrpc: '2.0',\n        id: this.nextId++,\n        method: method,\n        params: params\n      };\n      var promise = new Promise(function (resolve, reject) {\n        _this5.promises[payload.id] = {\n          resolve: resolve,\n          reject: reject\n        };\n      });\n      this.connection.send(payload);\n      return promise;\n    }\n  }, {\n    key: \"send\",\n    value: function send() {\n      // Send can be clobbered, proxy sendPromise for backwards compatibility\n      return this._send.apply(this, arguments);\n    }\n  }, {\n    key: \"_sendBatch\",\n    value: function _sendBatch(requests) {\n      var _this6 = this;\n\n      return Promise.all(requests.map(function (payload) {\n        return _this6._send(payload.method, payload.params);\n      }));\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(type, method) {\n      var _this7 = this;\n\n      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      return this._send(type, [method].concat(_toConsumableArray(params))).then(function (id) {\n        _this7.subscriptions.push(id);\n\n        return id;\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(type, id) {\n      var _this8 = this;\n\n      return this._send(type, [id]).then(function (success) {\n        if (success) {\n          _this8.subscriptions = _this8.subscriptions.filter(function (_id) {\n            return _id !== id;\n          }); // Remove subscription\n\n          _this8.removeAllListeners(id); // Remove listeners\n\n\n          return success;\n        }\n      });\n    }\n  }, {\n    key: \"sendAsync\",\n    value: function sendAsync(payload, cb) {\n      // Backwards Compatibility\n      if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'));\n      if (!payload) return cb(new Error('Invalid Payload')); // sendAsync can be called with an array for batch requests used by web3.js 0.x\n      // this is not part of EIP-1193's backwards compatibility but we still want to support it\n\n      if (payload instanceof Array) {\n        return this.sendAsyncBatch(payload, cb);\n      } else {\n        return this._send(payload.method, payload.params).then(function (result) {\n          cb(null, {\n            id: payload.id,\n            jsonrpc: payload.jsonrpc,\n            result: result\n          });\n        }).catch(function (err) {\n          cb(err);\n        });\n      }\n    }\n  }, {\n    key: \"sendAsyncBatch\",\n    value: function sendAsyncBatch(payload, cb) {\n      return this._sendBatch(payload).then(function (results) {\n        var result = results.map(function (entry, index) {\n          return {\n            id: payload[index].id,\n            jsonrpc: payload[index].jsonrpc,\n            result: entry\n          };\n        });\n        cb(null, result);\n      }).catch(function (err) {\n        cb(err);\n      });\n    }\n  }, {\n    key: \"isConnected\",\n    value: function isConnected() {\n      // Backwards Compatibility\n      return this.connected;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this9 = this;\n\n      this.connection.close();\n      this.connected = false;\n      var error = new Error(\"Provider closed, subscription lost, please subscribe again.\");\n      this.subscriptions.forEach(function (id) {\n        return _this9.emit(id, error);\n      }); // Send Error objects to any open subscriptions\n\n      this.subscriptions = []; // Clear subscriptions\n    }\n  }]);\n\n  return EthereumProvider;\n}(EventEmitter);\n\nmodule.exports = EthereumProvider;","map":null,"metadata":{},"sourceType":"script"}