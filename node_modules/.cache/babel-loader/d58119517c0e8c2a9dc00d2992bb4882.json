{"ast":null,"code":"import _styled11 from \"styled-components\";\nimport _styled10 from \"styled-components\";\nimport _styled9 from \"styled-components\";\nimport _styled8 from \"styled-components\";\nimport _styled7 from \"styled-components\";\nimport _styled6 from \"styled-components\";\nimport _styled5 from \"styled-components\";\nimport _styled4 from \"styled-components\";\nimport _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/GlobalPreferences/GlobalPreferencesButton.js\";\nimport React, { useRef, useState, useCallback } from 'react';\nimport { ButtonBase, ButtonIcon, GU, IconExternal, IconSettings, Popover, RADIUS, Switch, textStyle, useTheme, useViewport } from '@aragon/ui';\nimport { useClientTheme } from '../../providers/ClientTheme';\nimport { useAsset } from '../../hooks/useAsset';\nimport { ICON_DARK_MODE, ICON_NETWORK, ICON_NOTIFICATIONS } from '../../utils/asset-utils';\n\nvar _StyledButtonIcon = _styled(ButtonIcon).withConfig({\n  displayName: \"GlobalPreferencesButton___StyledButtonIcon\",\n  componentId: \"sc-1wf51zn-0\"\n})([\"width:\", \"px;height:100%;border-radius:0;\"], p => p._css);\n\nvar _StyledIconSettings = _styled(IconSettings).withConfig({\n  displayName: \"GlobalPreferencesButton___StyledIconSettings\",\n  componentId: \"sc-1wf51zn-1\"\n})([\"color:\", \";\"], p => p._css2);\n\nvar _StyledUl = _styled(\"ul\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledUl\",\n  componentId: \"sc-1wf51zn-2\"\n})([\"width:\", \";padding:0;margin:0;list-style:none;background:\", \";color:\", \";border-radius:\", \"px;\"], p => p._css3, p => p._css4, p => p._css5, RADIUS);\n\nvar _StyledLi = _styled(\"li\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledLi\",\n  componentId: \"sc-1wf51zn-3\"\n})([\"display:flex;align-items:center;height:\", \"px;padding-left:\", \"px;border-bottom:1px solid \", \";\", \";color:\", \";\"], p => p._css6, p => p._css7, p => p._css8, p => p._css9, p => p._css10);\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledDiv\",\n  componentId: \"sc-1wf51zn-4\"\n})([\"display:flex;justify-content:space-between;width:100%;\"]);\n\nvar _StyledDiv2 = _styled(\"div\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledDiv2\",\n  componentId: \"sc-1wf51zn-5\"\n})([\"flex-grow:1;display:flex;align-items:center;margin-right:\", \"px;\"], p => p._css11);\n\nvar _StyledDiv3 = _styled(\"div\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledDiv3\",\n  componentId: \"sc-1wf51zn-6\"\n})([\"color:\", \";\"], p => p._css12);\n\nfunction GlobalPreferencesButton({\n  onOpen\n}) {\n  const theme = useTheme();\n  const {\n    below\n  } = useViewport();\n  const clientTheme = useClientTheme();\n  const [opened, setOpened] = useState(false);\n  const containerRef = useRef();\n  const handleToggle = useCallback(() => setOpened(opened => !opened), []);\n  const handleClose = useCallback(() => setOpened(false), []);\n  const handleItemClick = useCallback(path => () => {\n    setOpened(false);\n    onOpen(path);\n  }, [onOpen]);\n  const toggleDarkMode = useCallback(() => {\n    clientTheme.toggleAppearance();\n  }, [clientTheme]);\n  const iconDarkMode = useAsset(ICON_DARK_MODE);\n  const iconNetwork = useAsset(ICON_NETWORK);\n  const iconNotifications = useAsset(ICON_NOTIFICATIONS);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: containerRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(_StyledButtonIcon, {\n    element: \"div\",\n    onClick: handleToggle,\n    label: \"Global preferences\",\n    _css: 4.25 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(_StyledIconSettings, {\n    _css2: theme.hint,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }))), React.createElement(Popover, {\n    closeOnOpenerFocus: true,\n    placement: \"bottom-end\",\n    onClose: handleClose,\n    visible: opened,\n    opener: containerRef.current,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(_StyledUl, {\n    _css3: below('medium') ? `calc(100vw - 20px)` : `${42 * GU}px`,\n    _css4: theme.surface,\n    _css5: theme.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(_StyledLi, {\n    _css6: 4 * GU,\n    _css7: 2 * GU,\n    _css8: theme.border,\n    _css9: textStyle('label2'),\n    _css10: theme.surfaceContentSecondary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Global preferences\"), React.createElement(Item, {\n    onClick: handleItemClick('network'),\n    icon: iconNetwork,\n    label: \"Network\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(Item, {\n    onClick: handleItemClick('notifications'),\n    icon: iconNotifications,\n    label: \"Notifications\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }), React.createElement(Item, {\n    onClick: toggleDarkMode,\n    icon: iconDarkMode,\n    label: React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(_StyledDiv, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Dark mode\"), React.createElement(Switch, {\n      checked: clientTheme.appearance === 'dark',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }), React.createElement(Item, {\n    href: \"https://1hive.gitbook.io/celeste/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(_StyledDiv2, {\n    _css11: 1 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Any questions? Visit our FAQ\"), React.createElement(_StyledDiv3, {\n    _css12: theme.surfaceContentSecondary,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(IconExternal, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }))))));\n}\n\nvar _StyledLi2 = _styled(\"li\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledLi2\",\n  componentId: \"sc-1wf51zn-7\"\n})([\"& + &{border-top:1px solid \", \";}\"], p => p._css13);\n\nvar _StyledButtonBase = _styled(ButtonBase).withConfig({\n  displayName: \"GlobalPreferencesButton___StyledButtonBase\",\n  componentId: \"sc-1wf51zn-8\"\n})([\"width:100%;height:\", \"px;border-radius:0;\"], p => p._css14);\n\nvar _StyledDiv4 = _styled(\"div\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledDiv4\",\n  componentId: \"sc-1wf51zn-9\"\n})([\"display:flex;width:100%;height:100%;padding:\", \"px;justify-content:left;align-items:center;&:active,&:focus{background:\", \";}\"], p => p._css15, p => p._css16);\n\nvar _StyledDiv5 = _styled(\"div\").withConfig({\n  displayName: \"GlobalPreferencesButton___StyledDiv5\",\n  componentId: \"sc-1wf51zn-10\"\n})([\"flex-grow:1;display:flex;align-items:center;margin-left:\", \"px;\"], p => p._css17);\n\nfunction Item({\n  children,\n  icon,\n  label,\n  onClick,\n  href\n}) {\n  const theme = useTheme();\n  return React.createElement(_StyledLi2, {\n    _css13: theme.border,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, React.createElement(_StyledButtonBase, {\n    onClick: onClick,\n    label: label,\n    external: Boolean(href),\n    href: href,\n    _css14: 7 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, React.createElement(_StyledDiv4, {\n    _css15: 2 * GU,\n    _css16: theme.surfacePressed,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, children || React.createElement(React.Fragment, null, icon && React.createElement(\"img\", {\n    src: icon,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }), React.createElement(_StyledDiv5, {\n    _css17: icon ? 1 * GU : 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, label)))));\n}\n\nexport default React.memo(GlobalPreferencesButton);","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/GlobalPreferences/GlobalPreferencesButton.js"],"names":["React","useRef","useState","useCallback","ButtonBase","ButtonIcon","GU","IconExternal","IconSettings","Popover","RADIUS","Switch","textStyle","useTheme","useViewport","useClientTheme","useAsset","ICON_DARK_MODE","ICON_NETWORK","ICON_NOTIFICATIONS","GlobalPreferencesButton","onOpen","theme","below","clientTheme","opened","setOpened","containerRef","handleToggle","handleClose","handleItemClick","path","toggleDarkMode","toggleAppearance","iconDarkMode","iconNetwork","iconNotifications","hint","current","surface","content","border","surfaceContentSecondary","appearance","Item","children","icon","label","onClick","href","Boolean","surfacePressed","memo"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,WAAlC,QAAqD,OAArD;AACA,SACEC,UADF,EAEEC,UAFF,EAGEC,EAHF,EAIEC,YAJF,EAKEC,YALF,EAMEC,OANF,EAOEC,MAPF,EAQEC,MARF,EASEC,SATF,EAUEC,QAVF,EAWEC,WAXF,QAYO,YAZP;AAaA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SACEC,cADF,EAEEC,YAFF,EAGEC,kBAHF,QAIO,yBAJP;;;;;;;;;;;;;;;iJAoE6BT,M;;;;;;;;;;;;;;;;;;;;;;AA9D7B,SAASU,uBAAT,CAAiC;AAAEC,EAAAA;AAAF,CAAjC,EAA6C;AAC3C,QAAMC,KAAK,GAAGT,QAAQ,EAAtB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAYT,WAAW,EAA7B;AACA,QAAMU,WAAW,GAAGT,cAAc,EAAlC;AAEA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBxB,QAAQ,CAAC,KAAD,CAApC;AACA,QAAMyB,YAAY,GAAG1B,MAAM,EAA3B;AAEA,QAAM2B,YAAY,GAAGzB,WAAW,CAAC,MAAMuB,SAAS,CAACD,MAAM,IAAI,CAACA,MAAZ,CAAhB,EAAqC,EAArC,CAAhC;AACA,QAAMI,WAAW,GAAG1B,WAAW,CAAC,MAAMuB,SAAS,CAAC,KAAD,CAAhB,EAAyB,EAAzB,CAA/B;AACA,QAAMI,eAAe,GAAG3B,WAAW,CACjC4B,IAAI,IAAI,MAAM;AACZL,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAL,IAAAA,MAAM,CAACU,IAAD,CAAN;AACD,GAJgC,EAKjC,CAACV,MAAD,CALiC,CAAnC;AAQA,QAAMW,cAAc,GAAG7B,WAAW,CAAC,MAAM;AACvCqB,IAAAA,WAAW,CAACS,gBAAZ;AACD,GAFiC,EAE/B,CAACT,WAAD,CAF+B,CAAlC;AAIA,QAAMU,YAAY,GAAGlB,QAAQ,CAACC,cAAD,CAA7B;AACA,QAAMkB,WAAW,GAAGnB,QAAQ,CAACE,YAAD,CAA5B;AACA,QAAMkB,iBAAiB,GAAGpB,QAAQ,CAACG,kBAAD,CAAlC;AAEA,SACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEQ,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,OAAO,EAAC,KADV;AAEE,IAAA,OAAO,EAAEC,YAFX;AAGE,IAAA,KAAK,EAAC,oBAHR;AAAA,UAKa,OAAOtB,EALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUE;AAAA,WAEagB,KAAK,CAACe,IAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF,CADF,EAmBE,oBAAC,OAAD;AACE,IAAA,kBAAkB,MADpB;AAEE,IAAA,SAAS,EAAC,YAFZ;AAGE,IAAA,OAAO,EAAER,WAHX;AAIE,IAAA,OAAO,EAAEJ,MAJX;AAKE,IAAA,MAAM,EAAEE,YAAY,CAACW,OALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE;AAAA,WAGaf,KAAK,CAAC,QAAD,CAAL,GAAmB,oBAAnB,GAA0C,GAAE,KAAKjB,EAAG,IAHjE;AAAA,WAOkBgB,KAAK,CAACiB,OAPxB;AAAA,WAQajB,KAAK,CAACkB,OARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAYE;AAAA,WAIc,IAAIlC,EAJlB;AAAA,WAKoB,IAAIA,EALxB;AAAA,WAM+BgB,KAAK,CAACmB,MANrC;AAAA,WAOM7B,SAAS,CAAC,QAAD,CAPf;AAAA,YAQaU,KAAK,CAACoB,uBARnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAZF,EAyBE,oBAAC,IAAD;AACE,IAAA,OAAO,EAAEZ,eAAe,CAAC,SAAD,CAD1B;AAEE,IAAA,IAAI,EAAEK,WAFR;AAGE,IAAA,KAAK,EAAC,SAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,EA8BE,oBAAC,IAAD;AACE,IAAA,OAAO,EAAEL,eAAe,CAAC,eAAD,CAD1B;AAEE,IAAA,IAAI,EAAEM,iBAFR;AAGE,IAAA,KAAK,EAAC,eAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9BF,EAmCE,oBAAC,IAAD;AACE,IAAA,OAAO,EAAEJ,cADX;AAEE,IAAA,IAAI,EAAEE,YAFR;AAGE,IAAA,KAAK,EACH,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAPF,EAQE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEV,WAAW,CAACmB,UAAZ,KAA2B,MAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF,CAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnCF,EAqDE,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,mCAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,YAKoB,IAAIrC,EALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCADF,EAWE;AAAA,YAEagB,KAAK,CAACoB,uBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAXF,CArDF,CAPF,CAnBF,CADF;AAuGD;;;;;;;;;;;;;;;;;;;;;;AAED,SAASE,IAAT,CAAc;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,IAAZ;AAAkBC,EAAAA,KAAlB;AAAyBC,EAAAA,OAAzB;AAAkCC,EAAAA;AAAlC,CAAd,EAAwD;AACtD,QAAM3B,KAAK,GAAGT,QAAQ,EAAtB;AACA,SACE;AAAA,YAG8BS,KAAK,CAACmB,MAHpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE;AACE,IAAA,OAAO,EAAEO,OADX;AAEE,IAAA,KAAK,EAAED,KAFT;AAGE,IAAA,QAAQ,EAAEG,OAAO,CAACD,IAAD,CAHnB;AAIE,IAAA,IAAI,EAAEA,IAJR;AAAA,YAOc,IAAI3C,EAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWE;AAAA,YAKe,IAAIA,EALnB;AAAA,YAWoBgB,KAAK,CAAC6B,cAX1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeGN,QAAQ,IACP,0CACGC,IAAI,IAAI;AAAK,IAAA,GAAG,EAAEA,IAAV;AAAgB,IAAA,GAAG,EAAC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,EAEE;AAAA,YAKmBA,IAAI,GAAG,IAAIxC,EAAP,GAAY,CALnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGyC,KARH,CAFF,CAhBJ,CAXF,CAPF,CADF;AAqDD;;AAED,eAAe/C,KAAK,CAACoD,IAAN,CAAWhC,uBAAX,CAAf","sourcesContent":["import React, { useRef, useState, useCallback } from 'react'\nimport {\n  ButtonBase,\n  ButtonIcon,\n  GU,\n  IconExternal,\n  IconSettings,\n  Popover,\n  RADIUS,\n  Switch,\n  textStyle,\n  useTheme,\n  useViewport,\n} from '@aragon/ui'\nimport { useClientTheme } from '../../providers/ClientTheme'\nimport { useAsset } from '../../hooks/useAsset'\nimport {\n  ICON_DARK_MODE,\n  ICON_NETWORK,\n  ICON_NOTIFICATIONS,\n} from '../../utils/asset-utils'\n\nfunction GlobalPreferencesButton({ onOpen }) {\n  const theme = useTheme()\n  const { below } = useViewport()\n  const clientTheme = useClientTheme()\n\n  const [opened, setOpened] = useState(false)\n  const containerRef = useRef()\n\n  const handleToggle = useCallback(() => setOpened(opened => !opened), [])\n  const handleClose = useCallback(() => setOpened(false), [])\n  const handleItemClick = useCallback(\n    path => () => {\n      setOpened(false)\n      onOpen(path)\n    },\n    [onOpen]\n  )\n\n  const toggleDarkMode = useCallback(() => {\n    clientTheme.toggleAppearance()\n  }, [clientTheme])\n\n  const iconDarkMode = useAsset(ICON_DARK_MODE)\n  const iconNetwork = useAsset(ICON_NETWORK)\n  const iconNotifications = useAsset(ICON_NOTIFICATIONS)\n\n  return (\n    <React.Fragment>\n      <div ref={containerRef}>\n        <ButtonIcon\n          element=\"div\"\n          onClick={handleToggle}\n          label=\"Global preferences\"\n          css={`\n            width: ${4.25 * GU}px;\n            height: 100%;\n            border-radius: 0;\n          `}\n        >\n          <IconSettings\n            css={`\n              color: ${theme.hint};\n            `}\n          />\n        </ButtonIcon>\n      </div>\n      <Popover\n        closeOnOpenerFocus\n        placement=\"bottom-end\"\n        onClose={handleClose}\n        visible={opened}\n        opener={containerRef.current}\n      >\n        <ul\n          css={`\n            /* Use 20px as the padding setting for popper is 10px */\n            width: ${below('medium') ? `calc(100vw - 20px)` : `${42 * GU}px`};\n            padding: 0;\n            margin: 0;\n            list-style: none;\n            background: ${theme.surface};\n            color: ${theme.content};\n            border-radius: ${RADIUS}px;\n          `}\n        >\n          <li\n            css={`\n              display: flex;\n              align-items: center;\n              height: ${4 * GU}px;\n              padding-left: ${2 * GU}px;\n              border-bottom: 1px solid ${theme.border};\n              ${textStyle('label2')};\n              color: ${theme.surfaceContentSecondary};\n            `}\n          >\n            Global preferences\n          </li>\n          <Item\n            onClick={handleItemClick('network')}\n            icon={iconNetwork}\n            label=\"Network\"\n          />\n          <Item\n            onClick={handleItemClick('notifications')}\n            icon={iconNotifications}\n            label=\"Notifications\"\n          />\n          <Item\n            onClick={toggleDarkMode}\n            icon={iconDarkMode}\n            label={\n              <React.Fragment>\n                <div\n                  css={`\n                    display: flex;\n                    justify-content: space-between;\n                    width: 100%;\n                  `}\n                >\n                  <span>Dark mode</span>\n                  <Switch checked={clientTheme.appearance === 'dark'} />\n                </div>\n              </React.Fragment>\n            }\n          />\n          <Item href=\"https://1hive.gitbook.io/celeste/\">\n            <div\n              css={`\n                flex-grow: 1;\n                display: flex;\n                align-items: center;\n                margin-right: ${1 * GU}px;\n              `}\n            >\n              Any questions? Visit our FAQ\n            </div>\n            <div\n              css={`\n                color: ${theme.surfaceContentSecondary};\n              `}\n            >\n              <IconExternal />\n            </div>\n          </Item>\n        </ul>\n      </Popover>\n    </React.Fragment>\n  )\n}\n\nfunction Item({ children, icon, label, onClick, href }) {\n  const theme = useTheme()\n  return (\n    <li\n      css={`\n        & + & {\n          border-top: 1px solid ${theme.border};\n        }\n      `}\n    >\n      <ButtonBase\n        onClick={onClick}\n        label={label}\n        external={Boolean(href)}\n        href={href}\n        css={`\n          width: 100%;\n          height: ${7 * GU}px;\n          border-radius: 0;\n        `}\n      >\n        <div\n          css={`\n            display: flex;\n            width: 100%;\n            height: 100%;\n            padding: ${2 * GU}px;\n            justify-content: left;\n            align-items: center;\n\n            &:active,\n            &:focus {\n              background: ${theme.surfacePressed};\n            }\n          `}\n        >\n          {children || (\n            <>\n              {icon && <img src={icon} alt=\"\" />}\n              <div\n                css={`\n                  flex-grow: 1;\n                  display: flex;\n                  align-items: center;\n                  margin-left: ${icon ? 1 * GU : 0}px;\n                `}\n              >\n                {label}\n              </div>\n            </>\n          )}\n        </div>\n      </ButtonBase>\n    </li>\n  )\n}\n\nexport default React.memo(GlobalPreferencesButton)\n"]},"metadata":{},"sourceType":"module"}