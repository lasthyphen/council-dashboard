{"ast":null,"code":"var _classCallCheck = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events');\n\nvar uuid = require('uuid/v4');\n\nvar dev = process.env.NODE_ENV === 'development';\nvar XHR;\n\nvar HTTPConnection =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(HTTPConnection, _EventEmitter);\n\n  function HTTPConnection(_XHR, url, options) {\n    var _this;\n\n    _classCallCheck(this, HTTPConnection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(HTTPConnection).call(this));\n    XHR = _XHR;\n    _this.connected = false;\n    _this.subscriptions = false;\n    _this.status = 'loading';\n    _this.url = url;\n    _this.pollId = uuid();\n    setTimeout(function () {\n      return _this.create();\n    }, 0);\n    return _this;\n  }\n\n  _createClass(HTTPConnection, [{\n    key: \"create\",\n    value: function create() {\n      var _this2 = this;\n\n      if (!XHR) return this.emit('error', new Error('No HTTP transport available'));\n      this.on('error', function () {\n        if (_this2.connected) _this2.close();\n      });\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this3 = this;\n\n      this.send({\n        jsonrpc: '2.0',\n        method: 'eth_syncing',\n        params: [],\n        id: 1\n      }, function (err, response) {\n        if (err) return _this3.emit('error', err);\n\n        _this3.send({\n          jsonrpc: '2.0',\n          id: 1,\n          method: 'eth_pollSubscriptions',\n          params: [_this3.pollId, 'immediate']\n        }, function (err, response) {\n          if (!err) {\n            _this3.subscriptions = true;\n\n            _this3.pollSubscriptions();\n          }\n\n          _this3.connected = true;\n\n          _this3.emit('connect');\n        });\n      });\n    }\n  }, {\n    key: \"pollSubscriptions\",\n    value: function pollSubscriptions() {\n      var _this4 = this;\n\n      this.send({\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_pollSubscriptions',\n        params: [this.pollId]\n      }, function (err, result) {\n        if (err) {\n          _this4.subscriptionTimeout = setTimeout(function () {\n            return _this4.pollSubscriptions();\n          }, 10000);\n          return _this4.emit('error', err);\n        } else {\n          if (!_this4.closed) _this4.subscriptionTimeout = _this4.pollSubscriptions();\n\n          if (result) {\n            result.map(function (p) {\n              var parse;\n\n              try {\n                parse = JSON.parse(p);\n              } catch (e) {\n                parse = false;\n              }\n\n              return parse;\n            }).filter(function (n) {\n              return n;\n            }).forEach(function (p) {\n              return _this4.emit('payload', p);\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (dev) console.log('Closing HTTP connection');\n      this.closed = true;\n      this.emit('close');\n      clearTimeout(this.subscriptionTimeout);\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"filterStatus\",\n    value: function filterStatus(res) {\n      if (res.status >= 200 && res.status < 300) return res;\n      var error = new Error(res.statusText);\n      error.res = res;\n      throw error.message;\n    }\n  }, {\n    key: \"error\",\n    value: function error(payload, message) {\n      var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      this.emit('payload', {\n        id: payload.id,\n        jsonrpc: payload.jsonrpc,\n        error: {\n          message: message,\n          code: code\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload, internal) {\n      var _this5 = this;\n\n      if (this.closed) return this.error(payload, 'Not connected');\n\n      if (payload.method === 'eth_subscribe') {\n        if (this.subscriptions) {\n          payload.pollId = this.pollId;\n        } else {\n          return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint');\n        }\n      }\n\n      var xhr = new XHR();\n      var responded = false;\n\n      var res = function res(err, result) {\n        if (!responded) {\n          xhr.abort();\n          responded = true;\n\n          if (internal) {\n            internal(err, result);\n          } else {\n            var id = payload.id,\n                jsonrpc = payload.jsonrpc;\n            var load = err ? {\n              id: id,\n              jsonrpc: jsonrpc,\n              error: {\n                message: err.message,\n                code: err.code\n              }\n            } : {\n              id: id,\n              jsonrpc: jsonrpc,\n              result: result\n            };\n\n            _this5.emit('payload', load);\n          }\n        }\n      };\n\n      xhr.open('POST', this.url, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.timeout = 60 * 1000;\n      xhr.onerror = res;\n      xhr.ontimeout = res;\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          try {\n            var response = JSON.parse(xhr.responseText);\n            res(response.error, response.result);\n          } catch (e) {\n            res(e);\n          }\n        }\n      };\n\n      xhr.send(JSON.stringify(payload));\n    }\n  }]);\n\n  return HTTPConnection;\n}(EventEmitter);\n\nmodule.exports = function (XHR) {\n  return function (url, options) {\n    return new HTTPConnection(XHR, url, options);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}