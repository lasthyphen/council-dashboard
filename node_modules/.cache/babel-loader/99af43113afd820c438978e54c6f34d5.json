{"ast":null,"code":"const getProtocol = location => {\n  if (location === 'injected') return 'injected';\n  if (location.endsWith('.ipc')) return 'ipc';\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws';\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http';\n  return '';\n};\n\nmodule.exports = (targets, presets) => {\n  return [].concat(...[].concat(targets).map(provider => {\n    if (presets[provider]) {\n      return presets[provider].map(location => ({\n        type: provider,\n        location,\n        protocol: getProtocol(location)\n      }));\n    } else {\n      return {\n        type: 'custom',\n        location: provider,\n        protocol: getProtocol(provider)\n      };\n    }\n  })).filter(provider => {\n    if (provider.protocol || provider.type === 'injected') {\n      return true;\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"');\n      return false;\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}