{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/RequestPanel/RequestPanel.js\";\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { GU, SidePanel } from '@aragon/ui';\nimport { captureException } from '@sentry/browser';\nimport ConfirmRequest from './ConfirmRequest';\nimport RequestStatus from './RequestStatus';\nimport { useRequestQueue } from '../../providers/RequestQueue';\nimport { REQUEST_STATUS_CONFIRMED, REQUEST_STATUS_FAILED, REQUEST_STATUS_PENDING, REQUEST_STATUS_PROCESSED, REQUEST_STATUS_PROCESSING_FAILED, REQUEST_STATUS_UPCOMING } from './request-statuses';\nconst MAX_ATTEMPTS = 3;\nconst INITIAL_STATE = {\n  processed: 0,\n  errorProcessing: -1,\n  confirmed: 0,\n  failed: -1,\n  requesting: 0\n};\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"RequestPanel___StyledDiv\",\n  componentId: \"sc-1nju41w-0\"\n})([\"margin-top:\", \"px;\"], p => p._css);\n\nfunction RequestPanel() {\n  const [attempts, setAttempts] = useState(0);\n  const [progress, setProgress] = useState({ ...INITIAL_STATE\n  });\n  const {\n    clearRequestQueue,\n    requests\n  } = useRequestQueue();\n  const handleSignerClose = useCallback(() => {\n    // Clear state\n    setAttempts(0);\n    setProgress({ ...INITIAL_STATE\n    });\n    clearRequestQueue();\n  }, [clearRequestQueue]);\n  const handleNextAttempt = useCallback(() => {\n    setAttempts(attempts => attempts + 1);\n  }, []);\n  const handleStartRequest = useCallback(() => {\n    setProgress(progress => ({ ...progress,\n      requesting: 1\n    }));\n  }, []);\n  const processRequest = useCallback(async request => {\n    try {\n      const requestProcess = await request.intent(); // Mark request as processed\n\n      setProgress(({\n        processed,\n        ...progress\n      }) => ({ ...progress,\n        processed: processed + 1,\n        lastProcessedAt: Date.now()\n      }));\n      return requestProcess;\n    } catch (err) {\n      // Mark request as errored at processing\n      setProgress(({\n        processed,\n        ...progress\n      }) => ({ ...progress,\n        errorProcessing: processed,\n        processed\n      })); // Re throw error\n\n      throw err;\n    }\n  }, []);\n  const ensureRequestConfirmed = useCallback(async request => {\n    try {\n      // Wait for request to be confirmed\n      await request.wait();\n      return setProgress(({\n        confirmed,\n        ...progress\n      }) => ({ ...progress,\n        confirmed: confirmed + 1\n      }));\n    } catch (err) {\n      // Mark request as failed\n      setProgress(({\n        processed,\n        ...progress\n      }) => ({ ...progress,\n        failed: processed - 1,\n        processed: processed - 1\n      })); // Re throw error\n\n      throw err;\n    }\n  }, [setProgress]); // Get request statuses\n\n  const requestStatus = useMemo(() => {\n    if (!requests) {\n      return [];\n    }\n\n    const requiredConfirmedRequests = requests.map((req, index) => ({ ...req,\n      index\n    })).filter(req => req.ensureConfirmation);\n    const {\n      confirmed,\n      errorProcessing,\n      failed,\n      processed\n    } = progress;\n\n    const status = (request, index) => {\n      // Request processing failed\n      if (errorProcessing !== -1 && index >= errorProcessing) {\n        return REQUEST_STATUS_PROCESSING_FAILED;\n      } // Request confirmation failed\n\n\n      if (failed !== -1 && index >= failed) {\n        return REQUEST_STATUS_FAILED;\n      }\n\n      if (request.ensureConfirmation) {\n        const confirmedIndex = requiredConfirmedRequests.findIndex(req => req.index === index); // Request confirmed\n\n        if (confirmedIndex < confirmed) {\n          return REQUEST_STATUS_CONFIRMED;\n        } // Request pending\n\n\n        if (index < processed) {\n          return REQUEST_STATUS_PENDING;\n        }\n      } // Request processed\n\n\n      if (index < processed) {\n        return REQUEST_STATUS_PROCESSED;\n      } // Transaction not processed\n\n\n      return REQUEST_STATUS_UPCOMING;\n    };\n\n    return requests.map((request, index) => status(request, index));\n  }, [progress, requests]);\n  const allSuccess = useMemo(() => {\n    const {\n      confirmed,\n      processed\n    } = progress;\n    const requiredConfirmedRequests = requests.filter(request => request.ensureConfirmation).length;\n    const allProcessed = processed > 0 && processed === requests.length;\n    const allConfirmed = confirmed === requiredConfirmedRequests;\n    return allProcessed && allConfirmed;\n  }, [progress, requests]);\n  const maxAttemptsReached = attempts >= MAX_ATTEMPTS; // Create requests\n\n  useEffect(() => {\n    if (!progress.requesting || maxAttemptsReached) {\n      return;\n    }\n\n    if (attempts === 0) {\n      setProgress(({\n        requesting\n      }) => ({ ...INITIAL_STATE,\n        requesting\n      }));\n    } else {\n      setProgress(progress => ({ ...progress,\n        errorProcessing: -1,\n        failed: -1\n      }));\n    }\n\n    let cancelled = false;\n\n    const createRequests = async () => {\n      const filteredRequests = requests.slice(progress.processed);\n\n      for (const request of filteredRequests) {\n        if (cancelled) {\n          break;\n        }\n\n        try {\n          const requestProcess = await processRequest(request);\n\n          if (request.isTx && request.ensureConfirmation) {\n            await ensureRequestConfirmed(requestProcess); // Execute callback function if required\n\n            if (typeof request.callback === 'function') {\n              request.callback();\n            }\n          }\n        } catch (err) {\n          console.error(`Error when executing '${request.description}':`, err);\n          captureException(err);\n          throw err;\n        }\n      }\n    };\n\n    createRequests();\n    return () => {\n      cancelled = true;\n    };\n  }, // We'll remove `progress.processed` from the dependencies to prevent the effect from running every time we process a request\n  // Note that we'll retry processing requests from the last failed one only if the user requests to do so\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [attempts, ensureRequestConfirmed, maxAttemptsReached, processRequest, requests, progress.requesting]);\n  useEffect(() => {\n    let timeout;\n\n    const startClearing = () => {\n      timeout = setTimeout(() => {\n        handleSignerClose();\n      }, 3000);\n    };\n\n    if (maxAttemptsReached || allSuccess) {\n      startClearing();\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [allSuccess, handleSignerClose, maxAttemptsReached, requests]);\n  const blockPanel = !maxAttemptsReached && requests.length > 1 && Boolean(progress.requesting);\n  return React.createElement(SidePanel, {\n    blocking: blockPanel,\n    title: \"Confirm action\",\n    opened: requests.length > 0,\n    onClose: handleSignerClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }, React.createElement(_StyledDiv, {\n    _css: 3 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, progress.requesting ? React.createElement(RequestStatus, {\n    allSuccess: allSuccess,\n    lastProcessedAt: progress.lastProcessedAt,\n    maxAttemptsReached: maxAttemptsReached,\n    onClosePanel: handleSignerClose,\n    onNextAttempt: handleNextAttempt,\n    requests: requests,\n    requestStatus: requestStatus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264\n    },\n    __self: this\n  }) : React.createElement(ConfirmRequest, {\n    descriptions: requests.map(request => request.description),\n    onStartRequest: handleStartRequest,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  })));\n}\n\nexport default React.memo(RequestPanel);","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/RequestPanel/RequestPanel.js"],"names":["React","useCallback","useEffect","useMemo","useState","GU","SidePanel","captureException","ConfirmRequest","RequestStatus","useRequestQueue","REQUEST_STATUS_CONFIRMED","REQUEST_STATUS_FAILED","REQUEST_STATUS_PENDING","REQUEST_STATUS_PROCESSED","REQUEST_STATUS_PROCESSING_FAILED","REQUEST_STATUS_UPCOMING","MAX_ATTEMPTS","INITIAL_STATE","processed","errorProcessing","confirmed","failed","requesting","RequestPanel","attempts","setAttempts","progress","setProgress","clearRequestQueue","requests","handleSignerClose","handleNextAttempt","handleStartRequest","processRequest","request","requestProcess","intent","lastProcessedAt","Date","now","err","ensureRequestConfirmed","wait","requestStatus","requiredConfirmedRequests","map","req","index","filter","ensureConfirmation","status","confirmedIndex","findIndex","allSuccess","length","allProcessed","allConfirmed","maxAttemptsReached","cancelled","createRequests","filteredRequests","slice","isTx","callback","console","error","description","timeout","startClearing","setTimeout","clearTimeout","blockPanel","Boolean","memo"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react'\nimport { GU, SidePanel } from '@aragon/ui'\nimport { captureException } from '@sentry/browser'\n\nimport ConfirmRequest from './ConfirmRequest'\nimport RequestStatus from './RequestStatus'\nimport { useRequestQueue } from '../../providers/RequestQueue'\nimport {\n  REQUEST_STATUS_CONFIRMED,\n  REQUEST_STATUS_FAILED,\n  REQUEST_STATUS_PENDING,\n  REQUEST_STATUS_PROCESSED,\n  REQUEST_STATUS_PROCESSING_FAILED,\n  REQUEST_STATUS_UPCOMING,\n} from './request-statuses'\n\nconst MAX_ATTEMPTS = 3\n\nconst INITIAL_STATE = {\n  processed: 0,\n  errorProcessing: -1,\n  confirmed: 0,\n  failed: -1,\n  requesting: 0,\n}\n\nfunction RequestPanel() {\n  const [attempts, setAttempts] = useState(0)\n  const [progress, setProgress] = useState({\n    ...INITIAL_STATE,\n  })\n  const { clearRequestQueue, requests } = useRequestQueue()\n\n  const handleSignerClose = useCallback(() => {\n    // Clear state\n    setAttempts(0)\n    setProgress({ ...INITIAL_STATE })\n    clearRequestQueue()\n  }, [clearRequestQueue])\n\n  const handleNextAttempt = useCallback(() => {\n    setAttempts(attempts => attempts + 1)\n  }, [])\n\n  const handleStartRequest = useCallback(() => {\n    setProgress(progress => ({ ...progress, requesting: 1 }))\n  }, [])\n\n  const processRequest = useCallback(async request => {\n    try {\n      const requestProcess = await request.intent()\n      // Mark request as processed\n      setProgress(({ processed, ...progress }) => ({\n        ...progress,\n        processed: processed + 1,\n        lastProcessedAt: Date.now(),\n      }))\n\n      return requestProcess\n    } catch (err) {\n      // Mark request as errored at processing\n      setProgress(({ processed, ...progress }) => ({\n        ...progress,\n        errorProcessing: processed,\n        processed,\n      }))\n\n      // Re throw error\n      throw err\n    }\n  }, [])\n\n  const ensureRequestConfirmed = useCallback(\n    async request => {\n      try {\n        // Wait for request to be confirmed\n        await request.wait()\n        return setProgress(({ confirmed, ...progress }) => ({\n          ...progress,\n          confirmed: confirmed + 1,\n        }))\n      } catch (err) {\n        // Mark request as failed\n        setProgress(({ processed, ...progress }) => ({\n          ...progress,\n          failed: processed - 1,\n          processed: processed - 1,\n        }))\n\n        // Re throw error\n        throw err\n      }\n    },\n    [setProgress]\n  )\n\n  // Get request statuses\n  const requestStatus = useMemo(() => {\n    if (!requests) {\n      return []\n    }\n\n    const requiredConfirmedRequests = requests\n      .map((req, index) => ({ ...req, index }))\n      .filter(req => req.ensureConfirmation)\n\n    const { confirmed, errorProcessing, failed, processed } = progress\n    const status = (request, index) => {\n      // Request processing failed\n      if (errorProcessing !== -1 && index >= errorProcessing) {\n        return REQUEST_STATUS_PROCESSING_FAILED\n      }\n\n      // Request confirmation failed\n      if (failed !== -1 && index >= failed) {\n        return REQUEST_STATUS_FAILED\n      }\n\n      if (request.ensureConfirmation) {\n        const confirmedIndex = requiredConfirmedRequests.findIndex(\n          req => req.index === index\n        )\n\n        // Request confirmed\n        if (confirmedIndex < confirmed) {\n          return REQUEST_STATUS_CONFIRMED\n        }\n\n        // Request pending\n        if (index < processed) {\n          return REQUEST_STATUS_PENDING\n        }\n      }\n\n      // Request processed\n      if (index < processed) {\n        return REQUEST_STATUS_PROCESSED\n      }\n\n      // Transaction not processed\n      return REQUEST_STATUS_UPCOMING\n    }\n\n    return requests.map((request, index) => status(request, index))\n  }, [progress, requests])\n\n  const allSuccess = useMemo(() => {\n    const { confirmed, processed } = progress\n\n    const requiredConfirmedRequests = requests.filter(\n      request => request.ensureConfirmation\n    ).length\n\n    const allProcessed = processed > 0 && processed === requests.length\n    const allConfirmed = confirmed === requiredConfirmedRequests\n    return allProcessed && allConfirmed\n  }, [progress, requests])\n\n  const maxAttemptsReached = attempts >= MAX_ATTEMPTS\n\n  // Create requests\n  useEffect(\n    () => {\n      if (!progress.requesting || maxAttemptsReached) {\n        return\n      }\n\n      if (attempts === 0) {\n        setProgress(({ requesting }) => ({\n          ...INITIAL_STATE,\n          requesting,\n        }))\n      } else {\n        setProgress(progress => ({\n          ...progress,\n          errorProcessing: -1,\n          failed: -1,\n        }))\n      }\n\n      let cancelled = false\n\n      const createRequests = async () => {\n        const filteredRequests = requests.slice(progress.processed)\n\n        for (const request of filteredRequests) {\n          if (cancelled) {\n            break\n          }\n\n          try {\n            const requestProcess = await processRequest(request)\n\n            if (request.isTx && request.ensureConfirmation) {\n              await ensureRequestConfirmed(requestProcess)\n\n              // Execute callback function if required\n              if (typeof request.callback === 'function') {\n                request.callback()\n              }\n            }\n          } catch (err) {\n            console.error(`Error when executing '${request.description}':`, err)\n            captureException(err)\n\n            throw err\n          }\n        }\n      }\n\n      createRequests()\n\n      return () => {\n        cancelled = true\n      }\n    },\n    // We'll remove `progress.processed` from the dependencies to prevent the effect from running every time we process a request\n    // Note that we'll retry processing requests from the last failed one only if the user requests to do so\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      attempts,\n      ensureRequestConfirmed,\n      maxAttemptsReached,\n      processRequest,\n      requests,\n      progress.requesting,\n    ]\n  )\n\n  useEffect(() => {\n    let timeout\n\n    const startClearing = () => {\n      timeout = setTimeout(() => {\n        handleSignerClose()\n      }, 3000)\n    }\n\n    if (maxAttemptsReached || allSuccess) {\n      startClearing()\n    }\n\n    return () => {\n      clearTimeout(timeout)\n    }\n  }, [allSuccess, handleSignerClose, maxAttemptsReached, requests])\n\n  const blockPanel =\n    !maxAttemptsReached && requests.length > 1 && Boolean(progress.requesting)\n\n  return (\n    <SidePanel\n      blocking={blockPanel}\n      title=\"Confirm action\"\n      opened={requests.length > 0}\n      onClose={handleSignerClose}\n    >\n      <div\n        css={`\n          margin-top: ${3 * GU}px;\n        `}\n      >\n        {progress.requesting ? (\n          <RequestStatus\n            allSuccess={allSuccess}\n            lastProcessedAt={progress.lastProcessedAt}\n            maxAttemptsReached={maxAttemptsReached}\n            onClosePanel={handleSignerClose}\n            onNextAttempt={handleNextAttempt}\n            requests={requests}\n            requestStatus={requestStatus}\n          />\n        ) : (\n          <ConfirmRequest\n            descriptions={requests.map(request => request.description)}\n            onStartRequest={handleStartRequest}\n          />\n        )}\n      </div>\n    </SidePanel>\n  )\n}\n\nexport default React.memo(RequestPanel)\n"]},"metadata":{},"sourceType":"module"}