{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, privateMap, value) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to set private field on non-instance\");\n  }\n\n  privateMap.set(receiver, value);\n  return value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, privateMap) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n};\n\nvar _gql;\n\nimport { toNetwork } from '@aragon/connect-core';\nimport * as queries from './queries';\nimport GraphQLWrapper from './core/GraphQLWrapper';\nimport { parseApp, parseApps, parsePermissions, parseRepo, parseRoles } from './parsers';\n\nfunction getOrgSubgraphUrl(network) {\n  if (network.chainId === 1) {\n    return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-mainnet';\n  }\n\n  if (network.chainId === 43112) {\n    return 'http://20.9.85.213:8000/subgraphs/name/aragon/aragon-mainnet';\n  }\n\n  if (network.chainId === 4) {\n    return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-rinkeby';\n  }\n\n  if (network.chainId === 100) {\n    return 'https://api.thegraph.com/subgraphs/name/1hive/aragon-xdai';\n  }\n\n  return null;\n}\n\nfunction appFiltersToQueryFilter(appFilters) {\n  const queryFilter = {};\n\n  if (appFilters.name) {\n    queryFilter.repoName_in = appFilters.name.map(name => name.replace(/\\.aragonpm\\.eth$/, ''));\n  }\n\n  if (appFilters.address) {\n    queryFilter.address_in = appFilters.address;\n  }\n\n  return queryFilter;\n}\n\nclass ConnectorTheGraph {\n  constructor(config) {\n    _gql.set(this, void 0);\n\n    this.name = 'thegraph';\n    this.config = config;\n    this.network = toNetwork(config.network);\n    const orgSubgraphUrl = config.orgSubgraphUrl || getOrgSubgraphUrl(this.network);\n\n    if (!orgSubgraphUrl) {\n      throw new Error(`The chainId ${this.network.chainId} is not supported by the TheGraph connector.`);\n    }\n\n    __classPrivateFieldSet(this, _gql, new GraphQLWrapper(orgSubgraphUrl, {\n      pollInterval: config.pollInterval,\n      verbose: config.verbose\n    }));\n  }\n\n  async connect(connection) {\n    this.connection = connection;\n  }\n\n  async disconnect() {\n    __classPrivateFieldGet(this, _gql).close();\n\n    delete this.connection;\n  }\n\n  async rolesForAddress(organization, appAddress) {\n    return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ROLE_BY_APP_ADDRESS('query'), {\n      appAddress: appAddress.toLowerCase()\n    }, result => parseRoles(result, organization));\n  }\n\n  async permissionsForOrg(organization) {\n    return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_PERMISSIONS('query'), {\n      orgAddress: organization.address.toLowerCase()\n    }, result => parsePermissions(result, organization));\n  }\n\n  onPermissionsForOrg(organization, callback) {\n    return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_PERMISSIONS('subscription'), {\n      orgAddress: organization.address.toLowerCase()\n    }, callback, result => parsePermissions(result, organization));\n  }\n\n  async appByAddress(organization, appAddress) {\n    return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.APP_BY_ADDRESS('query'), {\n      appAddress: appAddress.toLowerCase()\n    }, result => parseApp(result, organization));\n  }\n\n  async appForOrg(organization, filters) {\n    const apps = await __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_APPS('query'), {\n      appFilter: appFiltersToQueryFilter(filters),\n      first: 1,\n      orgAddress: organization.address.toLowerCase()\n    }, result => parseApps(result, organization));\n    return apps[0];\n  }\n\n  async appsForOrg(organization, filters) {\n    return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_APPS('query'), {\n      appFilter: appFiltersToQueryFilter(filters),\n      orgAddress: organization.address.toLowerCase()\n    }, result => parseApps(result, organization));\n  }\n\n  onAppForOrg(organization, filters, callback) {\n    return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {\n      appFilter: appFiltersToQueryFilter(filters),\n      first: 1,\n      orgAddress: organization.address.toLowerCase()\n    }, apps => callback(apps[0]), result => parseApps(result, organization));\n  }\n\n  onAppsForOrg(organization, filters, callback) {\n    return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {\n      appFilter: appFiltersToQueryFilter(filters),\n      orgAddress: organization.address.toLowerCase()\n    }, callback, result => parseApps(result, organization));\n  }\n\n  async repoForApp(organization, appAddress) {\n    return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.REPO_BY_APP_ADDRESS('query'), {\n      appAddress: appAddress.toLowerCase()\n    }, result => parseRepo(result, organization));\n  }\n\n}\n\n_gql = new WeakMap();\nexport default ConnectorTheGraph;","map":null,"metadata":{},"sourceType":"module"}