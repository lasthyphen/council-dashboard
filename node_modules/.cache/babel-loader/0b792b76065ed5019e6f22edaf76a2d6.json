{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = void 0;\n\nvar _ethers = require(\"ethers\"),\n    _defaults = require(\"../../defaults\"); // From: https://github.com/danfinlay/eth-method-registry\n\n\nvar REGISTRY_LOOKUP_ABI = [\"function entries(bytes4) public view returns (string)\"],\n    REGISTRY_MAP = {\n  1: \"0x44691B39d1a75dC4E0A0346CBB15E310e6ED1E86\"\n}; // networkId -> registry address\n\nvar MethodRegistry =\n/*#__PURE__*/\nfunction () {\n  function MethodRegistry() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, MethodRegistry);\n\n    this.provider = opts.provider || new _ethers.ethers.providers.WebSocketProvider(_defaults.DEFAULT_ETH_NODE), this.registryAddres = opts.registry || REGISTRY_MAP[opts.network];\n  }\n\n  _createClass(MethodRegistry, [{\n    key: \"initRegistry\",\n    value: function () {\n      var _initRegistry = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.registryAddres) {\n                  _context.next = 2;\n                  break;\n                }\n\n                throw new Error(\"No method registry found for the network.\");\n\n              case 2:\n                this.registry = new _ethers.ethers.Contract(this.registryAddres, REGISTRY_LOOKUP_ABI, this.provider);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function initRegistry() {\n        return _initRegistry.apply(this, arguments);\n      }\n\n      return initRegistry;\n    }()\n  }, {\n    key: \"lookup\",\n    value: function () {\n      var _lookup = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(sigBytes) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.t0 = this.registry;\n\n                if (_context2.t0) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _context2.next = 4;\n                return this.initRegistry();\n\n              case 4:\n                return _context2.abrupt(\"return\", this.registry.entries(sigBytes));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function lookup(_x) {\n        return _lookup.apply(this, arguments);\n      }\n\n      return lookup;\n    }()\n  }]);\n\n  return MethodRegistry;\n}();\n\nexports.default = MethodRegistry;","map":null,"metadata":{},"sourceType":"script"}