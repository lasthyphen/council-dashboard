{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useCallback,useContext,useEffect,useMemo,useRef,useState}from'react';import StoredList from'../StoredList';import{getNetworkType}from'../lib/web3-utils';import{MINUTE}from'../utils/date-utils';import{useWallet}from'./Wallet';import{ACTIVITY_STATUS_CONFIRMED,ACTIVITY_STATUS_FAILED,ACTIVITY_STATUS_PENDING,ACTIVITY_STATUS_TIMED_OUT}from'../components/Activity/activity-statuses';import actions from'../actions/court-action-types';var ActivityContext=React.createContext();// Only used to serialize / deserialize the symbols\nvar StatusSymbolsByName=new Map(Object.entries({ACTIVITY_STATUS_CONFIRMED:ACTIVITY_STATUS_CONFIRMED,ACTIVITY_STATUS_FAILED:ACTIVITY_STATUS_FAILED,ACTIVITY_STATUS_PENDING:ACTIVITY_STATUS_PENDING,ACTIVITY_STATUS_TIMED_OUT:ACTIVITY_STATUS_TIMED_OUT}));var TypeSymbolsByName=new Map(Object.entries(actions));var TIMEOUT_DURATION=10*MINUTE;function getStoredList(account){return new StoredList(\"activity:\".concat(getNetworkType(),\":\").concat(account),{preStringify:function preStringify(activity){return _objectSpread({},activity,{status:activity.status.description.replace('ACTIVITY_STATUS_',''),type:activity.type.description});},postParse:function postParse(activity){return _objectSpread({},activity,{status:StatusSymbolsByName.get(\"ACTIVITY_STATUS_\".concat(activity.status)),type:TypeSymbolsByName.get(activity.type)});}});}function getActivityFinalStatus(_x,_x2){return _getActivityFinalStatus.apply(this,arguments);}function _getActivityFinalStatus(){_getActivityFinalStatus=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(ethers,_ref6){var createdAt,transactionHash,status,now;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:createdAt=_ref6.createdAt,transactionHash=_ref6.transactionHash,status=_ref6.status;if(!(status!==ACTIVITY_STATUS_PENDING)){_context3.next=3;break;}return _context3.abrupt(\"return\",status);case 3:now=Date.now();return _context3.abrupt(\"return\",Promise.race([// Get the transaction status once mined\nethers.getTransaction(String(transactionHash)).then(function(tx){// tx is null if no tx was found\nif(!tx){throw new Error('No transaction found');}return tx.wait().then(function(receipt){return receipt.blockNumber?ACTIVITY_STATUS_CONFIRMED:ACTIVITY_STATUS_FAILED;});}).catch(function(){return ACTIVITY_STATUS_FAILED;}),// Timeout after 10 minutes\nnew Promise(function(resolve){if(now-createdAt>TIMEOUT_DURATION){return ACTIVITY_STATUS_TIMED_OUT;}setTimeout(function(){resolve(ACTIVITY_STATUS_TIMED_OUT);},TIMEOUT_DURATION-(now-createdAt));})]));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return _getActivityFinalStatus.apply(this,arguments);}function ActivityProvider(_ref){var children=_ref.children;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),activities=_useState2[0],setActivities=_useState2[1];var storedList=useRef(null);var wallet=useWallet();var account=wallet.account,ethers=wallet.ethers;// Update the activities, ensuring the activities\n// are updated in the stored list and in the state.\nvar updateActivities=useCallback(function(cb){var newActivities=cb(activities);setActivities(newActivities);if(storedList.current){storedList.current.update(newActivities);}},[activities]);// Add a single activity.\nvar addActivity=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx,// see types defined in ../actions/court-action-types.js\ntype){var description,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:description=_args.length>2&&_args[2]!==undefined?_args[2]:'';_context.next=3;return tx;case 3:tx=_context.sent;updateActivities(function(activities){return[].concat(_toConsumableArray(activities),[{createdAt:Date.now(),description:description,from:tx.from,nonce:tx.nonce,read:false,status:ACTIVITY_STATUS_PENDING,type:type,to:tx.to,transactionHash:tx.hash}]);});return _context.abrupt(\"return\",tx);case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}(),[updateActivities]);// Clear a single activity\nvar removeActivity=useCallback(function(transactionHash){updateActivities(function(activities){return activities.filter(function(activity){return activity.transactionHash!==transactionHash;});});},[updateActivities]);// Clear all non pending activities − we don’t clear\n// pending because we’re awaiting state change.\nvar clearActivities=useCallback(function(){updateActivities(function(activities){return activities.filter(function(activity){return activity.status===ACTIVITY_STATUS_PENDING;});});},[updateActivities]);// Update the status of a single activity,\n// using its transaction hash.\nvar updateActivityStatus=useCallback(function(hash,status){updateActivities(function(activities){return activities.map(function(activity){if(activity.transactionHash!==hash){return activity;}return _objectSpread({},activity,{read:false,status:status});});});},[updateActivities]);// Mark the current user’s activities as read\nvar markActivitiesRead=useCallback(function(){updateActivities(function(activities){return activities.map(function(activity){return _objectSpread({},activity,{read:true});});});},[updateActivities]);// Total number of unread activities\nvar unreadCount=useMemo(function(){return activities.reduce(function(count,_ref3){var read=_ref3.read;return count+Number(!read);},0);},[activities]);var updateActivitiesFromStorage=useCallback(function(){if(!storedList.current){return;}var activitiesFromStorage=storedList.current.getItems();// We will diff activities from storage and activites from state to prevent loops in the useEffect below\nvar activitiesChanged=activities.length!==activitiesFromStorage.length||activitiesFromStorage.filter(function(_ref4){var transactionHash=_ref4.transactionHash;return activities.findIndex(function(activity){return activity.transactionHash===transactionHash;})===-1;})>0;if(activitiesChanged){setActivities(activitiesFromStorage);}},[activities]);// Triggered every time the account changes\nuseEffect(function(){if(!account){return;}var cancelled=false;storedList.current=getStoredList(account);updateActivitiesFromStorage();activities.forEach(/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(activity){var status;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getActivityFinalStatus(ethers,activity);case 2:status=_context2.sent;if(!cancelled&&status!==activity.status){updateActivityStatus(activity.transactionHash,status);}case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x5){return _ref5.apply(this,arguments);};}());return function(){cancelled=true;};},[account,activities,ethers,updateActivitiesFromStorage,updateActivityStatus]);return React.createElement(ActivityContext.Provider,{value:{activities:activities,addActivity:addActivity,clearActivities:clearActivities,markActivitiesRead:markActivitiesRead,removeActivity:removeActivity,unreadCount:unreadCount,updateActivities:updateActivities}},children);}function useActivity(){return useContext(ActivityContext);}export{ActivityProvider,useActivity};","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/providers/ActivityProvider.js"],"names":["React","useCallback","useContext","useEffect","useMemo","useRef","useState","StoredList","getNetworkType","MINUTE","useWallet","ACTIVITY_STATUS_CONFIRMED","ACTIVITY_STATUS_FAILED","ACTIVITY_STATUS_PENDING","ACTIVITY_STATUS_TIMED_OUT","actions","ActivityContext","createContext","StatusSymbolsByName","Map","Object","entries","TypeSymbolsByName","TIMEOUT_DURATION","getStoredList","account","preStringify","activity","status","description","replace","type","postParse","get","getActivityFinalStatus","ethers","createdAt","transactionHash","now","Date","Promise","race","getTransaction","String","then","tx","Error","wait","receipt","blockNumber","catch","resolve","setTimeout","ActivityProvider","children","activities","setActivities","storedList","wallet","updateActivities","cb","newActivities","current","update","addActivity","from","nonce","read","to","hash","removeActivity","filter","clearActivities","updateActivityStatus","map","markActivitiesRead","unreadCount","reduce","count","Number","updateActivitiesFromStorage","activitiesFromStorage","getItems","activitiesChanged","length","findIndex","cancelled","forEach","useActivity"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react'\nimport PropTypes from 'prop-types'\nimport StoredList from '../StoredList'\nimport { getNetworkType } from '../lib/web3-utils'\nimport { MINUTE } from '../utils/date-utils'\nimport { useWallet } from './Wallet'\nimport {\n  ACTIVITY_STATUS_CONFIRMED,\n  ACTIVITY_STATUS_FAILED,\n  ACTIVITY_STATUS_PENDING,\n  ACTIVITY_STATUS_TIMED_OUT,\n} from '../components/Activity/activity-statuses'\nimport actions from '../actions/court-action-types'\n\nconst ActivityContext = React.createContext()\n\n// Only used to serialize / deserialize the symbols\nconst StatusSymbolsByName = new Map(\n  Object.entries({\n    ACTIVITY_STATUS_CONFIRMED,\n    ACTIVITY_STATUS_FAILED,\n    ACTIVITY_STATUS_PENDING,\n    ACTIVITY_STATUS_TIMED_OUT,\n  })\n)\n\nconst TypeSymbolsByName = new Map(Object.entries(actions))\n\nconst TIMEOUT_DURATION = 10 * MINUTE\n\nfunction getStoredList(account) {\n  return new StoredList(`activity:${getNetworkType()}:${account}`, {\n    preStringify: activity => ({\n      ...activity,\n      status: activity.status.description.replace('ACTIVITY_STATUS_', ''),\n      type: activity.type.description,\n    }),\n    postParse: activity => ({\n      ...activity,\n      status: StatusSymbolsByName.get(`ACTIVITY_STATUS_${activity.status}`),\n      type: TypeSymbolsByName.get(activity.type),\n    }),\n  })\n}\n\nasync function getActivityFinalStatus(\n  ethers,\n  { createdAt, transactionHash, status }\n) {\n  if (status !== ACTIVITY_STATUS_PENDING) {\n    return status\n  }\n\n  const now = Date.now()\n\n  return Promise.race([\n    // Get the transaction status once mined\n    ethers\n      .getTransaction(String(transactionHash))\n      .then(tx => {\n        // tx is null if no tx was found\n        if (!tx) {\n          throw new Error('No transaction found')\n        }\n        return tx.wait().then(receipt => {\n          return receipt.blockNumber\n            ? ACTIVITY_STATUS_CONFIRMED\n            : ACTIVITY_STATUS_FAILED\n        })\n      })\n      .catch(() => {\n        return ACTIVITY_STATUS_FAILED\n      }),\n\n    // Timeout after 10 minutes\n    new Promise(resolve => {\n      if (now - createdAt > TIMEOUT_DURATION) {\n        return ACTIVITY_STATUS_TIMED_OUT\n      }\n      setTimeout(() => {\n        resolve(ACTIVITY_STATUS_TIMED_OUT)\n      }, TIMEOUT_DURATION - (now - createdAt))\n    }),\n  ])\n}\n\nfunction ActivityProvider({ children }) {\n  const [activities, setActivities] = useState([])\n  const storedList = useRef(null)\n  const wallet = useWallet()\n  const { account, ethers } = wallet\n\n  // Update the activities, ensuring the activities\n  // are updated in the stored list and in the state.\n  const updateActivities = useCallback(\n    cb => {\n      const newActivities = cb(activities)\n      setActivities(newActivities)\n      if (storedList.current) {\n        storedList.current.update(newActivities)\n      }\n    },\n    [activities]\n  )\n\n  // Add a single activity.\n  const addActivity = useCallback(\n    async (\n      tx,\n\n      // see types defined in ../actions/court-action-types.js\n      type,\n      description = ''\n    ) => {\n      // tx might be a promise resolving into a tx\n      tx = await tx\n\n      updateActivities(activities => [\n        ...activities,\n        {\n          createdAt: Date.now(),\n          description,\n          from: tx.from,\n          nonce: tx.nonce,\n          read: false,\n          status: ACTIVITY_STATUS_PENDING,\n          type,\n          to: tx.to,\n          transactionHash: tx.hash,\n        },\n      ])\n\n      return tx\n    },\n    [updateActivities]\n  )\n\n  // Clear a single activity\n  const removeActivity = useCallback(\n    transactionHash => {\n      updateActivities(activities =>\n        activities.filter(\n          activity => activity.transactionHash !== transactionHash\n        )\n      )\n    },\n    [updateActivities]\n  )\n\n  // Clear all non pending activities − we don’t clear\n  // pending because we’re awaiting state change.\n  const clearActivities = useCallback(() => {\n    updateActivities(activities =>\n      activities.filter(activity => activity.status === ACTIVITY_STATUS_PENDING)\n    )\n  }, [updateActivities])\n\n  // Update the status of a single activity,\n  // using its transaction hash.\n  const updateActivityStatus = useCallback(\n    (hash, status) => {\n      updateActivities(activities =>\n        activities.map(activity => {\n          if (activity.transactionHash !== hash) {\n            return activity\n          }\n          return { ...activity, read: false, status }\n        })\n      )\n    },\n    [updateActivities]\n  )\n\n  // Mark the current user’s activities as read\n  const markActivitiesRead = useCallback(() => {\n    updateActivities(activities =>\n      activities.map(activity => ({ ...activity, read: true }))\n    )\n  }, [updateActivities])\n\n  // Total number of unread activities\n  const unreadCount = useMemo(() => {\n    return activities.reduce((count, { read }) => count + Number(!read), 0)\n  }, [activities])\n\n  const updateActivitiesFromStorage = useCallback(() => {\n    if (!storedList.current) {\n      return\n    }\n\n    const activitiesFromStorage = storedList.current.getItems()\n\n    // We will diff activities from storage and activites from state to prevent loops in the useEffect below\n    const activitiesChanged =\n      activities.length !== activitiesFromStorage.length ||\n      activitiesFromStorage.filter(\n        ({ transactionHash }) =>\n          activities.findIndex(\n            activity => activity.transactionHash === transactionHash\n          ) === -1\n      ) > 0\n\n    if (activitiesChanged) {\n      setActivities(activitiesFromStorage)\n    }\n  }, [activities])\n\n  // Triggered every time the account changes\n  useEffect(() => {\n    if (!account) {\n      return\n    }\n\n    let cancelled = false\n    storedList.current = getStoredList(account)\n    updateActivitiesFromStorage()\n\n    activities.forEach(async activity => {\n      const status = await getActivityFinalStatus(ethers, activity)\n      if (!cancelled && status !== activity.status) {\n        updateActivityStatus(activity.transactionHash, status)\n      }\n    })\n\n    return () => {\n      cancelled = true\n    }\n  }, [\n    account,\n    activities,\n    ethers,\n    updateActivitiesFromStorage,\n    updateActivityStatus,\n  ])\n\n  return (\n    <ActivityContext.Provider\n      value={{\n        activities,\n        addActivity,\n        clearActivities,\n        markActivitiesRead,\n        removeActivity,\n        unreadCount,\n        updateActivities,\n      }}\n    >\n      {children}\n    </ActivityContext.Provider>\n  )\n}\n\nActivityProvider.propTypes = {\n  children: PropTypes.node,\n}\n\nfunction useActivity() {\n  return useContext(ActivityContext)\n}\n\nexport { ActivityProvider, useActivity }\n"]},"metadata":{},"sourceType":"module"}