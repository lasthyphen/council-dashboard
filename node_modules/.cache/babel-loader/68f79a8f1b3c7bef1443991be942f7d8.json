{"ast":null,"code":"import _classCallCheck from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _possibleConstructorReturn from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";import _wrapNativeSuper from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";import _defineProperty from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{getNetworkName}from'./lib/web3-utils';import env from'./environment';export var extendError=function extendError(name,_ref){var _temp;var defaultMessage=_ref.defaultMessage;return _temp=/*#__PURE__*/function(_Error){_inherits(_temp,_Error);function _temp(){var _this;var message=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultMessage;_classCallCheck(this,_temp);_this=_possibleConstructorReturn(this,_getPrototypeOf(_temp).call(this,message));_defineProperty(_assertThisInitialized(_this),\"name\",name);return _this;}return _temp;}(_wrapNativeSuper(Error)),_temp;};export var DisputeNotFound=/*#__PURE__*/function(_Error2){_inherits(DisputeNotFound,_Error2);function DisputeNotFound(disputeId){var _this2;_classCallCheck(this,DisputeNotFound);_this2=_possibleConstructorReturn(this,_getPrototypeOf(DisputeNotFound).call(this,\"It looks like there\\u2019s no dispute associated with the \\u201CDisputeID #\".concat(disputeId,\"\\u201D on the Ethereum \").concat(getNetworkName(env('CHAIN_ID')),\" network.\")));_defineProperty(_assertThisInitialized(_this2),\"name\",'DisputeNotFound');_this2.disputeId=disputeId;return _this2;}return DisputeNotFound;}(_wrapNativeSuper(Error));export var InvalidNetworkType=extendError('InvalidNetworkType',{defaultMessage:'The network type is invalid'});export var InvalidURI=extendError('InvalidURI',{defaultMessage:'The URI is invalid'});export var NoConnection=extendError('NoConnection',{defaultMessage:'There is no connection'});","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/errors.js"],"names":["getNetworkName","env","extendError","name","defaultMessage","message","Error","DisputeNotFound","disputeId","InvalidNetworkType","InvalidURI","NoConnection"],"mappings":"44BAAA,OAASA,cAAT,KAA+B,kBAA/B,CACA,MAAOC,CAAAA,GAAP,KAAgB,eAAhB,CAEA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,oBAASC,CAAAA,cAAT,MAASA,cAAT,oEAGvB,gBAAsC,cAA1BC,CAAAA,OAA0B,2DAAhBD,cAAgB,6BACpC,uEAAMC,OAAN,GADoC,qDAD/BF,IAC+B,eAErC,CALsB,gCACXG,KADW,UAApB,CAQP,UAAaC,CAAAA,eAAb,mEAEE,yBAAYC,SAAZ,CAAuB,kDACrB,uKACsEA,SADtE,mCACoGR,cAAc,CAC9GC,GAAG,CAAC,UAAD,CAD2G,CADlH,gBADqB,sDADhB,iBACgB,EAMrB,OAAKO,SAAL,CAAiBA,SAAjB,CANqB,cAOtB,CATH,0CAAqCF,KAArC,GAYA,MAAO,IAAMG,CAAAA,kBAAkB,CAAGP,WAAW,CAAC,oBAAD,CAAuB,CAClEE,cAAc,CAAE,6BADkD,CAAvB,CAAtC,CAGP,MAAO,IAAMM,CAAAA,UAAU,CAAGR,WAAW,CAAC,YAAD,CAAe,CAClDE,cAAc,CAAE,oBADkC,CAAf,CAA9B,CAGP,MAAO,IAAMO,CAAAA,YAAY,CAAGT,WAAW,CAAC,cAAD,CAAiB,CACtDE,cAAc,CAAE,wBADsC,CAAjB,CAAhC","sourcesContent":["import { getNetworkName } from './lib/web3-utils'\nimport env from './environment'\n\nexport const extendError = (name, { defaultMessage }) =>\n  class extends Error {\n    name = name\n    constructor(message = defaultMessage) {\n      super(message)\n    }\n  }\n\nexport class DisputeNotFound extends Error {\n  name = 'DisputeNotFound'\n  constructor(disputeId) {\n    super(\n      `It looks like there’s no dispute associated with the “DisputeID #${disputeId}” on the Ethereum ${getNetworkName(\n        env('CHAIN_ID')\n      )} network.`\n    )\n    this.disputeId = disputeId\n  }\n}\n\nexport const InvalidNetworkType = extendError('InvalidNetworkType', {\n  defaultMessage: 'The network type is invalid',\n})\nexport const InvalidURI = extendError('InvalidURI', {\n  defaultMessage: 'The URI is invalid',\n})\nexport const NoConnection = extendError('NoConnection', {\n  defaultMessage: 'There is no connection',\n})\n"]},"metadata":{},"sourceType":"module"}