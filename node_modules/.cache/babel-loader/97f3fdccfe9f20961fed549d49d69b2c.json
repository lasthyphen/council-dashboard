{"ast":null,"code":"import _typeof from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/typeof\";import PropTypes from'prop-types';import{isAddress}from'@aragon/ui';// https://github.com/react-spring/react-spring/blob/31200a79843ce85200b2a7692e8f14788e60f9e9/types/renderprops-universal.d.ts#L133\nexport var ReactSpringStateType=PropTypes.oneOf(['enter','update','leave']);function validatorCreator(nonRequiredFunction){var validator=nonRequiredFunction;validator.isRequired=function(props,propName,componentName){var value=props[propName];if(value===null||value===undefined||value===''){return new Error(\"Property \".concat(propName,\" is required on \").concat(componentName,\", but \").concat(value,\" was given.\"));}return nonRequiredFunction(props,propName,componentName);};return validator;}function ethereumAddressValidator(props,propName,componentName){var value=props[propName];if(value===null||value===undefined||value===''){return null;}if(!isAddress(value)){var valueType=_typeof(value);var nonAddress=null;if(valueType!=='object'){nonAddress=value.toString();}return new Error(\"Invalid prop \".concat(propName,\" supplied to \").concat(componentName,\". The provided value is not a valid ethereum address.\").concat(nonAddress&&\" You provided \\\"\".concat(nonAddress,\"\\\"\")));}return null;}export var EthereumAddressType=validatorCreator(ethereumAddressValidator);","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/prop-types.js"],"names":["PropTypes","isAddress","ReactSpringStateType","oneOf","validatorCreator","nonRequiredFunction","validator","isRequired","props","propName","componentName","value","undefined","Error","ethereumAddressValidator","valueType","nonAddress","toString","EthereumAddressType"],"mappings":"8GAAA,MAAOA,CAAAA,SAAP,KAAsB,YAAtB,CACA,OAASC,SAAT,KAA0B,YAA1B,CAEA;AACA,MAAO,IAAMC,CAAAA,oBAAoB,CAAGF,SAAS,CAACG,KAAV,CAAgB,CAClD,OADkD,CAElD,QAFkD,CAGlD,OAHkD,CAAhB,CAA7B,CAMP,QAASC,CAAAA,gBAAT,CAA0BC,mBAA1B,CAA+C,CAC7C,GAAMC,CAAAA,SAAS,CAAGD,mBAAlB,CACAC,SAAS,CAACC,UAAV,CAAuB,SAACC,KAAD,CAAQC,QAAR,CAAkBC,aAAlB,CAAoC,CACzD,GAAMC,CAAAA,KAAK,CAAGH,KAAK,CAACC,QAAD,CAAnB,CACA,GAAIE,KAAK,GAAK,IAAV,EAAkBA,KAAK,GAAKC,SAA5B,EAAyCD,KAAK,GAAK,EAAvD,CAA2D,CACzD,MAAO,IAAIE,CAAAA,KAAJ,oBACOJ,QADP,4BACkCC,aADlC,kBACwDC,KADxD,gBAAP,CAGD,CACD,MAAON,CAAAA,mBAAmB,CAACG,KAAD,CAAQC,QAAR,CAAkBC,aAAlB,CAA1B,CACD,CARD,CASA,MAAOJ,CAAAA,SAAP,CACD,CAED,QAASQ,CAAAA,wBAAT,CAAkCN,KAAlC,CAAyCC,QAAzC,CAAmDC,aAAnD,CAAkE,CAChE,GAAMC,CAAAA,KAAK,CAAGH,KAAK,CAACC,QAAD,CAAnB,CACA,GAAIE,KAAK,GAAK,IAAV,EAAkBA,KAAK,GAAKC,SAA5B,EAAyCD,KAAK,GAAK,EAAvD,CAA2D,CACzD,MAAO,KAAP,CACD,CACD,GAAI,CAACV,SAAS,CAACU,KAAD,CAAd,CAAuB,CACrB,GAAMI,CAAAA,SAAS,SAAUJ,KAAV,CAAf,CACA,GAAIK,CAAAA,UAAU,CAAG,IAAjB,CACA,GAAID,SAAS,GAAK,QAAlB,CAA4B,CAC1BC,UAAU,CAAGL,KAAK,CAACM,QAAN,EAAb,CACD,CACD,MAAO,IAAIJ,CAAAA,KAAJ,wBACWJ,QADX,yBACmCC,aADnC,iEACwGM,UAAU,4BACnGA,UADmG,MADlH,EAAP,CAID,CACD,MAAO,KAAP,CACD,CAED,MAAO,IAAME,CAAAA,mBAAmB,CAAGd,gBAAgB,CAACU,wBAAD,CAA5C","sourcesContent":["import PropTypes from 'prop-types'\nimport { isAddress } from '@aragon/ui'\n\n// https://github.com/react-spring/react-spring/blob/31200a79843ce85200b2a7692e8f14788e60f9e9/types/renderprops-universal.d.ts#L133\nexport const ReactSpringStateType = PropTypes.oneOf([\n  'enter',\n  'update',\n  'leave',\n])\n\nfunction validatorCreator(nonRequiredFunction) {\n  const validator = nonRequiredFunction\n  validator.isRequired = (props, propName, componentName) => {\n    const value = props[propName]\n    if (value === null || value === undefined || value === '') {\n      return new Error(\n        `Property ${propName} is required on ${componentName}, but ${value} was given.`\n      )\n    }\n    return nonRequiredFunction(props, propName, componentName)\n  }\n  return validator\n}\n\nfunction ethereumAddressValidator(props, propName, componentName) {\n  const value = props[propName]\n  if (value === null || value === undefined || value === '') {\n    return null\n  }\n  if (!isAddress(value)) {\n    const valueType = typeof value\n    let nonAddress = null\n    if (valueType !== 'object') {\n      nonAddress = value.toString()\n    }\n    return new Error(\n      `Invalid prop ${propName} supplied to ${componentName}. The provided value is not a valid ethereum address.${nonAddress &&\n        ` You provided \"${nonAddress}\"`}`\n    )\n  }\n  return null\n}\n\nexport const EthereumAddressType = validatorCreator(ethereumAddressValidator)\n"]},"metadata":{},"sourceType":"module"}