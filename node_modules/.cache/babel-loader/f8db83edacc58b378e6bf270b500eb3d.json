{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = void 0;\n/**\n* @module radspec/helpers/HelperManager\n*/\n\n/**\n* Class for managing the execution of helper functions\n*\n* @class HelperManager\n* @param {Object} availableHelpers Defined helpers\n*/\n\nvar HelperManager =\n/*#__PURE__*/\nfunction () {\n  function HelperManager() {\n    var availableHelpers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HelperManager);\n\n    this.availableHelpers = availableHelpers;\n  }\n  /**\n  * Does a helper exist\n  *\n  * @param  {string} helper Helper name\n  * @return {bool}\n  */\n\n\n  _createClass(HelperManager, [{\n    key: \"exists\",\n    value: function exists(helper) {\n      return !!this.availableHelpers[helper];\n    }\n    /**\n    * Execute a helper with some inputs\n    *\n    * @param  {string} helper Helper name\n    * @param  {Array<radspec/evaluator/TypedValue>} inputs\n    * @param  {Object} config Configuration for running helper\n    * @param {ethers.providers.Provider} config.provider Current provider\n    * @param  {radspec/evaluator/Evaluator} config.evaluator Current evaluator\n    * @return {Promise<radspec/evaluator/TypedValue>}\n    */\n\n  }, {\n    key: \"execute\",\n    value: function execute(helper, inputs, _ref) {\n      var provider = _ref.provider,\n          evaluator = _ref.evaluator;\n      // pass values directly\n      return inputs = inputs.map(function (input) {\n        return input.value;\n      }), this.availableHelpers[helper](provider, evaluator).apply(void 0, _toConsumableArray(inputs));\n    }\n    /**\n    * Get all registered helpers as a key-value mapping\n    *\n    * @return {Object}\n    */\n\n  }, {\n    key: \"getHelpers\",\n    value: function getHelpers() {\n      return this.availableHelpers;\n    }\n  }]);\n\n  return HelperManager;\n}();\n\nexports.default = HelperManager;","map":null,"metadata":{},"sourceType":"script"}