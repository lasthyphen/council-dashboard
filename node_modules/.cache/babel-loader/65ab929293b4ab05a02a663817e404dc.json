{"ast":null,"code":"import { Role } from '@aragon/connect-core';\n\nasync function _parseRole(role, app, organization) {\n  var _a, _b, _c;\n\n  const grantees = (_a = role === null || role === void 0 ? void 0 : role.grantees) === null || _a === void 0 ? void 0 : _a.map(permission => {\n    var _a;\n\n    return {\n      appAddress: permission === null || permission === void 0 ? void 0 : permission.appAddress,\n      allowed: permission === null || permission === void 0 ? void 0 : permission.allowed,\n      granteeAddress: permission === null || permission === void 0 ? void 0 : permission.granteeAddress,\n      params: ((_a = permission === null || permission === void 0 ? void 0 : permission.params) === null || _a === void 0 ? void 0 : _a.map(param => ({\n        argumentId: param === null || param === void 0 ? void 0 : param.argumentId,\n        operationType: param === null || param === void 0 ? void 0 : param.operationType,\n        argumentValue: param === null || param === void 0 ? void 0 : param.argumentValue\n      }))) || [],\n      roleHash: permission === null || permission === void 0 ? void 0 : permission.roleHash\n    };\n  });\n  const roleData = {\n    appAddress: role === null || role === void 0 ? void 0 : role.appAddress,\n    appId: app === null || app === void 0 ? void 0 : app.appId,\n    artifact: (_b = app === null || app === void 0 ? void 0 : app.version) === null || _b === void 0 ? void 0 : _b.artifact,\n    contentUri: (_c = app === null || app === void 0 ? void 0 : app.version) === null || _c === void 0 ? void 0 : _c.contentUri,\n    grantees: grantees || [],\n    hash: role === null || role === void 0 ? void 0 : role.roleHash,\n    manager: role === null || role === void 0 ? void 0 : role.manager\n  };\n  return Role.create(roleData, organization);\n}\n\nexport async function parseRole(result, organization) {\n  var _a, _b;\n\n  const app = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.app;\n  const role = (_b = result === null || result === void 0 ? void 0 : result.data) === null || _b === void 0 ? void 0 : _b.role;\n\n  if (!app || !role) {\n    throw new Error('Unable to parse role.');\n  }\n\n  return _parseRole(role, app, organization);\n}\nexport async function parseRoles(result, organization) {\n  var _a;\n\n  const app = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.app;\n  const roles = app === null || app === void 0 ? void 0 : app.roles;\n\n  if (!app || !Array.isArray(roles)) {\n    throw new Error('Unable to parse roles.');\n  }\n\n  return Promise.all(roles.map(async role => {\n    return _parseRole(role, app, organization);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}