{"ast":null,"code":"import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{toMs}from'./date-utils';import{bigNum}from'../lib/math-utils';import{getOutcomeNumber}from'./crvoting-utils';import*as DisputesTypes from'../types/dispute-status-types';import{getTermEndTime,getTermStartTime}from'./court-utils';import{getVoidedDisputesByCourt}from'../flagged-disputes/voided-disputes';import{getPrecedenceCampaignDisputesByCourt}from'../flagged-disputes/precedence-campaign-disputes';export var FINAL_ROUND_WEIGHT_PRECISION=bigNum(1000);export var PCT_BASE=bigNum(10000);export function transformRoundDataAttributes(round){var vote=round.vote,appeal=round.appeal;return _objectSpread({},round,{createdAt:toMs(parseInt(round.createdAt,10)),draftTermId:parseInt(round.draftTermId,10),delayedTerms:parseInt(round.delayedTerms,10),number:parseInt(round.number),jurors:round.jurors.map(function(juror){return _objectSpread({},juror,{commitmentDate:toMs(parseInt(juror.commitmentDate||0,10)),revealDate:toMs(parseInt(juror.revealDate||0,10)),weight:parseInt(juror.weight,10)});}),vote:vote?_objectSpread({},vote,{winningOutcome:getOutcomeNumber(vote.winningOutcome)}):null,appeal:appeal?_objectSpread({},appeal,{appealedRuling:parseInt(appeal.appealedRuling,10),opposedRuling:parseInt(appeal.opposedRuling,10),createdAt:toMs(parseInt(appeal.createdAt)),confirmedAt:toMs(parseInt(appeal.confirmedAt||0))}):null,state:DisputesTypes.convertFromString(round.state)});}/**\n * Parses metadata of the given dispute\n\n * Disputes metadata comes in two forms:\n *        1 - Raw disputes: metadata is usually a JSON object containing `description` and `metadata` where the later is the metadata uri.\n *        2 - Disputables: there's no useful information in `metadata` itself, in this case we'll get the dispute information from the `disputable` attr.\n *  Note that this function is meant to parse only dispute description and metadata uri (in case it exists). More relevant information will be processed elsewhere.\n * @param {Object} dispute Dispute in question\n * @returns {Array<String>} Array where the first item is the dispute description and second item is the metadata uri if it exists\n */function parseMetadata(dispute){if(dispute.disputable){return[dispute.disputable.title];}try{var _JSON$parse=JSON.parse(dispute.metadata),description=_JSON$parse.description,metadata=_JSON$parse.metadata;return[description,metadata];}catch(error){// if is not a json return the metadata as the description\nreturn[dispute.metadata];}}export function transformDisputeDataAttributes(dispute){var _parseMetadata=parseMetadata(dispute),_parseMetadata2=_slicedToArray(_parseMetadata,2),description=_parseMetadata2[0],metadataUri=_parseMetadata2[1];var transformedDispute=_objectSpread({},dispute,{createdAt:toMs(parseInt(dispute.createdAt,10)),description:description,metadataUri:metadataUri,rounds:dispute.rounds.map(transformRoundDataAttributes),state:DisputesTypes.convertFromString(dispute.state),status:DisputesTypes.convertFromString(dispute.state)===DisputesTypes.Phase.Ruled?DisputesTypes.Status.Closed:DisputesTypes.Status.Open});// If the dispute is part of the precedence campaign we will flag it as such\nvar precedenceCamapignDisputes=getPrecedenceCampaignDisputesByCourt();var isPartOfPrecedenceCampaign=precedenceCamapignDisputes.has(dispute.id);transformedDispute.marksPrecedent=isPartOfPrecedenceCampaign;// If the dispute is voided we will override certain data\nvar voidedDisputes=getVoidedDisputesByCourt();var voidedDispute=voidedDisputes.get(dispute.id);return voidedDispute?overrideVoidedDispute(transformedDispute,voidedDispute):transformedDispute;}function overrideVoidedDispute(dispute,voidedDispute){return _objectSpread({},dispute,{evidences:[],metadata:'',status:DisputesTypes.Status.Voided,voidedDescription:voidedDispute.description,voidedLink:voidedDispute.link,voidedText:voidedDispute.text});}/**\n * @param {Object} dispute The dispute to query the current phase and next transition of\n * @param {Number} currentTerm The court current term\n * @param {Object} courtConfig The court configuration\n * @returns {Object} Current phase and next phase transition for the given dispute\n */export function getPhaseAndTransition(dispute,currentTerm,courtConfig){if(!dispute)return null;var phase;var nextTransition;var state=dispute.state;var lastRound=dispute.rounds[dispute.lastRoundId];var number=lastRound.number;// Dispute already ruled\nif(state===DisputesTypes.Phase.Ruled){phase=DisputesTypes.Phase.ClaimRewards;return{phase:phase,roundId:number,maxAppealReached:hasDisputeReachedMaxAppeals(dispute,courtConfig)};}// Evidence submission\nif(state===DisputesTypes.Phase.Evidence){var evidenceSubmissionEndTerm=getEvidenceSubmissionEndTerm(dispute,courtConfig);var evidenceSubmissionEndTime=getTermEndTime(evidenceSubmissionEndTerm,courtConfig);if(currentTerm>evidenceSubmissionEndTerm){phase=DisputesTypes.Phase.JuryDrafting;}else{phase=state;nextTransition=evidenceSubmissionEndTime;}return{phase:phase,nextTransition:nextTransition,roundId:number};}// Jury Drafting phase\nif(state===DisputesTypes.Phase.JuryDrafting){// When a new round is created, it could happen that the draft term has not been reached yet\n// because the confirm appeal phase of the previous round has not yet ended\nif(currentTerm<lastRound.draftTermId){var draftStartTime=getTermStartTime(lastRound.draftTermId,courtConfig);phase=DisputesTypes.Phase.NotStarted;nextTransition=draftStartTime;}else{phase=DisputesTypes.Phase.JuryDrafting;}return{phase:phase,nextTransition:nextTransition,roundId:number};}// Adjudicating\nif(state===DisputesTypes.Phase.Adjudicating){var currentAdjudicationPhase=getAdjudicationPhase(dispute,lastRound,currentTerm,courtConfig);var _currentAdjudicationP=currentAdjudicationPhase,_phase=_currentAdjudicationP.phase,phaseEndTerm=_currentAdjudicationP.phaseEndTerm;if(_phase===DisputesTypes.Phase.Ended){currentAdjudicationPhase=_objectSpread({},currentAdjudicationPhase,{phase:DisputesTypes.Phase.ExecuteRuling});}var _nextTransition=phaseEndTerm?getTermEndTime(phaseEndTerm,courtConfig):null;return _objectSpread({},currentAdjudicationPhase,{roundId:number,nextTransition:_nextTransition});}}/**\n * Tells the adjudication state of a dispute's round at a certain time.\n * @param {Object} dispute Dispute to query the adjudication round of\n * @param {Object} round The round that is being queried\n * @param {Number} termId The term at which to query the dispute's adjudication phase\n * @param {Object} courtConfig The court configuration\n * @returns {Object} The adjudication phase of the requested round at the given time\n */export function getAdjudicationPhase(dispute,round,termId,courtConfig){var commitTerms=courtConfig.commitTerms,revealTerms=courtConfig.revealTerms,appealTerms=courtConfig.appealTerms,appealConfirmationTerms=courtConfig.appealConfirmationTerms;var draftTermId=round.draftTermId,delayedTerms=round.delayedTerms,roundId=round.number;var draftEndTerm=draftTermId+delayedTerms;var maxAppealReached=hasDisputeReachedMaxAppeals(dispute,courtConfig);// When voting period has not yet started there are two possible cases:\n//   * We are at the last possible round so adjudication phase hasn't started\n//   * We are not in an adjudication phase so it is invalid\nif(termId<draftEndTerm){if(maxAppealReached){return{phase:DisputesTypes.Phase.NotStarted,phaseEndTerm:draftEndTerm,roundId:roundId};}return{phase:DisputesTypes.Phase.Invalid,roundId:roundId};}// Jurors can commit their votes between when the commit phase term starts and ends\n// Note that the commit start term is the same as the draft end term\nvar commitEndTerm=draftEndTerm+commitTerms-1;if(termId<=commitEndTerm){return{phase:DisputesTypes.Phase.VotingPeriod,phaseEndTerm:commitEndTerm,maxAppealReached:maxAppealReached,roundId:roundId};}// Jurors can reveal their votes between when the reveal phase term starts and ends\nvar revealEndTerm=commitEndTerm+revealTerms;if(termId<=revealEndTerm){return{phase:DisputesTypes.Phase.RevealVote,phaseEndTerm:revealEndTerm,maxAppealReached:maxAppealReached,roundId:roundId};}// If the max number of appeals has been reached, then the last round is the final round and can be considered ended\nif(maxAppealReached){return{phase:DisputesTypes.Phase.Ended,maxAppealReached:maxAppealReached,roundId:roundId};}// If the last round was not appealed yet, check if the confirmation period has started or not\nvar isLastRoundAppealed=!!round.appeal&&round.appeal.appealedRuling!==0;var appealEndTerm=revealEndTerm+appealTerms;if(!isLastRoundAppealed){// If given term is before the appeal confirmation start term, then the last round can still be appealed. Otherwise, it is ended.\nif(termId<=appealEndTerm){return{phase:DisputesTypes.Phase.AppealRuling,phaseEndTerm:appealEndTerm,roundId:roundId};}else{return{phase:DisputesTypes.Phase.Ended,roundId:roundId};}}// If the last round was appealed and the given term is before the appeal confirmation end term, then the last round appeal can still be\n// confirmed. Note that if the round being checked was already appealed and confirmed, it won't be the last round, thus it will be caught\n// above by the first check and considered 'Ended'.\nvar appealConfirmationEndTerm=appealEndTerm+appealConfirmationTerms;if(termId<appealConfirmationEndTerm){return{phase:DisputesTypes.Phase.ConfirmAppeal,phaseEndTerm:appealConfirmationEndTerm,roundId:roundId};}// If non of the above conditions have been met, the last round is considered ended\nreturn{phase:DisputesTypes.Phase.Ended,roundId:roundId};}/**\n * Terminology here will be:\n *        Last round => last round actually reached in a dispute\n *        Final round => max possible round for a dispute (when the max appeals for a given dispute is reached)\n * @param {Object} round The round to get the phases from\n * @param {Object} currentPhase The dispute's current phase\n * @param {Number} currentTerm The court current term\n * @param {Object} courtConfig The court configuration\n * @returns {Array} Array of all `round` phases.\n */export function getRoundPhasesAndTime(round,currentPhase,currentTerm,courtConfig){var commitTerms=courtConfig.commitTerms,revealTerms=courtConfig.revealTerms,appealTerms=courtConfig.appealTerms,appealConfirmationTerms=courtConfig.appealConfirmationTerms;var draftTermId=round.draftTermId,delayedTerms=round.delayedTerms,roundId=round.number,vote=round.vote,appeal=round.appeal;var isCurrentRound=roundId===currentPhase.roundId;var _ref=vote||{},winningOutcome=_ref.winningOutcome;var draftStartTime=getTermStartTime(draftTermId,courtConfig);// Case where we are in a next round and has not yet started\nif(isCurrentRound&&currentPhase.phase===DisputesTypes.Phase.NotStarted){return[{phase:DisputesTypes.Phase.NotStarted,endTime:draftStartTime,roundId:roundId,active:true}];}var draftEndTerm=draftTermId+delayedTerms;// Note that the commit start term is the same as the draft end term\nvar votingEndTerm=draftEndTerm+commitTerms-1;var revealEndTerm=votingEndTerm+revealTerms;var appealEndTerm=revealEndTerm+appealTerms;var confirmAppealEndTerm=appealEndTerm+appealConfirmationTerms;var roundAppealed=!!appeal;var roundAppealConfirmed=roundAppealed&&appeal.opposedRuling>0;var roundPhasesAndTime=[{// Jurors can be drafted at any time, so we'll only set the\n// `endTime` when the drafting phase has already passed\nphase:DisputesTypes.Phase.JuryDrafting,endTime:DisputesTypes.Phase.JuryDrafting!==currentPhase.phase?getTermEndTime(draftEndTerm,courtConfig):null,active:isCurrentRound&&DisputesTypes.Phase.JuryDrafting===currentPhase.phase,roundId:roundId},{phase:DisputesTypes.Phase.VotingPeriod,endTime:getTermEndTime(votingEndTerm,courtConfig),active:isCurrentRound&&DisputesTypes.Phase.VotingPeriod===currentPhase.phase,roundId:roundId},{phase:DisputesTypes.Phase.RevealVote,endTime:getTermEndTime(revealEndTerm,courtConfig),active:isCurrentRound&&DisputesTypes.Phase.RevealVote===currentPhase.phase,roundId:roundId,outcome:winningOutcome,showOutcome:currentTerm>revealEndTerm},{// If the round was appealed we know it's a past phase and must update the endTime for the time this took effect (appeal.createdAt)\n// If it wasn't appealed we have two cases:\n//       - It's a past phase so in that case the endTime will be the time at where it's supposed to end if taking the full appealTerms duration\n//       - It's the dispute active phase (the round can still be appealed) so the endTime will be used to tell the timer remaining time before the appeal phase is closed\nphase:DisputesTypes.Phase.AppealRuling,endTime:roundAppealed?appeal.createdAt:getTermEndTime(appealEndTerm,courtConfig),active:isCurrentRound&&DisputesTypes.Phase.AppealRuling===currentPhase.phase,roundId:roundId,outcome:roundAppealed?appeal.appealedRuling:null,showOutcome:roundAppealed||currentTerm>appealEndTerm// If the round was appealed, we'll show the outcome (appeal ruling),\n// If it wasn't appealed then we'll show a \"Nobodoy appealed\" message\n},{// If the round was appeal confirmed we know it's a past phase and must update the endTime for the time this took effect (appeal.confirmedAt)\n// If it wasn't appeal confirmed we have two cases:\n//       - It's a past phase so in that case the endTime will be the time at where it's supposed to end if taking the full confirmAppealTerms duration\n//       - It's the dispute active phase (the round can still be appeal confirmed) so the endTime will be used to tell the timer remaining time before the confirm appeal phase is closed\nphase:DisputesTypes.Phase.ConfirmAppeal,endTime:roundAppealConfirmed?appeal.confirmedAt:getTermEndTime(confirmAppealEndTerm,courtConfig),active:isCurrentRound&&DisputesTypes.Phase.ConfirmAppeal===currentPhase.phase,roundId:roundId,outcome:roundAppealConfirmed?appeal.opposedRuling:null,showOutcome:roundAppealConfirmed||currentTerm>confirmAppealEndTerm}];// If it's not the last round means that the dispute reached the next appeal round\n// so we show all possible phases\nif(roundId<currentPhase.roundId){return roundPhasesAndTime;}// If it's the last round and has already ended (show past phases)\nif(currentPhase.phase===DisputesTypes.Phase.ExecuteRuling||currentPhase.phase===DisputesTypes.Phase.ClaimRewards){// In the final round (maxAppealedReached), there's no drafting phase and appealing is not possible\n// so we only must show Voting and Revealing\nif(currentPhase.maxAppealReached){return roundPhasesAndTime.slice(1,3);}// If round not appealed\nif(!roundAppealed){return roundPhasesAndTime.slice(0,4);}return roundPhasesAndTime;}// Find the last round current phase\nvar currentPhaseIndex=roundPhasesAndTime.findIndex(function(phase){return phase.phase===currentPhase.phase;});// When round has not yet ended\nreturn roundPhasesAndTime.slice(currentPhase.maxAppealReached?1:0,currentPhaseIndex+1);}/**\n *\n * @param {Object} dispute The dispute in question\n * @param {Object} courtConfig The court configuration\n * @returns {Number} The end time of the evidence submission phase in ms\n */export function getEvidenceSubmissionEndTerm(dispute,courtConfig){var firstRound=dispute.rounds[0];// If the evidence period is closed before the full `evidenceTerms` period,\n// the draftTermId for the first round is updated to the term this happened.\nreturn firstRound.draftTermId-1;}/**\n * Tells whether the dispute has reached the maximum number of rounds possible\n * @param {Object} dispute The dispute in question\n * @param {Object} courtConfig The court configuration\n * @returns {Boolean} True if dispute has reached maximum number of rounds possible\n */function hasDisputeReachedMaxAppeals(dispute,courtConfig){var maxRegularAppealRounds=courtConfig.maxRegularAppealRounds;var numberOfRounds=dispute.rounds.length;return numberOfRounds>maxRegularAppealRounds;}/**\n * @param {Object} dispute The dispute to get the last round from\n * @returns {Object} dispute's last round\n */export function getDisputeLastRound(dispute){return dispute.rounds[dispute.lastRoundId];}/**\n *\n * @param {Object} round Round to calculate fees from\n * @param {Object} courtConfig The court configuration\n * @returns {BigNum} The total fees for the round\n */export function getRoundFees(round,courtConfig){var draftFee=courtConfig.draftFee,settleFee=courtConfig.settleFee,jurorFee=courtConfig.jurorFee,finalRoundReduction=courtConfig.finalRoundReduction,maxRegularAppealRounds=courtConfig.maxRegularAppealRounds;// Final round\nif(round.number===maxRegularAppealRounds){return jurorFee.mul(round.jurorsNumber).div(FINAL_ROUND_WEIGHT_PRECISION.mul(finalRoundReduction).div(PCT_BASE));}// Regular round\nreturn draftFee.add(settleFee).add(jurorFee).mul(round.jurorsNumber);}/**\n *\n * @param {BigNum} minActiveBalance The minimum active balance required to become an active juror\n * @param {BigNum} penaltyPct Percentage (against PCT_BASE) of min active tokens balance to be locked to each drafted juror\n * @param {BigNum} weight Weight computed for a juror on a round\n * @returns {BigNum} The amount that will be locked each time a juror is drafted\n */export function getDraftLockAmount(minActiveBalance,penaltyPct,weight){return minActiveBalance.mul(penaltyPct).div(PCT_BASE).mul(weight);}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/utils/dispute-utils.js"],"names":["toMs","bigNum","getOutcomeNumber","DisputesTypes","getTermEndTime","getTermStartTime","getVoidedDisputesByCourt","getPrecedenceCampaignDisputesByCourt","FINAL_ROUND_WEIGHT_PRECISION","PCT_BASE","transformRoundDataAttributes","round","vote","appeal","createdAt","parseInt","draftTermId","delayedTerms","number","jurors","map","juror","commitmentDate","revealDate","weight","winningOutcome","appealedRuling","opposedRuling","confirmedAt","state","convertFromString","parseMetadata","dispute","disputable","title","JSON","parse","metadata","description","error","transformDisputeDataAttributes","metadataUri","transformedDispute","rounds","status","Phase","Ruled","Status","Closed","Open","precedenceCamapignDisputes","isPartOfPrecedenceCampaign","has","id","marksPrecedent","voidedDisputes","voidedDispute","get","overrideVoidedDispute","evidences","Voided","voidedDescription","voidedLink","link","voidedText","text","getPhaseAndTransition","currentTerm","courtConfig","phase","nextTransition","lastRound","lastRoundId","ClaimRewards","roundId","maxAppealReached","hasDisputeReachedMaxAppeals","Evidence","evidenceSubmissionEndTerm","getEvidenceSubmissionEndTerm","evidenceSubmissionEndTime","JuryDrafting","draftStartTime","NotStarted","Adjudicating","currentAdjudicationPhase","getAdjudicationPhase","phaseEndTerm","Ended","ExecuteRuling","termId","commitTerms","revealTerms","appealTerms","appealConfirmationTerms","draftEndTerm","Invalid","commitEndTerm","VotingPeriod","revealEndTerm","RevealVote","isLastRoundAppealed","appealEndTerm","AppealRuling","appealConfirmationEndTerm","ConfirmAppeal","getRoundPhasesAndTime","currentPhase","isCurrentRound","endTime","active","votingEndTerm","confirmAppealEndTerm","roundAppealed","roundAppealConfirmed","roundPhasesAndTime","outcome","showOutcome","slice","currentPhaseIndex","findIndex","firstRound","maxRegularAppealRounds","numberOfRounds","length","getDisputeLastRound","getRoundFees","draftFee","settleFee","jurorFee","finalRoundReduction","mul","jurorsNumber","div","add","getDraftLockAmount","minActiveBalance","penaltyPct"],"mappings":"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","sourcesContent":["import { toMs } from './date-utils'\nimport { bigNum } from '../lib/math-utils'\nimport { getOutcomeNumber } from './crvoting-utils'\nimport * as DisputesTypes from '../types/dispute-status-types'\nimport { getTermEndTime, getTermStartTime } from './court-utils'\nimport { getVoidedDisputesByCourt } from '../flagged-disputes/voided-disputes'\nimport { getPrecedenceCampaignDisputesByCourt } from '../flagged-disputes/precedence-campaign-disputes'\n\nexport const FINAL_ROUND_WEIGHT_PRECISION = bigNum(1000)\nexport const PCT_BASE = bigNum(10000)\n\nexport function transformRoundDataAttributes(round) {\n  const { vote, appeal } = round\n\n  return {\n    ...round,\n    createdAt: toMs(parseInt(round.createdAt, 10)),\n    draftTermId: parseInt(round.draftTermId, 10),\n    delayedTerms: parseInt(round.delayedTerms, 10),\n    number: parseInt(round.number),\n    jurors: round.jurors.map(juror => ({\n      ...juror,\n      commitmentDate: toMs(parseInt(juror.commitmentDate || 0, 10)),\n      revealDate: toMs(parseInt(juror.revealDate || 0, 10)),\n      weight: parseInt(juror.weight, 10),\n    })),\n    vote: vote\n      ? {\n          ...vote,\n          winningOutcome: getOutcomeNumber(vote.winningOutcome),\n        }\n      : null,\n    appeal: appeal\n      ? {\n          ...appeal,\n          appealedRuling: parseInt(appeal.appealedRuling, 10),\n          opposedRuling: parseInt(appeal.opposedRuling, 10),\n          createdAt: toMs(parseInt(appeal.createdAt)),\n          confirmedAt: toMs(parseInt(appeal.confirmedAt || 0)),\n        }\n      : null,\n    state: DisputesTypes.convertFromString(round.state),\n  }\n}\n\n/**\n * Parses metadata of the given dispute\n\n * Disputes metadata comes in two forms:\n *        1 - Raw disputes: metadata is usually a JSON object containing `description` and `metadata` where the later is the metadata uri.\n *        2 - Disputables: there's no useful information in `metadata` itself, in this case we'll get the dispute information from the `disputable` attr.\n *  Note that this function is meant to parse only dispute description and metadata uri (in case it exists). More relevant information will be processed elsewhere.\n * @param {Object} dispute Dispute in question\n * @returns {Array<String>} Array where the first item is the dispute description and second item is the metadata uri if it exists\n */\nfunction parseMetadata(dispute) {\n  if (dispute.disputable) {\n    return [dispute.disputable.title]\n  }\n\n  try {\n    const { description, metadata } = JSON.parse(dispute.metadata)\n    return [description, metadata]\n  } catch (error) {\n    // if is not a json return the metadata as the description\n    return [dispute.metadata]\n  }\n}\n\nexport function transformDisputeDataAttributes(dispute) {\n  const [description, metadataUri] = parseMetadata(dispute)\n\n  const transformedDispute = {\n    ...dispute,\n    createdAt: toMs(parseInt(dispute.createdAt, 10)),\n    description,\n    metadataUri,\n    rounds: dispute.rounds.map(transformRoundDataAttributes),\n    state: DisputesTypes.convertFromString(dispute.state),\n    status:\n      DisputesTypes.convertFromString(dispute.state) ===\n      DisputesTypes.Phase.Ruled\n        ? DisputesTypes.Status.Closed\n        : DisputesTypes.Status.Open,\n  }\n\n  // If the dispute is part of the precedence campaign we will flag it as such\n  const precedenceCamapignDisputes = getPrecedenceCampaignDisputesByCourt()\n  const isPartOfPrecedenceCampaign = precedenceCamapignDisputes.has(dispute.id)\n  transformedDispute.marksPrecedent = isPartOfPrecedenceCampaign\n\n  // If the dispute is voided we will override certain data\n  const voidedDisputes = getVoidedDisputesByCourt()\n  const voidedDispute = voidedDisputes.get(dispute.id)\n\n  return voidedDispute\n    ? overrideVoidedDispute(transformedDispute, voidedDispute)\n    : transformedDispute\n}\n\nfunction overrideVoidedDispute(dispute, voidedDispute) {\n  return {\n    ...dispute,\n    evidences: [],\n    metadata: '',\n    status: DisputesTypes.Status.Voided,\n    voidedDescription: voidedDispute.description,\n    voidedLink: voidedDispute.link,\n    voidedText: voidedDispute.text,\n  }\n}\n\n/**\n * @param {Object} dispute The dispute to query the current phase and next transition of\n * @param {Number} currentTerm The court current term\n * @param {Object} courtConfig The court configuration\n * @returns {Object} Current phase and next phase transition for the given dispute\n */\nexport function getPhaseAndTransition(dispute, currentTerm, courtConfig) {\n  if (!dispute) return null\n\n  let phase\n  let nextTransition\n\n  const { state } = dispute\n  const lastRound = dispute.rounds[dispute.lastRoundId]\n  const { number } = lastRound\n\n  // Dispute already ruled\n  if (state === DisputesTypes.Phase.Ruled) {\n    phase = DisputesTypes.Phase.ClaimRewards\n    return {\n      phase,\n      roundId: number,\n      maxAppealReached: hasDisputeReachedMaxAppeals(dispute, courtConfig),\n    }\n  }\n\n  // Evidence submission\n  if (state === DisputesTypes.Phase.Evidence) {\n    const evidenceSubmissionEndTerm = getEvidenceSubmissionEndTerm(\n      dispute,\n      courtConfig\n    )\n    const evidenceSubmissionEndTime = getTermEndTime(\n      evidenceSubmissionEndTerm,\n      courtConfig\n    )\n\n    if (currentTerm > evidenceSubmissionEndTerm) {\n      phase = DisputesTypes.Phase.JuryDrafting\n    } else {\n      phase = state\n      nextTransition = evidenceSubmissionEndTime\n    }\n    return { phase, nextTransition, roundId: number }\n  }\n\n  // Jury Drafting phase\n  if (state === DisputesTypes.Phase.JuryDrafting) {\n    // When a new round is created, it could happen that the draft term has not been reached yet\n    // because the confirm appeal phase of the previous round has not yet ended\n    if (currentTerm < lastRound.draftTermId) {\n      const draftStartTime = getTermStartTime(\n        lastRound.draftTermId,\n        courtConfig\n      )\n\n      phase = DisputesTypes.Phase.NotStarted\n      nextTransition = draftStartTime\n    } else {\n      phase = DisputesTypes.Phase.JuryDrafting\n    }\n    return { phase, nextTransition, roundId: number }\n  }\n\n  // Adjudicating\n  if (state === DisputesTypes.Phase.Adjudicating) {\n    let currentAdjudicationPhase = getAdjudicationPhase(\n      dispute,\n      lastRound,\n      currentTerm,\n      courtConfig\n    )\n\n    const { phase, phaseEndTerm } = currentAdjudicationPhase\n    if (phase === DisputesTypes.Phase.Ended) {\n      currentAdjudicationPhase = {\n        ...currentAdjudicationPhase,\n        phase: DisputesTypes.Phase.ExecuteRuling,\n      }\n    }\n\n    const nextTransition = phaseEndTerm\n      ? getTermEndTime(phaseEndTerm, courtConfig)\n      : null\n\n    return { ...currentAdjudicationPhase, roundId: number, nextTransition }\n  }\n}\n\n/**\n * Tells the adjudication state of a dispute's round at a certain time.\n * @param {Object} dispute Dispute to query the adjudication round of\n * @param {Object} round The round that is being queried\n * @param {Number} termId The term at which to query the dispute's adjudication phase\n * @param {Object} courtConfig The court configuration\n * @returns {Object} The adjudication phase of the requested round at the given time\n */\nexport function getAdjudicationPhase(dispute, round, termId, courtConfig) {\n  const {\n    commitTerms,\n    revealTerms,\n    appealTerms,\n    appealConfirmationTerms,\n  } = courtConfig\n\n  const { draftTermId, delayedTerms, number: roundId } = round\n\n  const draftEndTerm = draftTermId + delayedTerms\n  const maxAppealReached = hasDisputeReachedMaxAppeals(dispute, courtConfig)\n\n  // When voting period has not yet started there are two possible cases:\n  //   * We are at the last possible round so adjudication phase hasn't started\n  //   * We are not in an adjudication phase so it is invalid\n  if (termId < draftEndTerm) {\n    if (maxAppealReached) {\n      return {\n        phase: DisputesTypes.Phase.NotStarted,\n        phaseEndTerm: draftEndTerm,\n        roundId,\n      }\n    }\n\n    return {\n      phase: DisputesTypes.Phase.Invalid,\n      roundId,\n    }\n  }\n\n  // Jurors can commit their votes between when the commit phase term starts and ends\n  // Note that the commit start term is the same as the draft end term\n  const commitEndTerm = draftEndTerm + commitTerms - 1\n  if (termId <= commitEndTerm) {\n    return {\n      phase: DisputesTypes.Phase.VotingPeriod,\n      phaseEndTerm: commitEndTerm,\n      maxAppealReached,\n      roundId,\n    }\n  }\n\n  // Jurors can reveal their votes between when the reveal phase term starts and ends\n  const revealEndTerm = commitEndTerm + revealTerms\n  if (termId <= revealEndTerm) {\n    return {\n      phase: DisputesTypes.Phase.RevealVote,\n      phaseEndTerm: revealEndTerm,\n      maxAppealReached,\n      roundId,\n    }\n  }\n\n  // If the max number of appeals has been reached, then the last round is the final round and can be considered ended\n  if (maxAppealReached) {\n    return { phase: DisputesTypes.Phase.Ended, maxAppealReached, roundId }\n  }\n\n  // If the last round was not appealed yet, check if the confirmation period has started or not\n  const isLastRoundAppealed =\n    !!round.appeal && round.appeal.appealedRuling !== 0\n  const appealEndTerm = revealEndTerm + appealTerms\n\n  if (!isLastRoundAppealed) {\n    // If given term is before the appeal confirmation start term, then the last round can still be appealed. Otherwise, it is ended.\n    if (termId <= appealEndTerm) {\n      return {\n        phase: DisputesTypes.Phase.AppealRuling,\n        phaseEndTerm: appealEndTerm,\n        roundId,\n      }\n    } else {\n      return {\n        phase: DisputesTypes.Phase.Ended,\n        roundId,\n      }\n    }\n  }\n\n  // If the last round was appealed and the given term is before the appeal confirmation end term, then the last round appeal can still be\n  // confirmed. Note that if the round being checked was already appealed and confirmed, it won't be the last round, thus it will be caught\n  // above by the first check and considered 'Ended'.\n  const appealConfirmationEndTerm = appealEndTerm + appealConfirmationTerms\n\n  if (termId < appealConfirmationEndTerm) {\n    return {\n      phase: DisputesTypes.Phase.ConfirmAppeal,\n      phaseEndTerm: appealConfirmationEndTerm,\n      roundId,\n    }\n  }\n\n  // If non of the above conditions have been met, the last round is considered ended\n  return {\n    phase: DisputesTypes.Phase.Ended,\n    roundId,\n  }\n}\n\n/**\n * Terminology here will be:\n *        Last round => last round actually reached in a dispute\n *        Final round => max possible round for a dispute (when the max appeals for a given dispute is reached)\n * @param {Object} round The round to get the phases from\n * @param {Object} currentPhase The dispute's current phase\n * @param {Number} currentTerm The court current term\n * @param {Object} courtConfig The court configuration\n * @returns {Array} Array of all `round` phases.\n */\nexport function getRoundPhasesAndTime(\n  round,\n  currentPhase,\n  currentTerm,\n  courtConfig\n) {\n  const {\n    commitTerms,\n    revealTerms,\n    appealTerms,\n    appealConfirmationTerms,\n  } = courtConfig\n\n  const { draftTermId, delayedTerms, number: roundId, vote, appeal } = round\n  const isCurrentRound = roundId === currentPhase.roundId\n  const { winningOutcome } = vote || {}\n\n  const draftStartTime = getTermStartTime(draftTermId, courtConfig)\n\n  // Case where we are in a next round and has not yet started\n  if (isCurrentRound && currentPhase.phase === DisputesTypes.Phase.NotStarted) {\n    return [\n      {\n        phase: DisputesTypes.Phase.NotStarted,\n        endTime: draftStartTime,\n        roundId,\n        active: true,\n      },\n    ]\n  }\n\n  const draftEndTerm = draftTermId + delayedTerms\n  // Note that the commit start term is the same as the draft end term\n  const votingEndTerm = draftEndTerm + commitTerms - 1\n  const revealEndTerm = votingEndTerm + revealTerms\n  const appealEndTerm = revealEndTerm + appealTerms\n  const confirmAppealEndTerm = appealEndTerm + appealConfirmationTerms\n\n  const roundAppealed = !!appeal\n  const roundAppealConfirmed = roundAppealed && appeal.opposedRuling > 0\n\n  const roundPhasesAndTime = [\n    {\n      // Jurors can be drafted at any time, so we'll only set the\n      // `endTime` when the drafting phase has already passed\n      phase: DisputesTypes.Phase.JuryDrafting,\n      endTime:\n        DisputesTypes.Phase.JuryDrafting !== currentPhase.phase\n          ? getTermEndTime(draftEndTerm, courtConfig)\n          : null,\n      active:\n        isCurrentRound &&\n        DisputesTypes.Phase.JuryDrafting === currentPhase.phase,\n      roundId,\n    },\n    {\n      phase: DisputesTypes.Phase.VotingPeriod,\n      endTime: getTermEndTime(votingEndTerm, courtConfig),\n      active:\n        isCurrentRound &&\n        DisputesTypes.Phase.VotingPeriod === currentPhase.phase,\n      roundId,\n    },\n    {\n      phase: DisputesTypes.Phase.RevealVote,\n      endTime: getTermEndTime(revealEndTerm, courtConfig),\n      active:\n        isCurrentRound && DisputesTypes.Phase.RevealVote === currentPhase.phase,\n      roundId,\n      outcome: winningOutcome,\n      showOutcome: currentTerm > revealEndTerm,\n    },\n    {\n      // If the round was appealed we know it's a past phase and must update the endTime for the time this took effect (appeal.createdAt)\n      // If it wasn't appealed we have two cases:\n      //       - It's a past phase so in that case the endTime will be the time at where it's supposed to end if taking the full appealTerms duration\n      //       - It's the dispute active phase (the round can still be appealed) so the endTime will be used to tell the timer remaining time before the appeal phase is closed\n      phase: DisputesTypes.Phase.AppealRuling,\n      endTime: roundAppealed\n        ? appeal.createdAt\n        : getTermEndTime(appealEndTerm, courtConfig),\n      active:\n        isCurrentRound &&\n        DisputesTypes.Phase.AppealRuling === currentPhase.phase,\n      roundId,\n      outcome: roundAppealed ? appeal.appealedRuling : null,\n      showOutcome: roundAppealed || currentTerm > appealEndTerm,\n      // If the round was appealed, we'll show the outcome (appeal ruling),\n      // If it wasn't appealed then we'll show a \"Nobodoy appealed\" message\n    },\n    {\n      // If the round was appeal confirmed we know it's a past phase and must update the endTime for the time this took effect (appeal.confirmedAt)\n      // If it wasn't appeal confirmed we have two cases:\n      //       - It's a past phase so in that case the endTime will be the time at where it's supposed to end if taking the full confirmAppealTerms duration\n      //       - It's the dispute active phase (the round can still be appeal confirmed) so the endTime will be used to tell the timer remaining time before the confirm appeal phase is closed\n      phase: DisputesTypes.Phase.ConfirmAppeal,\n      endTime: roundAppealConfirmed\n        ? appeal.confirmedAt\n        : getTermEndTime(confirmAppealEndTerm, courtConfig),\n      active:\n        isCurrentRound &&\n        DisputesTypes.Phase.ConfirmAppeal === currentPhase.phase,\n      roundId,\n      outcome: roundAppealConfirmed ? appeal.opposedRuling : null,\n      showOutcome: roundAppealConfirmed || currentTerm > confirmAppealEndTerm,\n    },\n  ]\n\n  // If it's not the last round means that the dispute reached the next appeal round\n  // so we show all possible phases\n  if (roundId < currentPhase.roundId) {\n    return roundPhasesAndTime\n  }\n\n  // If it's the last round and has already ended (show past phases)\n  if (\n    currentPhase.phase === DisputesTypes.Phase.ExecuteRuling ||\n    currentPhase.phase === DisputesTypes.Phase.ClaimRewards\n  ) {\n    // In the final round (maxAppealedReached), there's no drafting phase and appealing is not possible\n    // so we only must show Voting and Revealing\n    if (currentPhase.maxAppealReached) {\n      return roundPhasesAndTime.slice(1, 3)\n    }\n\n    // If round not appealed\n    if (!roundAppealed) {\n      return roundPhasesAndTime.slice(0, 4)\n    }\n\n    return roundPhasesAndTime\n  }\n\n  // Find the last round current phase\n  const currentPhaseIndex = roundPhasesAndTime.findIndex(\n    phase => phase.phase === currentPhase.phase\n  )\n\n  // When round has not yet ended\n  return roundPhasesAndTime.slice(\n    currentPhase.maxAppealReached ? 1 : 0,\n    currentPhaseIndex + 1\n  )\n}\n\n/**\n *\n * @param {Object} dispute The dispute in question\n * @param {Object} courtConfig The court configuration\n * @returns {Number} The end time of the evidence submission phase in ms\n */\nexport function getEvidenceSubmissionEndTerm(dispute, courtConfig) {\n  const firstRound = dispute.rounds[0]\n\n  // If the evidence period is closed before the full `evidenceTerms` period,\n  // the draftTermId for the first round is updated to the term this happened.\n  return firstRound.draftTermId - 1\n}\n\n/**\n * Tells whether the dispute has reached the maximum number of rounds possible\n * @param {Object} dispute The dispute in question\n * @param {Object} courtConfig The court configuration\n * @returns {Boolean} True if dispute has reached maximum number of rounds possible\n */\nfunction hasDisputeReachedMaxAppeals(dispute, courtConfig) {\n  const { maxRegularAppealRounds } = courtConfig\n  const numberOfRounds = dispute.rounds.length\n  return numberOfRounds > maxRegularAppealRounds\n}\n\n/**\n * @param {Object} dispute The dispute to get the last round from\n * @returns {Object} dispute's last round\n */\nexport function getDisputeLastRound(dispute) {\n  return dispute.rounds[dispute.lastRoundId]\n}\n\n/**\n *\n * @param {Object} round Round to calculate fees from\n * @param {Object} courtConfig The court configuration\n * @returns {BigNum} The total fees for the round\n */\nexport function getRoundFees(round, courtConfig) {\n  const {\n    draftFee,\n    settleFee,\n    jurorFee,\n    finalRoundReduction,\n    maxRegularAppealRounds,\n  } = courtConfig\n\n  // Final round\n  if (round.number === maxRegularAppealRounds) {\n    return jurorFee\n      .mul(round.jurorsNumber)\n      .div(FINAL_ROUND_WEIGHT_PRECISION.mul(finalRoundReduction).div(PCT_BASE))\n  }\n\n  // Regular round\n  return draftFee\n    .add(settleFee)\n    .add(jurorFee)\n    .mul(round.jurorsNumber)\n}\n\n/**\n *\n * @param {BigNum} minActiveBalance The minimum active balance required to become an active juror\n * @param {BigNum} penaltyPct Percentage (against PCT_BASE) of min active tokens balance to be locked to each drafted juror\n * @param {BigNum} weight Weight computed for a juror on a round\n * @returns {BigNum} The amount that will be locked each time a juror is drafted\n */\nexport function getDraftLockAmount(minActiveBalance, penaltyPct, weight) {\n  return minActiveBalance\n    .mul(penaltyPct)\n    .div(PCT_BASE)\n    .mul(weight)\n}\n"]},"metadata":{},"sourceType":"module"}