{"ast":null,"code":"import _toConsumableArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _styled3 from\"styled-components\";import _styled2 from\"styled-components\";import _styled from\"styled-components\";import React,{useMemo,useRef,useState,useCallback,useEffect}from'react';import{animated,Spring,Transition}from'react-spring/renderprops';import{Box,GU,IconConnect,springs,useInside,useToast,useViewport}from'@aragon/ui';import{useWallet}from'../../providers/Wallet';import{getProviderFromUseWalletId}from'../../ethereum-providers';import DeleteEmail from'./DeleteEmail';import EmailNotificationsForm from'./EmailNotificationsForm';import ExistingEmailSubscription from'./ExistingEmailSubscription';import LoadingPreferences from'../GlobalPreferences/Notifications/LoadingPreferences';import NotificationsPreferences from'../GlobalPreferences/Notifications/NotificationsPreferences';import StatusInfo from'./StatusInfo';import SignatureRequest from'../SignatureRequest';import UnlockNotifications from'../GlobalPreferences/Notifications/UnlockNotifications';import VerifyEmailAddress from'./VerifyEmailAddress';import VerifyEmailAddressPreferences from'../GlobalPreferences/Notifications/VerifyEmailAddressPreferences';import{actions}from'./actions';import{createSession,deleteCurrentSession,deleteJurorEmail,resendVerificationEmail,subscribeToNotifications,subscribeExistingEmail,switchNotificationsStatus}from'../../services/notificationServiceApi';import{DELETE_ACTION,DELETE_ACTION_PREFERENCES,DELETE_EMAIL_SCREEN,EMAIL_NOTIFICATIONS_ERROR_SCREEN,EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN,EMAIL_NOTIFICATIONS_FORM_SCREEN,LOADING_SCREEN,NOTIFICATIONS_PREFERENCES_SCREEN,OPTOUT_ACTION,RESEND_EMAIL_ACTION,SETTINGS,SIGNATURE_REQUEST_SCREEN,SIGNATURE_SUCCESS_SCREEN,SUBSCRIBE_EXISTING_ACTION,SUBSCRIBE_MODAL_ACTION,SUCCESS_INFO_SCREEN,UNLOCK_SETTINGS_ACTION,UNLOCK_SETTINGS_ACTION_NOT_EMAIL,UNLOCK_SETTINGS_ACTION_NOT_VERIFIED,UNLOCK_NOTIFICATIONS_SCREEN,VERIFICATION_ERROR_SCREEN,VERIFICATION_SUCCESS_SCREEN,VERIFY_EMAIL_ADDRESS_PREFERENCES,VERIFY_YOUR_EMAIL_SCREEN}from'./constants';var DEFAULT_ERROR_SETTINGS={error:true,title:'Cannot connect to Notifications server',description:'There was a problem when trying to connect to the Email Notifications server. Make sure your Internet connection is working and please try again. '};var DEFAULT_SUBSCRIPTION_PROGRESS={needSignature:false,serviceError:false,startRequest:false,action:null,nextScreen:null,email:null,signHash:null,signTimestamp:null,signatureTitle:'',signRequestText:'',signSuccessText:'',statusInfoTitle:'',statusInfoText:'',verifyUpdateMode:false,previousScreen:null,needsUnlockSettings:false,emailVerified:false,emailExists:false};var _StyledSpan=_styled(\"span\").withConfig({displayName:\"EmailNotificationsManager___StyledSpan\",componentId:\"biie05-0\"})([\"display:flex;flex-wrap:wrap;justify-content:center;\"]);var _StyledSpan2=_styled(\"span\").withConfig({displayName:\"EmailNotificationsManager___StyledSpan2\",componentId:\"biie05-1\"})([\"display:inline-flex;align-items:center;\"]);var EmailNotificationsManager=React.memo(function EmailNotificationsManager(_ref){var needsUnlockSettings=_ref.needsUnlockSettings,emailExists=_ref.emailExists,emailVerified=_ref.emailVerified,notificationsDisabled=_ref.notificationsDisabled,email=_ref.email,startingScreen=_ref.startingScreen,onReturnToDashboard=_ref.onReturnToDashboard;var _useState=useState(emailExists?EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN:EMAIL_NOTIFICATIONS_FORM_SCREEN),_useState2=_slicedToArray(_useState,2),screenId=_useState2[0],setScreenId=_useState2[1];var _useState3=useState(_objectSpread({},DEFAULT_SUBSCRIPTION_PROGRESS,{email:email,emailExists:emailExists,notificationsDisabled:notificationsDisabled,needsUnlockSettings:needsUnlockSettings,emailVerified:emailVerified})),_useState4=_slicedToArray(_useState3,2),subscriptionProgress=_useState4[0],setSubscriptionProgress=_useState4[1];var wallet=useWallet();var account=wallet.account;var _useInside=useInside('NotificationsModal'),_useInside2=_slicedToArray(_useInside,1),insideModal=_useInside2[0];var provider=getProviderFromUseWalletId(wallet.activated);var toast=useToast();var _useViewport=useViewport(),below=_useViewport.below;var compactMode=below('medium');var defaultSignRequestText=useMemo(function(){return\"Open \".concat(provider.name,\" to complete the\\n        signature request. Signing this message will prove ownership of your\\n        account and \");},[provider.name]);var handleOnSubscribe=useCallback(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(email){var _ref3,subscribeNeedsSignature,errorSubscribing,subscribeSettings;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return subscribeToNotifications(account,email);case 2:_ref3=_context.sent;subscribeNeedsSignature=_ref3.needsSignature;errorSubscribing=_ref3.error;if(!(errorSubscribing&&!subscribeNeedsSignature)){_context.next=8;break;}setSubscriptionProgress({serviceError:true});return _context.abrupt(\"return\");case 8:if(subscribeNeedsSignature){_context.next=12;break;}setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{email:email,verifyUpdateMode:false});});setScreenId(VERIFY_YOUR_EMAIL_SCREEN);return _context.abrupt(\"return\");case 12:subscribeSettings=SETTINGS[SUBSCRIBE_MODAL_ACTION];setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:subscribeNeedsSignature,mode:SUBSCRIBE_MODAL_ACTION,email:email,signatureTitle:subscribeSettings.signatureSettings.title,signRequestText:defaultSignRequestText+subscribeSettings.signatureSettings.requestText,signSuccessText:subscribeSettings.signatureSettings.successText,verifyUpdateMode:false});});case 14:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}(),[account,defaultSignRequestText]);var handleOnSubscribeExistingEmail=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _ref5,needsSignature,existingEmail,error,subscribeSettings;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return subscribeExistingEmail(account);case 2:_ref5=_context2.sent;needsSignature=_ref5.needsSignature;existingEmail=_ref5.email;error=_ref5.error;if(!(error&&!needsSignature)){_context2.next=9;break;}setSubscriptionProgress({serviceError:true});return _context2.abrupt(\"return\");case 9:if(needsSignature){_context2.next=13;break;}setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{email:existingEmail,verifyUpdateMode:true});});setScreenId(VERIFY_YOUR_EMAIL_SCREEN);return _context2.abrupt(\"return\");case 13:subscribeSettings=SETTINGS[SUBSCRIBE_EXISTING_ACTION];setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:needsSignature,mode:SUBSCRIBE_EXISTING_ACTION,signatureTitle:subscribeSettings.signatureSettings.title,signRequestText:defaultSignRequestText+subscribeSettings.signatureSettings.requestText,signSuccessText:subscribeSettings.signatureSettings.successText,verifyUpdateMode:true});});case 15:case\"end\":return _context2.stop();}}},_callee2);})),[account,defaultSignRequestText]);var handleOnOptOut=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var optOutSettings;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:optOutSettings=SETTINGS[OPTOUT_ACTION];setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:true,mode:OPTOUT_ACTION,signatureTitle:optOutSettings.signatureSettings.title,signRequestText:defaultSignRequestText+optOutSettings.signatureSettings.requestText,signSuccessText:optOutSettings.signatureSettings.successText});});case 2:case\"end\":return _context3.stop();}}},_callee3);})),[defaultSignRequestText]);var handleOnResendEmail=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _ref8,needsSignature,error,resendSettings;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return resendVerificationEmail(account);case 2:_ref8=_context4.sent;needsSignature=_ref8.needsSignature;error=_ref8.error;if(!(error&&!needsSignature)){_context4.next=8;break;}setSubscriptionProgress({serviceError:true});return _context4.abrupt(\"return\");case 8:if(needsSignature){_context4.next=12;break;}setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress);});toast('A verification email has been resent.');return _context4.abrupt(\"return\");case 12:resendSettings=SETTINGS[RESEND_EMAIL_ACTION];setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:needsSignature,mode:RESEND_EMAIL_ACTION,signatureTitle:resendSettings.signatureSettings.title,signRequestText:defaultSignRequestText+resendSettings.signatureSettings.requestText,signSuccessText:resendSettings.signatureSettings.successText});});case 14:case\"end\":return _context4.stop();}}},_callee4);})),[account,defaultSignRequestText,toast]);var handleOnDeleteConfirmation=useCallback(function(){setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{previousScreen:screenId});});setScreenId(DELETE_EMAIL_SCREEN);},[screenId]);var handleOnCancelDelete=useCallback(function(){setScreenId(subscriptionProgress.previousScreen);},[subscriptionProgress.previousScreen]);var handleOnDelete=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(){var _ref10,error,needsSignature,deleteSettings;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return deleteJurorEmail(account);case 2:_ref10=_context5.sent;error=_ref10.error;needsSignature=_ref10.needsSignature;if(!(error&&!needsSignature)){_context5.next=8;break;}setSubscriptionProgress({serviceError:true});return _context5.abrupt(\"return\");case 8:deleteSettings=SETTINGS[DELETE_ACTION];if(needsSignature){_context5.next=14;break;}if(insideModal){setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{statusInfoTitle:deleteSettings.successInfo.title,statusInfoText:\"Your email \".concat(subscriptionProgress.email,\" was succefully deleted. You can always re-subscribe from the notifications preferences later.\")});});}setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{email:''});});setScreenId(insideModal?SUCCESS_INFO_SCREEN:EMAIL_NOTIFICATIONS_FORM_SCREEN);return _context5.abrupt(\"return\");case 14:setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:needsSignature,mode:insideModal?DELETE_ACTION:DELETE_ACTION_PREFERENCES,signatureTitle:\"Delete \\\"\".concat(subscriptionProgress.email,\"\\\"\"),signRequestText:defaultSignRequestText+deleteSettings.signatureSettings.requestText,signSuccessText:deleteSettings.signatureSettings.successText});});case 15:case\"end\":return _context5.stop();}}},_callee5);})),[account,defaultSignRequestText,insideModal]);var handleOnUnlockSettings=useCallback(function(){var unlockSettings=SETTINGS[UNLOCK_SETTINGS_ACTION];setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:true,mode:!subscriptionProgress.emailExists?UNLOCK_SETTINGS_ACTION_NOT_EMAIL:subscriptionProgress.emailVerified?UNLOCK_SETTINGS_ACTION:UNLOCK_SETTINGS_ACTION_NOT_VERIFIED,signatureTitle:unlockSettings.signatureSettings.title,signRequestText:defaultSignRequestText+unlockSettings.signatureSettings.requestText,signSuccessText:unlockSettings.signatureSettings.successText});});},[defaultSignRequestText]);var handleOnUpdateEmail=useCallback(function(){setScreenId(EMAIL_NOTIFICATIONS_FORM_SCREEN);},[]);var handleOnLockSettings=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var _ref12,error,needsSignature;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return deleteCurrentSession(account);case 2:_ref12=_context6.sent;error=_ref12.error;needsSignature=_ref12.needsSignature;if(!(error&&!needsSignature)){_context6.next=8;break;}setSubscriptionProgress({serviceError:true});return _context6.abrupt(\"return\");case 8:setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needsUnlockSettings:true});});setScreenId(UNLOCK_NOTIFICATIONS_SCREEN);case 10:case\"end\":return _context6.stop();}}},_callee6);})),[account]);var handleSwitchNotifications=useCallback(/*#__PURE__*/function(){var _ref13=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(disabled){var _ref14,error,needsSignature,notificationsDisabled;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return switchNotificationsStatus(account,disabled);case 2:_ref14=_context7.sent;error=_ref14.error;needsSignature=_ref14.needsSignature;notificationsDisabled=_ref14.disabled;if(!(error&&!needsSignature)){_context7.next=9;break;}setSubscriptionProgress({serviceError:true});return _context7.abrupt(\"return\");case 9:if(needsSignature){_context7.next=13;break;}setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{notificationsDisabled:notificationsDisabled});});setScreenId(NOTIFICATIONS_PREFERENCES_SCREEN);return _context7.abrupt(\"return\");case 13:setScreenId(UNLOCK_NOTIFICATIONS_SCREEN);case 14:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x2){return _ref13.apply(this,arguments);};}(),[account]);var handleOnSignSuccess=useCallback(function(signHash,timestamp){setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{startRequest:true,signHash:signHash,signTimestamp:timestamp});});},[]);useEffect(function(){if(!startingScreen){return;}setScreenId(startingScreen);},[startingScreen]);useEffect(function(){setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needsUnlockSettings:needsUnlockSettings,email:email,emailVerified:emailVerified,emailExists:emailExists,notificationsDisabled:notificationsDisabled});});},[account,needsUnlockSettings,email,emailVerified,emailExists,notificationsDisabled]);useEffect(function(){var cancelled=false;if(!subscriptionProgress.startRequest){return;}var requestAction=/*#__PURE__*/function(){var _ref15=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var _ref16,errorCreatingSession,action,returnedJurorEmail,params,_ref17,error,_email,timer;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:if(!subscriptionProgress.needSignature){_context8.next=6;break;}_context8.next=3;return createSession(account,subscriptionProgress.signHash,subscriptionProgress.signTimestamp);case 3:_ref16=_context8.sent;errorCreatingSession=_ref16.error;if(errorCreatingSession&&!cancelled){setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{serviceError:true});});}case 6:action=actions[subscriptionProgress.mode];returnedJurorEmail='';if(!action.request){_context8.next=21;break;}params=[account];if(action.params){params=[].concat(_toConsumableArray(params),_toConsumableArray(action.params));}if(action.requiresEmail){params.push(subscriptionProgress.email);}_context8.next=14;return action.request.apply(action,_toConsumableArray(params));case 14:_ref17=_context8.sent;error=_ref17.error;_email=_ref17.email;if(cancelled){_context8.next=21;break;}if(!error){_context8.next=20;break;}return _context8.abrupt(\"return\",setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{serviceError:true});}));case 20:if(_email){returnedJurorEmail=_email;}case 21:if(cancelled){_context8.next=28;break;}setScreenId(SIGNATURE_SUCCESS_SCREEN);if(!action.successScreen){_context8.next=27;break;}timer=setTimeout(function(){setScreenId(action.successScreen);},3000);setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:false,email:returnedJurorEmail||subscriptionProgress.email,startRequest:false});});return _context8.abrupt(\"return\",function(){return clearTimeout(timer);});case 27:setSubscriptionProgress(function(subscriptionProgress){return _objectSpread({},subscriptionProgress,{needSignature:false,email:returnedJurorEmail||subscriptionProgress.email,startRequest:false});});case 28:case\"end\":return _context8.stop();}}},_callee8);}));return function requestAction(){return _ref15.apply(this,arguments);};}();requestAction();return function(){cancelled=true;};},[account,subscriptionProgress.email,subscriptionProgress.mode,subscriptionProgress.startRequest,subscriptionProgress.needSignature,subscriptionProgress.signHash,subscriptionProgress.signTimestamp]);useEffect(function(){if(!subscriptionProgress.serviceError){return;}setScreenId(EMAIL_NOTIFICATIONS_ERROR_SCREEN);},[subscriptionProgress.serviceError]);useEffect(function(){if(!subscriptionProgress.needSignature){return;}setScreenId(SIGNATURE_REQUEST_SCREEN);},[subscriptionProgress.needSignature]);return React.createElement(WrappedContainer,{screenId:screenId},function(){if(screenId===SIGNATURE_REQUEST_SCREEN){return React.createElement(SignatureRequest,{mode:\"request\",compactMode:compactMode,title:subscriptionProgress.signatureTitle,text:subscriptionProgress.signRequestText,onSignSuccess:handleOnSignSuccess});}if(screenId===SIGNATURE_SUCCESS_SCREEN){return React.createElement(SignatureRequest,{mode:\"success\",compactMode:compactMode,title:subscriptionProgress.signatureTitle,text:subscriptionProgress.signSuccessText});}if(screenId===EMAIL_NOTIFICATIONS_ERROR_SCREEN){var title=DEFAULT_ERROR_SETTINGS.title,description=DEFAULT_ERROR_SETTINGS.description;return React.createElement(StatusInfo,{error:true,title:title,description:description});}if(screenId===SUCCESS_INFO_SCREEN){return React.createElement(StatusInfo,{error:false,title:subscriptionProgress.statusInfoTitle,description:subscriptionProgress.statusInfoText});}if(screenId===EMAIL_NOTIFICATIONS_FORM_SCREEN){return React.createElement(EmailNotificationsForm,{account:account,existingEmail:subscriptionProgress.email,compactMode:compactMode,onOptOut:handleOnOptOut,onSubscribeToNotifications:handleOnSubscribe});}if(screenId===EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN){return React.createElement(ExistingEmailSubscription,{account:account,compactMode:compactMode,onOptOut:handleOnOptOut,onSubscribeToNotifications:handleOnSubscribeExistingEmail});}if(screenId===VERIFY_YOUR_EMAIL_SCREEN){return React.createElement(VerifyEmailAddress,{updateMode:subscriptionProgress.verifyUpdateMode,compactMode:compactMode,email:subscriptionProgress.email,onResendEmail:handleOnResendEmail,onSubscribe:handleOnSubscribe,onDeleteEmail:handleOnDeleteConfirmation});}if(screenId===DELETE_EMAIL_SCREEN){return React.createElement(DeleteEmail,{email:subscriptionProgress.email,onDelete:handleOnDelete,onCancel:handleOnCancelDelete});}if(screenId===UNLOCK_NOTIFICATIONS_SCREEN){return React.createElement(UnlockNotifications,{compactMode:compactMode,onUnlock:handleOnUnlockSettings,needsUnlockSettings:account&&subscriptionProgress.needsUnlockSettings,onReturnToDashboard:onReturnToDashboard});}if(screenId===NOTIFICATIONS_PREFERENCES_SCREEN){return React.createElement(NotificationsPreferences,{email:subscriptionProgress.email,notificationsDisabled:subscriptionProgress.notificationsDisabled,onSwitchNotificationsStatus:handleSwitchNotifications,onLockSettings:handleOnLockSettings,onDeleteEmail:handleOnDeleteConfirmation,onUpdateEmail:handleOnUpdateEmail});}if(screenId===VERIFICATION_ERROR_SCREEN){return React.createElement(StatusInfo,{error:true,title:\"Verification failed\",description:\"The email verification link was invalid or it has timed out. Please try again.\"});}if(screenId===VERIFICATION_SUCCESS_SCREEN){return React.createElement(StatusInfo,{error:false,title:\"Verification was successful\",description:React.createElement(_StyledSpan,null,\"Go back to the dashboard and\",React.createElement(_StyledSpan2,null,React.createElement(IconConnect,{size:\"small\"}),React.createElement(\"strong\",null,\"Connect your account\"),\",\"),' ',\"on the top right header, to access your notification settings\"),actionText:\"Go to Dashboard\",onAction:onReturnToDashboard});}if(screenId===VERIFY_EMAIL_ADDRESS_PREFERENCES){return React.createElement(VerifyEmailAddressPreferences,{email:subscriptionProgress.email,onResend:handleOnResendEmail});}if(screenId===LOADING_SCREEN){return React.createElement(LoadingPreferences,null);}}());});var WrappedContainer=React.memo(function WrappedContainer(_ref18){var props=Object.assign({},_ref18);var _useInside3=useInside('NotificationsModal'),_useInside4=_slicedToArray(_useInside3,1),insideModal=_useInside4[0];var screenId=props.screenId;var Container=insideModal||screenId===NOTIFICATIONS_PREFERENCES_SCREEN?AnimatedContainer:AnimatedBox;return React.createElement(Container,props);});var _StyledDiv=_styled(\"div\").withConfig({displayName:\"EmailNotificationsManager___StyledDiv\",componentId:\"biie05-2\"})([\"position:relative;max-width:800px;margin:0 auto;\"]);var AnimatedBox=function AnimatedBox(_ref19){var props=Object.assign({},_ref19);var ref=useRef(null);var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),height=_useState6[0],setHeight=_useState6[1];var setRef=useCallback(function(node){if(node){setHeight(node.clientHeight);}ref.current=node;},[]);return React.createElement(Box,{padding:5*GU},React.createElement(_StyledDiv,null,React.createElement(Spring,{config:springs.smooth,from:{height:\"\".concat(38*GU,\"px\")},to:{height:\"\".concat(height,\"px\")},native:true},function(_ref20){var height=_ref20.height;return React.createElement(animated.div,{style:{height:height}},React.createElement(AnimatedContainer,Object.assign({},props,{refCallback:setRef})));})));};var AnimatedContainer=React.memo(function AnimatedModal(_ref21){var screenId=_ref21.screenId,children=_ref21.children,refCallback=_ref21.refCallback;var _useInside5=useInside('NotificationsModal'),_useInside6=_slicedToArray(_useInside5,1),insideModal=_useInside6[0];return React.createElement(Transition,{items:{children:children,screenId:screenId},keys:function keys(_ref22){var screenId=_ref22.screenId;return screenId;},from:{position:'absolute',opacity:0,transform:'scale3d(1.10 1.10, 1)'},enter:{position:'static',opacity:1,transform:'scale3d(1, 1, 1)'},leave:{position:'absolute',opacity:0,transform:'scale3d(0.90, 0.90, 1)'},native:true},function(_ref23){var children=_ref23.children,screenId=_ref23.screenId;return function(props){return insideModal?React.createElement(animated.div,{style:_objectSpread({},props)},children):React.createElement(animated.div,{ref:refCallback,style:_objectSpread({},props,{top:0,left:0,right:0})},children);};});});export default EmailNotificationsManager;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/EmailNotifications/EmailNotificationsManager.js"],"names":["React","useMemo","useRef","useState","useCallback","useEffect","animated","Spring","Transition","Box","GU","IconConnect","springs","useInside","useToast","useViewport","useWallet","getProviderFromUseWalletId","DeleteEmail","EmailNotificationsForm","ExistingEmailSubscription","LoadingPreferences","NotificationsPreferences","StatusInfo","SignatureRequest","UnlockNotifications","VerifyEmailAddress","VerifyEmailAddressPreferences","actions","createSession","deleteCurrentSession","deleteJurorEmail","resendVerificationEmail","subscribeToNotifications","subscribeExistingEmail","switchNotificationsStatus","DELETE_ACTION","DELETE_ACTION_PREFERENCES","DELETE_EMAIL_SCREEN","EMAIL_NOTIFICATIONS_ERROR_SCREEN","EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN","EMAIL_NOTIFICATIONS_FORM_SCREEN","LOADING_SCREEN","NOTIFICATIONS_PREFERENCES_SCREEN","OPTOUT_ACTION","RESEND_EMAIL_ACTION","SETTINGS","SIGNATURE_REQUEST_SCREEN","SIGNATURE_SUCCESS_SCREEN","SUBSCRIBE_EXISTING_ACTION","SUBSCRIBE_MODAL_ACTION","SUCCESS_INFO_SCREEN","UNLOCK_SETTINGS_ACTION","UNLOCK_SETTINGS_ACTION_NOT_EMAIL","UNLOCK_SETTINGS_ACTION_NOT_VERIFIED","UNLOCK_NOTIFICATIONS_SCREEN","VERIFICATION_ERROR_SCREEN","VERIFICATION_SUCCESS_SCREEN","VERIFY_EMAIL_ADDRESS_PREFERENCES","VERIFY_YOUR_EMAIL_SCREEN","DEFAULT_ERROR_SETTINGS","error","title","description","DEFAULT_SUBSCRIPTION_PROGRESS","needSignature","serviceError","startRequest","action","nextScreen","email","signHash","signTimestamp","signatureTitle","signRequestText","signSuccessText","statusInfoTitle","statusInfoText","verifyUpdateMode","previousScreen","needsUnlockSettings","emailVerified","emailExists","EmailNotificationsManager","memo","notificationsDisabled","startingScreen","onReturnToDashboard","screenId","setScreenId","subscriptionProgress","setSubscriptionProgress","wallet","account","insideModal","provider","activated","toast","below","compactMode","defaultSignRequestText","name","handleOnSubscribe","subscribeNeedsSignature","needsSignature","errorSubscribing","subscribeSettings","mode","signatureSettings","requestText","successText","handleOnSubscribeExistingEmail","existingEmail","handleOnOptOut","optOutSettings","handleOnResendEmail","resendSettings","handleOnDeleteConfirmation","handleOnCancelDelete","handleOnDelete","deleteSettings","successInfo","handleOnUnlockSettings","unlockSettings","handleOnUpdateEmail","handleOnLockSettings","handleSwitchNotifications","disabled","handleOnSignSuccess","timestamp","cancelled","requestAction","errorCreatingSession","returnedJurorEmail","request","params","requiresEmail","push","successScreen","timer","setTimeout","clearTimeout","WrappedContainer","props","Container","AnimatedContainer","AnimatedBox","ref","height","setHeight","setRef","node","clientHeight","current","smooth","AnimatedModal","children","refCallback","position","opacity","transform","top","left","right"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef, useState, useCallback, useEffect } from 'react'\nimport { animated, Spring, Transition } from 'react-spring/renderprops'\nimport {\n  Box,\n  GU,\n  IconConnect,\n  springs,\n  useInside,\n  useToast,\n  useViewport,\n} from '@aragon/ui'\nimport { useWallet } from '../../providers/Wallet'\nimport { getProviderFromUseWalletId } from '../../ethereum-providers'\n\nimport DeleteEmail from './DeleteEmail'\nimport EmailNotificationsForm from './EmailNotificationsForm'\nimport ExistingEmailSubscription from './ExistingEmailSubscription'\nimport LoadingPreferences from '../GlobalPreferences/Notifications/LoadingPreferences'\nimport NotificationsPreferences from '../GlobalPreferences/Notifications/NotificationsPreferences'\nimport StatusInfo from './StatusInfo'\nimport SignatureRequest from '../SignatureRequest'\nimport UnlockNotifications from '../GlobalPreferences/Notifications/UnlockNotifications'\nimport VerifyEmailAddress from './VerifyEmailAddress'\nimport VerifyEmailAddressPreferences from '../GlobalPreferences/Notifications/VerifyEmailAddressPreferences'\n\nimport { actions } from './actions'\n\nimport {\n  createSession,\n  deleteCurrentSession,\n  deleteJurorEmail,\n  resendVerificationEmail,\n  subscribeToNotifications,\n  subscribeExistingEmail,\n  switchNotificationsStatus,\n} from '../../services/notificationServiceApi'\nimport {\n  DELETE_ACTION,\n  DELETE_ACTION_PREFERENCES,\n  DELETE_EMAIL_SCREEN,\n  EMAIL_NOTIFICATIONS_ERROR_SCREEN,\n  EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN,\n  EMAIL_NOTIFICATIONS_FORM_SCREEN,\n  LOADING_SCREEN,\n  NOTIFICATIONS_PREFERENCES_SCREEN,\n  OPTOUT_ACTION,\n  RESEND_EMAIL_ACTION,\n  SETTINGS,\n  SIGNATURE_REQUEST_SCREEN,\n  SIGNATURE_SUCCESS_SCREEN,\n  SUBSCRIBE_EXISTING_ACTION,\n  SUBSCRIBE_MODAL_ACTION,\n  SUCCESS_INFO_SCREEN,\n  UNLOCK_SETTINGS_ACTION,\n  UNLOCK_SETTINGS_ACTION_NOT_EMAIL,\n  UNLOCK_SETTINGS_ACTION_NOT_VERIFIED,\n  UNLOCK_NOTIFICATIONS_SCREEN,\n  VERIFICATION_ERROR_SCREEN,\n  VERIFICATION_SUCCESS_SCREEN,\n  VERIFY_EMAIL_ADDRESS_PREFERENCES,\n  VERIFY_YOUR_EMAIL_SCREEN,\n} from './constants'\n\nconst DEFAULT_ERROR_SETTINGS = {\n  error: true,\n  title: 'Cannot connect to Notifications server',\n  description:\n    'There was a problem when trying to connect to the Email Notifications server. Make sure your Internet connection is working and please try again. ',\n}\n\nconst DEFAULT_SUBSCRIPTION_PROGRESS = {\n  needSignature: false,\n  serviceError: false,\n  startRequest: false,\n  action: null,\n  nextScreen: null,\n  email: null,\n  signHash: null,\n  signTimestamp: null,\n  signatureTitle: '',\n  signRequestText: '',\n  signSuccessText: '',\n  statusInfoTitle: '',\n  statusInfoText: '',\n  verifyUpdateMode: false,\n  previousScreen: null,\n  needsUnlockSettings: false,\n  emailVerified: false,\n  emailExists: false,\n}\n\nconst EmailNotificationsManager = React.memo(\n  function EmailNotificationsManager({\n    needsUnlockSettings,\n    emailExists,\n    emailVerified,\n    notificationsDisabled,\n    email,\n    startingScreen,\n    onReturnToDashboard,\n  }) {\n    const [screenId, setScreenId] = useState(\n      emailExists\n        ? EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN\n        : EMAIL_NOTIFICATIONS_FORM_SCREEN\n    )\n\n    const [subscriptionProgress, setSubscriptionProgress] = useState({\n      ...DEFAULT_SUBSCRIPTION_PROGRESS,\n      email,\n      emailExists,\n      notificationsDisabled,\n      needsUnlockSettings,\n      emailVerified,\n    })\n\n    const wallet = useWallet()\n    const account = wallet.account\n    const [insideModal] = useInside('NotificationsModal')\n    const provider = getProviderFromUseWalletId(wallet.activated)\n    const toast = useToast()\n\n    const { below } = useViewport()\n    const compactMode = below('medium')\n\n    const defaultSignRequestText = useMemo(() => {\n      return `Open ${provider.name} to complete the\n        signature request. Signing this message will prove ownership of your\n        account and `\n    }, [provider.name])\n\n    const handleOnSubscribe = useCallback(\n      async email => {\n        const {\n          needsSignature: subscribeNeedsSignature,\n          error: errorSubscribing,\n        } = await subscribeToNotifications(account, email)\n\n        if (errorSubscribing && !subscribeNeedsSignature) {\n          setSubscriptionProgress({ serviceError: true })\n          return\n        }\n\n        if (!subscribeNeedsSignature) {\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            email: email,\n            verifyUpdateMode: false,\n          }))\n          setScreenId(VERIFY_YOUR_EMAIL_SCREEN)\n          return\n        }\n\n        const subscribeSettings = SETTINGS[SUBSCRIBE_MODAL_ACTION]\n\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n          needSignature: subscribeNeedsSignature,\n          mode: SUBSCRIBE_MODAL_ACTION,\n          email: email,\n          signatureTitle: subscribeSettings.signatureSettings.title,\n          signRequestText:\n            defaultSignRequestText +\n            subscribeSettings.signatureSettings.requestText,\n          signSuccessText: subscribeSettings.signatureSettings.successText,\n          verifyUpdateMode: false,\n        }))\n      },\n      [account, defaultSignRequestText]\n    )\n\n    const handleOnSubscribeExistingEmail = useCallback(async () => {\n      const {\n        needsSignature,\n        email: existingEmail,\n        error,\n      } = await subscribeExistingEmail(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n\n      if (!needsSignature) {\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n          email: existingEmail,\n          verifyUpdateMode: true,\n        }))\n        setScreenId(VERIFY_YOUR_EMAIL_SCREEN)\n        return\n      }\n\n      const subscribeSettings = SETTINGS[SUBSCRIBE_EXISTING_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: needsSignature,\n        mode: SUBSCRIBE_EXISTING_ACTION,\n        signatureTitle: subscribeSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText +\n          subscribeSettings.signatureSettings.requestText,\n        signSuccessText: subscribeSettings.signatureSettings.successText,\n        verifyUpdateMode: true,\n      }))\n    }, [account, defaultSignRequestText])\n\n    const handleOnOptOut = useCallback(async () => {\n      const optOutSettings = SETTINGS[OPTOUT_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: true,\n        mode: OPTOUT_ACTION,\n        signatureTitle: optOutSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText + optOutSettings.signatureSettings.requestText,\n        signSuccessText: optOutSettings.signatureSettings.successText,\n      }))\n    }, [defaultSignRequestText])\n\n    const handleOnResendEmail = useCallback(async () => {\n      const { needsSignature, error } = await resendVerificationEmail(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n\n      if (!needsSignature) {\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n        }))\n        toast('A verification email has been resent.')\n        return\n      }\n\n      const resendSettings = SETTINGS[RESEND_EMAIL_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: needsSignature,\n        mode: RESEND_EMAIL_ACTION,\n        signatureTitle: resendSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText + resendSettings.signatureSettings.requestText,\n        signSuccessText: resendSettings.signatureSettings.successText,\n      }))\n    }, [account, defaultSignRequestText, toast])\n\n    const handleOnDeleteConfirmation = useCallback(() => {\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        previousScreen: screenId,\n      }))\n      setScreenId(DELETE_EMAIL_SCREEN)\n    }, [screenId])\n\n    const handleOnCancelDelete = useCallback(() => {\n      setScreenId(subscriptionProgress.previousScreen)\n    }, [subscriptionProgress.previousScreen])\n\n    const handleOnDelete = useCallback(async () => {\n      const { error, needsSignature } = await deleteJurorEmail(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n\n      const deleteSettings = SETTINGS[DELETE_ACTION]\n\n      if (!needsSignature) {\n        if (insideModal) {\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            statusInfoTitle: deleteSettings.successInfo.title,\n            statusInfoText: `Your email ${subscriptionProgress.email} was succefully deleted. You can always re-subscribe from the notifications preferences later.`,\n          }))\n        }\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n          email: '',\n        }))\n        setScreenId(\n          insideModal ? SUCCESS_INFO_SCREEN : EMAIL_NOTIFICATIONS_FORM_SCREEN\n        )\n        return\n      }\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: needsSignature,\n        mode: insideModal ? DELETE_ACTION : DELETE_ACTION_PREFERENCES,\n        signatureTitle: `Delete \"${subscriptionProgress.email}\"`,\n        signRequestText:\n          defaultSignRequestText + deleteSettings.signatureSettings.requestText,\n        signSuccessText: deleteSettings.signatureSettings.successText,\n      }))\n    }, [account, defaultSignRequestText, insideModal])\n\n    const handleOnUnlockSettings = useCallback(() => {\n      const unlockSettings = SETTINGS[UNLOCK_SETTINGS_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: true,\n        mode: !subscriptionProgress.emailExists\n          ? UNLOCK_SETTINGS_ACTION_NOT_EMAIL\n          : subscriptionProgress.emailVerified\n          ? UNLOCK_SETTINGS_ACTION\n          : UNLOCK_SETTINGS_ACTION_NOT_VERIFIED,\n        signatureTitle: unlockSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText + unlockSettings.signatureSettings.requestText,\n        signSuccessText: unlockSettings.signatureSettings.successText,\n      }))\n    }, [defaultSignRequestText])\n\n    const handleOnUpdateEmail = useCallback(() => {\n      setScreenId(EMAIL_NOTIFICATIONS_FORM_SCREEN)\n    }, [])\n\n    const handleOnLockSettings = useCallback(async () => {\n      const { error, needsSignature } = await deleteCurrentSession(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needsUnlockSettings: true,\n      }))\n      setScreenId(UNLOCK_NOTIFICATIONS_SCREEN)\n    }, [account])\n\n    const handleSwitchNotifications = useCallback(\n      async disabled => {\n        const {\n          error,\n          needsSignature,\n          disabled: notificationsDisabled,\n        } = await switchNotificationsStatus(account, disabled)\n\n        if (error && !needsSignature) {\n          setSubscriptionProgress({ serviceError: true })\n          return\n        }\n\n        if (!needsSignature) {\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            notificationsDisabled: notificationsDisabled,\n          }))\n          setScreenId(NOTIFICATIONS_PREFERENCES_SCREEN)\n          return\n        }\n\n        setScreenId(UNLOCK_NOTIFICATIONS_SCREEN)\n      },\n      [account]\n    )\n\n    const handleOnSignSuccess = useCallback((signHash, timestamp) => {\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        startRequest: true,\n        signHash: signHash,\n        signTimestamp: timestamp,\n      }))\n    }, [])\n\n    useEffect(() => {\n      if (!startingScreen) {\n        return\n      }\n      setScreenId(startingScreen)\n    }, [startingScreen])\n\n    useEffect(() => {\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needsUnlockSettings,\n        email,\n        emailVerified,\n        emailExists,\n        notificationsDisabled,\n      }))\n    }, [\n      account,\n      needsUnlockSettings,\n      email,\n      emailVerified,\n      emailExists,\n      notificationsDisabled,\n    ])\n\n    useEffect(() => {\n      let cancelled = false\n\n      if (!subscriptionProgress.startRequest) {\n        return\n      }\n\n      const requestAction = async () => {\n        if (subscriptionProgress.needSignature) {\n          const { error: errorCreatingSession } = await createSession(\n            account,\n            subscriptionProgress.signHash,\n            subscriptionProgress.signTimestamp\n          )\n          if (errorCreatingSession && !cancelled) {\n            setSubscriptionProgress(subscriptionProgress => ({\n              ...subscriptionProgress,\n              serviceError: true,\n            }))\n          }\n        }\n\n        const action = actions[subscriptionProgress.mode]\n        let returnedJurorEmail = ''\n\n        if (action.request) {\n          let params = [account]\n\n          if (action.params) {\n            params = [...params, ...action.params]\n          }\n\n          if (action.requiresEmail) {\n            params.push(subscriptionProgress.email)\n          }\n\n          const { error, email } = await action.request(...params)\n\n          if (!cancelled) {\n            if (error) {\n              return setSubscriptionProgress(subscriptionProgress => ({\n                ...subscriptionProgress,\n                serviceError: true,\n              }))\n            }\n\n            if (email) {\n              returnedJurorEmail = email\n            }\n          }\n        }\n\n        if (!cancelled) {\n          setScreenId(SIGNATURE_SUCCESS_SCREEN)\n\n          if (action.successScreen) {\n            const timer = setTimeout(() => {\n              setScreenId(action.successScreen)\n            }, 3000)\n            setSubscriptionProgress(subscriptionProgress => ({\n              ...subscriptionProgress,\n              needSignature: false,\n              email: returnedJurorEmail || subscriptionProgress.email,\n              startRequest: false,\n            }))\n\n            return () => clearTimeout(timer)\n          }\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            needSignature: false,\n            email: returnedJurorEmail || subscriptionProgress.email,\n            startRequest: false,\n          }))\n        }\n      }\n      requestAction()\n      return () => {\n        cancelled = true\n      }\n    }, [\n      account,\n      subscriptionProgress.email,\n      subscriptionProgress.mode,\n      subscriptionProgress.startRequest,\n      subscriptionProgress.needSignature,\n      subscriptionProgress.signHash,\n      subscriptionProgress.signTimestamp,\n    ])\n\n    useEffect(() => {\n      if (!subscriptionProgress.serviceError) {\n        return\n      }\n      setScreenId(EMAIL_NOTIFICATIONS_ERROR_SCREEN)\n    }, [subscriptionProgress.serviceError])\n\n    useEffect(() => {\n      if (!subscriptionProgress.needSignature) {\n        return\n      }\n\n      setScreenId(SIGNATURE_REQUEST_SCREEN)\n    }, [subscriptionProgress.needSignature])\n\n    return (\n      <WrappedContainer screenId={screenId}>\n        {(() => {\n          if (screenId === SIGNATURE_REQUEST_SCREEN) {\n            return (\n              <SignatureRequest\n                mode=\"request\"\n                compactMode={compactMode}\n                title={subscriptionProgress.signatureTitle}\n                text={subscriptionProgress.signRequestText}\n                onSignSuccess={handleOnSignSuccess}\n              />\n            )\n          }\n\n          if (screenId === SIGNATURE_SUCCESS_SCREEN) {\n            return (\n              <SignatureRequest\n                mode=\"success\"\n                compactMode={compactMode}\n                title={subscriptionProgress.signatureTitle}\n                text={subscriptionProgress.signSuccessText}\n              />\n            )\n          }\n\n          if (screenId === EMAIL_NOTIFICATIONS_ERROR_SCREEN) {\n            const { title, description } = DEFAULT_ERROR_SETTINGS\n            return <StatusInfo error title={title} description={description} />\n          }\n\n          if (screenId === SUCCESS_INFO_SCREEN) {\n            return (\n              <StatusInfo\n                error={false}\n                title={subscriptionProgress.statusInfoTitle}\n                description={subscriptionProgress.statusInfoText}\n              />\n            )\n          }\n\n          if (screenId === EMAIL_NOTIFICATIONS_FORM_SCREEN) {\n            return (\n              <EmailNotificationsForm\n                account={account}\n                existingEmail={subscriptionProgress.email}\n                compactMode={compactMode}\n                onOptOut={handleOnOptOut}\n                onSubscribeToNotifications={handleOnSubscribe}\n              />\n            )\n          }\n\n          if (screenId === EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN) {\n            return (\n              <ExistingEmailSubscription\n                account={account}\n                compactMode={compactMode}\n                onOptOut={handleOnOptOut}\n                onSubscribeToNotifications={handleOnSubscribeExistingEmail}\n              />\n            )\n          }\n\n          if (screenId === VERIFY_YOUR_EMAIL_SCREEN) {\n            return (\n              <VerifyEmailAddress\n                updateMode={subscriptionProgress.verifyUpdateMode}\n                compactMode={compactMode}\n                email={subscriptionProgress.email}\n                onResendEmail={handleOnResendEmail}\n                onSubscribe={handleOnSubscribe}\n                onDeleteEmail={handleOnDeleteConfirmation}\n              />\n            )\n          }\n          if (screenId === DELETE_EMAIL_SCREEN) {\n            return (\n              <DeleteEmail\n                email={subscriptionProgress.email}\n                onDelete={handleOnDelete}\n                onCancel={handleOnCancelDelete}\n              />\n            )\n          }\n          if (screenId === UNLOCK_NOTIFICATIONS_SCREEN) {\n            return (\n              <UnlockNotifications\n                compactMode={compactMode}\n                onUnlock={handleOnUnlockSettings}\n                needsUnlockSettings={\n                  account && subscriptionProgress.needsUnlockSettings\n                }\n                onReturnToDashboard={onReturnToDashboard}\n              />\n            )\n          }\n          if (screenId === NOTIFICATIONS_PREFERENCES_SCREEN) {\n            return (\n              <NotificationsPreferences\n                email={subscriptionProgress.email}\n                notificationsDisabled={\n                  subscriptionProgress.notificationsDisabled\n                }\n                onSwitchNotificationsStatus={handleSwitchNotifications}\n                onLockSettings={handleOnLockSettings}\n                onDeleteEmail={handleOnDeleteConfirmation}\n                onUpdateEmail={handleOnUpdateEmail}\n              />\n            )\n          }\n          if (screenId === VERIFICATION_ERROR_SCREEN) {\n            return (\n              <StatusInfo\n                error\n                title=\"Verification failed\"\n                description=\"The email verification link was invalid or it has timed out. Please try again.\"\n              />\n            )\n          }\n          if (screenId === VERIFICATION_SUCCESS_SCREEN) {\n            return (\n              <StatusInfo\n                error={false}\n                title=\"Verification was successful\"\n                description={\n                  <span\n                    css={`\n                      display: flex;\n                      flex-wrap: wrap;\n                      justify-content: center;\n                    `}\n                  >\n                    Go back to the dashboard and\n                    <span\n                      css={`\n                        display: inline-flex;\n                        align-items: center;\n                      `}\n                    >\n                      <IconConnect size=\"small\" />\n                      <strong>Connect your account</strong>,\n                    </span>{' '}\n                    on the top right header, to access your notification\n                    settings\n                  </span>\n                }\n                actionText=\"Go to Dashboard\"\n                onAction={onReturnToDashboard}\n              />\n            )\n          }\n          if (screenId === VERIFY_EMAIL_ADDRESS_PREFERENCES) {\n            return (\n              <VerifyEmailAddressPreferences\n                email={subscriptionProgress.email}\n                onResend={handleOnResendEmail}\n              />\n            )\n          }\n\n          if (screenId === LOADING_SCREEN) {\n            return <LoadingPreferences />\n          }\n        })()}\n      </WrappedContainer>\n    )\n  }\n)\n\nconst WrappedContainer = React.memo(function WrappedContainer({ ...props }) {\n  const [insideModal] = useInside('NotificationsModal')\n  const { screenId } = props\n\n  const Container =\n    insideModal || screenId === NOTIFICATIONS_PREFERENCES_SCREEN\n      ? AnimatedContainer\n      : AnimatedBox\n\n  return <Container {...props} />\n})\n\nconst AnimatedBox = ({ ...props }) => {\n  const ref = useRef(null)\n  const [height, setHeight] = useState(0)\n\n  const setRef = useCallback(node => {\n    if (node) {\n      setHeight(node.clientHeight)\n    }\n\n    ref.current = node\n  }, [])\n\n  return (\n    <Box padding={5 * GU}>\n      <div\n        css={`\n          position: relative;\n          max-width: 800px;\n          margin: 0 auto;\n        `}\n      >\n        <Spring\n          config={springs.smooth}\n          from={{ height: `${38 * GU}px` }}\n          to={{ height: `${height}px` }}\n          native\n        >\n          {({ height }) => (\n            <animated.div style={{ height }}>\n              <AnimatedContainer {...props} refCallback={setRef} />\n            </animated.div>\n          )}\n        </Spring>\n      </div>\n    </Box>\n  )\n}\n\nconst AnimatedContainer = React.memo(function AnimatedModal({\n  screenId,\n  children,\n  refCallback,\n}) {\n  const [insideModal] = useInside('NotificationsModal')\n\n  return (\n    <Transition\n      items={{ children, screenId }}\n      keys={({ screenId }) => screenId}\n      from={{\n        position: 'absolute',\n        opacity: 0,\n        transform: 'scale3d(1.10 1.10, 1)',\n      }}\n      enter={{\n        position: 'static',\n        opacity: 1,\n        transform: 'scale3d(1, 1, 1)',\n      }}\n      leave={{\n        position: 'absolute',\n        opacity: 0,\n        transform: 'scale3d(0.90, 0.90, 1)',\n      }}\n      native\n    >\n      {({ children, screenId }) => props =>\n        insideModal ? (\n          <animated.div style={{ ...props }}>{children}</animated.div>\n        ) : (\n          <animated.div\n            ref={refCallback}\n            style={{\n              ...props,\n              top: 0,\n              left: 0,\n              right: 0,\n            }}\n          >\n            {children}\n          </animated.div>\n        )}\n    </Transition>\n  )\n})\n\nexport default EmailNotificationsManager\n"]},"metadata":{},"sourceType":"module"}