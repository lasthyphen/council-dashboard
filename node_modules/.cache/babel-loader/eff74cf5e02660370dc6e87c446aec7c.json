{"ast":null,"code":"import _regeneratorRuntime from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";export var retryMax=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(callback){var maxAttempts,retryNum,attempt,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:maxAttempts=_args2.length>1&&_args2[1]!==undefined?_args2[1]:5;retryNum=0;attempt=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return callback();case 3:return _context.abrupt(\"return\",_context.sent);case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);if(!(retryNum===maxAttempts)){_context.next=10;break;}throw _context.t0;case 10:++retryNum;console.log(\"Retrying attempt #\".concat(retryNum,\"...\"));return _context.abrupt(\"return\",attempt());case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,6]]);}));return function attempt(){return _ref2.apply(this,arguments);};}();return _context2.abrupt(\"return\",attempt());case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function retryMax(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/utils/retry-max.js"],"names":["retryMax","callback","maxAttempts","retryNum","attempt","console","log"],"mappings":"qPAAA,MAAO,IAAMA,CAAAA,QAAQ,0FAAG,kBAAOC,QAAP,wKAAiBC,WAAjB,kDAA+B,CAA/B,CAClBC,QADkB,CACP,CADO,CAGhBC,OAHgB,2FAGN,yKAECH,CAAAA,QAAQ,EAFT,oHAIRE,QAAQ,GAAKD,WAJL,qDAOZ,EAAEC,QAAF,CAEAE,OAAO,CAACC,GAAR,6BAAiCH,QAAjC,SATY,gCAULC,OAAO,EAVF,sEAHM,kBAGhBA,CAAAA,OAHgB,6EAiBfA,OAAO,EAjBQ,0DAAH,kBAARJ,CAAAA,QAAQ,4CAAd","sourcesContent":["export const retryMax = async (callback, maxAttempts = 5) => {\n  let retryNum = 0\n\n  const attempt = async () => {\n    try {\n      return await callback()\n    } catch (err) {\n      if (retryNum === maxAttempts) {\n        throw err\n      }\n      ++retryNum\n\n      console.log(`Retrying attempt #${retryNum}...`)\n      return attempt()\n    }\n  }\n\n  return attempt()\n}\n"]},"metadata":{},"sourceType":"module"}