{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletLink = void 0;\n\nconst ScopedLocalStorage_1 = require(\"./lib/ScopedLocalStorage\");\n\nconst WalletLinkProvider_1 = require(\"./provider/WalletLinkProvider\");\n\nconst WalletLinkSdkUI_1 = require(\"./provider/WalletLinkSdkUI\");\n\nconst WalletLinkRelay_1 = require(\"./relay/WalletLinkRelay\");\n\nconst WalletLinkRelayEventManager_1 = require(\"./relay/WalletLinkRelayEventManager\");\n\nconst util_1 = require(\"./util\");\n\nconst WALLETLINK_URL = process.env.WALLETLINK_URL || \"https://www.walletlink.org\";\nconst WALLETLINK_VERSION = process.env.WALLETLINK_VERSION || require(\"../package.json\").version || \"unknown\";\n\nclass WalletLink {\n  /**\n   * Constructor\n   * @param options WalletLink options object\n   */\n  constructor(options) {\n    this._appName = \"\";\n    this._appLogoUrl = null;\n    this._relay = null;\n    this._relayEventManager = null;\n    let walletLinkUrl = options.walletLinkUrl || WALLETLINK_URL;\n    let walletLinkUIConstructor;\n\n    if (!options.walletLinkUIConstructor) {\n      walletLinkUIConstructor = options => new WalletLinkSdkUI_1.WalletLinkSdkUI(options);\n    } else {\n      walletLinkUIConstructor = options.walletLinkUIConstructor;\n    }\n\n    if (typeof options.overrideIsMetaMask === \"undefined\") {\n      this._overrideIsMetaMask = false;\n    } else {\n      this._overrideIsMetaMask = options.overrideIsMetaMask;\n    }\n\n    const u = new URL(walletLinkUrl);\n    const walletLinkOrigin = `${u.protocol}//${u.host}`;\n    this._storage = new ScopedLocalStorage_1.ScopedLocalStorage(`-walletlink:${walletLinkOrigin}`);\n\n    this._storage.setItem(\"version\", WalletLink.VERSION);\n\n    if (typeof window.walletLinkExtension !== \"undefined\") {\n      return;\n    }\n\n    this._relayEventManager = new WalletLinkRelayEventManager_1.WalletLinkRelayEventManager();\n    this._relay = new WalletLinkRelay_1.WalletLinkRelay({\n      walletLinkUrl: walletLinkUrl,\n      version: WALLETLINK_VERSION,\n      darkMode: !!options.darkMode,\n      walletLinkUIConstructor: walletLinkUIConstructor,\n      storage: this._storage,\n      relayEventManager: this._relayEventManager\n    });\n    this.setAppInfo(options.appName, options.appLogoUrl);\n\n    this._relay.attachUI();\n  }\n  /**\n   * Create a Web3 Provider object\n   * @param jsonRpcUrl Ethereum JSON RPC URL (Default: \"\")\n   * @param chainId Ethereum Chain ID (Default: 1)\n   * @returns A Web3 Provider\n   */\n\n\n  makeWeb3Provider(jsonRpcUrl = \"\", chainId = 1) {\n    if (typeof window.walletLinkExtension !== \"undefined\") {\n      if ( //@ts-ignore\n      typeof window.walletLinkExtension.isCipher !== \"boolean\" || //@ts-ignore\n      !window.walletLinkExtension.isCipher) {\n        //@ts-ignore\n        window.walletLinkExtension.setProviderInfo(jsonRpcUrl, chainId);\n      }\n\n      return window.walletLinkExtension;\n    }\n\n    const relay = this._relay;\n\n    if (!relay || !this._relayEventManager || !this._storage) {\n      throw new Error(\"Relay not initialized, should never happen\");\n    }\n\n    if (!jsonRpcUrl) relay.setConnectDisabled(true);\n    return new WalletLinkProvider_1.WalletLinkProvider({\n      relayProvider: () => Promise.resolve(relay),\n      relayEventManager: this._relayEventManager,\n      storage: this._storage,\n      jsonRpcUrl,\n      chainId,\n      overrideIsMetaMask: this._overrideIsMetaMask\n    });\n  }\n  /**\n   * Set application information\n   * @param appName Application name\n   * @param appLogoUrl Application logo image URL\n   */\n\n\n  setAppInfo(appName, appLogoUrl) {\n    var _a;\n\n    this._appName = appName || \"DApp\";\n    this._appLogoUrl = appLogoUrl || util_1.getFavicon();\n\n    if (typeof window.walletLinkExtension !== \"undefined\") {\n      if ( //@ts-ignore\n      typeof window.walletLinkExtension.isCipher !== \"boolean\" || //@ts-ignore\n      !window.walletLinkExtension.isCipher) {\n        //@ts-ignore\n        window.walletLinkExtension.setAppInfo(this._appName, this._appLogoUrl);\n      }\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.setAppInfo(this._appName, this._appLogoUrl);\n    }\n  }\n  /**\n   * Disconnect. After disconnecting, this will reload the web page to ensure\n   * all potential stale state is cleared.\n   */\n\n\n  disconnect() {\n    var _a;\n\n    if (typeof window.walletLinkExtension !== \"undefined\") {\n      window.walletLinkExtension.close();\n    } else {\n      (_a = this._relay) === null || _a === void 0 ? void 0 : _a.resetAndReload();\n    }\n  }\n\n}\n\nexports.WalletLink = WalletLink;\n/**\n * WalletLink version\n */\n\nWalletLink.VERSION = WALLETLINK_VERSION;","map":null,"metadata":{},"sourceType":"script"}