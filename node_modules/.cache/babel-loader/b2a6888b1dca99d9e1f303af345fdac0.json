{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Session = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst util_1 = require(\"../util\");\n\nconst js_sha256_1 = require(\"js-sha256\");\n\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\n\nclass Session {\n  constructor(storage, id, secret, linked) {\n    this._storage = storage;\n    this._id = id || util_1.randomBytesHex(16);\n    this._secret = secret || util_1.randomBytesHex(32);\n    const hash = js_sha256_1.sha256.create();\n    hash.update(`${this._id}, ${this._secret} WalletLink`);\n    this._key = hash.hex();\n    this._linked = !!linked;\n  }\n\n  static load(storage) {\n    const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n    const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n    const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n\n    if (id && secret) {\n      return new Session(storage, id, secret, linked === \"1\");\n    }\n\n    return null;\n  }\n\n  static clear(storage) {\n    storage.removeItem(STORAGE_KEY_SESSION_SECRET);\n    storage.removeItem(STORAGE_KEY_SESSION_ID);\n    storage.removeItem(STORAGE_KEY_SESSION_LINKED);\n  }\n\n  static get persistedSessionIdChange$() {\n    return rxjs_1.fromEvent(window, \"storage\").pipe(operators_1.filter(evt => evt.key === STORAGE_KEY_SESSION_ID), operators_1.map(evt => ({\n      oldValue: evt.oldValue || null,\n      newValue: evt.newValue || null\n    })));\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get secret() {\n    return this._secret;\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  get linked() {\n    return this._linked;\n  }\n\n  set linked(val) {\n    this._linked = val;\n    this.persistLinked();\n  }\n\n  save() {\n    this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n\n    this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n\n    this.persistLinked();\n    return this;\n  }\n\n  persistLinked() {\n    this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n  }\n\n}\n\nexports.Session = Session;","map":null,"metadata":{},"sourceType":"script"}