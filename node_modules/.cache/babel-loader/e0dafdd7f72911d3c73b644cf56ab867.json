{"ast":null,"code":"import { useMemo } from 'react';\nimport { useTotalANTStakedPolling } from './useCourtContracts';\nimport { useActiveJurorsNumber } from '../hooks/query-hooks';\nimport { useJurorRegistrySubscription, useTotalRewardsSubscription } from '../hooks/subscription-hooks';\nimport { getKnownToken } from '../utils/known-tokens';\nimport { bigNum } from '../lib/math-utils';\nimport IconANJ from \"../assets/IconANJ.svg\";\nimport IconANT from \"../assets/IconANT.svg\";\nimport IconDAI from \"../assets/IconDAI.svg\";\nconst STATS_FETCHING_TIMEOUT = 15000;\nconst COURT_STATS = [{\n  label: 'Total Active DGC',\n  token: { ...getKnownToken('ANJ'),\n    icon: IconANJ\n  }\n}, {\n  label: 'Total Staked ANT',\n  token: { ...getKnownToken('ANT'),\n    icon: IconANT\n  }\n}, {\n  label: 'Total Active Jurors'\n}, {\n  label: 'Total Rewards DAI',\n  token: { ...getKnownToken('DAI'),\n    icon: IconDAI\n  }\n}];\nexport function useTotalActiveBalance() {\n  const {\n    data: jurorRegistryStats,\n    error\n  } = useJurorRegistrySubscription();\n  return useMemo(() => {\n    if (!jurorRegistryStats || error) {\n      return [bigNum(-1), error];\n    }\n\n    return [bigNum(jurorRegistryStats.totalActive), error];\n  }, [error, jurorRegistryStats]);\n}\n\nfunction useTotalRewards() {\n  const {\n    data: rewards,\n    error\n  } = useTotalRewardsSubscription();\n  return useMemo(() => {\n    if (!rewards || error) {\n      return [bigNum(-1), error];\n    }\n\n    return [rewards.reduce((totalAcumulator, reward) => totalAcumulator.add(reward.amount), bigNum(0)), error];\n  }, [error, rewards]);\n}\n/**\n * Hook to get the dashboard stats ANJ active balance, ANT total stake and the active jurors number\n * @returns {Array} First item an array with the stats and the second one a loading state\n */\n\n\nfunction useCourtStats() {\n  const [anjActiveBalance, anjActiveBalanceError] = useTotalActiveBalance();\n  const [antTotalStake, antTotalStakeError] = useTotalANTStakedPolling(STATS_FETCHING_TIMEOUT);\n  const [activeJurors, activeJurorsError] = useActiveJurorsNumber();\n  const [totalRewards, totalRewardsError] = useTotalRewards(); // Loading states\n\n  const anjFetching = anjActiveBalance.eq(bigNum(-1)) && !anjActiveBalanceError;\n  const antFetching = antTotalStake.eq(bigNum(-1)) && !antTotalStakeError;\n  const activeJurorsFetching = activeJurors === null && !activeJurorsError;\n  const totalRewardsFetching = totalRewards.eq(bigNum(-1)) && !totalRewardsError;\n  return useMemo(() => {\n    if (anjFetching || antFetching || activeJurorsFetching || totalRewardsFetching) {\n      return [null, true];\n    }\n\n    const statsData = [anjActiveBalance, antTotalStake, activeJurors, totalRewards];\n    const statsError = [anjActiveBalanceError, antTotalStakeError, activeJurorsError, totalRewardsError];\n    return [COURT_STATS.map((stat, index) => {\n      return { ...stat,\n        value: statsData[index],\n        error: statsError[index]\n      };\n    }), false];\n  }\n  /* eslint-disable react-hooks/exhaustive-deps */\n  , [activeJurors, activeJurorsError, activeJurorsFetching, anjActiveBalance.toString(), anjActiveBalanceError, anjFetching, antFetching, antTotalStake.toString(), antTotalStakeError, totalRewards.toString(), totalRewardsError, totalRewardsFetching]\n  /* eslint-disable-line react-hooks/exhaustive-deps */\n  );\n}\n\nexport default useCourtStats;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useCourtStats.js"],"names":["useMemo","useTotalANTStakedPolling","useActiveJurorsNumber","useJurorRegistrySubscription","useTotalRewardsSubscription","getKnownToken","bigNum","STATS_FETCHING_TIMEOUT","COURT_STATS","label","token","icon","IconANJ","IconANT","IconDAI","useTotalActiveBalance","data","jurorRegistryStats","error","totalActive","useTotalRewards","rewards","reduce","totalAcumulator","reward","add","amount","useCourtStats","anjActiveBalance","anjActiveBalanceError","antTotalStake","antTotalStakeError","activeJurors","activeJurorsError","totalRewards","totalRewardsError","anjFetching","eq","antFetching","activeJurorsFetching","totalRewardsFetching","statsData","statsError","map","stat","index","value","toString"],"mappings":"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","sourcesContent":["import { useMemo } from 'react'\nimport { useTotalANTStakedPolling } from './useCourtContracts'\nimport { useActiveJurorsNumber } from '../hooks/query-hooks'\nimport {\n  useJurorRegistrySubscription,\n  useTotalRewardsSubscription,\n} from '../hooks/subscription-hooks'\nimport { getKnownToken } from '../utils/known-tokens'\nimport { bigNum } from '../lib/math-utils'\nimport IconANJ from '../assets/IconANJ.svg'\nimport IconANT from '../assets/IconANT.svg'\nimport IconDAI from '../assets/IconDAI.svg'\n\nconst STATS_FETCHING_TIMEOUT = 15000\n\nconst COURT_STATS = [\n  {\n    label: 'Total Active DGC',\n    token: { ...getKnownToken('ANJ'), icon: IconANJ },\n  },\n  {\n    label: 'Total Staked ANT',\n    token: { ...getKnownToken('ANT'), icon: IconANT },\n  },\n  { label: 'Total Active Jurors' },\n  {\n    label: 'Total Rewards DAI',\n    token: { ...getKnownToken('DAI'), icon: IconDAI },\n  },\n]\n\nexport function useTotalActiveBalance() {\n  const { data: jurorRegistryStats, error } = useJurorRegistrySubscription()\n\n  return useMemo(() => {\n    if (!jurorRegistryStats || error) {\n      return [bigNum(-1), error]\n    }\n    return [bigNum(jurorRegistryStats.totalActive), error]\n  }, [error, jurorRegistryStats])\n}\n\nfunction useTotalRewards() {\n  const { data: rewards, error } = useTotalRewardsSubscription()\n\n  return useMemo(() => {\n    if (!rewards || error) {\n      return [bigNum(-1), error]\n    }\n    return [\n      rewards.reduce(\n        (totalAcumulator, reward) => totalAcumulator.add(reward.amount),\n        bigNum(0)\n      ),\n      error,\n    ]\n  }, [error, rewards])\n}\n/**\n * Hook to get the dashboard stats ANJ active balance, ANT total stake and the active jurors number\n * @returns {Array} First item an array with the stats and the second one a loading state\n */\nfunction useCourtStats() {\n  const [anjActiveBalance, anjActiveBalanceError] = useTotalActiveBalance()\n  const [antTotalStake, antTotalStakeError] = useTotalANTStakedPolling(\n    STATS_FETCHING_TIMEOUT\n  )\n  const [activeJurors, activeJurorsError] = useActiveJurorsNumber()\n  const [totalRewards, totalRewardsError] = useTotalRewards()\n\n  // Loading states\n  const anjFetching = anjActiveBalance.eq(bigNum(-1)) && !anjActiveBalanceError\n  const antFetching = antTotalStake.eq(bigNum(-1)) && !antTotalStakeError\n  const activeJurorsFetching = activeJurors === null && !activeJurorsError\n  const totalRewardsFetching = totalRewards.eq(bigNum(-1)) && !totalRewardsError\n\n  return useMemo(\n    () => {\n      if (\n        anjFetching ||\n        antFetching ||\n        activeJurorsFetching ||\n        totalRewardsFetching\n      ) {\n        return [null, true]\n      }\n\n      const statsData = [\n        anjActiveBalance,\n        antTotalStake,\n        activeJurors,\n        totalRewards,\n      ]\n      const statsError = [\n        anjActiveBalanceError,\n        antTotalStakeError,\n        activeJurorsError,\n        totalRewardsError,\n      ]\n      return [\n        COURT_STATS.map((stat, index) => {\n          return {\n            ...stat,\n            value: statsData[index],\n            error: statsError[index],\n          }\n        }),\n        false,\n      ]\n    } /* eslint-disable react-hooks/exhaustive-deps */,\n    [\n      activeJurors,\n      activeJurorsError,\n      activeJurorsFetching,\n      anjActiveBalance.toString(),\n      anjActiveBalanceError,\n      anjFetching,\n      antFetching,\n      antTotalStake.toString(),\n      antTotalStakeError,\n      totalRewards.toString(),\n      totalRewardsError,\n      totalRewardsFetching,\n    ]\n    /* eslint-disable-line react-hooks/exhaustive-deps */\n  )\n}\n\nexport default useCourtStats\n"]},"metadata":{},"sourceType":"module"}