{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: !0\n}), exports.default = void 0;\n\nvar _addMilliseconds = _interopRequireDefault(require(\"date-fns/addMilliseconds\")),\n    _addSeconds = _interopRequireDefault(require(\"date-fns/addSeconds\")),\n    _addMinutes = _interopRequireDefault(require(\"date-fns/addMinutes\")),\n    _addHours = _interopRequireDefault(require(\"date-fns/addHours\")),\n    _addDays = _interopRequireDefault(require(\"date-fns/addDays\")),\n    _addWeeks = _interopRequireDefault(require(\"date-fns/addWeeks\")),\n    _addMonths = _interopRequireDefault(require(\"date-fns/addMonths\")),\n    _addYears = _interopRequireDefault(require(\"date-fns/addYears\")),\n    _formatDistanceStrict = _interopRequireDefault(require(\"date-fns/formatDistanceStrict\"));\n\nconst BEST_UNIT = \"best\",\n      ADD_UNIT_FN = new Map([[\"millisecond\", _addMilliseconds.default], [\"second\", _addSeconds.default], [\"minute\", _addMinutes.default], [\"hour\", _addHours.default], [\"day\", _addDays.default], [\"week\", _addWeeks.default], [\"month\", _addMonths.default], [\"year\", _addYears.default]]),\n      DISALLOWED_FROM_UNITS = new Set([\"millisecond\"]);\n\nvar _default = () =>\n/**\n* Transform between time units.\n*\n* @param {*} time The base time amount\n* @param {string} [toUnit] The unit to convert the time to (supported units: 'second', 'minute', 'hour', 'day', 'week', 'month', 'year')\n*                          Defaults to using the \"best\" unit\n* @param {string} [fromUnit='second'] The unit to convert the time from (supported units: 'millisecond', 'second', 'minute', 'hour', 'day', 'week', 'month', 'year')\n* @return {Promise<radspec/evaluator/TypedValue>}\n*/\nasync (time, toUnit = BEST_UNIT, fromUnit = \"second\") => {\n  if (DISALLOWED_FROM_UNITS.has(fromUnit) || !ADD_UNIT_FN.has(fromUnit)) throw new Error(`@transformTime: Time unit '${fromUnit}' is not supported as a fromUnit`);\n  if (toUnit !== BEST_UNIT && !ADD_UNIT_FN.has(toUnit)) throw new Error(`@transformTime: Time unit '${toUnit}' is not supported as a toUnit`);\n  const addTime = ADD_UNIT_FN.get(fromUnit),\n        zeroDate = new Date(0),\n        duration = addTime(zeroDate, +time);\n  return {\n    type: \"string\",\n    value: (0, _formatDistanceStrict.default)(zeroDate, duration, toUnit === BEST_UNIT ? {} : {\n      unit: toUnit\n    })\n  };\n};\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}