{"ast":null,"code":"import { networkConfigs, getInternalNetworkName, getNetworkConfig, RINKEBY_COURT, RINKEBY_STAGING_COURT } from '../networks';\nimport env from '../environment';\nconst VOIDED_DISPUTES = {\n  main: new Map([[networkConfigs.dijets.court, new Map([{\n    id: '0',\n    link: 'https://blog.aragon.one/update-on-aragon-courts-first-mock-dispute/',\n    description: 'Dispute #0 is void and all related content has been removed from the Dashboard. Aragon One has made the decision to void the dispute and consider it non-existent when considering precedence for future Aragon Court cases.',\n    text: 'This dispute has been voided and discontinued'\n  }].map(dispute => [dispute.id, dispute]))]]),\n  rinkeby: new Map([[RINKEBY_COURT, new Map([])], [RINKEBY_STAGING_COURT, new Map([])]]),\n  ropsten: new Map([[networkConfigs.ropsten.court, new Map([])]]),\n  local: new Map([[networkConfigs.local.court, new Map([])]]),\n  dijets: new Map([[networkConfigs.dijets.court, new Map([])]])\n};\nexport function getVoidedDisputesByCourt() {\n  if (env('SKIP_VOIDING')) {\n    return new Map([]);\n  }\n\n  const courtAddress = getNetworkConfig().court;\n  return VOIDED_DISPUTES[getInternalNetworkName()].get(courtAddress);\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/flagged-disputes/voided-disputes.js"],"names":["networkConfigs","getInternalNetworkName","getNetworkConfig","RINKEBY_COURT","RINKEBY_STAGING_COURT","env","VOIDED_DISPUTES","main","Map","dijets","court","id","link","description","text","map","dispute","rinkeby","ropsten","local","getVoidedDisputesByCourt","courtAddress","get"],"mappings":"AAAA,SACEA,cADF,EAEEC,sBAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,qBALF,QAMO,aANP;AAOA,OAAOC,GAAP,MAAgB,gBAAhB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,IAAI,EAAE,IAAIC,GAAJ,CAAQ,CACZ,CACER,cAAc,CAACS,MAAf,CAAsBC,KADxB,EAEE,IAAIF,GAAJ,CACE,CACE;AACEG,IAAAA,EAAE,EAAE,GADN;AAEEC,IAAAA,IAAI,EACF,qEAHJ;AAIEC,IAAAA,WAAW,EACT,8NALJ;AAMEC,IAAAA,IAAI,EAAE;AANR,GADF,EASEC,GATF,CASMC,OAAO,IAAI,CAACA,OAAO,CAACL,EAAT,EAAaK,OAAb,CATjB,CADF,CAFF,CADY,CAAR,CADgB;AAkBtBC,EAAAA,OAAO,EAAE,IAAIT,GAAJ,CAAQ,CACf,CAACL,aAAD,EAAgB,IAAIK,GAAJ,CAAQ,EAAR,CAAhB,CADe,EAEf,CAACJ,qBAAD,EAAwB,IAAII,GAAJ,CAAQ,EAAR,CAAxB,CAFe,CAAR,CAlBa;AAsBtBU,EAAAA,OAAO,EAAE,IAAIV,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACkB,OAAf,CAAuBR,KAAxB,EAA+B,IAAIF,GAAJ,CAAQ,EAAR,CAA/B,CAAD,CAAR,CAtBa;AAuBtBW,EAAAA,KAAK,EAAE,IAAIX,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACmB,KAAf,CAAqBT,KAAtB,EAA6B,IAAIF,GAAJ,CAAQ,EAAR,CAA7B,CAAD,CAAR,CAvBe;AAwBtBC,EAAAA,MAAM,EAAE,IAAID,GAAJ,CAAQ,CAAC,CAACR,cAAc,CAACS,MAAf,CAAsBC,KAAvB,EAA8B,IAAIF,GAAJ,CAAQ,EAAR,CAA9B,CAAD,CAAR;AAxBc,CAAxB;AA2BA,OAAO,SAASY,wBAAT,GAAoC;AACzC,MAAIf,GAAG,CAAC,cAAD,CAAP,EAAyB;AACvB,WAAO,IAAIG,GAAJ,CAAQ,EAAR,CAAP;AACD;;AACD,QAAMa,YAAY,GAAGnB,gBAAgB,GAAGQ,KAAxC;AAEA,SAAOJ,eAAe,CAACL,sBAAsB,EAAvB,CAAf,CAA0CqB,GAA1C,CAA8CD,YAA9C,CAAP;AACD","sourcesContent":["import {\n  networkConfigs,\n  getInternalNetworkName,\n  getNetworkConfig,\n  RINKEBY_COURT,\n  RINKEBY_STAGING_COURT,\n} from '../networks'\nimport env from '../environment'\n\nconst VOIDED_DISPUTES = {\n  main: new Map([\n    [\n      networkConfigs.dijets.court,\n      new Map(\n        [\n          {\n            id: '0',\n            link:\n              'https://blog.aragon.one/update-on-aragon-courts-first-mock-dispute/',\n            description:\n              'Dispute #0 is void and all related content has been removed from the Dashboard. Aragon One has made the decision to void the dispute and consider it non-existent when considering precedence for future Aragon Court cases.',\n            text: 'This dispute has been voided and discontinued',\n          },\n        ].map(dispute => [dispute.id, dispute])\n      ),\n    ],\n  ]),\n  rinkeby: new Map([\n    [RINKEBY_COURT, new Map([])],\n    [RINKEBY_STAGING_COURT, new Map([])],\n  ]),\n  ropsten: new Map([[networkConfigs.ropsten.court, new Map([])]]),\n  local: new Map([[networkConfigs.local.court, new Map([])]]),\n  dijets: new Map([[networkConfigs.dijets.court, new Map([])]]),\n}\n\nexport function getVoidedDisputesByCourt() {\n  if (env('SKIP_VOIDING')) {\n    return new Map([])\n  }\n  const courtAddress = getNetworkConfig().court\n\n  return VOIDED_DISPUTES[getInternalNetworkName()].get(courtAddress)\n}\n"]},"metadata":{},"sourceType":"module"}