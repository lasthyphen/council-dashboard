{"ast":null,"code":"import _objectSpread from\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _styled2 from\"styled-components\";import _styled from\"styled-components\";import React from'react';import{ProgressBar,GU}from'@aragon/ui';import{Transition,animated}from'react-spring/renderprops';import{ActivityStatusType}from'./prop-types';import TimeTag from'./TimeTag';import useNow from'../../hooks/useNow';import{ACTIVITY_STATUS_CONFIRMED,ACTIVITY_STATUS_PENDING}from'./activity-statuses';import{norm}from'../../lib/math-utils';import{MINUTE}from'../../utils/date-utils';var DELAY_BEFORE_HIDE=1000;var TX_DURATION_AVERAGE=3*MINUTE;// threshold at which point we switch to displaying the indeterminate progress\n// bar, so that the user doesn’t get confused by a completed progress bar.\nvar TX_DURATION_THRESHOLD=TX_DURATION_AVERAGE-MINUTE/2;function getProgress(status,createdAt,estimate,threshold,now){if(status===ACTIVITY_STATUS_CONFIRMED){return 1;}return now>threshold?-1:norm(now,createdAt,estimate);}var _StyledDiv=_styled(\"div\").withConfig({displayName:\"TransactionProgress___StyledDiv\",componentId:\"sc-1mv78eq-0\"})([\"flex-grow:1\"]);var _StyledTimeTag=_styled(TimeTag).withConfig({displayName:\"TransactionProgress___StyledTimeTag\",componentId:\"sc-1mv78eq-1\"})([\"margin-left:\",\"px;\"],function(p){return p._css;});var TransactionProgress=React.memo(function TransactionProgress(_ref){var createdAt=_ref.createdAt,minedAtEstimate=_ref.minedAtEstimate,status=_ref.status;var now=useNow().valueOf();// Only animate things if the panel is ready (opened).\nvar estimate=createdAt+TX_DURATION_AVERAGE;var threshold=createdAt+TX_DURATION_THRESHOLD;var progress=getProgress(status,createdAt,estimate,threshold,now);var showConfirmed=status===ACTIVITY_STATUS_CONFIRMED;var showTimer=!showConfirmed&&now<threshold&&status===ACTIVITY_STATUS_PENDING;return React.createElement(Transition,{native:true,delay:DELAY_BEFORE_HIDE,items:status===ACTIVITY_STATUS_PENDING,enter:{height:28,opacity:1},leave:{height:0,opacity:0}},function(show){return show&&function(transition){return React.createElement(animated.div,{style:_objectSpread({display:'flex',alignItems:'center',paddingTop:\"\".concat(1*GU,\"px\")},transition)},React.createElement(_StyledDiv,null,React.createElement(ProgressBar,{animate:true,value:showConfirmed?1:progress})),(showTimer||showConfirmed)&&React.createElement(_StyledTimeTag,{date:estimate,label:showConfirmed?'confirmed':null,_css:2*GU}));};});});TransactionProgress.defaultProps={minedAtEstimate:-1};export default TransactionProgress;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/Activity/TransactionProgress.js"],"names":["React","ProgressBar","GU","Transition","animated","ActivityStatusType","TimeTag","useNow","ACTIVITY_STATUS_CONFIRMED","ACTIVITY_STATUS_PENDING","norm","MINUTE","DELAY_BEFORE_HIDE","TX_DURATION_AVERAGE","TX_DURATION_THRESHOLD","getProgress","status","createdAt","estimate","threshold","now","TransactionProgress","memo","minedAtEstimate","valueOf","progress","showConfirmed","showTimer","height","opacity","show","transition","display","alignItems","paddingTop","defaultProps"],"mappings":"0MAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,WAAT,CAAsBC,EAAtB,KAAgC,YAAhC,CACA,OAASC,UAAT,CAAqBC,QAArB,KAAqC,0BAArC,CACA,OAASC,kBAAT,KAAmC,cAAnC,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CACA,OACEC,yBADF,CAEEC,uBAFF,KAGO,qBAHP,CAIA,OAASC,IAAT,KAAqB,sBAArB,CACA,OAASC,MAAT,KAAuB,wBAAvB,CAEA,GAAMC,CAAAA,iBAAiB,CAAG,IAA1B,CACA,GAAMC,CAAAA,mBAAmB,CAAG,EAAIF,MAAhC,CACA;AACA;AACA,GAAMG,CAAAA,qBAAqB,CAAGD,mBAAmB,CAAGF,MAAM,CAAG,CAA7D,CAEA,QAASI,CAAAA,WAAT,CAAqBC,MAArB,CAA6BC,SAA7B,CAAwCC,QAAxC,CAAkDC,SAAlD,CAA6DC,GAA7D,CAAkE,CAChE,GAAIJ,MAAM,GAAKR,yBAAf,CAA0C,CACxC,MAAO,EAAP,CACD,CACD,MAAOY,CAAAA,GAAG,CAAGD,SAAN,CAAkB,CAAC,CAAnB,CAAuBT,IAAI,CAACU,GAAD,CAAMH,SAAN,CAAiBC,QAAjB,CAAlC,CACD,C,yTAED,GAAMG,CAAAA,mBAAmB,CAAGrB,KAAK,CAACsB,IAAN,CAAW,QAASD,CAAAA,mBAAT,MAIpC,IAHDJ,CAAAA,SAGC,MAHDA,SAGC,CAFDM,eAEC,MAFDA,eAEC,CADDP,MACC,MADDA,MACC,CACD,GAAMI,CAAAA,GAAG,CAAGb,MAAM,GAAGiB,OAAT,EAAZ,CAEA;AACA,GAAMN,CAAAA,QAAQ,CAAGD,SAAS,CAAGJ,mBAA7B,CACA,GAAMM,CAAAA,SAAS,CAAGF,SAAS,CAAGH,qBAA9B,CAEA,GAAMW,CAAAA,QAAQ,CAAGV,WAAW,CAACC,MAAD,CAASC,SAAT,CAAoBC,QAApB,CAA8BC,SAA9B,CAAyCC,GAAzC,CAA5B,CACA,GAAMM,CAAAA,aAAa,CAAGV,MAAM,GAAKR,yBAAjC,CACA,GAAMmB,CAAAA,SAAS,CACb,CAACD,aAAD,EAAkBN,GAAG,CAAGD,SAAxB,EAAqCH,MAAM,GAAKP,uBADlD,CAGA,MACE,qBAAC,UAAD,EACE,MAAM,KADR,CAEE,KAAK,CAAEG,iBAFT,CAGE,KAAK,CAAEI,MAAM,GAAKP,uBAHpB,CAIE,KAAK,CAAE,CAAEmB,MAAM,CAAE,EAAV,CAAcC,OAAO,CAAE,CAAvB,CAJT,CAKE,KAAK,CAAE,CAAED,MAAM,CAAE,CAAV,CAAaC,OAAO,CAAE,CAAtB,CALT,EAOG,SAAAC,IAAI,QACHA,CAAAA,IAAI,EACH,SAAAC,UAAU,QACT,qBAAC,QAAD,CAAU,GAAV,EACE,KAAK,gBACHC,OAAO,CAAE,MADN,CAEHC,UAAU,CAAE,QAFT,CAGHC,UAAU,WAAK,EAAIhC,EAAT,MAHP,EAIA6B,UAJA,CADP,EAQE,oCACE,oBAAC,WAAD,EAAa,OAAO,KAApB,CAAqB,KAAK,CAAEL,aAAa,CAAG,CAAH,CAAOD,QAAhD,EADF,CARF,CAWG,CAACE,SAAS,EAAID,aAAd,GACC,oCACE,IAAI,CAAER,QADR,CAEE,KAAK,CAAEQ,aAAa,CAAG,WAAH,CAAiB,IAFvC,MAImB,EAAIxB,EAJvB,EAZJ,CADS,EAFR,EAPP,CADF,CAoCD,CApD2B,CAA5B,CA6DAmB,mBAAmB,CAACc,YAApB,CAAmC,CACjCZ,eAAe,CAAE,CAAC,CADe,CAAnC,CAIA,cAAeF,CAAAA,mBAAf","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ProgressBar, GU } from '@aragon/ui'\nimport { Transition, animated } from 'react-spring/renderprops'\nimport { ActivityStatusType } from './prop-types'\nimport TimeTag from './TimeTag'\n\nimport useNow from '../../hooks/useNow'\nimport {\n  ACTIVITY_STATUS_CONFIRMED,\n  ACTIVITY_STATUS_PENDING,\n} from './activity-statuses'\nimport { norm } from '../../lib/math-utils'\nimport { MINUTE } from '../../utils/date-utils'\n\nconst DELAY_BEFORE_HIDE = 1000\nconst TX_DURATION_AVERAGE = 3 * MINUTE\n// threshold at which point we switch to displaying the indeterminate progress\n// bar, so that the user doesn’t get confused by a completed progress bar.\nconst TX_DURATION_THRESHOLD = TX_DURATION_AVERAGE - MINUTE / 2\n\nfunction getProgress(status, createdAt, estimate, threshold, now) {\n  if (status === ACTIVITY_STATUS_CONFIRMED) {\n    return 1\n  }\n  return now > threshold ? -1 : norm(now, createdAt, estimate)\n}\n\nconst TransactionProgress = React.memo(function TransactionProgress({\n  createdAt,\n  minedAtEstimate,\n  status,\n}) {\n  const now = useNow().valueOf()\n\n  // Only animate things if the panel is ready (opened).\n  const estimate = createdAt + TX_DURATION_AVERAGE\n  const threshold = createdAt + TX_DURATION_THRESHOLD\n\n  const progress = getProgress(status, createdAt, estimate, threshold, now)\n  const showConfirmed = status === ACTIVITY_STATUS_CONFIRMED\n  const showTimer =\n    !showConfirmed && now < threshold && status === ACTIVITY_STATUS_PENDING\n\n  return (\n    <Transition\n      native\n      delay={DELAY_BEFORE_HIDE}\n      items={status === ACTIVITY_STATUS_PENDING}\n      enter={{ height: 28, opacity: 1 }}\n      leave={{ height: 0, opacity: 0 }}\n    >\n      {show =>\n        show &&\n        (transition => (\n          <animated.div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              paddingTop: `${1 * GU}px`,\n              ...transition,\n            }}\n          >\n            <div css=\"flex-grow: 1\">\n              <ProgressBar animate value={showConfirmed ? 1 : progress} />\n            </div>\n            {(showTimer || showConfirmed) && (\n              <TimeTag\n                date={estimate}\n                label={showConfirmed ? 'confirmed' : null}\n                css={`\n                  margin-left: ${2 * GU}px;\n                `}\n              />\n            )}\n          </animated.div>\n        ))\n      }\n    </Transition>\n  )\n})\n\nTransactionProgress.propTypes = {\n  // unix timestamps\n  createdAt: PropTypes.number.isRequired,\n  minedAtEstimate: PropTypes.number,\n  status: ActivityStatusType.isRequired,\n}\n\nTransactionProgress.defaultProps = {\n  minedAtEstimate: -1,\n}\n\nexport default TransactionProgress\n"]},"metadata":{},"sourceType":"module"}