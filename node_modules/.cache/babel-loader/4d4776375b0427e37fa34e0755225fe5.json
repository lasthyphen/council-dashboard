{"ast":null,"code":"import{useCallback,useRef}from'react';import{useHistory,useLocation}from'react-router-dom';// Preferences base query string\nvar GLOBAL_PREFERENCES_QUERY_PARAM='?preferences=';export function getPreferencesSearch(screen){return\"\".concat(GLOBAL_PREFERENCES_QUERY_PARAM).concat(screen);}function parsePreferences(){var search=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var searchParams=new URLSearchParams(search);return{screen:searchParams.get('preferences')};}/**\n * Hook to interact with the preferences\n * @returns {Array} [open preferences handler, close preferences handler, current preference screen]\n */export default function usePreferences(){// We need to keep track of the path where the preference was called in order to return to the same path when the preference modal is closed\nvar _useLocation=useLocation(),basePath=_useLocation.pathname,search=_useLocation.search;var history=useHistory();var _parsePreferences=parsePreferences(search),screen=_parsePreferences.screen;var preferenceScreen=useRef(screen);var handleOpenPreferences=useCallback(function(screen){preferenceScreen.current=screen;var fullPath=basePath+getPreferencesSearch(preferenceScreen.current);history.push(fullPath);},[basePath,history]);var handleClosePreferences=useCallback(function(){preferenceScreen.current='';history.push(basePath);},[basePath,history]);return[handleOpenPreferences,handleClosePreferences,preferenceScreen.current];}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/usePreferences.js"],"names":["useCallback","useRef","useHistory","useLocation","GLOBAL_PREFERENCES_QUERY_PARAM","getPreferencesSearch","screen","parsePreferences","search","searchParams","URLSearchParams","get","usePreferences","basePath","pathname","history","preferenceScreen","handleOpenPreferences","current","fullPath","push","handleClosePreferences"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,MAAtB,KAAoC,OAApC,CACA,OAASC,UAAT,CAAqBC,WAArB,KAAwC,kBAAxC,CAEA;AACA,GAAMC,CAAAA,8BAA8B,CAAG,eAAvC,CAEA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,MAA9B,CAAsC,CAC3C,gBAAUF,8BAAV,SAA2CE,MAA3C,EACD,CAED,QAASC,CAAAA,gBAAT,EAAuC,IAAbC,CAAAA,MAAa,2DAAJ,EAAI,CACrC,GAAMC,CAAAA,YAAY,CAAG,GAAIC,CAAAA,eAAJ,CAAoBF,MAApB,CAArB,CAEA,MAAO,CACLF,MAAM,CAAEG,YAAY,CAACE,GAAb,CAAiB,aAAjB,CADH,CAAP,CAGD,CAED;;;GAIA,cAAe,SAASC,CAAAA,cAAT,EAA0B,CACvC;AADuC,iBAEAT,WAAW,EAFX,CAErBU,QAFqB,cAE/BC,QAF+B,CAEXN,MAFW,cAEXA,MAFW,CAGvC,GAAMO,CAAAA,OAAO,CAAGb,UAAU,EAA1B,CAHuC,sBAKpBK,gBAAgB,CAACC,MAAD,CALI,CAK/BF,MAL+B,mBAK/BA,MAL+B,CAOvC,GAAMU,CAAAA,gBAAgB,CAAGf,MAAM,CAACK,MAAD,CAA/B,CAEA,GAAMW,CAAAA,qBAAqB,CAAGjB,WAAW,CACvC,SAAAM,MAAM,CAAI,CACRU,gBAAgB,CAACE,OAAjB,CAA2BZ,MAA3B,CACA,GAAMa,CAAAA,QAAQ,CAAGN,QAAQ,CAAGR,oBAAoB,CAACW,gBAAgB,CAACE,OAAlB,CAAhD,CACAH,OAAO,CAACK,IAAR,CAAaD,QAAb,EACD,CALsC,CAMvC,CAACN,QAAD,CAAWE,OAAX,CANuC,CAAzC,CASA,GAAMM,CAAAA,sBAAsB,CAAGrB,WAAW,CAAC,UAAM,CAC/CgB,gBAAgB,CAACE,OAAjB,CAA2B,EAA3B,CACAH,OAAO,CAACK,IAAR,CAAaP,QAAb,EACD,CAHyC,CAGvC,CAACA,QAAD,CAAWE,OAAX,CAHuC,CAA1C,CAKA,MAAO,CACLE,qBADK,CAELI,sBAFK,CAGLL,gBAAgB,CAACE,OAHZ,CAAP,CAKD","sourcesContent":["import { useCallback, useRef } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\n\n// Preferences base query string\nconst GLOBAL_PREFERENCES_QUERY_PARAM = '?preferences='\n\nexport function getPreferencesSearch(screen) {\n  return `${GLOBAL_PREFERENCES_QUERY_PARAM}${screen}`\n}\n\nfunction parsePreferences(search = '') {\n  const searchParams = new URLSearchParams(search)\n\n  return {\n    screen: searchParams.get('preferences'),\n  }\n}\n\n/**\n * Hook to interact with the preferences\n * @returns {Array} [open preferences handler, close preferences handler, current preference screen]\n */\nexport default function usePreferences() {\n  // We need to keep track of the path where the preference was called in order to return to the same path when the preference modal is closed\n  const { pathname: basePath, search } = useLocation()\n  const history = useHistory()\n\n  const { screen } = parsePreferences(search)\n\n  const preferenceScreen = useRef(screen)\n\n  const handleOpenPreferences = useCallback(\n    screen => {\n      preferenceScreen.current = screen\n      const fullPath = basePath + getPreferencesSearch(preferenceScreen.current)\n      history.push(fullPath)\n    },\n    [basePath, history]\n  )\n\n  const handleClosePreferences = useCallback(() => {\n    preferenceScreen.current = ''\n    history.push(basePath)\n  }, [basePath, history])\n\n  return [\n    handleOpenPreferences,\n    handleClosePreferences,\n    preferenceScreen.current,\n  ]\n}\n"]},"metadata":{},"sourceType":"module"}