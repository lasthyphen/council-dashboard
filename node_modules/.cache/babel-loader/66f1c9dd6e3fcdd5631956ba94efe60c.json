{"ast":null,"code":"const pify = require('pify');\n\nconst BaseBlockTracker = require('./base');\n\nconst sec = 1000;\n\nclass PollingBlockTracker extends BaseBlockTracker {\n  constructor(opts = {}) {\n    // parse + validate args\n    if (!opts.provider) throw new Error('PollingBlockTracker - no provider specified.');\n    const pollingInterval = opts.pollingInterval || 20 * sec;\n    const retryTimeout = opts.retryTimeout || pollingInterval / 10;\n    const keepEventLoopActive = opts.keepEventLoopActive !== undefined ? opts.keepEventLoopActive : true;\n    const setSkipCacheFlag = opts.setSkipCacheFlag || false; // BaseBlockTracker constructor\n\n    super(Object.assign({\n      blockResetDuration: pollingInterval\n    }, opts)); // config\n\n    this._provider = opts.provider;\n    this._pollingInterval = pollingInterval;\n    this._retryTimeout = retryTimeout;\n    this._keepEventLoopActive = keepEventLoopActive;\n    this._setSkipCacheFlag = setSkipCacheFlag;\n  } //\n  // public\n  //\n  // trigger block polling\n\n\n  async checkForLatestBlock() {\n    await this._updateLatestBlock();\n    return await this.getLatestBlock();\n  } //\n  // private\n  //\n\n\n  _start() {\n    this._performSync().catch(err => this.emit('error', err));\n  }\n\n  async _performSync() {\n    while (this._isRunning) {\n      try {\n        await this._updateLatestBlock();\n        await timeout(this._pollingInterval, !this._keepEventLoopActive);\n      } catch (err) {\n        const newErr = new Error(`PollingBlockTracker - encountered an error while attempting to update latest block:\\n${err.stack}`);\n\n        try {\n          this.emit('error', newErr);\n        } catch (emitErr) {\n          console.error(newErr);\n        }\n\n        await timeout(this._retryTimeout, !this._keepEventLoopActive);\n      }\n    }\n  }\n\n  async _updateLatestBlock() {\n    // fetch + set latest block\n    const latestBlock = await this._fetchLatestBlock();\n\n    this._newPotentialLatest(latestBlock);\n  }\n\n  async _fetchLatestBlock() {\n    const req = {\n      jsonrpc: \"2.0\",\n      id: 1,\n      method: 'eth_blockNumber',\n      params: []\n    };\n    if (this._setSkipCacheFlag) req.skipCache = true;\n    const res = await pify(cb => this._provider.sendAsync(req, cb))();\n    if (res.error) throw new Error(`PollingBlockTracker - encountered error fetching block:\\n${res.error}`);\n    return res.result;\n  }\n\n}\n\nmodule.exports = PollingBlockTracker;\n\nfunction timeout(duration, unref) {\n  return new Promise(resolve => {\n    const timoutRef = setTimeout(resolve, duration); // don't keep process open\n\n    if (timoutRef.unref && unref) {\n      timoutRef.unref();\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"script"}