{"ast":null,"code":"import _styled3 from \"styled-components\";\nimport _styled2 from \"styled-components\";\nimport _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/saleemfareed/oneds/court-dashboard/src/components/EmailNotifications/EmailNotificationsManager.js\";\nimport React, { useMemo, useRef, useState, useCallback, useEffect } from 'react';\nimport { animated, Spring, Transition } from 'react-spring/renderprops';\nimport { Box, GU, IconConnect, springs, useInside, useToast, useViewport } from '@aragon/ui';\nimport { useWallet } from '../../providers/Wallet';\nimport { getProviderFromUseWalletId } from '../../ethereum-providers';\nimport DeleteEmail from './DeleteEmail';\nimport EmailNotificationsForm from './EmailNotificationsForm';\nimport ExistingEmailSubscription from './ExistingEmailSubscription';\nimport LoadingPreferences from '../GlobalPreferences/Notifications/LoadingPreferences';\nimport NotificationsPreferences from '../GlobalPreferences/Notifications/NotificationsPreferences';\nimport StatusInfo from './StatusInfo';\nimport SignatureRequest from '../SignatureRequest';\nimport UnlockNotifications from '../GlobalPreferences/Notifications/UnlockNotifications';\nimport VerifyEmailAddress from './VerifyEmailAddress';\nimport VerifyEmailAddressPreferences from '../GlobalPreferences/Notifications/VerifyEmailAddressPreferences';\nimport { actions } from './actions';\nimport { createSession, deleteCurrentSession, deleteJurorEmail, resendVerificationEmail, subscribeToNotifications, subscribeExistingEmail, switchNotificationsStatus } from '../../services/notificationServiceApi';\nimport { DELETE_ACTION, DELETE_ACTION_PREFERENCES, DELETE_EMAIL_SCREEN, EMAIL_NOTIFICATIONS_ERROR_SCREEN, EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN, EMAIL_NOTIFICATIONS_FORM_SCREEN, LOADING_SCREEN, NOTIFICATIONS_PREFERENCES_SCREEN, OPTOUT_ACTION, RESEND_EMAIL_ACTION, SETTINGS, SIGNATURE_REQUEST_SCREEN, SIGNATURE_SUCCESS_SCREEN, SUBSCRIBE_EXISTING_ACTION, SUBSCRIBE_MODAL_ACTION, SUCCESS_INFO_SCREEN, UNLOCK_SETTINGS_ACTION, UNLOCK_SETTINGS_ACTION_NOT_EMAIL, UNLOCK_SETTINGS_ACTION_NOT_VERIFIED, UNLOCK_NOTIFICATIONS_SCREEN, VERIFICATION_ERROR_SCREEN, VERIFICATION_SUCCESS_SCREEN, VERIFY_EMAIL_ADDRESS_PREFERENCES, VERIFY_YOUR_EMAIL_SCREEN } from './constants';\nconst DEFAULT_ERROR_SETTINGS = {\n  error: true,\n  title: 'Cannot connect to Notifications server',\n  description: 'There was a problem when trying to connect to the Email Notifications server. Make sure your Internet connection is working and please try again. '\n};\nconst DEFAULT_SUBSCRIPTION_PROGRESS = {\n  needSignature: false,\n  serviceError: false,\n  startRequest: false,\n  action: null,\n  nextScreen: null,\n  email: null,\n  signHash: null,\n  signTimestamp: null,\n  signatureTitle: '',\n  signRequestText: '',\n  signSuccessText: '',\n  statusInfoTitle: '',\n  statusInfoText: '',\n  verifyUpdateMode: false,\n  previousScreen: null,\n  needsUnlockSettings: false,\n  emailVerified: false,\n  emailExists: false\n};\n\nvar _StyledSpan = _styled(\"span\").withConfig({\n  displayName: \"EmailNotificationsManager___StyledSpan\",\n  componentId: \"biie05-0\"\n})([\"display:flex;flex-wrap:wrap;justify-content:center;\"]);\n\nvar _StyledSpan2 = _styled(\"span\").withConfig({\n  displayName: \"EmailNotificationsManager___StyledSpan2\",\n  componentId: \"biie05-1\"\n})([\"display:inline-flex;align-items:center;\"]);\n\nconst EmailNotificationsManager = React.memo(function EmailNotificationsManager({\n  needsUnlockSettings,\n  emailExists,\n  emailVerified,\n  notificationsDisabled,\n  email,\n  startingScreen,\n  onReturnToDashboard\n}) {\n  const [screenId, setScreenId] = useState(emailExists ? EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN : EMAIL_NOTIFICATIONS_FORM_SCREEN);\n  const [subscriptionProgress, setSubscriptionProgress] = useState({ ...DEFAULT_SUBSCRIPTION_PROGRESS,\n    email,\n    emailExists,\n    notificationsDisabled,\n    needsUnlockSettings,\n    emailVerified\n  });\n  const wallet = useWallet();\n  const account = wallet.account;\n  const [insideModal] = useInside('NotificationsModal');\n  const provider = getProviderFromUseWalletId(wallet.activated);\n  const toast = useToast();\n  const {\n    below\n  } = useViewport();\n  const compactMode = below('medium');\n  const defaultSignRequestText = useMemo(() => {\n    return `Open ${provider.name} to complete the\n        signature request. Signing this message will prove ownership of your\n        account and `;\n  }, [provider.name]);\n  const handleOnSubscribe = useCallback(async email => {\n    const {\n      needsSignature: subscribeNeedsSignature,\n      error: errorSubscribing\n    } = await subscribeToNotifications(account, email);\n\n    if (errorSubscribing && !subscribeNeedsSignature) {\n      setSubscriptionProgress({\n        serviceError: true\n      });\n      return;\n    }\n\n    if (!subscribeNeedsSignature) {\n      setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n        email: email,\n        verifyUpdateMode: false\n      }));\n      setScreenId(VERIFY_YOUR_EMAIL_SCREEN);\n      return;\n    }\n\n    const subscribeSettings = SETTINGS[SUBSCRIBE_MODAL_ACTION];\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needSignature: subscribeNeedsSignature,\n      mode: SUBSCRIBE_MODAL_ACTION,\n      email: email,\n      signatureTitle: subscribeSettings.signatureSettings.title,\n      signRequestText: defaultSignRequestText + subscribeSettings.signatureSettings.requestText,\n      signSuccessText: subscribeSettings.signatureSettings.successText,\n      verifyUpdateMode: false\n    }));\n  }, [account, defaultSignRequestText]);\n  const handleOnSubscribeExistingEmail = useCallback(async () => {\n    const {\n      needsSignature,\n      email: existingEmail,\n      error\n    } = await subscribeExistingEmail(account);\n\n    if (error && !needsSignature) {\n      setSubscriptionProgress({\n        serviceError: true\n      });\n      return;\n    }\n\n    if (!needsSignature) {\n      setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n        email: existingEmail,\n        verifyUpdateMode: true\n      }));\n      setScreenId(VERIFY_YOUR_EMAIL_SCREEN);\n      return;\n    }\n\n    const subscribeSettings = SETTINGS[SUBSCRIBE_EXISTING_ACTION];\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needSignature: needsSignature,\n      mode: SUBSCRIBE_EXISTING_ACTION,\n      signatureTitle: subscribeSettings.signatureSettings.title,\n      signRequestText: defaultSignRequestText + subscribeSettings.signatureSettings.requestText,\n      signSuccessText: subscribeSettings.signatureSettings.successText,\n      verifyUpdateMode: true\n    }));\n  }, [account, defaultSignRequestText]);\n  const handleOnOptOut = useCallback(async () => {\n    const optOutSettings = SETTINGS[OPTOUT_ACTION];\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needSignature: true,\n      mode: OPTOUT_ACTION,\n      signatureTitle: optOutSettings.signatureSettings.title,\n      signRequestText: defaultSignRequestText + optOutSettings.signatureSettings.requestText,\n      signSuccessText: optOutSettings.signatureSettings.successText\n    }));\n  }, [defaultSignRequestText]);\n  const handleOnResendEmail = useCallback(async () => {\n    const {\n      needsSignature,\n      error\n    } = await resendVerificationEmail(account);\n\n    if (error && !needsSignature) {\n      setSubscriptionProgress({\n        serviceError: true\n      });\n      return;\n    }\n\n    if (!needsSignature) {\n      setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress\n      }));\n      toast('A verification email has been resent.');\n      return;\n    }\n\n    const resendSettings = SETTINGS[RESEND_EMAIL_ACTION];\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needSignature: needsSignature,\n      mode: RESEND_EMAIL_ACTION,\n      signatureTitle: resendSettings.signatureSettings.title,\n      signRequestText: defaultSignRequestText + resendSettings.signatureSettings.requestText,\n      signSuccessText: resendSettings.signatureSettings.successText\n    }));\n  }, [account, defaultSignRequestText, toast]);\n  const handleOnDeleteConfirmation = useCallback(() => {\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      previousScreen: screenId\n    }));\n    setScreenId(DELETE_EMAIL_SCREEN);\n  }, [screenId]);\n  const handleOnCancelDelete = useCallback(() => {\n    setScreenId(subscriptionProgress.previousScreen);\n  }, [subscriptionProgress.previousScreen]);\n  const handleOnDelete = useCallback(async () => {\n    const {\n      error,\n      needsSignature\n    } = await deleteJurorEmail(account);\n\n    if (error && !needsSignature) {\n      setSubscriptionProgress({\n        serviceError: true\n      });\n      return;\n    }\n\n    const deleteSettings = SETTINGS[DELETE_ACTION];\n\n    if (!needsSignature) {\n      if (insideModal) {\n        setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n          statusInfoTitle: deleteSettings.successInfo.title,\n          statusInfoText: `Your email ${subscriptionProgress.email} was succefully deleted. You can always re-subscribe from the notifications preferences later.`\n        }));\n      }\n\n      setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n        email: ''\n      }));\n      setScreenId(insideModal ? SUCCESS_INFO_SCREEN : EMAIL_NOTIFICATIONS_FORM_SCREEN);\n      return;\n    }\n\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needSignature: needsSignature,\n      mode: insideModal ? DELETE_ACTION : DELETE_ACTION_PREFERENCES,\n      signatureTitle: `Delete \"${subscriptionProgress.email}\"`,\n      signRequestText: defaultSignRequestText + deleteSettings.signatureSettings.requestText,\n      signSuccessText: deleteSettings.signatureSettings.successText\n    }));\n  }, [account, defaultSignRequestText, insideModal]);\n  const handleOnUnlockSettings = useCallback(() => {\n    const unlockSettings = SETTINGS[UNLOCK_SETTINGS_ACTION];\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needSignature: true,\n      mode: !subscriptionProgress.emailExists ? UNLOCK_SETTINGS_ACTION_NOT_EMAIL : subscriptionProgress.emailVerified ? UNLOCK_SETTINGS_ACTION : UNLOCK_SETTINGS_ACTION_NOT_VERIFIED,\n      signatureTitle: unlockSettings.signatureSettings.title,\n      signRequestText: defaultSignRequestText + unlockSettings.signatureSettings.requestText,\n      signSuccessText: unlockSettings.signatureSettings.successText\n    }));\n  }, [defaultSignRequestText]);\n  const handleOnUpdateEmail = useCallback(() => {\n    setScreenId(EMAIL_NOTIFICATIONS_FORM_SCREEN);\n  }, []);\n  const handleOnLockSettings = useCallback(async () => {\n    const {\n      error,\n      needsSignature\n    } = await deleteCurrentSession(account);\n\n    if (error && !needsSignature) {\n      setSubscriptionProgress({\n        serviceError: true\n      });\n      return;\n    }\n\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needsUnlockSettings: true\n    }));\n    setScreenId(UNLOCK_NOTIFICATIONS_SCREEN);\n  }, [account]);\n  const handleSwitchNotifications = useCallback(async disabled => {\n    const {\n      error,\n      needsSignature,\n      disabled: notificationsDisabled\n    } = await switchNotificationsStatus(account, disabled);\n\n    if (error && !needsSignature) {\n      setSubscriptionProgress({\n        serviceError: true\n      });\n      return;\n    }\n\n    if (!needsSignature) {\n      setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n        notificationsDisabled: notificationsDisabled\n      }));\n      setScreenId(NOTIFICATIONS_PREFERENCES_SCREEN);\n      return;\n    }\n\n    setScreenId(UNLOCK_NOTIFICATIONS_SCREEN);\n  }, [account]);\n  const handleOnSignSuccess = useCallback((signHash, timestamp) => {\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      startRequest: true,\n      signHash: signHash,\n      signTimestamp: timestamp\n    }));\n  }, []);\n  useEffect(() => {\n    if (!startingScreen) {\n      return;\n    }\n\n    setScreenId(startingScreen);\n  }, [startingScreen]);\n  useEffect(() => {\n    setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n      needsUnlockSettings,\n      email,\n      emailVerified,\n      emailExists,\n      notificationsDisabled\n    }));\n  }, [account, needsUnlockSettings, email, emailVerified, emailExists, notificationsDisabled]);\n  useEffect(() => {\n    let cancelled = false;\n\n    if (!subscriptionProgress.startRequest) {\n      return;\n    }\n\n    const requestAction = async () => {\n      if (subscriptionProgress.needSignature) {\n        const {\n          error: errorCreatingSession\n        } = await createSession(account, subscriptionProgress.signHash, subscriptionProgress.signTimestamp);\n\n        if (errorCreatingSession && !cancelled) {\n          setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n            serviceError: true\n          }));\n        }\n      }\n\n      const action = actions[subscriptionProgress.mode];\n      let returnedJurorEmail = '';\n\n      if (action.request) {\n        let params = [account];\n\n        if (action.params) {\n          params = [...params, ...action.params];\n        }\n\n        if (action.requiresEmail) {\n          params.push(subscriptionProgress.email);\n        }\n\n        const {\n          error,\n          email\n        } = await action.request(...params);\n\n        if (!cancelled) {\n          if (error) {\n            return setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n              serviceError: true\n            }));\n          }\n\n          if (email) {\n            returnedJurorEmail = email;\n          }\n        }\n      }\n\n      if (!cancelled) {\n        setScreenId(SIGNATURE_SUCCESS_SCREEN);\n\n        if (action.successScreen) {\n          const timer = setTimeout(() => {\n            setScreenId(action.successScreen);\n          }, 3000);\n          setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n            needSignature: false,\n            email: returnedJurorEmail || subscriptionProgress.email,\n            startRequest: false\n          }));\n          return () => clearTimeout(timer);\n        }\n\n        setSubscriptionProgress(subscriptionProgress => ({ ...subscriptionProgress,\n          needSignature: false,\n          email: returnedJurorEmail || subscriptionProgress.email,\n          startRequest: false\n        }));\n      }\n    };\n\n    requestAction();\n    return () => {\n      cancelled = true;\n    };\n  }, [account, subscriptionProgress.email, subscriptionProgress.mode, subscriptionProgress.startRequest, subscriptionProgress.needSignature, subscriptionProgress.signHash, subscriptionProgress.signTimestamp]);\n  useEffect(() => {\n    if (!subscriptionProgress.serviceError) {\n      return;\n    }\n\n    setScreenId(EMAIL_NOTIFICATIONS_ERROR_SCREEN);\n  }, [subscriptionProgress.serviceError]);\n  useEffect(() => {\n    if (!subscriptionProgress.needSignature) {\n      return;\n    }\n\n    setScreenId(SIGNATURE_REQUEST_SCREEN);\n  }, [subscriptionProgress.needSignature]);\n  return React.createElement(WrappedContainer, {\n    screenId: screenId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506\n    },\n    __self: this\n  }, (() => {\n    if (screenId === SIGNATURE_REQUEST_SCREEN) {\n      return React.createElement(SignatureRequest, {\n        mode: \"request\",\n        compactMode: compactMode,\n        title: subscriptionProgress.signatureTitle,\n        text: subscriptionProgress.signRequestText,\n        onSignSuccess: handleOnSignSuccess,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === SIGNATURE_SUCCESS_SCREEN) {\n      return React.createElement(SignatureRequest, {\n        mode: \"success\",\n        compactMode: compactMode,\n        title: subscriptionProgress.signatureTitle,\n        text: subscriptionProgress.signSuccessText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === EMAIL_NOTIFICATIONS_ERROR_SCREEN) {\n      const {\n        title,\n        description\n      } = DEFAULT_ERROR_SETTINGS;\n      return React.createElement(StatusInfo, {\n        error: true,\n        title: title,\n        description: description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === SUCCESS_INFO_SCREEN) {\n      return React.createElement(StatusInfo, {\n        error: false,\n        title: subscriptionProgress.statusInfoTitle,\n        description: subscriptionProgress.statusInfoText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === EMAIL_NOTIFICATIONS_FORM_SCREEN) {\n      return React.createElement(EmailNotificationsForm, {\n        account: account,\n        existingEmail: subscriptionProgress.email,\n        compactMode: compactMode,\n        onOptOut: handleOnOptOut,\n        onSubscribeToNotifications: handleOnSubscribe,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN) {\n      return React.createElement(ExistingEmailSubscription, {\n        account: account,\n        compactMode: compactMode,\n        onOptOut: handleOnOptOut,\n        onSubscribeToNotifications: handleOnSubscribeExistingEmail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === VERIFY_YOUR_EMAIL_SCREEN) {\n      return React.createElement(VerifyEmailAddress, {\n        updateMode: subscriptionProgress.verifyUpdateMode,\n        compactMode: compactMode,\n        email: subscriptionProgress.email,\n        onResendEmail: handleOnResendEmail,\n        onSubscribe: handleOnSubscribe,\n        onDeleteEmail: handleOnDeleteConfirmation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === DELETE_EMAIL_SCREEN) {\n      return React.createElement(DeleteEmail, {\n        email: subscriptionProgress.email,\n        onDelete: handleOnDelete,\n        onCancel: handleOnCancelDelete,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 583\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === UNLOCK_NOTIFICATIONS_SCREEN) {\n      return React.createElement(UnlockNotifications, {\n        compactMode: compactMode,\n        onUnlock: handleOnUnlockSettings,\n        needsUnlockSettings: account && subscriptionProgress.needsUnlockSettings,\n        onReturnToDashboard: onReturnToDashboard,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === NOTIFICATIONS_PREFERENCES_SCREEN) {\n      return React.createElement(NotificationsPreferences, {\n        email: subscriptionProgress.email,\n        notificationsDisabled: subscriptionProgress.notificationsDisabled,\n        onSwitchNotificationsStatus: handleSwitchNotifications,\n        onLockSettings: handleOnLockSettings,\n        onDeleteEmail: handleOnDeleteConfirmation,\n        onUpdateEmail: handleOnUpdateEmail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === VERIFICATION_ERROR_SCREEN) {\n      return React.createElement(StatusInfo, {\n        error: true,\n        title: \"Verification failed\",\n        description: \"The email verification link was invalid or it has timed out. Please try again.\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 618\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === VERIFICATION_SUCCESS_SCREEN) {\n      return React.createElement(StatusInfo, {\n        error: false,\n        title: \"Verification was successful\",\n        description: React.createElement(_StyledSpan, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 631\n          },\n          __self: this\n        }, \"Go back to the dashboard and\", React.createElement(_StyledSpan2, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 639\n          },\n          __self: this\n        }, React.createElement(IconConnect, {\n          size: \"small\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 645\n          },\n          __self: this\n        }), React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 646\n          },\n          __self: this\n        }, \"Connect your account\"), \",\"), ' ', \"on the top right header, to access your notification settings\"),\n        actionText: \"Go to Dashboard\",\n        onAction: onReturnToDashboard,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 627\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === VERIFY_EMAIL_ADDRESS_PREFERENCES) {\n      return React.createElement(VerifyEmailAddressPreferences, {\n        email: subscriptionProgress.email,\n        onResend: handleOnResendEmail,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 659\n        },\n        __self: this\n      });\n    }\n\n    if (screenId === LOADING_SCREEN) {\n      return React.createElement(LoadingPreferences, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667\n        },\n        __self: this\n      });\n    }\n  })());\n});\nconst WrappedContainer = React.memo(function WrappedContainer({ ...props\n}) {\n  const [insideModal] = useInside('NotificationsModal');\n  const {\n    screenId\n  } = props;\n  const Container = insideModal || screenId === NOTIFICATIONS_PREFERENCES_SCREEN ? AnimatedContainer : AnimatedBox;\n  return React.createElement(Container, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 684\n    },\n    __self: this\n  }));\n});\n\nvar _StyledDiv = _styled(\"div\").withConfig({\n  displayName: \"EmailNotificationsManager___StyledDiv\",\n  componentId: \"biie05-2\"\n})([\"position:relative;max-width:800px;margin:0 auto;\"]);\n\nconst AnimatedBox = ({ ...props\n}) => {\n  const ref = useRef(null);\n  const [height, setHeight] = useState(0);\n  const setRef = useCallback(node => {\n    if (node) {\n      setHeight(node.clientHeight);\n    }\n\n    ref.current = node;\n  }, []);\n  return React.createElement(Box, {\n    padding: 5 * GU,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 700\n    },\n    __self: this\n  }, React.createElement(_StyledDiv, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 701\n    },\n    __self: this\n  }, React.createElement(Spring, {\n    config: springs.smooth,\n    from: {\n      height: `${38 * GU}px`\n    },\n    to: {\n      height: `${height}px`\n    },\n    native: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 708\n    },\n    __self: this\n  }, ({\n    height\n  }) => React.createElement(animated.div, {\n    style: {\n      height\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 715\n    },\n    __self: this\n  }, React.createElement(AnimatedContainer, Object.assign({}, props, {\n    refCallback: setRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 716\n    },\n    __self: this\n  }))))));\n};\n\nconst AnimatedContainer = React.memo(function AnimatedModal({\n  screenId,\n  children,\n  refCallback\n}) {\n  const [insideModal] = useInside('NotificationsModal');\n  return React.createElement(Transition, {\n    items: {\n      children,\n      screenId\n    },\n    keys: ({\n      screenId\n    }) => screenId,\n    from: {\n      position: 'absolute',\n      opacity: 0,\n      transform: 'scale3d(1.10 1.10, 1)'\n    },\n    enter: {\n      position: 'static',\n      opacity: 1,\n      transform: 'scale3d(1, 1, 1)'\n    },\n    leave: {\n      position: 'absolute',\n      opacity: 0,\n      transform: 'scale3d(0.90, 0.90, 1)'\n    },\n    native: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 733\n    },\n    __self: this\n  }, ({\n    children,\n    screenId\n  }) => props => insideModal ? React.createElement(animated.div, {\n    style: { ...props\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 755\n    },\n    __self: this\n  }, children) : React.createElement(animated.div, {\n    ref: refCallback,\n    style: { ...props,\n      top: 0,\n      left: 0,\n      right: 0\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 757\n    },\n    __self: this\n  }, children));\n});\nexport default EmailNotificationsManager;","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/components/EmailNotifications/EmailNotificationsManager.js"],"names":["React","useMemo","useRef","useState","useCallback","useEffect","animated","Spring","Transition","Box","GU","IconConnect","springs","useInside","useToast","useViewport","useWallet","getProviderFromUseWalletId","DeleteEmail","EmailNotificationsForm","ExistingEmailSubscription","LoadingPreferences","NotificationsPreferences","StatusInfo","SignatureRequest","UnlockNotifications","VerifyEmailAddress","VerifyEmailAddressPreferences","actions","createSession","deleteCurrentSession","deleteJurorEmail","resendVerificationEmail","subscribeToNotifications","subscribeExistingEmail","switchNotificationsStatus","DELETE_ACTION","DELETE_ACTION_PREFERENCES","DELETE_EMAIL_SCREEN","EMAIL_NOTIFICATIONS_ERROR_SCREEN","EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN","EMAIL_NOTIFICATIONS_FORM_SCREEN","LOADING_SCREEN","NOTIFICATIONS_PREFERENCES_SCREEN","OPTOUT_ACTION","RESEND_EMAIL_ACTION","SETTINGS","SIGNATURE_REQUEST_SCREEN","SIGNATURE_SUCCESS_SCREEN","SUBSCRIBE_EXISTING_ACTION","SUBSCRIBE_MODAL_ACTION","SUCCESS_INFO_SCREEN","UNLOCK_SETTINGS_ACTION","UNLOCK_SETTINGS_ACTION_NOT_EMAIL","UNLOCK_SETTINGS_ACTION_NOT_VERIFIED","UNLOCK_NOTIFICATIONS_SCREEN","VERIFICATION_ERROR_SCREEN","VERIFICATION_SUCCESS_SCREEN","VERIFY_EMAIL_ADDRESS_PREFERENCES","VERIFY_YOUR_EMAIL_SCREEN","DEFAULT_ERROR_SETTINGS","error","title","description","DEFAULT_SUBSCRIPTION_PROGRESS","needSignature","serviceError","startRequest","action","nextScreen","email","signHash","signTimestamp","signatureTitle","signRequestText","signSuccessText","statusInfoTitle","statusInfoText","verifyUpdateMode","previousScreen","needsUnlockSettings","emailVerified","emailExists","EmailNotificationsManager","memo","notificationsDisabled","startingScreen","onReturnToDashboard","screenId","setScreenId","subscriptionProgress","setSubscriptionProgress","wallet","account","insideModal","provider","activated","toast","below","compactMode","defaultSignRequestText","name","handleOnSubscribe","needsSignature","subscribeNeedsSignature","errorSubscribing","subscribeSettings","mode","signatureSettings","requestText","successText","handleOnSubscribeExistingEmail","existingEmail","handleOnOptOut","optOutSettings","handleOnResendEmail","resendSettings","handleOnDeleteConfirmation","handleOnCancelDelete","handleOnDelete","deleteSettings","successInfo","handleOnUnlockSettings","unlockSettings","handleOnUpdateEmail","handleOnLockSettings","handleSwitchNotifications","disabled","handleOnSignSuccess","timestamp","cancelled","requestAction","errorCreatingSession","returnedJurorEmail","request","params","requiresEmail","push","successScreen","timer","setTimeout","clearTimeout","WrappedContainer","props","Container","AnimatedContainer","AnimatedBox","ref","height","setHeight","setRef","node","clientHeight","current","smooth","AnimatedModal","children","refCallback","position","opacity","transform","top","left","right"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,OAAhB,EAAyBC,MAAzB,EAAiCC,QAAjC,EAA2CC,WAA3C,EAAwDC,SAAxD,QAAyE,OAAzE;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,UAA3B,QAA6C,0BAA7C;AACA,SACEC,GADF,EAEEC,EAFF,EAGEC,WAHF,EAIEC,OAJF,EAKEC,SALF,EAMEC,QANF,EAOEC,WAPF,QAQO,YARP;AASA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,0BAAT,QAA2C,0BAA3C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,kBAAP,MAA+B,uDAA/B;AACA,OAAOC,wBAAP,MAAqC,6DAArC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,mBAAP,MAAgC,wDAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,6BAAP,MAA0C,kEAA1C;AAEA,SAASC,OAAT,QAAwB,WAAxB;AAEA,SACEC,aADF,EAEEC,oBAFF,EAGEC,gBAHF,EAIEC,uBAJF,EAKEC,wBALF,EAMEC,sBANF,EAOEC,yBAPF,QAQO,uCARP;AASA,SACEC,aADF,EAEEC,yBAFF,EAGEC,mBAHF,EAIEC,gCAJF,EAKEC,yCALF,EAMEC,+BANF,EAOEC,cAPF,EAQEC,gCARF,EASEC,aATF,EAUEC,mBAVF,EAWEC,QAXF,EAYEC,wBAZF,EAaEC,wBAbF,EAcEC,yBAdF,EAeEC,sBAfF,EAgBEC,mBAhBF,EAiBEC,sBAjBF,EAkBEC,gCAlBF,EAmBEC,mCAnBF,EAoBEC,2BApBF,EAqBEC,yBArBF,EAsBEC,2BAtBF,EAuBEC,gCAvBF,EAwBEC,wBAxBF,QAyBO,aAzBP;AA2BA,MAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,KAAK,EAAE,IADsB;AAE7BC,EAAAA,KAAK,EAAE,wCAFsB;AAG7BC,EAAAA,WAAW,EACT;AAJ2B,CAA/B;AAOA,MAAMC,6BAA6B,GAAG;AACpCC,EAAAA,aAAa,EAAE,KADqB;AAEpCC,EAAAA,YAAY,EAAE,KAFsB;AAGpCC,EAAAA,YAAY,EAAE,KAHsB;AAIpCC,EAAAA,MAAM,EAAE,IAJ4B;AAKpCC,EAAAA,UAAU,EAAE,IALwB;AAMpCC,EAAAA,KAAK,EAAE,IAN6B;AAOpCC,EAAAA,QAAQ,EAAE,IAP0B;AAQpCC,EAAAA,aAAa,EAAE,IARqB;AASpCC,EAAAA,cAAc,EAAE,EAToB;AAUpCC,EAAAA,eAAe,EAAE,EAVmB;AAWpCC,EAAAA,eAAe,EAAE,EAXmB;AAYpCC,EAAAA,eAAe,EAAE,EAZmB;AAapCC,EAAAA,cAAc,EAAE,EAboB;AAcpCC,EAAAA,gBAAgB,EAAE,KAdkB;AAepCC,EAAAA,cAAc,EAAE,IAfoB;AAgBpCC,EAAAA,mBAAmB,EAAE,KAhBe;AAiBpCC,EAAAA,aAAa,EAAE,KAjBqB;AAkBpCC,EAAAA,WAAW,EAAE;AAlBuB,CAAtC;;;;;;;;;;;;AAqBA,MAAMC,yBAAyB,GAAGnF,KAAK,CAACoF,IAAN,CAChC,SAASD,yBAAT,CAAmC;AACjCH,EAAAA,mBADiC;AAEjCE,EAAAA,WAFiC;AAGjCD,EAAAA,aAHiC;AAIjCI,EAAAA,qBAJiC;AAKjCf,EAAAA,KALiC;AAMjCgB,EAAAA,cANiC;AAOjCC,EAAAA;AAPiC,CAAnC,EAQG;AACD,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BtF,QAAQ,CACtC+E,WAAW,GACP1C,yCADO,GAEPC,+BAHkC,CAAxC;AAMA,QAAM,CAACiD,oBAAD,EAAuBC,uBAAvB,IAAkDxF,QAAQ,CAAC,EAC/D,GAAG6D,6BAD4D;AAE/DM,IAAAA,KAF+D;AAG/DY,IAAAA,WAH+D;AAI/DG,IAAAA,qBAJ+D;AAK/DL,IAAAA,mBAL+D;AAM/DC,IAAAA;AAN+D,GAAD,CAAhE;AASA,QAAMW,MAAM,GAAG5E,SAAS,EAAxB;AACA,QAAM6E,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,QAAM,CAACC,WAAD,IAAgBjF,SAAS,CAAC,oBAAD,CAA/B;AACA,QAAMkF,QAAQ,GAAG9E,0BAA0B,CAAC2E,MAAM,CAACI,SAAR,CAA3C;AACA,QAAMC,KAAK,GAAGnF,QAAQ,EAAtB;AAEA,QAAM;AAAEoF,IAAAA;AAAF,MAAYnF,WAAW,EAA7B;AACA,QAAMoF,WAAW,GAAGD,KAAK,CAAC,QAAD,CAAzB;AAEA,QAAME,sBAAsB,GAAGnG,OAAO,CAAC,MAAM;AAC3C,WAAQ,QAAO8F,QAAQ,CAACM,IAAK;;qBAA7B;AAGD,GAJqC,EAInC,CAACN,QAAQ,CAACM,IAAV,CAJmC,CAAtC;AAMA,QAAMC,iBAAiB,GAAGlG,WAAW,CACnC,MAAMkE,KAAN,IAAe;AACb,UAAM;AACJiC,MAAAA,cAAc,EAAEC,uBADZ;AAEJ3C,MAAAA,KAAK,EAAE4C;AAFH,QAGF,MAAMxE,wBAAwB,CAAC4D,OAAD,EAAUvB,KAAV,CAHlC;;AAKA,QAAImC,gBAAgB,IAAI,CAACD,uBAAzB,EAAkD;AAChDb,MAAAA,uBAAuB,CAAC;AAAEzB,QAAAA,YAAY,EAAE;AAAhB,OAAD,CAAvB;AACA;AACD;;AAED,QAAI,CAACsC,uBAAL,EAA8B;AAC5Bb,MAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CpB,QAAAA,KAAK,EAAEA,KAFwC;AAG/CQ,QAAAA,gBAAgB,EAAE;AAH6B,OAAL,CAArB,CAAvB;AAKAW,MAAAA,WAAW,CAAC9B,wBAAD,CAAX;AACA;AACD;;AAED,UAAM+C,iBAAiB,GAAG5D,QAAQ,CAACI,sBAAD,CAAlC;AAEAyC,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,MAAAA,aAAa,EAAEuC,uBAFgC;AAG/CG,MAAAA,IAAI,EAAEzD,sBAHyC;AAI/CoB,MAAAA,KAAK,EAAEA,KAJwC;AAK/CG,MAAAA,cAAc,EAAEiC,iBAAiB,CAACE,iBAAlB,CAAoC9C,KALL;AAM/CY,MAAAA,eAAe,EACb0B,sBAAsB,GACtBM,iBAAiB,CAACE,iBAAlB,CAAoCC,WARS;AAS/ClC,MAAAA,eAAe,EAAE+B,iBAAiB,CAACE,iBAAlB,CAAoCE,WATN;AAU/ChC,MAAAA,gBAAgB,EAAE;AAV6B,KAAL,CAArB,CAAvB;AAYD,GApCkC,EAqCnC,CAACe,OAAD,EAAUO,sBAAV,CArCmC,CAArC;AAwCA,QAAMW,8BAA8B,GAAG3G,WAAW,CAAC,YAAY;AAC7D,UAAM;AACJmG,MAAAA,cADI;AAEJjC,MAAAA,KAAK,EAAE0C,aAFH;AAGJnD,MAAAA;AAHI,QAIF,MAAM3B,sBAAsB,CAAC2D,OAAD,CAJhC;;AAMA,QAAIhC,KAAK,IAAI,CAAC0C,cAAd,EAA8B;AAC5BZ,MAAAA,uBAAuB,CAAC;AAAEzB,QAAAA,YAAY,EAAE;AAAhB,OAAD,CAAvB;AACA;AACD;;AAED,QAAI,CAACqC,cAAL,EAAqB;AACnBZ,MAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CpB,QAAAA,KAAK,EAAE0C,aAFwC;AAG/ClC,QAAAA,gBAAgB,EAAE;AAH6B,OAAL,CAArB,CAAvB;AAKAW,MAAAA,WAAW,CAAC9B,wBAAD,CAAX;AACA;AACD;;AAED,UAAM+C,iBAAiB,GAAG5D,QAAQ,CAACG,yBAAD,CAAlC;AAEA0C,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,MAAAA,aAAa,EAAEsC,cAFgC;AAG/CI,MAAAA,IAAI,EAAE1D,yBAHyC;AAI/CwB,MAAAA,cAAc,EAAEiC,iBAAiB,CAACE,iBAAlB,CAAoC9C,KAJL;AAK/CY,MAAAA,eAAe,EACb0B,sBAAsB,GACtBM,iBAAiB,CAACE,iBAAlB,CAAoCC,WAPS;AAQ/ClC,MAAAA,eAAe,EAAE+B,iBAAiB,CAACE,iBAAlB,CAAoCE,WARN;AAS/ChC,MAAAA,gBAAgB,EAAE;AAT6B,KAAL,CAArB,CAAvB;AAWD,GAnCiD,EAmC/C,CAACe,OAAD,EAAUO,sBAAV,CAnC+C,CAAlD;AAqCA,QAAMa,cAAc,GAAG7G,WAAW,CAAC,YAAY;AAC7C,UAAM8G,cAAc,GAAGpE,QAAQ,CAACF,aAAD,CAA/B;AAEA+C,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,MAAAA,aAAa,EAAE,IAFgC;AAG/C0C,MAAAA,IAAI,EAAE/D,aAHyC;AAI/C6B,MAAAA,cAAc,EAAEyC,cAAc,CAACN,iBAAf,CAAiC9C,KAJF;AAK/CY,MAAAA,eAAe,EACb0B,sBAAsB,GAAGc,cAAc,CAACN,iBAAf,CAAiCC,WANb;AAO/ClC,MAAAA,eAAe,EAAEuC,cAAc,CAACN,iBAAf,CAAiCE;AAPH,KAAL,CAArB,CAAvB;AASD,GAZiC,EAY/B,CAACV,sBAAD,CAZ+B,CAAlC;AAcA,QAAMe,mBAAmB,GAAG/G,WAAW,CAAC,YAAY;AAClD,UAAM;AAAEmG,MAAAA,cAAF;AAAkB1C,MAAAA;AAAlB,QAA4B,MAAM7B,uBAAuB,CAAC6D,OAAD,CAA/D;;AAEA,QAAIhC,KAAK,IAAI,CAAC0C,cAAd,EAA8B;AAC5BZ,MAAAA,uBAAuB,CAAC;AAAEzB,QAAAA,YAAY,EAAE;AAAhB,OAAD,CAAvB;AACA;AACD;;AAED,QAAI,CAACqC,cAAL,EAAqB;AACnBZ,MAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA;AAD4C,OAAL,CAArB,CAAvB;AAGAO,MAAAA,KAAK,CAAC,uCAAD,CAAL;AACA;AACD;;AAED,UAAMmB,cAAc,GAAGtE,QAAQ,CAACD,mBAAD,CAA/B;AAEA8C,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,MAAAA,aAAa,EAAEsC,cAFgC;AAG/CI,MAAAA,IAAI,EAAE9D,mBAHyC;AAI/C4B,MAAAA,cAAc,EAAE2C,cAAc,CAACR,iBAAf,CAAiC9C,KAJF;AAK/CY,MAAAA,eAAe,EACb0B,sBAAsB,GAAGgB,cAAc,CAACR,iBAAf,CAAiCC,WANb;AAO/ClC,MAAAA,eAAe,EAAEyC,cAAc,CAACR,iBAAf,CAAiCE;AAPH,KAAL,CAArB,CAAvB;AASD,GA3BsC,EA2BpC,CAACjB,OAAD,EAAUO,sBAAV,EAAkCH,KAAlC,CA3BoC,CAAvC;AA6BA,QAAMoB,0BAA0B,GAAGjH,WAAW,CAAC,MAAM;AACnDuF,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CX,MAAAA,cAAc,EAAES;AAF+B,KAAL,CAArB,CAAvB;AAIAC,IAAAA,WAAW,CAACnD,mBAAD,CAAX;AACD,GAN6C,EAM3C,CAACkD,QAAD,CAN2C,CAA9C;AAQA,QAAM8B,oBAAoB,GAAGlH,WAAW,CAAC,MAAM;AAC7CqF,IAAAA,WAAW,CAACC,oBAAoB,CAACX,cAAtB,CAAX;AACD,GAFuC,EAErC,CAACW,oBAAoB,CAACX,cAAtB,CAFqC,CAAxC;AAIA,QAAMwC,cAAc,GAAGnH,WAAW,CAAC,YAAY;AAC7C,UAAM;AAAEyD,MAAAA,KAAF;AAAS0C,MAAAA;AAAT,QAA4B,MAAMxE,gBAAgB,CAAC8D,OAAD,CAAxD;;AAEA,QAAIhC,KAAK,IAAI,CAAC0C,cAAd,EAA8B;AAC5BZ,MAAAA,uBAAuB,CAAC;AAAEzB,QAAAA,YAAY,EAAE;AAAhB,OAAD,CAAvB;AACA;AACD;;AAED,UAAMsD,cAAc,GAAG1E,QAAQ,CAACV,aAAD,CAA/B;;AAEA,QAAI,CAACmE,cAAL,EAAqB;AACnB,UAAIT,WAAJ,EAAiB;AACfH,QAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/Cd,UAAAA,eAAe,EAAE4C,cAAc,CAACC,WAAf,CAA2B3D,KAFG;AAG/Ce,UAAAA,cAAc,EAAG,cAAaa,oBAAoB,CAACpB,KAAM;AAHV,SAAL,CAArB,CAAvB;AAKD;;AACDqB,MAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CpB,QAAAA,KAAK,EAAE;AAFwC,OAAL,CAArB,CAAvB;AAIAmB,MAAAA,WAAW,CACTK,WAAW,GAAG3C,mBAAH,GAAyBV,+BAD3B,CAAX;AAGA;AACD;;AAEDkD,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,MAAAA,aAAa,EAAEsC,cAFgC;AAG/CI,MAAAA,IAAI,EAAEb,WAAW,GAAG1D,aAAH,GAAmBC,yBAHW;AAI/CoC,MAAAA,cAAc,EAAG,WAAUiB,oBAAoB,CAACpB,KAAM,GAJP;AAK/CI,MAAAA,eAAe,EACb0B,sBAAsB,GAAGoB,cAAc,CAACZ,iBAAf,CAAiCC,WANb;AAO/ClC,MAAAA,eAAe,EAAE6C,cAAc,CAACZ,iBAAf,CAAiCE;AAPH,KAAL,CAArB,CAAvB;AASD,GArCiC,EAqC/B,CAACjB,OAAD,EAAUO,sBAAV,EAAkCN,WAAlC,CArC+B,CAAlC;AAuCA,QAAM4B,sBAAsB,GAAGtH,WAAW,CAAC,MAAM;AAC/C,UAAMuH,cAAc,GAAG7E,QAAQ,CAACM,sBAAD,CAA/B;AAEAuC,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,MAAAA,aAAa,EAAE,IAFgC;AAG/C0C,MAAAA,IAAI,EAAE,CAACjB,oBAAoB,CAACR,WAAtB,GACF7B,gCADE,GAEFqC,oBAAoB,CAACT,aAArB,GACA7B,sBADA,GAEAE,mCAP2C;AAQ/CmB,MAAAA,cAAc,EAAEkD,cAAc,CAACf,iBAAf,CAAiC9C,KARF;AAS/CY,MAAAA,eAAe,EACb0B,sBAAsB,GAAGuB,cAAc,CAACf,iBAAf,CAAiCC,WAVb;AAW/ClC,MAAAA,eAAe,EAAEgD,cAAc,CAACf,iBAAf,CAAiCE;AAXH,KAAL,CAArB,CAAvB;AAaD,GAhByC,EAgBvC,CAACV,sBAAD,CAhBuC,CAA1C;AAkBA,QAAMwB,mBAAmB,GAAGxH,WAAW,CAAC,MAAM;AAC5CqF,IAAAA,WAAW,CAAChD,+BAAD,CAAX;AACD,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,QAAMoF,oBAAoB,GAAGzH,WAAW,CAAC,YAAY;AACnD,UAAM;AAAEyD,MAAAA,KAAF;AAAS0C,MAAAA;AAAT,QAA4B,MAAMzE,oBAAoB,CAAC+D,OAAD,CAA5D;;AAEA,QAAIhC,KAAK,IAAI,CAAC0C,cAAd,EAA8B;AAC5BZ,MAAAA,uBAAuB,CAAC;AAAEzB,QAAAA,YAAY,EAAE;AAAhB,OAAD,CAAvB;AACA;AACD;;AACDyB,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CV,MAAAA,mBAAmB,EAAE;AAF0B,KAAL,CAArB,CAAvB;AAIAS,IAAAA,WAAW,CAAClC,2BAAD,CAAX;AACD,GAZuC,EAYrC,CAACsC,OAAD,CAZqC,CAAxC;AAcA,QAAMiC,yBAAyB,GAAG1H,WAAW,CAC3C,MAAM2H,QAAN,IAAkB;AAChB,UAAM;AACJlE,MAAAA,KADI;AAEJ0C,MAAAA,cAFI;AAGJwB,MAAAA,QAAQ,EAAE1C;AAHN,QAIF,MAAMlD,yBAAyB,CAAC0D,OAAD,EAAUkC,QAAV,CAJnC;;AAMA,QAAIlE,KAAK,IAAI,CAAC0C,cAAd,EAA8B;AAC5BZ,MAAAA,uBAAuB,CAAC;AAAEzB,QAAAA,YAAY,EAAE;AAAhB,OAAD,CAAvB;AACA;AACD;;AAED,QAAI,CAACqC,cAAL,EAAqB;AACnBZ,MAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CL,QAAAA,qBAAqB,EAAEA;AAFwB,OAAL,CAArB,CAAvB;AAIAI,MAAAA,WAAW,CAAC9C,gCAAD,CAAX;AACA;AACD;;AAED8C,IAAAA,WAAW,CAAClC,2BAAD,CAAX;AACD,GAvB0C,EAwB3C,CAACsC,OAAD,CAxB2C,CAA7C;AA2BA,QAAMmC,mBAAmB,GAAG5H,WAAW,CAAC,CAACmE,QAAD,EAAW0D,SAAX,KAAyB;AAC/DtC,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CvB,MAAAA,YAAY,EAAE,IAFiC;AAG/CI,MAAAA,QAAQ,EAAEA,QAHqC;AAI/CC,MAAAA,aAAa,EAAEyD;AAJgC,KAAL,CAArB,CAAvB;AAMD,GAPsC,EAOpC,EAPoC,CAAvC;AASA5H,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACiF,cAAL,EAAqB;AACnB;AACD;;AACDG,IAAAA,WAAW,CAACH,cAAD,CAAX;AACD,GALQ,EAKN,CAACA,cAAD,CALM,CAAT;AAOAjF,EAAAA,SAAS,CAAC,MAAM;AACdsF,IAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CV,MAAAA,mBAF+C;AAG/CV,MAAAA,KAH+C;AAI/CW,MAAAA,aAJ+C;AAK/CC,MAAAA,WAL+C;AAM/CG,MAAAA;AAN+C,KAAL,CAArB,CAAvB;AAQD,GATQ,EASN,CACDQ,OADC,EAEDb,mBAFC,EAGDV,KAHC,EAIDW,aAJC,EAKDC,WALC,EAMDG,qBANC,CATM,CAAT;AAkBAhF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6H,SAAS,GAAG,KAAhB;;AAEA,QAAI,CAACxC,oBAAoB,CAACvB,YAA1B,EAAwC;AACtC;AACD;;AAED,UAAMgE,aAAa,GAAG,YAAY;AAChC,UAAIzC,oBAAoB,CAACzB,aAAzB,EAAwC;AACtC,cAAM;AAAEJ,UAAAA,KAAK,EAAEuE;AAAT,YAAkC,MAAMvG,aAAa,CACzDgE,OADyD,EAEzDH,oBAAoB,CAACnB,QAFoC,EAGzDmB,oBAAoB,CAAClB,aAHoC,CAA3D;;AAKA,YAAI4D,oBAAoB,IAAI,CAACF,SAA7B,EAAwC;AACtCvC,UAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CxB,YAAAA,YAAY,EAAE;AAFiC,WAAL,CAArB,CAAvB;AAID;AACF;;AAED,YAAME,MAAM,GAAGxC,OAAO,CAAC8D,oBAAoB,CAACiB,IAAtB,CAAtB;AACA,UAAI0B,kBAAkB,GAAG,EAAzB;;AAEA,UAAIjE,MAAM,CAACkE,OAAX,EAAoB;AAClB,YAAIC,MAAM,GAAG,CAAC1C,OAAD,CAAb;;AAEA,YAAIzB,MAAM,CAACmE,MAAX,EAAmB;AACjBA,UAAAA,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAY,GAAGnE,MAAM,CAACmE,MAAtB,CAAT;AACD;;AAED,YAAInE,MAAM,CAACoE,aAAX,EAA0B;AACxBD,UAAAA,MAAM,CAACE,IAAP,CAAY/C,oBAAoB,CAACpB,KAAjC;AACD;;AAED,cAAM;AAAET,UAAAA,KAAF;AAASS,UAAAA;AAAT,YAAmB,MAAMF,MAAM,CAACkE,OAAP,CAAe,GAAGC,MAAlB,CAA/B;;AAEA,YAAI,CAACL,SAAL,EAAgB;AACd,cAAIrE,KAAJ,EAAW;AACT,mBAAO8B,uBAAuB,CAACD,oBAAoB,KAAK,EACtD,GAAGA,oBADmD;AAEtDxB,cAAAA,YAAY,EAAE;AAFwC,aAAL,CAArB,CAA9B;AAID;;AAED,cAAII,KAAJ,EAAW;AACT+D,YAAAA,kBAAkB,GAAG/D,KAArB;AACD;AACF;AACF;;AAED,UAAI,CAAC4D,SAAL,EAAgB;AACdzC,QAAAA,WAAW,CAACzC,wBAAD,CAAX;;AAEA,YAAIoB,MAAM,CAACsE,aAAX,EAA0B;AACxB,gBAAMC,KAAK,GAAGC,UAAU,CAAC,MAAM;AAC7BnD,YAAAA,WAAW,CAACrB,MAAM,CAACsE,aAAR,CAAX;AACD,WAFuB,EAErB,IAFqB,CAAxB;AAGA/C,UAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,YAAAA,aAAa,EAAE,KAFgC;AAG/CK,YAAAA,KAAK,EAAE+D,kBAAkB,IAAI3C,oBAAoB,CAACpB,KAHH;AAI/CH,YAAAA,YAAY,EAAE;AAJiC,WAAL,CAArB,CAAvB;AAOA,iBAAO,MAAM0E,YAAY,CAACF,KAAD,CAAzB;AACD;;AACDhD,QAAAA,uBAAuB,CAACD,oBAAoB,KAAK,EAC/C,GAAGA,oBAD4C;AAE/CzB,UAAAA,aAAa,EAAE,KAFgC;AAG/CK,UAAAA,KAAK,EAAE+D,kBAAkB,IAAI3C,oBAAoB,CAACpB,KAHH;AAI/CH,UAAAA,YAAY,EAAE;AAJiC,SAAL,CAArB,CAAvB;AAMD;AACF,KApED;;AAqEAgE,IAAAA,aAAa;AACb,WAAO,MAAM;AACXD,MAAAA,SAAS,GAAG,IAAZ;AACD,KAFD;AAGD,GAhFQ,EAgFN,CACDrC,OADC,EAEDH,oBAAoB,CAACpB,KAFpB,EAGDoB,oBAAoB,CAACiB,IAHpB,EAIDjB,oBAAoB,CAACvB,YAJpB,EAKDuB,oBAAoB,CAACzB,aALpB,EAMDyB,oBAAoB,CAACnB,QANpB,EAODmB,oBAAoB,CAAClB,aAPpB,CAhFM,CAAT;AA0FAnE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACqF,oBAAoB,CAACxB,YAA1B,EAAwC;AACtC;AACD;;AACDuB,IAAAA,WAAW,CAAClD,gCAAD,CAAX;AACD,GALQ,EAKN,CAACmD,oBAAoB,CAACxB,YAAtB,CALM,CAAT;AAOA7D,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACqF,oBAAoB,CAACzB,aAA1B,EAAyC;AACvC;AACD;;AAEDwB,IAAAA,WAAW,CAAC1C,wBAAD,CAAX;AACD,GANQ,EAMN,CAAC2C,oBAAoB,CAACzB,aAAtB,CANM,CAAT;AAQA,SACE,oBAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAEuB,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC,MAAM;AACN,QAAIA,QAAQ,KAAKzC,wBAAjB,EAA2C;AACzC,aACE,oBAAC,gBAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,WAAW,EAAEoD,WAFf;AAGE,QAAA,KAAK,EAAET,oBAAoB,CAACjB,cAH9B;AAIE,QAAA,IAAI,EAAEiB,oBAAoB,CAAChB,eAJ7B;AAKE,QAAA,aAAa,EAAEsD,mBALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;AAED,QAAIxC,QAAQ,KAAKxC,wBAAjB,EAA2C;AACzC,aACE,oBAAC,gBAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,WAAW,EAAEmD,WAFf;AAGE,QAAA,KAAK,EAAET,oBAAoB,CAACjB,cAH9B;AAIE,QAAA,IAAI,EAAEiB,oBAAoB,CAACf,eAJ7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AAED,QAAIa,QAAQ,KAAKjD,gCAAjB,EAAmD;AACjD,YAAM;AAAEuB,QAAAA,KAAF;AAASC,QAAAA;AAAT,UAAyBH,sBAA/B;AACA,aAAO,oBAAC,UAAD;AAAY,QAAA,KAAK,MAAjB;AAAkB,QAAA,KAAK,EAAEE,KAAzB;AAAgC,QAAA,WAAW,EAAEC,WAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AAED,QAAIyB,QAAQ,KAAKrC,mBAAjB,EAAsC;AACpC,aACE,oBAAC,UAAD;AACE,QAAA,KAAK,EAAE,KADT;AAEE,QAAA,KAAK,EAAEuC,oBAAoB,CAACd,eAF9B;AAGE,QAAA,WAAW,EAAEc,oBAAoB,CAACb,cAHpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;AAED,QAAIW,QAAQ,KAAK/C,+BAAjB,EAAkD;AAChD,aACE,oBAAC,sBAAD;AACE,QAAA,OAAO,EAAEoD,OADX;AAEE,QAAA,aAAa,EAAEH,oBAAoB,CAACpB,KAFtC;AAGE,QAAA,WAAW,EAAE6B,WAHf;AAIE,QAAA,QAAQ,EAAEc,cAJZ;AAKE,QAAA,0BAA0B,EAAEX,iBAL9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AASD;;AAED,QAAId,QAAQ,KAAKhD,yCAAjB,EAA4D;AAC1D,aACE,oBAAC,yBAAD;AACE,QAAA,OAAO,EAAEqD,OADX;AAEE,QAAA,WAAW,EAAEM,WAFf;AAGE,QAAA,QAAQ,EAAEc,cAHZ;AAIE,QAAA,0BAA0B,EAAEF,8BAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD;;AAED,QAAIvB,QAAQ,KAAK7B,wBAAjB,EAA2C;AACzC,aACE,oBAAC,kBAAD;AACE,QAAA,UAAU,EAAE+B,oBAAoB,CAACZ,gBADnC;AAEE,QAAA,WAAW,EAAEqB,WAFf;AAGE,QAAA,KAAK,EAAET,oBAAoB,CAACpB,KAH9B;AAIE,QAAA,aAAa,EAAE6C,mBAJjB;AAKE,QAAA,WAAW,EAAEb,iBALf;AAME,QAAA,aAAa,EAAEe,0BANjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD;;AACD,QAAI7B,QAAQ,KAAKlD,mBAAjB,EAAsC;AACpC,aACE,oBAAC,WAAD;AACE,QAAA,KAAK,EAAEoD,oBAAoB,CAACpB,KAD9B;AAEE,QAAA,QAAQ,EAAEiD,cAFZ;AAGE,QAAA,QAAQ,EAAED,oBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;AACD,QAAI9B,QAAQ,KAAKjC,2BAAjB,EAA8C;AAC5C,aACE,oBAAC,mBAAD;AACE,QAAA,WAAW,EAAE4C,WADf;AAEE,QAAA,QAAQ,EAAEuB,sBAFZ;AAGE,QAAA,mBAAmB,EACjB7B,OAAO,IAAIH,oBAAoB,CAACV,mBAJpC;AAME,QAAA,mBAAmB,EAAEO,mBANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAUD;;AACD,QAAIC,QAAQ,KAAK7C,gCAAjB,EAAmD;AACjD,aACE,oBAAC,wBAAD;AACE,QAAA,KAAK,EAAE+C,oBAAoB,CAACpB,KAD9B;AAEE,QAAA,qBAAqB,EACnBoB,oBAAoB,CAACL,qBAHzB;AAKE,QAAA,2BAA2B,EAAEyC,yBAL/B;AAME,QAAA,cAAc,EAAED,oBANlB;AAOE,QAAA,aAAa,EAAER,0BAPjB;AAQE,QAAA,aAAa,EAAEO,mBARjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAYD;;AACD,QAAIpC,QAAQ,KAAKhC,yBAAjB,EAA4C;AAC1C,aACE,oBAAC,UAAD;AACE,QAAA,KAAK,MADP;AAEE,QAAA,KAAK,EAAC,qBAFR;AAGE,QAAA,WAAW,EAAC,gFAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAOD;;AACD,QAAIgC,QAAQ,KAAK/B,2BAAjB,EAA8C;AAC5C,aACE,oBAAC,UAAD;AACE,QAAA,KAAK,EAAE,KADT;AAEE,QAAA,KAAK,EAAC,6BAFR;AAGE,QAAA,WAAW,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAME,oBAAC,WAAD;AAAa,UAAA,IAAI,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAPF,MARF,EAgBU,GAhBV,kEAJJ;AAyBE,QAAA,UAAU,EAAC,iBAzBb;AA0BE,QAAA,QAAQ,EAAE8B,mBA1BZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AA8BD;;AACD,QAAIC,QAAQ,KAAK9B,gCAAjB,EAAmD;AACjD,aACE,oBAAC,6BAAD;AACE,QAAA,KAAK,EAAEgC,oBAAoB,CAACpB,KAD9B;AAEE,QAAA,QAAQ,EAAE6C,mBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAMD;;AAED,QAAI3B,QAAQ,KAAK9C,cAAjB,EAAiC;AAC/B,aAAO,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AACF,GAlKA,GADH,CADF;AAuKD,CApkB+B,CAAlC;AAukBA,MAAMoG,gBAAgB,GAAG9I,KAAK,CAACoF,IAAN,CAAW,SAAS0D,gBAAT,CAA0B,EAAE,GAAGC;AAAL,CAA1B,EAAwC;AAC1E,QAAM,CAACjD,WAAD,IAAgBjF,SAAS,CAAC,oBAAD,CAA/B;AACA,QAAM;AAAE2E,IAAAA;AAAF,MAAeuD,KAArB;AAEA,QAAMC,SAAS,GACblD,WAAW,IAAIN,QAAQ,KAAK7C,gCAA5B,GACIsG,iBADJ,GAEIC,WAHN;AAKA,SAAO,oBAAC,SAAD,oBAAeH,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAVwB,CAAzB;;;;;;;AAYA,MAAMG,WAAW,GAAG,CAAC,EAAE,GAAGH;AAAL,CAAD,KAAkB;AACpC,QAAMI,GAAG,GAAGjJ,MAAM,CAAC,IAAD,CAAlB;AACA,QAAM,CAACkJ,MAAD,EAASC,SAAT,IAAsBlJ,QAAQ,CAAC,CAAD,CAApC;AAEA,QAAMmJ,MAAM,GAAGlJ,WAAW,CAACmJ,IAAI,IAAI;AACjC,QAAIA,IAAJ,EAAU;AACRF,MAAAA,SAAS,CAACE,IAAI,CAACC,YAAN,CAAT;AACD;;AAEDL,IAAAA,GAAG,CAACM,OAAJ,GAAcF,IAAd;AACD,GANyB,EAMvB,EANuB,CAA1B;AAQA,SACE,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAE,IAAI7I,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,MAAD;AACE,IAAA,MAAM,EAAEE,OAAO,CAAC8I,MADlB;AAEE,IAAA,IAAI,EAAE;AAAEN,MAAAA,MAAM,EAAG,GAAE,KAAK1I,EAAG;AAArB,KAFR;AAGE,IAAA,EAAE,EAAE;AAAE0I,MAAAA,MAAM,EAAG,GAAEA,MAAO;AAApB,KAHN;AAIE,IAAA,MAAM,MAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG,CAAC;AAAEA,IAAAA;AAAF,GAAD,KACC,oBAAC,QAAD,CAAU,GAAV;AAAc,IAAA,KAAK,EAAE;AAAEA,MAAAA;AAAF,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,iBAAD,oBAAuBL,KAAvB;AAA8B,IAAA,WAAW,EAAEO,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CAPJ,CAPF,CADF,CADF;AAwBD,CApCD;;AAsCA,MAAML,iBAAiB,GAAGjJ,KAAK,CAACoF,IAAN,CAAW,SAASuE,aAAT,CAAuB;AAC1DnE,EAAAA,QAD0D;AAE1DoE,EAAAA,QAF0D;AAG1DC,EAAAA;AAH0D,CAAvB,EAIlC;AACD,QAAM,CAAC/D,WAAD,IAAgBjF,SAAS,CAAC,oBAAD,CAA/B;AAEA,SACE,oBAAC,UAAD;AACE,IAAA,KAAK,EAAE;AAAE+I,MAAAA,QAAF;AAAYpE,MAAAA;AAAZ,KADT;AAEE,IAAA,IAAI,EAAE,CAAC;AAAEA,MAAAA;AAAF,KAAD,KAAkBA,QAF1B;AAGE,IAAA,IAAI,EAAE;AACJsE,MAAAA,QAAQ,EAAE,UADN;AAEJC,MAAAA,OAAO,EAAE,CAFL;AAGJC,MAAAA,SAAS,EAAE;AAHP,KAHR;AAQE,IAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ,EAAE,QADL;AAELC,MAAAA,OAAO,EAAE,CAFJ;AAGLC,MAAAA,SAAS,EAAE;AAHN,KART;AAaE,IAAA,KAAK,EAAE;AACLF,MAAAA,QAAQ,EAAE,UADL;AAELC,MAAAA,OAAO,EAAE,CAFJ;AAGLC,MAAAA,SAAS,EAAE;AAHN,KAbT;AAkBE,IAAA,MAAM,MAlBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAoBG,CAAC;AAAEJ,IAAAA,QAAF;AAAYpE,IAAAA;AAAZ,GAAD,KAA4BuD,KAAK,IAChCjD,WAAW,GACT,oBAAC,QAAD,CAAU,GAAV;AAAc,IAAA,KAAK,EAAE,EAAE,GAAGiD;AAAL,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoCa,QAApC,CADS,GAGT,oBAAC,QAAD,CAAU,GAAV;AACE,IAAA,GAAG,EAAEC,WADP;AAEE,IAAA,KAAK,EAAE,EACL,GAAGd,KADE;AAELkB,MAAAA,GAAG,EAAE,CAFA;AAGLC,MAAAA,IAAI,EAAE,CAHD;AAILC,MAAAA,KAAK,EAAE;AAJF,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASGP,QATH,CAxBN,CADF;AAuCD,CA9CyB,CAA1B;AAgDA,eAAezE,yBAAf","sourcesContent":["import React, { useMemo, useRef, useState, useCallback, useEffect } from 'react'\nimport { animated, Spring, Transition } from 'react-spring/renderprops'\nimport {\n  Box,\n  GU,\n  IconConnect,\n  springs,\n  useInside,\n  useToast,\n  useViewport,\n} from '@aragon/ui'\nimport { useWallet } from '../../providers/Wallet'\nimport { getProviderFromUseWalletId } from '../../ethereum-providers'\n\nimport DeleteEmail from './DeleteEmail'\nimport EmailNotificationsForm from './EmailNotificationsForm'\nimport ExistingEmailSubscription from './ExistingEmailSubscription'\nimport LoadingPreferences from '../GlobalPreferences/Notifications/LoadingPreferences'\nimport NotificationsPreferences from '../GlobalPreferences/Notifications/NotificationsPreferences'\nimport StatusInfo from './StatusInfo'\nimport SignatureRequest from '../SignatureRequest'\nimport UnlockNotifications from '../GlobalPreferences/Notifications/UnlockNotifications'\nimport VerifyEmailAddress from './VerifyEmailAddress'\nimport VerifyEmailAddressPreferences from '../GlobalPreferences/Notifications/VerifyEmailAddressPreferences'\n\nimport { actions } from './actions'\n\nimport {\n  createSession,\n  deleteCurrentSession,\n  deleteJurorEmail,\n  resendVerificationEmail,\n  subscribeToNotifications,\n  subscribeExistingEmail,\n  switchNotificationsStatus,\n} from '../../services/notificationServiceApi'\nimport {\n  DELETE_ACTION,\n  DELETE_ACTION_PREFERENCES,\n  DELETE_EMAIL_SCREEN,\n  EMAIL_NOTIFICATIONS_ERROR_SCREEN,\n  EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN,\n  EMAIL_NOTIFICATIONS_FORM_SCREEN,\n  LOADING_SCREEN,\n  NOTIFICATIONS_PREFERENCES_SCREEN,\n  OPTOUT_ACTION,\n  RESEND_EMAIL_ACTION,\n  SETTINGS,\n  SIGNATURE_REQUEST_SCREEN,\n  SIGNATURE_SUCCESS_SCREEN,\n  SUBSCRIBE_EXISTING_ACTION,\n  SUBSCRIBE_MODAL_ACTION,\n  SUCCESS_INFO_SCREEN,\n  UNLOCK_SETTINGS_ACTION,\n  UNLOCK_SETTINGS_ACTION_NOT_EMAIL,\n  UNLOCK_SETTINGS_ACTION_NOT_VERIFIED,\n  UNLOCK_NOTIFICATIONS_SCREEN,\n  VERIFICATION_ERROR_SCREEN,\n  VERIFICATION_SUCCESS_SCREEN,\n  VERIFY_EMAIL_ADDRESS_PREFERENCES,\n  VERIFY_YOUR_EMAIL_SCREEN,\n} from './constants'\n\nconst DEFAULT_ERROR_SETTINGS = {\n  error: true,\n  title: 'Cannot connect to Notifications server',\n  description:\n    'There was a problem when trying to connect to the Email Notifications server. Make sure your Internet connection is working and please try again. ',\n}\n\nconst DEFAULT_SUBSCRIPTION_PROGRESS = {\n  needSignature: false,\n  serviceError: false,\n  startRequest: false,\n  action: null,\n  nextScreen: null,\n  email: null,\n  signHash: null,\n  signTimestamp: null,\n  signatureTitle: '',\n  signRequestText: '',\n  signSuccessText: '',\n  statusInfoTitle: '',\n  statusInfoText: '',\n  verifyUpdateMode: false,\n  previousScreen: null,\n  needsUnlockSettings: false,\n  emailVerified: false,\n  emailExists: false,\n}\n\nconst EmailNotificationsManager = React.memo(\n  function EmailNotificationsManager({\n    needsUnlockSettings,\n    emailExists,\n    emailVerified,\n    notificationsDisabled,\n    email,\n    startingScreen,\n    onReturnToDashboard,\n  }) {\n    const [screenId, setScreenId] = useState(\n      emailExists\n        ? EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN\n        : EMAIL_NOTIFICATIONS_FORM_SCREEN\n    )\n\n    const [subscriptionProgress, setSubscriptionProgress] = useState({\n      ...DEFAULT_SUBSCRIPTION_PROGRESS,\n      email,\n      emailExists,\n      notificationsDisabled,\n      needsUnlockSettings,\n      emailVerified,\n    })\n\n    const wallet = useWallet()\n    const account = wallet.account\n    const [insideModal] = useInside('NotificationsModal')\n    const provider = getProviderFromUseWalletId(wallet.activated)\n    const toast = useToast()\n\n    const { below } = useViewport()\n    const compactMode = below('medium')\n\n    const defaultSignRequestText = useMemo(() => {\n      return `Open ${provider.name} to complete the\n        signature request. Signing this message will prove ownership of your\n        account and `\n    }, [provider.name])\n\n    const handleOnSubscribe = useCallback(\n      async email => {\n        const {\n          needsSignature: subscribeNeedsSignature,\n          error: errorSubscribing,\n        } = await subscribeToNotifications(account, email)\n\n        if (errorSubscribing && !subscribeNeedsSignature) {\n          setSubscriptionProgress({ serviceError: true })\n          return\n        }\n\n        if (!subscribeNeedsSignature) {\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            email: email,\n            verifyUpdateMode: false,\n          }))\n          setScreenId(VERIFY_YOUR_EMAIL_SCREEN)\n          return\n        }\n\n        const subscribeSettings = SETTINGS[SUBSCRIBE_MODAL_ACTION]\n\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n          needSignature: subscribeNeedsSignature,\n          mode: SUBSCRIBE_MODAL_ACTION,\n          email: email,\n          signatureTitle: subscribeSettings.signatureSettings.title,\n          signRequestText:\n            defaultSignRequestText +\n            subscribeSettings.signatureSettings.requestText,\n          signSuccessText: subscribeSettings.signatureSettings.successText,\n          verifyUpdateMode: false,\n        }))\n      },\n      [account, defaultSignRequestText]\n    )\n\n    const handleOnSubscribeExistingEmail = useCallback(async () => {\n      const {\n        needsSignature,\n        email: existingEmail,\n        error,\n      } = await subscribeExistingEmail(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n\n      if (!needsSignature) {\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n          email: existingEmail,\n          verifyUpdateMode: true,\n        }))\n        setScreenId(VERIFY_YOUR_EMAIL_SCREEN)\n        return\n      }\n\n      const subscribeSettings = SETTINGS[SUBSCRIBE_EXISTING_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: needsSignature,\n        mode: SUBSCRIBE_EXISTING_ACTION,\n        signatureTitle: subscribeSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText +\n          subscribeSettings.signatureSettings.requestText,\n        signSuccessText: subscribeSettings.signatureSettings.successText,\n        verifyUpdateMode: true,\n      }))\n    }, [account, defaultSignRequestText])\n\n    const handleOnOptOut = useCallback(async () => {\n      const optOutSettings = SETTINGS[OPTOUT_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: true,\n        mode: OPTOUT_ACTION,\n        signatureTitle: optOutSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText + optOutSettings.signatureSettings.requestText,\n        signSuccessText: optOutSettings.signatureSettings.successText,\n      }))\n    }, [defaultSignRequestText])\n\n    const handleOnResendEmail = useCallback(async () => {\n      const { needsSignature, error } = await resendVerificationEmail(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n\n      if (!needsSignature) {\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n        }))\n        toast('A verification email has been resent.')\n        return\n      }\n\n      const resendSettings = SETTINGS[RESEND_EMAIL_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: needsSignature,\n        mode: RESEND_EMAIL_ACTION,\n        signatureTitle: resendSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText + resendSettings.signatureSettings.requestText,\n        signSuccessText: resendSettings.signatureSettings.successText,\n      }))\n    }, [account, defaultSignRequestText, toast])\n\n    const handleOnDeleteConfirmation = useCallback(() => {\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        previousScreen: screenId,\n      }))\n      setScreenId(DELETE_EMAIL_SCREEN)\n    }, [screenId])\n\n    const handleOnCancelDelete = useCallback(() => {\n      setScreenId(subscriptionProgress.previousScreen)\n    }, [subscriptionProgress.previousScreen])\n\n    const handleOnDelete = useCallback(async () => {\n      const { error, needsSignature } = await deleteJurorEmail(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n\n      const deleteSettings = SETTINGS[DELETE_ACTION]\n\n      if (!needsSignature) {\n        if (insideModal) {\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            statusInfoTitle: deleteSettings.successInfo.title,\n            statusInfoText: `Your email ${subscriptionProgress.email} was succefully deleted. You can always re-subscribe from the notifications preferences later.`,\n          }))\n        }\n        setSubscriptionProgress(subscriptionProgress => ({\n          ...subscriptionProgress,\n          email: '',\n        }))\n        setScreenId(\n          insideModal ? SUCCESS_INFO_SCREEN : EMAIL_NOTIFICATIONS_FORM_SCREEN\n        )\n        return\n      }\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: needsSignature,\n        mode: insideModal ? DELETE_ACTION : DELETE_ACTION_PREFERENCES,\n        signatureTitle: `Delete \"${subscriptionProgress.email}\"`,\n        signRequestText:\n          defaultSignRequestText + deleteSettings.signatureSettings.requestText,\n        signSuccessText: deleteSettings.signatureSettings.successText,\n      }))\n    }, [account, defaultSignRequestText, insideModal])\n\n    const handleOnUnlockSettings = useCallback(() => {\n      const unlockSettings = SETTINGS[UNLOCK_SETTINGS_ACTION]\n\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needSignature: true,\n        mode: !subscriptionProgress.emailExists\n          ? UNLOCK_SETTINGS_ACTION_NOT_EMAIL\n          : subscriptionProgress.emailVerified\n          ? UNLOCK_SETTINGS_ACTION\n          : UNLOCK_SETTINGS_ACTION_NOT_VERIFIED,\n        signatureTitle: unlockSettings.signatureSettings.title,\n        signRequestText:\n          defaultSignRequestText + unlockSettings.signatureSettings.requestText,\n        signSuccessText: unlockSettings.signatureSettings.successText,\n      }))\n    }, [defaultSignRequestText])\n\n    const handleOnUpdateEmail = useCallback(() => {\n      setScreenId(EMAIL_NOTIFICATIONS_FORM_SCREEN)\n    }, [])\n\n    const handleOnLockSettings = useCallback(async () => {\n      const { error, needsSignature } = await deleteCurrentSession(account)\n\n      if (error && !needsSignature) {\n        setSubscriptionProgress({ serviceError: true })\n        return\n      }\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needsUnlockSettings: true,\n      }))\n      setScreenId(UNLOCK_NOTIFICATIONS_SCREEN)\n    }, [account])\n\n    const handleSwitchNotifications = useCallback(\n      async disabled => {\n        const {\n          error,\n          needsSignature,\n          disabled: notificationsDisabled,\n        } = await switchNotificationsStatus(account, disabled)\n\n        if (error && !needsSignature) {\n          setSubscriptionProgress({ serviceError: true })\n          return\n        }\n\n        if (!needsSignature) {\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            notificationsDisabled: notificationsDisabled,\n          }))\n          setScreenId(NOTIFICATIONS_PREFERENCES_SCREEN)\n          return\n        }\n\n        setScreenId(UNLOCK_NOTIFICATIONS_SCREEN)\n      },\n      [account]\n    )\n\n    const handleOnSignSuccess = useCallback((signHash, timestamp) => {\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        startRequest: true,\n        signHash: signHash,\n        signTimestamp: timestamp,\n      }))\n    }, [])\n\n    useEffect(() => {\n      if (!startingScreen) {\n        return\n      }\n      setScreenId(startingScreen)\n    }, [startingScreen])\n\n    useEffect(() => {\n      setSubscriptionProgress(subscriptionProgress => ({\n        ...subscriptionProgress,\n        needsUnlockSettings,\n        email,\n        emailVerified,\n        emailExists,\n        notificationsDisabled,\n      }))\n    }, [\n      account,\n      needsUnlockSettings,\n      email,\n      emailVerified,\n      emailExists,\n      notificationsDisabled,\n    ])\n\n    useEffect(() => {\n      let cancelled = false\n\n      if (!subscriptionProgress.startRequest) {\n        return\n      }\n\n      const requestAction = async () => {\n        if (subscriptionProgress.needSignature) {\n          const { error: errorCreatingSession } = await createSession(\n            account,\n            subscriptionProgress.signHash,\n            subscriptionProgress.signTimestamp\n          )\n          if (errorCreatingSession && !cancelled) {\n            setSubscriptionProgress(subscriptionProgress => ({\n              ...subscriptionProgress,\n              serviceError: true,\n            }))\n          }\n        }\n\n        const action = actions[subscriptionProgress.mode]\n        let returnedJurorEmail = ''\n\n        if (action.request) {\n          let params = [account]\n\n          if (action.params) {\n            params = [...params, ...action.params]\n          }\n\n          if (action.requiresEmail) {\n            params.push(subscriptionProgress.email)\n          }\n\n          const { error, email } = await action.request(...params)\n\n          if (!cancelled) {\n            if (error) {\n              return setSubscriptionProgress(subscriptionProgress => ({\n                ...subscriptionProgress,\n                serviceError: true,\n              }))\n            }\n\n            if (email) {\n              returnedJurorEmail = email\n            }\n          }\n        }\n\n        if (!cancelled) {\n          setScreenId(SIGNATURE_SUCCESS_SCREEN)\n\n          if (action.successScreen) {\n            const timer = setTimeout(() => {\n              setScreenId(action.successScreen)\n            }, 3000)\n            setSubscriptionProgress(subscriptionProgress => ({\n              ...subscriptionProgress,\n              needSignature: false,\n              email: returnedJurorEmail || subscriptionProgress.email,\n              startRequest: false,\n            }))\n\n            return () => clearTimeout(timer)\n          }\n          setSubscriptionProgress(subscriptionProgress => ({\n            ...subscriptionProgress,\n            needSignature: false,\n            email: returnedJurorEmail || subscriptionProgress.email,\n            startRequest: false,\n          }))\n        }\n      }\n      requestAction()\n      return () => {\n        cancelled = true\n      }\n    }, [\n      account,\n      subscriptionProgress.email,\n      subscriptionProgress.mode,\n      subscriptionProgress.startRequest,\n      subscriptionProgress.needSignature,\n      subscriptionProgress.signHash,\n      subscriptionProgress.signTimestamp,\n    ])\n\n    useEffect(() => {\n      if (!subscriptionProgress.serviceError) {\n        return\n      }\n      setScreenId(EMAIL_NOTIFICATIONS_ERROR_SCREEN)\n    }, [subscriptionProgress.serviceError])\n\n    useEffect(() => {\n      if (!subscriptionProgress.needSignature) {\n        return\n      }\n\n      setScreenId(SIGNATURE_REQUEST_SCREEN)\n    }, [subscriptionProgress.needSignature])\n\n    return (\n      <WrappedContainer screenId={screenId}>\n        {(() => {\n          if (screenId === SIGNATURE_REQUEST_SCREEN) {\n            return (\n              <SignatureRequest\n                mode=\"request\"\n                compactMode={compactMode}\n                title={subscriptionProgress.signatureTitle}\n                text={subscriptionProgress.signRequestText}\n                onSignSuccess={handleOnSignSuccess}\n              />\n            )\n          }\n\n          if (screenId === SIGNATURE_SUCCESS_SCREEN) {\n            return (\n              <SignatureRequest\n                mode=\"success\"\n                compactMode={compactMode}\n                title={subscriptionProgress.signatureTitle}\n                text={subscriptionProgress.signSuccessText}\n              />\n            )\n          }\n\n          if (screenId === EMAIL_NOTIFICATIONS_ERROR_SCREEN) {\n            const { title, description } = DEFAULT_ERROR_SETTINGS\n            return <StatusInfo error title={title} description={description} />\n          }\n\n          if (screenId === SUCCESS_INFO_SCREEN) {\n            return (\n              <StatusInfo\n                error={false}\n                title={subscriptionProgress.statusInfoTitle}\n                description={subscriptionProgress.statusInfoText}\n              />\n            )\n          }\n\n          if (screenId === EMAIL_NOTIFICATIONS_FORM_SCREEN) {\n            return (\n              <EmailNotificationsForm\n                account={account}\n                existingEmail={subscriptionProgress.email}\n                compactMode={compactMode}\n                onOptOut={handleOnOptOut}\n                onSubscribeToNotifications={handleOnSubscribe}\n              />\n            )\n          }\n\n          if (screenId === EMAIL_NOTIFICATIONS_EXISTING_EMAIL_SCREEN) {\n            return (\n              <ExistingEmailSubscription\n                account={account}\n                compactMode={compactMode}\n                onOptOut={handleOnOptOut}\n                onSubscribeToNotifications={handleOnSubscribeExistingEmail}\n              />\n            )\n          }\n\n          if (screenId === VERIFY_YOUR_EMAIL_SCREEN) {\n            return (\n              <VerifyEmailAddress\n                updateMode={subscriptionProgress.verifyUpdateMode}\n                compactMode={compactMode}\n                email={subscriptionProgress.email}\n                onResendEmail={handleOnResendEmail}\n                onSubscribe={handleOnSubscribe}\n                onDeleteEmail={handleOnDeleteConfirmation}\n              />\n            )\n          }\n          if (screenId === DELETE_EMAIL_SCREEN) {\n            return (\n              <DeleteEmail\n                email={subscriptionProgress.email}\n                onDelete={handleOnDelete}\n                onCancel={handleOnCancelDelete}\n              />\n            )\n          }\n          if (screenId === UNLOCK_NOTIFICATIONS_SCREEN) {\n            return (\n              <UnlockNotifications\n                compactMode={compactMode}\n                onUnlock={handleOnUnlockSettings}\n                needsUnlockSettings={\n                  account && subscriptionProgress.needsUnlockSettings\n                }\n                onReturnToDashboard={onReturnToDashboard}\n              />\n            )\n          }\n          if (screenId === NOTIFICATIONS_PREFERENCES_SCREEN) {\n            return (\n              <NotificationsPreferences\n                email={subscriptionProgress.email}\n                notificationsDisabled={\n                  subscriptionProgress.notificationsDisabled\n                }\n                onSwitchNotificationsStatus={handleSwitchNotifications}\n                onLockSettings={handleOnLockSettings}\n                onDeleteEmail={handleOnDeleteConfirmation}\n                onUpdateEmail={handleOnUpdateEmail}\n              />\n            )\n          }\n          if (screenId === VERIFICATION_ERROR_SCREEN) {\n            return (\n              <StatusInfo\n                error\n                title=\"Verification failed\"\n                description=\"The email verification link was invalid or it has timed out. Please try again.\"\n              />\n            )\n          }\n          if (screenId === VERIFICATION_SUCCESS_SCREEN) {\n            return (\n              <StatusInfo\n                error={false}\n                title=\"Verification was successful\"\n                description={\n                  <span\n                    css={`\n                      display: flex;\n                      flex-wrap: wrap;\n                      justify-content: center;\n                    `}\n                  >\n                    Go back to the dashboard and\n                    <span\n                      css={`\n                        display: inline-flex;\n                        align-items: center;\n                      `}\n                    >\n                      <IconConnect size=\"small\" />\n                      <strong>Connect your account</strong>,\n                    </span>{' '}\n                    on the top right header, to access your notification\n                    settings\n                  </span>\n                }\n                actionText=\"Go to Dashboard\"\n                onAction={onReturnToDashboard}\n              />\n            )\n          }\n          if (screenId === VERIFY_EMAIL_ADDRESS_PREFERENCES) {\n            return (\n              <VerifyEmailAddressPreferences\n                email={subscriptionProgress.email}\n                onResend={handleOnResendEmail}\n              />\n            )\n          }\n\n          if (screenId === LOADING_SCREEN) {\n            return <LoadingPreferences />\n          }\n        })()}\n      </WrappedContainer>\n    )\n  }\n)\n\nconst WrappedContainer = React.memo(function WrappedContainer({ ...props }) {\n  const [insideModal] = useInside('NotificationsModal')\n  const { screenId } = props\n\n  const Container =\n    insideModal || screenId === NOTIFICATIONS_PREFERENCES_SCREEN\n      ? AnimatedContainer\n      : AnimatedBox\n\n  return <Container {...props} />\n})\n\nconst AnimatedBox = ({ ...props }) => {\n  const ref = useRef(null)\n  const [height, setHeight] = useState(0)\n\n  const setRef = useCallback(node => {\n    if (node) {\n      setHeight(node.clientHeight)\n    }\n\n    ref.current = node\n  }, [])\n\n  return (\n    <Box padding={5 * GU}>\n      <div\n        css={`\n          position: relative;\n          max-width: 800px;\n          margin: 0 auto;\n        `}\n      >\n        <Spring\n          config={springs.smooth}\n          from={{ height: `${38 * GU}px` }}\n          to={{ height: `${height}px` }}\n          native\n        >\n          {({ height }) => (\n            <animated.div style={{ height }}>\n              <AnimatedContainer {...props} refCallback={setRef} />\n            </animated.div>\n          )}\n        </Spring>\n      </div>\n    </Box>\n  )\n}\n\nconst AnimatedContainer = React.memo(function AnimatedModal({\n  screenId,\n  children,\n  refCallback,\n}) {\n  const [insideModal] = useInside('NotificationsModal')\n\n  return (\n    <Transition\n      items={{ children, screenId }}\n      keys={({ screenId }) => screenId}\n      from={{\n        position: 'absolute',\n        opacity: 0,\n        transform: 'scale3d(1.10 1.10, 1)',\n      }}\n      enter={{\n        position: 'static',\n        opacity: 1,\n        transform: 'scale3d(1, 1, 1)',\n      }}\n      leave={{\n        position: 'absolute',\n        opacity: 0,\n        transform: 'scale3d(0.90, 0.90, 1)',\n      }}\n      native\n    >\n      {({ children, screenId }) => props =>\n        insideModal ? (\n          <animated.div style={{ ...props }}>{children}</animated.div>\n        ) : (\n          <animated.div\n            ref={refCallback}\n            style={{\n              ...props,\n              top: 0,\n              left: 0,\n              right: 0,\n            }}\n          >\n            {children}\n          </animated.div>\n        )}\n    </Transition>\n  )\n})\n\nexport default EmailNotificationsManager\n"]},"metadata":{},"sourceType":"module"}