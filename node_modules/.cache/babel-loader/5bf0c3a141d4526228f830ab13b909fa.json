{"ast":null,"code":"var _classCallCheck = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/saleemfareed/oneds/court-dashboard/node_modules/@babel/runtime/helpers/inherits\");\n\nvar EventEmitter = require('events');\n\nvar parse = require('../parse');\n\nvar dev = process.env.NODE_ENV === 'development';\nvar WebSocket;\n\nvar WebSocketConnection =\n/*#__PURE__*/\nfunction (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(WebSocketConnection, _EventEmitter);\n\n  function WebSocketConnection(_WebSocket, url, options) {\n    var _this;\n\n    _classCallCheck(this, WebSocketConnection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocketConnection).call(this));\n    WebSocket = _WebSocket;\n    setTimeout(function () {\n      return _this.create(url, options);\n    }, 0);\n    return _this;\n  }\n\n  _createClass(WebSocketConnection, [{\n    key: \"create\",\n    value: function create(url, options) {\n      var _this2 = this;\n\n      if (!WebSocket) this.emit('error', new Error('No WebSocket transport available'));\n\n      try {\n        this.socket = new WebSocket(url);\n      } catch (e) {\n        return this.emit('error', e);\n      }\n\n      this.socket.addEventListener('error', function (err) {\n        return _this2.emit('error', err);\n      });\n      this.socket.addEventListener('open', function () {\n        _this2.emit('connect');\n\n        _this2.socket.addEventListener('message', function (message) {\n          var data = typeof message.data === 'string' ? message.data : '';\n          parse(data, function (err, payloads) {\n            if (err) return; //\n\n            payloads.forEach(function (load) {\n              if (Array.isArray(load)) {\n                load.forEach(function (payload) {\n                  return _this2.emit('payload', payload);\n                });\n              } else {\n                _this2.emit('payload', load);\n              }\n            });\n          });\n        });\n\n        _this2.socket.addEventListener('close', function () {\n          return _this2.onClose();\n        });\n      });\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      this.socket = null;\n      this.closed = true;\n      if (dev) console.log('Closing WebSocket connection');\n      this.emit('close');\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (this.socket) {\n        this.socket.close();\n      } else {\n        this.onClose();\n      }\n    }\n  }, {\n    key: \"error\",\n    value: function error(payload, message) {\n      var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      this.emit('payload', {\n        id: payload.id,\n        jsonrpc: payload.jsonrpc,\n        error: {\n          message: message,\n          code: code\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload) {\n      var _this3 = this;\n\n      if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n        setTimeout(function (_) {\n          return _this3.send(payload);\n        }, 10);\n      } else if (!this.socket || this.socket.readyState > 1) {\n        this.connected = false;\n        this.error(payload, 'Not connected');\n      } else {\n        this.socket.send(JSON.stringify(payload));\n      }\n    }\n  }]);\n\n  return WebSocketConnection;\n}(EventEmitter);\n\nmodule.exports = function (WebSocket) {\n  return function (url, cb) {\n    return new WebSocketConnection(WebSocket, url, cb);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}