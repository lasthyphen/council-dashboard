{"ast":null,"code":"import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { captureException } from '@sentry/browser'; // hooks\n\nimport { useCourtConfig } from '../providers/CourtConfig';\nimport { useActivity } from '../providers/ActivityProvider';\nimport { useRequestQueue } from '../providers/RequestQueue';\nimport { useRequestProcessor } from './useRequestProcessor';\nimport { useContract, useContractReadOnly } from '../web3-contracts'; // services\n\nimport { requestAutoReveal as requestAutoRevealApi } from '../services/autoReveal'; // utils\n\nimport radspec from '../radspec';\nimport { retryMax } from '../utils/retry-max';\nimport actions from '../actions/court-action-types';\nimport { getKnownToken } from '../utils/known-tokens';\nimport { getModuleAddress } from '../utils/court-utils';\nimport { bigNum, formatUnits } from '../lib/math-utils';\nimport { getFunctionSignature } from '../lib/web3-utils';\nimport { CourtModuleType } from '../types/court-module-types';\nimport { networkReserveAddress } from '../networks';\nimport { getVoteId, hashPassword, hashVote, saveCodeInLocalStorage } from '../utils/crvoting-utils'; // abis\n\nimport aragonCourtAbi from '../abi/AragonCourt.json';\nimport courtSubscriptionsAbi from '../abi/CourtSubscriptions.json';\nimport courtTreasuryAbi from '../abi/CourtTreasury.json';\nimport disputeManagerAbi from '../abi/DisputeManager.json';\nimport jurorRegistryAbi from '../abi/JurorRegistry.json';\nimport tokenAbi from '../abi/ERC20.json';\nimport votingAbi from '../abi/CRVoting.json';\nconst GAS_LIMIT = 1200000;\nconst ANJ_ACTIVATE_GAS_LIMIT = 500000;\nconst ANJ_ACTIONS_GAS_LIMIT = 325000;\nconst ACTIVATE_SELECTOR = getFunctionSignature('activate(uint256)'); // ANJ contract\n\nfunction useANJTokenContract() {\n  const {\n    anjToken\n  } = useCourtConfig();\n  const anjTokenAddress = anjToken ? anjToken.id : null;\n  return useContract(anjTokenAddress, tokenAbi);\n} // Fee token contract\n\n\nfunction useFeeTokenContract() {\n  const {\n    feeToken\n  } = useCourtConfig();\n  const feeTokenAddress = feeToken ? feeToken.id : null;\n  return useContract(feeTokenAddress, tokenAbi);\n} // Court contracts\n\n\nfunction useCourtContract(moduleType, abi) {\n  const {\n    id,\n    modules\n  } = useCourtConfig() || {};\n  let contractAddress;\n\n  if (moduleType === CourtModuleType.AragonCourt) {\n    contractAddress = id;\n  } else {\n    contractAddress = getModuleAddress(modules, moduleType);\n  }\n\n  return useContract(contractAddress, abi);\n}\n/**\n * All ANJ interactions\n * @returns {Object} all available functions around ANJ balances\n */\n\n\nexport function useANJActions() {\n  const processRequests = useRequestProcessor();\n  const jurorRegistryContract = useCourtContract(CourtModuleType.JurorsRegistry, jurorRegistryAbi);\n  const anjTokenContract = useANJTokenContract(); // activate ANJ directly from available balance\n\n  const activateANJ = useCallback(amount => {\n    const formattedAmount = formatUnits(amount);\n    return processRequests([{\n      action: () => jurorRegistryContract.activate(amount, {\n        gasLimit: ANJ_ACTIVATE_GAS_LIMIT\n      }),\n      description: radspec[actions.ACTIVATE_ANJ]({\n        amount: formattedAmount\n      }),\n      type: actions.ACTIVATE_ANJ\n    }]);\n  }, [jurorRegistryContract, processRequests]);\n  const deactivateANJ = useCallback(amount => {\n    const formattedAmount = formatUnits(amount);\n    return processRequests([{\n      action: () => jurorRegistryContract.deactivate(amount, {\n        gasLimit: ANJ_ACTIONS_GAS_LIMIT\n      }),\n      description: radspec[actions.DEACTIVATE_ANJ]({\n        amount: formattedAmount\n      }),\n      type: actions.DEACTIVATE_ANJ\n    }]);\n  }, [jurorRegistryContract, processRequests]); // approve, stake and activate ANJ\n\n  const stakeActivateANJ = useCallback(amount => {\n    const formattedAmount = formatUnits(amount);\n    return processRequests([{\n      action: () => anjTokenContract.approveAndCall(jurorRegistryContract.address, amount, ACTIVATE_SELECTOR, {\n        gasLimit: ANJ_ACTIVATE_GAS_LIMIT\n      }),\n      description: radspec[actions.ACTIVATE_ANJ]({\n        amount: formattedAmount\n      }),\n      type: actions.ACTIVATE_ANJ\n    }]);\n  }, [anjTokenContract, jurorRegistryContract, processRequests]);\n  const withdrawANJ = useCallback(amount => {\n    const formattedAmount = formatUnits(amount);\n    return processRequests([{\n      action: () => jurorRegistryContract.unstake(amount, '0x', {\n        gasLimit: ANJ_ACTIONS_GAS_LIMIT\n      }),\n      description: radspec[actions.WITHDRAW_ANJ]({\n        amount: formattedAmount\n      }),\n      type: actions.WITHDRAW_ANJ\n    }]);\n  }, [jurorRegistryContract, processRequests]);\n  return {\n    activateANJ,\n    deactivateANJ,\n    stakeActivateANJ,\n    withdrawANJ\n  };\n}\n/**\n * All dispute interactions\n * @returns {Object} all available functions around a dispute\n */\n\nexport function useDisputeActions() {\n  const processRequests = useRequestProcessor();\n  const disputeManagerContract = useCourtContract(CourtModuleType.DisputeManager, disputeManagerAbi);\n  const votingContract = useCourtContract(CourtModuleType.Voting, votingAbi);\n  const aragonCourtContract = useCourtContract(CourtModuleType.AragonCourt, aragonCourtAbi);\n  const feeTokenContract = useFeeTokenContract(); // Draft jurors\n\n  const draft = useCallback(disputeId => {\n    return processRequests([{\n      action: () => disputeManagerContract.draft(disputeId, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.DRAFT_JURY]({\n        disputeId\n      }),\n      type: actions.DRAFT_JURY\n    }]);\n  }, [disputeManagerContract, processRequests]); // Request auto reveal\n\n  const autoReveal = useCallback((account, disputeId, roundId, outcome, password) => {\n    return {\n      action: async () => requestAutoRevealApi(account, disputeId, roundId, outcome, password),\n      isTx: false,\n      description: 'Enable auto-reveal service',\n      onError: 'Failed to enable auto-reveal service',\n      onSuccess: 'Auto-reveal service enabled!'\n    };\n  }, []);\n  const requestAutoReveal = useCallback((...params) => processRequests([autoReveal(...params)]), [autoReveal, processRequests]); // Commit\n\n  const commit = useCallback((account, disputeId, roundId, outcome, password, revealServiceEnabled) => {\n    const voteId = getVoteId(disputeId, roundId);\n    const commitment = hashVote(outcome, password);\n    const requestQueue = [{\n      action: () => votingContract.commit(voteId, commitment),\n      description: radspec[actions.COMMIT_VOTE]({\n        disputeId,\n        roundId,\n        outcome\n      }),\n      type: actions.COMMIT_VOTE,\n      ensureConfirmation: true,\n      // Callback function to run after main tx\n      callback: () => saveCodeInLocalStorage(account, disputeId, password)\n    }]; // If juror opted-in for the reveal service we'll send the commitment and password to the court-server\n\n    if (revealServiceEnabled) {\n      requestQueue.push(autoReveal(account, disputeId, roundId, outcome, password));\n    }\n\n    return processRequests(requestQueue);\n  }, [autoReveal, processRequests, votingContract]); // Reveal\n\n  const reveal = useCallback((disputeId, roundId, voter, outcome, password) => {\n    const voteId = getVoteId(disputeId, roundId);\n    return processRequests([{\n      action: () => votingContract.reveal(voteId, voter, outcome, hashPassword(password)),\n      description: radspec[actions.REVEAL_VOTE]({\n        disputeId,\n        roundId\n      }),\n      type: actions.REVEAL_VOTE\n    }]);\n  }, [processRequests, votingContract]); // Leak\n\n  const leak = useCallback((voteId, voter, outcome, salt) => {\n    return processRequests([{\n      action: () => votingContract.leak(voteId, voter, outcome, salt),\n      description: radspec[actions.LEAK_VOTE]({\n        voteId,\n        voter\n      }),\n      type: actions.LEAK_VOTE\n    }]);\n  }, [processRequests, votingContract]);\n  const approveFeeDeposit = useCallback(value => {\n    return {\n      action: () => feeTokenContract.approve(disputeManagerContract.address, value),\n      description: radspec[actions.APPROVE_FEE_DEPOSIT]({\n        amount: formatUnits(value)\n      }),\n      type: actions.APPROVE_FEE_DEPOSIT\n    };\n  }, [disputeManagerContract, feeTokenContract]); // Appeal round of dispute\n\n  const appeal = useCallback((disputeId, roundId, ruling) => {\n    return {\n      action: () => disputeManagerContract.createAppeal(disputeId, roundId, ruling, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.APPEAL_RULING]({\n        disputeId,\n        roundId,\n        ruling\n      }),\n      type: actions.APPEAL_RULING\n    };\n  }, [disputeManagerContract]); // Confirm appeal round of dispute\n\n  const confirmAppeal = useCallback((disputeId, roundId, ruling) => {\n    return {\n      action: () => disputeManagerContract.confirmAppeal(disputeId, roundId, ruling, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.CONFIRM_APPEAL]({\n        disputeId,\n        roundId,\n        ruling\n      }),\n      type: actions.CONFIRM_APPEAL\n    };\n  }, [disputeManagerContract]); // General function that will appeal or confirm appeal a given round on a given dispute\n\n  const appealRound = useCallback((disputeId, roundId, ruling, requiredDeposit, allowance, confirm) => {\n    const requestQueue = []; // Check if requires pre-transactions\n\n    if (allowance.lt(requiredDeposit)) {\n      // Some ERC20s don't allow setting a new allowance if the current allowance is positive\n      if (!allowance.eq(0)) {\n        // Reset allowance\n        requestQueue.push({ ...approveFeeDeposit(0),\n          ensureConfirmation: true\n        });\n      } // Approve fee deposit for appealing\n\n\n      requestQueue.push({ ...approveFeeDeposit(requiredDeposit),\n        ensureConfirmation: true\n      });\n    }\n\n    const request = confirm ? confirmAppeal : appeal;\n    requestQueue.push(request(disputeId, roundId, ruling));\n    return processRequests(requestQueue);\n  }, [appeal, approveFeeDeposit, confirmAppeal, processRequests]);\n  const executeRuling = useCallback(disputeId => {\n    return processRequests([{\n      action: () => aragonCourtContract.executeRuling(disputeId, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.EXECUTE_RULING]({\n        disputeId\n      }),\n      type: actions.EXECUTE_RULING\n    }]);\n  }, [aragonCourtContract, processRequests]);\n  return {\n    appealRound,\n    requestAutoReveal,\n    commit,\n    draft,\n    executeRuling,\n    leak,\n    reveal\n  };\n}\nexport function useHeartbeat() {\n  const {\n    addActivity\n  } = useActivity();\n  const {\n    addRequests\n  } = useRequestQueue();\n  const aragonCourtContract = useCourtContract(CourtModuleType.AragonCourt, aragonCourtAbi);\n  const heartbeatRequest = useCallback((transitions, ensureConfirmation = false) => {\n    const description = radspec[actions.HEARTBEAT]({\n      transitions\n    });\n    return {\n      intent: () => addActivity(aragonCourtContract.heartbeat(transitions), actions.HEARTBEAT, description),\n      description,\n      isTx: true,\n      ensureConfirmation\n    };\n  }, [addActivity, aragonCourtContract]);\n  const heartbeat = useCallback(transitions => {\n    return addRequests(heartbeatRequest(transitions));\n  }, [addRequests, heartbeatRequest]);\n  return {\n    heartbeat,\n    heartbeatRequest\n  };\n}\nexport function useRewardActions() {\n  const processRequests = useRequestProcessor();\n  const {\n    claimFees\n  } = useCourtSubscriptionActions();\n  const disputeManagerContract = useCourtContract(CourtModuleType.DisputeManager, disputeManagerAbi);\n  const treasuryContract = useCourtContract(CourtModuleType.Treasury, courtTreasuryAbi);\n  const settleReward = useCallback((disputeId, roundId, juror) => {\n    return {\n      action: () => disputeManagerContract.settleReward(disputeId, roundId, juror, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.SETTLE_REWARD]({\n        roundId,\n        disputeId\n      }),\n      type: actions.SETTLE_REWARD\n    };\n  }, [disputeManagerContract]);\n  const settleAppealDeposit = useCallback((disputeId, roundId) => {\n    return {\n      action: () => disputeManagerContract.settleAppealDeposit(disputeId, roundId, {\n        gasLimit: GAS_LIMIT\n      }),\n      description: radspec[actions.SETTLE_APPEAL_DEPOSIT]({\n        roundId,\n        disputeId\n      }),\n      type: actions.SETTLE_APPEAL_DEPOSIT\n    };\n  }, [disputeManagerContract]);\n  const withdraw = useCallback((token, to, amount) => {\n    return {\n      action: () => treasuryContract.withdraw(token, to, amount, {\n        gasLimit: ANJ_ACTIONS_GAS_LIMIT\n      }),\n      description: radspec[actions.CLAIM_REWARDS]({\n        amount: formatUnits(amount)\n      }),\n      type: actions.CLAIM_REWARDS\n    };\n  }, [treasuryContract]);\n  const claimRewards = useCallback((account, arbitrableFees, appealFees, treasuryFees, subscriptionFees, feeTokenAddress) => {\n    const requestQueue = []; // Claim all arbitrable fee rewards\n\n    for (const arbitrableFee of arbitrableFees) {\n      const {\n        disputeId,\n        rounds\n      } = arbitrableFee;\n\n      for (const roundId of rounds) {\n        requestQueue.push(settleReward(disputeId, roundId, account));\n      }\n    } // Claim all appeal fee rewards\n\n\n    for (const appealFee of appealFees) {\n      const {\n        disputeId,\n        rounds\n      } = appealFee;\n\n      for (const roundId of rounds) {\n        requestQueue.push(settleAppealDeposit(disputeId, roundId));\n      }\n    } // If we have settlements to do, then we'll make sure that the last\n    // settlement is confirmed before withdrawing total fees from the treasury\n\n\n    if (requestQueue.length > 0) {\n      const lastSettlement = requestQueue.pop();\n      requestQueue.push({ ...lastSettlement,\n        ensureConfirmation: true\n      });\n    } // Withdraw funds from treasury\n\n\n    if (treasuryFees.gt(0)) {\n      requestQueue.push(withdraw(feeTokenAddress, account, treasuryFees));\n    } // Claim subscription fees\n\n\n    for (const subscriptionFee of subscriptionFees) {\n      requestQueue.push(claimFees(subscriptionFee.periodId));\n    }\n\n    return processRequests(requestQueue);\n  }, [claimFees, processRequests, settleAppealDeposit, settleReward, withdraw]);\n  return {\n    claimRewards\n  };\n}\nexport function useCourtSubscriptionActions() {\n  const courtSubscriptionsContract = useCourtContract(CourtModuleType.Subscriptions, courtSubscriptionsAbi);\n  const claimFees = useCallback(periodId => {\n    return {\n      action: () => courtSubscriptionsContract.claimFees(periodId),\n      description: radspec[actions.CLAIM_SUBSCRIPTION_FEES]({\n        periodId\n      }),\n      type: actions.CLAIM_SUBSCRIPTION_FEES\n    };\n  }, [courtSubscriptionsContract]);\n  const getJurorShare = useCallback((juror, periodId) => {\n    return courtSubscriptionsContract.getJurorShare(juror, periodId);\n  }, [courtSubscriptionsContract]);\n  const getters = useMemo(() => courtSubscriptionsContract ? {\n    getJurorShare\n  } : null, [courtSubscriptionsContract, getJurorShare]);\n  return {\n    claimFees,\n    getters\n  };\n}\n/**\n *\n * @param {string} disputeId id of the dispute\n * @param {string} roundId id of the round\n * @returns {Object} appeal deposit and confirm appeal deposit amounts\n */\n\nexport function useAppealDeposits(disputeId, roundId) {\n  const [appealDeposits, setAppealDeposits] = useState({\n    amounts: [bigNum(0), bigNum(0)],\n    error: false\n  });\n  const disputeManagerContract = useCourtContract(CourtModuleType.DisputeManager, disputeManagerAbi);\n  useEffect(() => {\n    let cancelled = false;\n\n    const fetchNextRoundDetails = async () => {\n      if (!disputeManagerContract) {\n        return;\n      }\n\n      retryMax(() => disputeManagerContract.getNextRoundDetails(disputeId, roundId).then(nextRound => {\n        const appealDeposit = nextRound[6];\n        const confirmAppealDeposit = nextRound[7];\n\n        if (!cancelled) {\n          setAppealDeposits({\n            amounts: [appealDeposit, confirmAppealDeposit],\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setAppealDeposits(appealDeposits => ({ ...appealDeposits,\n            error: true\n          }));\n        }\n      }));\n    };\n\n    fetchNextRoundDetails();\n    return () => {\n      cancelled = true;\n    };\n  }, [disputeId, disputeManagerContract, roundId]);\n  return [appealDeposits.amounts, appealDeposits.error];\n}\nexport function useFeeBalanceOf(account) {\n  const [feeBalance, setFeeBalance] = useState({\n    amount: bigNum(0),\n    error: false\n  });\n  const feeTokenContract = useFeeTokenContract();\n  useEffect(() => {\n    let cancelled = false;\n\n    const getFeeBalance = async () => {\n      if (!feeTokenContract) return;\n      retryMax(() => feeTokenContract.balanceOf(account)).then(balance => {\n        if (!cancelled) {\n          setFeeBalance({\n            amount: balance,\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setFeeBalance(feeBalance => ({ ...feeBalance,\n            error: true\n          }));\n        }\n      });\n    };\n\n    getFeeBalance();\n    return () => {\n      cancelled = true;\n    };\n  }, [account, feeTokenContract]);\n  return [feeBalance.amount, feeBalance.error];\n}\nexport function useAppealFeeAllowance(owner) {\n  const [allowance, setAllowance] = useState({\n    amount: bigNum(0),\n    error: false\n  });\n  const courtConfig = useCourtConfig();\n  const disputeManagerAddress = getModuleAddress(courtConfig.modules, CourtModuleType.DisputeManager);\n  const feeTokenContract = useFeeTokenContract();\n  useEffect(() => {\n    let cancelled = false;\n\n    const getFeeAllowance = async () => {\n      if (!feeTokenContract) return;\n      retryMax(() => feeTokenContract.allowance(owner, disputeManagerAddress)).then(allowance => {\n        if (!cancelled) {\n          setAllowance({\n            amount: allowance,\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setAllowance(allowance => ({ ...allowance,\n            error: true\n          }));\n        }\n      });\n    };\n\n    getFeeAllowance();\n    return () => {\n      cancelled = true;\n    };\n  }, [disputeManagerAddress, feeTokenContract, owner]);\n  return [allowance.amount, allowance.error];\n}\nexport function useActiveBalanceOfAt(juror, termId) {\n  const jurorRegistryContract = useCourtContract(CourtModuleType.JurorsRegistry, jurorRegistryAbi);\n  const [activeBalance, setActiveBalance] = useState({\n    amount: bigNum(-1),\n    error: false\n  });\n  useEffect(() => {\n    let cancelled = false;\n\n    const getActiveBalanceOfAt = async () => {\n      if (!jurorRegistryContract) return;\n      retryMax(() => jurorRegistryContract.activeBalanceOfAt(juror, termId)).then(balance => {\n        if (!cancelled) {\n          setActiveBalance({\n            amount: balance,\n            error: false\n          });\n        }\n      }).catch(err => {\n        captureException(err);\n\n        if (!cancelled) {\n          setActiveBalance(balance => ({ ...balance,\n            error: true\n          }));\n        }\n      });\n    };\n\n    getActiveBalanceOfAt();\n    return () => {\n      cancelled = true;\n    };\n  }, [juror, jurorRegistryContract, termId]);\n  return [activeBalance.amount, activeBalance.error];\n}\nexport function useTotalANTStakedPolling(timeout = 1000) {\n  const [totalANTStaked, setTotalANTStaked] = useState(bigNum(-1));\n  const [error, setError] = useState(false);\n  const {\n    address: antAddress\n  } = getKnownToken('ANT') || {};\n  const antContract = useContractReadOnly(antAddress, tokenAbi); // We are starting in 0 in order to immediately make the fetch call\n\n  const controlledTimeout = useRef(0);\n  useEffect(() => {\n    let cancelled = false;\n    let timeoutId; // This stat is only relevant and shown on mainnet\n\n    if (!networkReserveAddress) {\n      return setError(true);\n    }\n\n    if (!antContract) {\n      return;\n    }\n\n    const fetchTotalANTBalance = () => {\n      timeoutId = setTimeout(() => {\n        const vaultBalancePromise = antContract.balanceOf(networkReserveAddress);\n        return vaultBalancePromise.then(antInVault => {\n          if (!cancelled) {\n            setTotalANTStaked(antInVault);\n          }\n        }).catch(err => {\n          console.error(`Error fetching balance: ${err} retrying...`);\n          setError(true);\n        }).finally(() => {\n          if (!cancelled) {\n            clearTimeout(timeoutId);\n            controlledTimeout.current = timeout;\n            fetchTotalANTBalance();\n          }\n        });\n      }, controlledTimeout.current);\n    };\n\n    fetchTotalANTBalance();\n    return () => {\n      cancelled = true;\n      clearTimeout(timeoutId);\n    };\n  }, [antContract, controlledTimeout, timeout]);\n  return [totalANTStaked, error];\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useCourtContracts.js"],"names":["useCallback","useEffect","useMemo","useRef","useState","captureException","useCourtConfig","useActivity","useRequestQueue","useRequestProcessor","useContract","useContractReadOnly","requestAutoReveal","requestAutoRevealApi","radspec","retryMax","actions","getKnownToken","getModuleAddress","bigNum","formatUnits","getFunctionSignature","CourtModuleType","networkReserveAddress","getVoteId","hashPassword","hashVote","saveCodeInLocalStorage","aragonCourtAbi","courtSubscriptionsAbi","courtTreasuryAbi","disputeManagerAbi","jurorRegistryAbi","tokenAbi","votingAbi","GAS_LIMIT","ANJ_ACTIVATE_GAS_LIMIT","ANJ_ACTIONS_GAS_LIMIT","ACTIVATE_SELECTOR","useANJTokenContract","anjToken","anjTokenAddress","id","useFeeTokenContract","feeToken","feeTokenAddress","useCourtContract","moduleType","abi","modules","contractAddress","AragonCourt","useANJActions","processRequests","jurorRegistryContract","JurorsRegistry","anjTokenContract","activateANJ","amount","formattedAmount","action","activate","gasLimit","description","ACTIVATE_ANJ","type","deactivateANJ","deactivate","DEACTIVATE_ANJ","stakeActivateANJ","approveAndCall","address","withdrawANJ","unstake","WITHDRAW_ANJ","useDisputeActions","disputeManagerContract","DisputeManager","votingContract","Voting","aragonCourtContract","feeTokenContract","draft","disputeId","DRAFT_JURY","autoReveal","account","roundId","outcome","password","isTx","onError","onSuccess","params","commit","revealServiceEnabled","voteId","commitment","requestQueue","COMMIT_VOTE","ensureConfirmation","callback","push","reveal","voter","REVEAL_VOTE","leak","salt","LEAK_VOTE","approveFeeDeposit","value","approve","APPROVE_FEE_DEPOSIT","appeal","ruling","createAppeal","APPEAL_RULING","confirmAppeal","CONFIRM_APPEAL","appealRound","requiredDeposit","allowance","confirm","lt","eq","request","executeRuling","EXECUTE_RULING","useHeartbeat","addActivity","addRequests","heartbeatRequest","transitions","HEARTBEAT","intent","heartbeat","useRewardActions","claimFees","useCourtSubscriptionActions","treasuryContract","Treasury","settleReward","juror","SETTLE_REWARD","settleAppealDeposit","SETTLE_APPEAL_DEPOSIT","withdraw","token","to","CLAIM_REWARDS","claimRewards","arbitrableFees","appealFees","treasuryFees","subscriptionFees","arbitrableFee","rounds","appealFee","length","lastSettlement","pop","gt","subscriptionFee","periodId","courtSubscriptionsContract","Subscriptions","CLAIM_SUBSCRIPTION_FEES","getJurorShare","getters","useAppealDeposits","appealDeposits","setAppealDeposits","amounts","error","cancelled","fetchNextRoundDetails","getNextRoundDetails","then","nextRound","appealDeposit","confirmAppealDeposit","catch","err","useFeeBalanceOf","feeBalance","setFeeBalance","getFeeBalance","balanceOf","balance","useAppealFeeAllowance","owner","setAllowance","courtConfig","disputeManagerAddress","getFeeAllowance","useActiveBalanceOfAt","termId","activeBalance","setActiveBalance","getActiveBalanceOfAt","activeBalanceOfAt","useTotalANTStakedPolling","timeout","totalANTStaked","setTotalANTStaked","setError","antAddress","antContract","controlledTimeout","timeoutId","fetchTotalANTBalance","setTimeout","vaultBalancePromise","antInVault","console","finally","clearTimeout","current"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { captureException } from '@sentry/browser'\n\n// hooks\nimport { useCourtConfig } from '../providers/CourtConfig'\nimport { useActivity } from '../providers/ActivityProvider'\nimport { useRequestQueue } from '../providers/RequestQueue'\nimport { useRequestProcessor } from './useRequestProcessor'\nimport { useContract, useContractReadOnly } from '../web3-contracts'\n\n// services\nimport { requestAutoReveal as requestAutoRevealApi } from '../services/autoReveal'\n\n// utils\nimport radspec from '../radspec'\nimport { retryMax } from '../utils/retry-max'\nimport actions from '../actions/court-action-types'\nimport { getKnownToken } from '../utils/known-tokens'\nimport { getModuleAddress } from '../utils/court-utils'\nimport { bigNum, formatUnits } from '../lib/math-utils'\nimport { getFunctionSignature } from '../lib/web3-utils'\nimport { CourtModuleType } from '../types/court-module-types'\nimport { networkReserveAddress } from '../networks'\nimport {\n  getVoteId,\n  hashPassword,\n  hashVote,\n  saveCodeInLocalStorage,\n} from '../utils/crvoting-utils'\n\n// abis\nimport aragonCourtAbi from '../abi/AragonCourt.json'\nimport courtSubscriptionsAbi from '../abi/CourtSubscriptions.json'\nimport courtTreasuryAbi from '../abi/CourtTreasury.json'\nimport disputeManagerAbi from '../abi/DisputeManager.json'\nimport jurorRegistryAbi from '../abi/JurorRegistry.json'\nimport tokenAbi from '../abi/ERC20.json'\nimport votingAbi from '../abi/CRVoting.json'\n\nconst GAS_LIMIT = 1200000\nconst ANJ_ACTIVATE_GAS_LIMIT = 500000\nconst ANJ_ACTIONS_GAS_LIMIT = 325000\nconst ACTIVATE_SELECTOR = getFunctionSignature('activate(uint256)')\n\n// ANJ contract\nfunction useANJTokenContract() {\n  const { anjToken } = useCourtConfig()\n\n  const anjTokenAddress = anjToken ? anjToken.id : null\n\n  return useContract(anjTokenAddress, tokenAbi)\n}\n\n// Fee token contract\nfunction useFeeTokenContract() {\n  const { feeToken } = useCourtConfig()\n\n  const feeTokenAddress = feeToken ? feeToken.id : null\n\n  return useContract(feeTokenAddress, tokenAbi)\n}\n\n// Court contracts\nfunction useCourtContract(moduleType, abi) {\n  const { id, modules } = useCourtConfig() || {}\n\n  let contractAddress\n  if (moduleType === CourtModuleType.AragonCourt) {\n    contractAddress = id\n  } else {\n    contractAddress = getModuleAddress(modules, moduleType)\n  }\n\n  return useContract(contractAddress, abi)\n}\n\n/**\n * All ANJ interactions\n * @returns {Object} all available functions around ANJ balances\n */\nexport function useANJActions() {\n  const processRequests = useRequestProcessor()\n  const jurorRegistryContract = useCourtContract(\n    CourtModuleType.JurorsRegistry,\n    jurorRegistryAbi\n  )\n  const anjTokenContract = useANJTokenContract()\n\n  // activate ANJ directly from available balance\n  const activateANJ = useCallback(\n    amount => {\n      const formattedAmount = formatUnits(amount)\n\n      return processRequests([\n        {\n          action: () =>\n            jurorRegistryContract.activate(amount, {\n              gasLimit: ANJ_ACTIVATE_GAS_LIMIT,\n            }),\n          description: radspec[actions.ACTIVATE_ANJ]({\n            amount: formattedAmount,\n          }),\n          type: actions.ACTIVATE_ANJ,\n        },\n      ])\n    },\n    [jurorRegistryContract, processRequests]\n  )\n\n  const deactivateANJ = useCallback(\n    amount => {\n      const formattedAmount = formatUnits(amount)\n\n      return processRequests([\n        {\n          action: () =>\n            jurorRegistryContract.deactivate(amount, {\n              gasLimit: ANJ_ACTIONS_GAS_LIMIT,\n            }),\n          description: radspec[actions.DEACTIVATE_ANJ]({\n            amount: formattedAmount,\n          }),\n          type: actions.DEACTIVATE_ANJ,\n        },\n      ])\n    },\n    [jurorRegistryContract, processRequests]\n  )\n\n  // approve, stake and activate ANJ\n  const stakeActivateANJ = useCallback(\n    amount => {\n      const formattedAmount = formatUnits(amount)\n\n      return processRequests([\n        {\n          action: () =>\n            anjTokenContract.approveAndCall(\n              jurorRegistryContract.address,\n              amount,\n              ACTIVATE_SELECTOR,\n              { gasLimit: ANJ_ACTIVATE_GAS_LIMIT }\n            ),\n          description: radspec[actions.ACTIVATE_ANJ]({\n            amount: formattedAmount,\n          }),\n          type: actions.ACTIVATE_ANJ,\n        },\n      ])\n    },\n    [anjTokenContract, jurorRegistryContract, processRequests]\n  )\n\n  const withdrawANJ = useCallback(\n    amount => {\n      const formattedAmount = formatUnits(amount)\n\n      return processRequests([\n        {\n          action: () =>\n            jurorRegistryContract.unstake(amount, '0x', {\n              gasLimit: ANJ_ACTIONS_GAS_LIMIT,\n            }),\n          description: radspec[actions.WITHDRAW_ANJ]({\n            amount: formattedAmount,\n          }),\n          type: actions.WITHDRAW_ANJ,\n        },\n      ])\n    },\n    [jurorRegistryContract, processRequests]\n  )\n\n  return { activateANJ, deactivateANJ, stakeActivateANJ, withdrawANJ }\n}\n\n/**\n * All dispute interactions\n * @returns {Object} all available functions around a dispute\n */\nexport function useDisputeActions() {\n  const processRequests = useRequestProcessor()\n  const disputeManagerContract = useCourtContract(\n    CourtModuleType.DisputeManager,\n    disputeManagerAbi\n  )\n  const votingContract = useCourtContract(CourtModuleType.Voting, votingAbi)\n\n  const aragonCourtContract = useCourtContract(\n    CourtModuleType.AragonCourt,\n    aragonCourtAbi\n  )\n\n  const feeTokenContract = useFeeTokenContract()\n\n  // Draft jurors\n  const draft = useCallback(\n    disputeId => {\n      return processRequests([\n        {\n          action: () =>\n            disputeManagerContract.draft(disputeId, {\n              gasLimit: GAS_LIMIT,\n            }),\n          description: radspec[actions.DRAFT_JURY]({ disputeId }),\n          type: actions.DRAFT_JURY,\n        },\n      ])\n    },\n    [disputeManagerContract, processRequests]\n  )\n\n  // Request auto reveal\n  const autoReveal = useCallback(\n    (account, disputeId, roundId, outcome, password) => {\n      return {\n        action: async () =>\n          requestAutoRevealApi(account, disputeId, roundId, outcome, password),\n        isTx: false,\n        description: 'Enable auto-reveal service',\n        onError: 'Failed to enable auto-reveal service',\n        onSuccess: 'Auto-reveal service enabled!',\n      }\n    },\n    []\n  )\n\n  const requestAutoReveal = useCallback(\n    (...params) => processRequests([autoReveal(...params)]),\n    [autoReveal, processRequests]\n  )\n\n  // Commit\n  const commit = useCallback(\n    (account, disputeId, roundId, outcome, password, revealServiceEnabled) => {\n      const voteId = getVoteId(disputeId, roundId)\n      const commitment = hashVote(outcome, password)\n\n      const requestQueue = [\n        {\n          action: () => votingContract.commit(voteId, commitment),\n          description: radspec[actions.COMMIT_VOTE]({\n            disputeId,\n            roundId,\n            outcome,\n          }),\n          type: actions.COMMIT_VOTE,\n          ensureConfirmation: true,\n          // Callback function to run after main tx\n          callback: () => saveCodeInLocalStorage(account, disputeId, password),\n        },\n      ]\n\n      // If juror opted-in for the reveal service we'll send the commitment and password to the court-server\n      if (revealServiceEnabled) {\n        requestQueue.push(\n          autoReveal(account, disputeId, roundId, outcome, password)\n        )\n      }\n\n      return processRequests(requestQueue)\n    },\n    [autoReveal, processRequests, votingContract]\n  )\n\n  // Reveal\n  const reveal = useCallback(\n    (disputeId, roundId, voter, outcome, password) => {\n      const voteId = getVoteId(disputeId, roundId)\n\n      return processRequests([\n        {\n          action: () =>\n            votingContract.reveal(\n              voteId,\n              voter,\n              outcome,\n              hashPassword(password)\n            ),\n          description: radspec[actions.REVEAL_VOTE]({\n            disputeId,\n            roundId,\n          }),\n          type: actions.REVEAL_VOTE,\n        },\n      ])\n    },\n    [processRequests, votingContract]\n  )\n\n  // Leak\n  const leak = useCallback(\n    (voteId, voter, outcome, salt) => {\n      return processRequests([\n        {\n          action: () => votingContract.leak(voteId, voter, outcome, salt),\n          description: radspec[actions.LEAK_VOTE]({ voteId, voter }),\n          type: actions.LEAK_VOTE,\n        },\n      ])\n    },\n    [processRequests, votingContract]\n  )\n\n  const approveFeeDeposit = useCallback(\n    value => {\n      return {\n        action: () =>\n          feeTokenContract.approve(disputeManagerContract.address, value),\n        description: radspec[actions.APPROVE_FEE_DEPOSIT]({\n          amount: formatUnits(value),\n        }),\n        type: actions.APPROVE_FEE_DEPOSIT,\n      }\n    },\n    [disputeManagerContract, feeTokenContract]\n  )\n\n  // Appeal round of dispute\n  const appeal = useCallback(\n    (disputeId, roundId, ruling) => {\n      return {\n        action: () =>\n          disputeManagerContract.createAppeal(disputeId, roundId, ruling, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.APPEAL_RULING]({\n          disputeId,\n          roundId,\n          ruling,\n        }),\n        type: actions.APPEAL_RULING,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  // Confirm appeal round of dispute\n  const confirmAppeal = useCallback(\n    (disputeId, roundId, ruling) => {\n      return {\n        action: () =>\n          disputeManagerContract.confirmAppeal(disputeId, roundId, ruling, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.CONFIRM_APPEAL]({\n          disputeId,\n          roundId,\n          ruling,\n        }),\n        type: actions.CONFIRM_APPEAL,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  // General function that will appeal or confirm appeal a given round on a given dispute\n  const appealRound = useCallback(\n    (disputeId, roundId, ruling, requiredDeposit, allowance, confirm) => {\n      const requestQueue = []\n\n      // Check if requires pre-transactions\n      if (allowance.lt(requiredDeposit)) {\n        // Some ERC20s don't allow setting a new allowance if the current allowance is positive\n        if (!allowance.eq(0)) {\n          // Reset allowance\n          requestQueue.push({\n            ...approveFeeDeposit(0),\n            ensureConfirmation: true,\n          })\n        }\n\n        // Approve fee deposit for appealing\n        requestQueue.push({\n          ...approveFeeDeposit(requiredDeposit),\n          ensureConfirmation: true,\n        })\n      }\n\n      const request = confirm ? confirmAppeal : appeal\n\n      requestQueue.push(request(disputeId, roundId, ruling))\n\n      return processRequests(requestQueue)\n    },\n    [appeal, approveFeeDeposit, confirmAppeal, processRequests]\n  )\n\n  const executeRuling = useCallback(\n    disputeId => {\n      return processRequests([\n        {\n          action: () =>\n            aragonCourtContract.executeRuling(disputeId, {\n              gasLimit: GAS_LIMIT,\n            }),\n          description: radspec[actions.EXECUTE_RULING]({ disputeId }),\n          type: actions.EXECUTE_RULING,\n        },\n      ])\n    },\n    [aragonCourtContract, processRequests]\n  )\n\n  return {\n    appealRound,\n    requestAutoReveal,\n    commit,\n    draft,\n    executeRuling,\n    leak,\n    reveal,\n  }\n}\n\nexport function useHeartbeat() {\n  const { addActivity } = useActivity()\n  const { addRequests } = useRequestQueue()\n  const aragonCourtContract = useCourtContract(\n    CourtModuleType.AragonCourt,\n    aragonCourtAbi\n  )\n\n  const heartbeatRequest = useCallback(\n    (transitions, ensureConfirmation = false) => {\n      const description = radspec[actions.HEARTBEAT]({ transitions })\n\n      return {\n        intent: () =>\n          addActivity(\n            aragonCourtContract.heartbeat(transitions),\n            actions.HEARTBEAT,\n            description\n          ),\n        description,\n        isTx: true,\n        ensureConfirmation,\n      }\n    },\n    [addActivity, aragonCourtContract]\n  )\n\n  const heartbeat = useCallback(\n    transitions => {\n      return addRequests(heartbeatRequest(transitions))\n    },\n    [addRequests, heartbeatRequest]\n  )\n\n  return { heartbeat, heartbeatRequest }\n}\n\nexport function useRewardActions() {\n  const processRequests = useRequestProcessor()\n  const { claimFees } = useCourtSubscriptionActions()\n  const disputeManagerContract = useCourtContract(\n    CourtModuleType.DisputeManager,\n    disputeManagerAbi\n  )\n\n  const treasuryContract = useCourtContract(\n    CourtModuleType.Treasury,\n    courtTreasuryAbi\n  )\n\n  const settleReward = useCallback(\n    (disputeId, roundId, juror) => {\n      return {\n        action: () =>\n          disputeManagerContract.settleReward(disputeId, roundId, juror, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.SETTLE_REWARD]({ roundId, disputeId }),\n        type: actions.SETTLE_REWARD,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  const settleAppealDeposit = useCallback(\n    (disputeId, roundId) => {\n      return {\n        action: () =>\n          disputeManagerContract.settleAppealDeposit(disputeId, roundId, {\n            gasLimit: GAS_LIMIT,\n          }),\n        description: radspec[actions.SETTLE_APPEAL_DEPOSIT]({\n          roundId,\n          disputeId,\n        }),\n        type: actions.SETTLE_APPEAL_DEPOSIT,\n      }\n    },\n    [disputeManagerContract]\n  )\n\n  const withdraw = useCallback(\n    (token, to, amount) => {\n      return {\n        action: () =>\n          treasuryContract.withdraw(token, to, amount, {\n            gasLimit: ANJ_ACTIONS_GAS_LIMIT,\n          }),\n        description: radspec[actions.CLAIM_REWARDS]({\n          amount: formatUnits(amount),\n        }),\n        type: actions.CLAIM_REWARDS,\n      }\n    },\n    [treasuryContract]\n  )\n\n  const claimRewards = useCallback(\n    (\n      account,\n      arbitrableFees,\n      appealFees,\n      treasuryFees,\n      subscriptionFees,\n      feeTokenAddress\n    ) => {\n      const requestQueue = []\n\n      // Claim all arbitrable fee rewards\n      for (const arbitrableFee of arbitrableFees) {\n        const { disputeId, rounds } = arbitrableFee\n        for (const roundId of rounds) {\n          requestQueue.push(settleReward(disputeId, roundId, account))\n        }\n      }\n\n      // Claim all appeal fee rewards\n      for (const appealFee of appealFees) {\n        const { disputeId, rounds } = appealFee\n        for (const roundId of rounds) {\n          requestQueue.push(settleAppealDeposit(disputeId, roundId))\n        }\n      }\n\n      // If we have settlements to do, then we'll make sure that the last\n      // settlement is confirmed before withdrawing total fees from the treasury\n      if (requestQueue.length > 0) {\n        const lastSettlement = requestQueue.pop()\n        requestQueue.push({\n          ...lastSettlement,\n          ensureConfirmation: true,\n        })\n      }\n\n      // Withdraw funds from treasury\n      if (treasuryFees.gt(0)) {\n        requestQueue.push(withdraw(feeTokenAddress, account, treasuryFees))\n      }\n\n      // Claim subscription fees\n      for (const subscriptionFee of subscriptionFees) {\n        requestQueue.push(claimFees(subscriptionFee.periodId))\n      }\n\n      return processRequests(requestQueue)\n    },\n    [claimFees, processRequests, settleAppealDeposit, settleReward, withdraw]\n  )\n\n  return { claimRewards }\n}\n\nexport function useCourtSubscriptionActions() {\n  const courtSubscriptionsContract = useCourtContract(\n    CourtModuleType.Subscriptions,\n    courtSubscriptionsAbi\n  )\n\n  const claimFees = useCallback(\n    periodId => {\n      return {\n        action: () => courtSubscriptionsContract.claimFees(periodId),\n        description: radspec[actions.CLAIM_SUBSCRIPTION_FEES]({\n          periodId,\n        }),\n        type: actions.CLAIM_SUBSCRIPTION_FEES,\n      }\n    },\n    [courtSubscriptionsContract]\n  )\n\n  const getJurorShare = useCallback(\n    (juror, periodId) => {\n      return courtSubscriptionsContract.getJurorShare(juror, periodId)\n    },\n    [courtSubscriptionsContract]\n  )\n\n  const getters = useMemo(\n    () => (courtSubscriptionsContract ? { getJurorShare } : null),\n    [courtSubscriptionsContract, getJurorShare]\n  )\n\n  return {\n    claimFees,\n    getters,\n  }\n}\n\n/**\n *\n * @param {string} disputeId id of the dispute\n * @param {string} roundId id of the round\n * @returns {Object} appeal deposit and confirm appeal deposit amounts\n */\nexport function useAppealDeposits(disputeId, roundId) {\n  const [appealDeposits, setAppealDeposits] = useState({\n    amounts: [bigNum(0), bigNum(0)],\n    error: false,\n  })\n\n  const disputeManagerContract = useCourtContract(\n    CourtModuleType.DisputeManager,\n    disputeManagerAbi\n  )\n\n  useEffect(() => {\n    let cancelled = false\n\n    const fetchNextRoundDetails = async () => {\n      if (!disputeManagerContract) {\n        return\n      }\n\n      retryMax(() =>\n        disputeManagerContract\n          .getNextRoundDetails(disputeId, roundId)\n          .then(nextRound => {\n            const appealDeposit = nextRound[6]\n            const confirmAppealDeposit = nextRound[7]\n\n            if (!cancelled) {\n              setAppealDeposits({\n                amounts: [appealDeposit, confirmAppealDeposit],\n                error: false,\n              })\n            }\n          })\n          .catch(err => {\n            captureException(err)\n            if (!cancelled) {\n              setAppealDeposits(appealDeposits => ({\n                ...appealDeposits,\n                error: true,\n              }))\n            }\n          })\n      )\n    }\n\n    fetchNextRoundDetails()\n\n    return () => {\n      cancelled = true\n    }\n  }, [disputeId, disputeManagerContract, roundId])\n\n  return [appealDeposits.amounts, appealDeposits.error]\n}\n\nexport function useFeeBalanceOf(account) {\n  const [feeBalance, setFeeBalance] = useState({\n    amount: bigNum(0),\n    error: false,\n  })\n\n  const feeTokenContract = useFeeTokenContract()\n\n  useEffect(() => {\n    let cancelled = false\n\n    const getFeeBalance = async () => {\n      if (!feeTokenContract) return\n\n      retryMax(() => feeTokenContract.balanceOf(account))\n        .then(balance => {\n          if (!cancelled) {\n            setFeeBalance({ amount: balance, error: false })\n          }\n        })\n        .catch(err => {\n          captureException(err)\n          if (!cancelled) {\n            setFeeBalance(feeBalance => ({\n              ...feeBalance,\n              error: true,\n            }))\n          }\n        })\n    }\n\n    getFeeBalance()\n\n    return () => {\n      cancelled = true\n    }\n  }, [account, feeTokenContract])\n\n  return [feeBalance.amount, feeBalance.error]\n}\n\nexport function useAppealFeeAllowance(owner) {\n  const [allowance, setAllowance] = useState({\n    amount: bigNum(0),\n    error: false,\n  })\n\n  const courtConfig = useCourtConfig()\n  const disputeManagerAddress = getModuleAddress(\n    courtConfig.modules,\n    CourtModuleType.DisputeManager\n  )\n  const feeTokenContract = useFeeTokenContract()\n\n  useEffect(() => {\n    let cancelled = false\n\n    const getFeeAllowance = async () => {\n      if (!feeTokenContract) return\n\n      retryMax(() => feeTokenContract.allowance(owner, disputeManagerAddress))\n        .then(allowance => {\n          if (!cancelled) {\n            setAllowance({ amount: allowance, error: false })\n          }\n        })\n        .catch(err => {\n          captureException(err)\n          if (!cancelled) {\n            setAllowance(allowance => ({\n              ...allowance,\n              error: true,\n            }))\n          }\n        })\n    }\n\n    getFeeAllowance()\n\n    return () => {\n      cancelled = true\n    }\n  }, [disputeManagerAddress, feeTokenContract, owner])\n\n  return [allowance.amount, allowance.error]\n}\n\nexport function useActiveBalanceOfAt(juror, termId) {\n  const jurorRegistryContract = useCourtContract(\n    CourtModuleType.JurorsRegistry,\n    jurorRegistryAbi\n  )\n  const [activeBalance, setActiveBalance] = useState({\n    amount: bigNum(-1),\n    error: false,\n  })\n\n  useEffect(() => {\n    let cancelled = false\n\n    const getActiveBalanceOfAt = async () => {\n      if (!jurorRegistryContract) return\n\n      retryMax(() => jurorRegistryContract.activeBalanceOfAt(juror, termId))\n        .then(balance => {\n          if (!cancelled) {\n            setActiveBalance({ amount: balance, error: false })\n          }\n        })\n        .catch(err => {\n          captureException(err)\n          if (!cancelled) {\n            setActiveBalance(balance => ({\n              ...balance,\n              error: true,\n            }))\n          }\n        })\n    }\n\n    getActiveBalanceOfAt()\n\n    return () => {\n      cancelled = true\n    }\n  }, [juror, jurorRegistryContract, termId])\n\n  return [activeBalance.amount, activeBalance.error]\n}\n\nexport function useTotalANTStakedPolling(timeout = 1000) {\n  const [totalANTStaked, setTotalANTStaked] = useState(bigNum(-1))\n  const [error, setError] = useState(false)\n  const { address: antAddress } = getKnownToken('ANT') || {}\n  const antContract = useContractReadOnly(antAddress, tokenAbi)\n\n  // We are starting in 0 in order to immediately make the fetch call\n  const controlledTimeout = useRef(0)\n\n  useEffect(() => {\n    let cancelled = false\n    let timeoutId\n\n    // This stat is only relevant and shown on mainnet\n    if (!networkReserveAddress) {\n      return setError(true)\n    }\n\n    if (!antContract) {\n      return\n    }\n\n    const fetchTotalANTBalance = () => {\n      timeoutId = setTimeout(() => {\n        const vaultBalancePromise = antContract.balanceOf(networkReserveAddress)\n\n        return vaultBalancePromise\n          .then(antInVault => {\n            if (!cancelled) {\n              setTotalANTStaked(antInVault)\n            }\n          })\n          .catch(err => {\n            console.error(`Error fetching balance: ${err} retrying...`)\n            setError(true)\n          })\n          .finally(() => {\n            if (!cancelled) {\n              clearTimeout(timeoutId)\n              controlledTimeout.current = timeout\n              fetchTotalANTBalance()\n            }\n          })\n      }, controlledTimeout.current)\n    }\n\n    fetchTotalANTBalance()\n\n    return () => {\n      cancelled = true\n      clearTimeout(timeoutId)\n    }\n  }, [antContract, controlledTimeout, timeout])\n\n  return [totalANTStaked, error]\n}\n"]},"metadata":{},"sourceType":"module"}