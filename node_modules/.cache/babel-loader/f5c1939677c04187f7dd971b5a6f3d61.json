{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport { ipfsGet, getIpfsCidFromUri } from '../lib/ipfs-utils';\nimport { ERROR_TYPES } from '../types/evidences-status-types';\nexport default function useEvidences(dispute, rawEvidences) {\n  // Contains valid evidences + errored evidences\n  const [evidences, setEvidences] = useState([]);\n  const [fetchingEvidences, setFetchingEvidences] = useState(true); // Contains valid evidences only\n\n  const evidencesCache = useRef(new Map()); // Fetch an evidence data from IPFS if needed, prepares the evidence object,\n  // and cache it if valid. If invalid, returns an errored evidence object.\n\n  const fetchEvidence = useCallback(async rawEvidence => {\n    const {\n      id,\n      data: uriOrData,\n      submitter,\n      createdAt\n    } = rawEvidence;\n\n    if (evidencesCache.current.has(id)) {\n      return evidencesCache.current.get(id);\n    }\n\n    const baseEvidence = {\n      id,\n      rawMetadata: uriOrData,\n      metadata: null,\n      defendant: '',\n      agreementText: '',\n      submitter,\n      createdAt,\n      error: false\n    };\n    const cid = getIpfsCidFromUri(uriOrData); // Not an IPFS URI\n\n    if (!cid) {\n      evidencesCache.current.set(id, { ...baseEvidence,\n        metadata: uriOrData\n      });\n      return evidencesCache.current.get(id);\n    }\n\n    const {\n      data,\n      error\n    } = await ipfsGet(cid);\n\n    if (error) {\n      return { ...baseEvidence,\n        error: ERROR_TYPES.ERROR_FETCHING_IPFS\n      };\n    }\n\n    const evidenceProcessed = { ...baseEvidence,\n      metadata: data\n    };\n    evidencesCache.current.set(id, evidenceProcessed);\n    return evidenceProcessed;\n  }, []);\n  useEffect(() => {\n    let cancelled = false;\n\n    const updateEvidences = async () => {\n      await Promise.all(rawEvidences.map(async rawEvidence => {\n        var _dispute$disputable;\n\n        const evidence = await fetchEvidence(rawEvidence);\n\n        if (cancelled || // First evidence submitted by defendant is treated as the dispute description\n        evidence.rawMetadata === ((_dispute$disputable = dispute.disputable) === null || _dispute$disputable === void 0 ? void 0 : _dispute$disputable.actionContext)) {\n          return;\n        }\n\n        setEvidences(() => {\n          // already there\n          if (evidences.findIndex(_evidence => _evidence.id === evidence.id) > -1) {\n            return evidences;\n          }\n\n          return [...evidences, evidence].sort((evidenceA, evidenceB) => evidenceA.createdAt - evidenceB.createdAt);\n        });\n      }));\n      setFetchingEvidences(false);\n    };\n\n    updateEvidences();\n    return () => {\n      cancelled = true;\n    };\n  }, [dispute.disputable, evidences, fetchEvidence, rawEvidences]);\n  return [evidences, fetchingEvidences];\n}","map":{"version":3,"sources":["/Users/saleemfareed/oneds/court-dashboard/src/hooks/useEvidences.js"],"names":["useCallback","useEffect","useRef","useState","ipfsGet","getIpfsCidFromUri","ERROR_TYPES","useEvidences","dispute","rawEvidences","evidences","setEvidences","fetchingEvidences","setFetchingEvidences","evidencesCache","Map","fetchEvidence","rawEvidence","id","data","uriOrData","submitter","createdAt","current","has","get","baseEvidence","rawMetadata","metadata","defendant","agreementText","error","cid","set","ERROR_FETCHING_IPFS","evidenceProcessed","cancelled","updateEvidences","Promise","all","map","evidence","disputable","actionContext","findIndex","_evidence","sort","evidenceA","evidenceB"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\nimport { ipfsGet, getIpfsCidFromUri } from '../lib/ipfs-utils'\nimport { ERROR_TYPES } from '../types/evidences-status-types'\n\nexport default function useEvidences(dispute, rawEvidences) {\n  // Contains valid evidences + errored evidences\n  const [evidences, setEvidences] = useState([])\n  const [fetchingEvidences, setFetchingEvidences] = useState(true)\n\n  // Contains valid evidences only\n  const evidencesCache = useRef(new Map())\n\n  // Fetch an evidence data from IPFS if needed, prepares the evidence object,\n  // and cache it if valid. If invalid, returns an errored evidence object.\n  const fetchEvidence = useCallback(async rawEvidence => {\n    const { id, data: uriOrData, submitter, createdAt } = rawEvidence\n\n    if (evidencesCache.current.has(id)) {\n      return evidencesCache.current.get(id)\n    }\n\n    const baseEvidence = {\n      id,\n      rawMetadata: uriOrData,\n      metadata: null,\n      defendant: '',\n      agreementText: '',\n      submitter,\n      createdAt,\n      error: false,\n    }\n\n    const cid = getIpfsCidFromUri(uriOrData)\n\n    // Not an IPFS URI\n    if (!cid) {\n      evidencesCache.current.set(id, { ...baseEvidence, metadata: uriOrData })\n      return evidencesCache.current.get(id)\n    }\n\n    const { data, error } = await ipfsGet(cid)\n\n    if (error) {\n      return { ...baseEvidence, error: ERROR_TYPES.ERROR_FETCHING_IPFS }\n    }\n\n    const evidenceProcessed = {\n      ...baseEvidence,\n      metadata: data,\n    }\n    evidencesCache.current.set(id, evidenceProcessed)\n\n    return evidenceProcessed\n  }, [])\n\n  useEffect(() => {\n    let cancelled = false\n\n    const updateEvidences = async () => {\n      await Promise.all(\n        rawEvidences.map(async rawEvidence => {\n          const evidence = await fetchEvidence(rawEvidence)\n          if (\n            cancelled ||\n            // First evidence submitted by defendant is treated as the dispute description\n            evidence.rawMetadata === dispute.disputable?.actionContext\n          ) {\n            return\n          }\n          setEvidences(() => {\n            // already there\n            if (\n              evidences.findIndex(_evidence => _evidence.id === evidence.id) >\n              -1\n            ) {\n              return evidences\n            }\n\n            return [...evidences, evidence].sort(\n              (evidenceA, evidenceB) =>\n                evidenceA.createdAt - evidenceB.createdAt\n            )\n          })\n        })\n      )\n      setFetchingEvidences(false)\n    }\n\n    updateEvidences()\n\n    return () => {\n      cancelled = true\n    }\n  }, [dispute.disputable, evidences, fetchEvidence, rawEvidences])\n\n  return [evidences, fetchingEvidences]\n}\n"]},"metadata":{},"sourceType":"module"}