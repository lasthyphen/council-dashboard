{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.ethers = {}));\n})(this, function (exports) {\n  'use strict';\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function commonjsRequire() {\n    throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');\n  }\n\n  function unwrapExports(x) {\n    return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n  }\n\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n\n  function getCjsExportFromNamespace(n) {\n    return n && n['default'] || n;\n  }\n\n  var _nodeResolve_empty = {};\n\n  var _nodeResolve_empty$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    'default': _nodeResolve_empty\n  });\n\n  var require$$0 = getCjsExportFromNamespace(_nodeResolve_empty$1);\n  var bn = createCommonjsModule(function (module) {\n    (function (module, exports) {\n      'use strict'; // Utils\n\n      function assert(val, msg) {\n        if (!val) throw new Error(msg || 'Assertion failed');\n      } // Could use `inherits` module, but don't want to move from single file\n      // architecture yet.\n\n\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n\n        var TempCtor = function () {};\n\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      } // BN\n\n\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n\n        this.negative = 0;\n        this.words = null;\n        this.length = 0; // Reduction context\n\n        this.red = null;\n\n        if (number !== null) {\n          if (base === 'le' || base === 'be') {\n            endian = base;\n            base = 10;\n          }\n\n          this._init(number || 0, base || 10, endian || 'be');\n        }\n      }\n\n      if (typeof module === 'object') {\n        module.exports = BN;\n      } else {\n        exports.BN = BN;\n      }\n\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer;\n\n      try {\n        Buffer = require$$0.Buffer;\n      } catch (e) {}\n\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n\n        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n      };\n\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n      };\n\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === 'number') {\n          return this._initNumber(number, base, endian);\n        }\n\n        if (typeof number === 'object') {\n          return this._initArray(number, base, endian);\n        }\n\n        if (base === 'hex') {\n          base = 16;\n        }\n\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, '');\n        var start = 0;\n\n        if (number[0] === '-') {\n          start++;\n        }\n\n        if (base === 16) {\n          this._parseHex(number, start);\n        } else {\n          this._parseBase(number, base, start);\n        }\n\n        if (number[0] === '-') {\n          this.negative = 1;\n        }\n\n        this.strip();\n        if (endian !== 'le') return;\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n\n        if (number < 0x4000000) {\n          this.words = [number & 0x3ffffff];\n          this.length = 1;\n        } else if (number < 0x10000000000000) {\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];\n          this.length = 2;\n        } else {\n          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];\n          this.length = 3;\n        }\n\n        if (endian !== 'le') return; // Reverse the bytes\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === 'number');\n\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w;\n        var off = 0;\n\n        if (endian === 'be') {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === 'le') {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n\n        return this.strip();\n      };\n\n      function parseHex(str, start, end) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r <<= 4; // 'a' - 'f'\n\n          if (c >= 49 && c <= 54) {\n            r |= c - 49 + 0xa; // 'A' - 'F'\n          } else if (c >= 17 && c <= 22) {\n            r |= c - 17 + 0xa; // '0' - '9'\n          } else {\n            r |= c & 0xf;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseHex = function _parseHex(number, start) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w; // Scan 24-bit chunks and add them to the number\n\n        var off = 0;\n\n        for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n          w = parseHex(number, i, i + 6);\n          this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n          off += 24;\n\n          if (off >= 26) {\n            off -= 26;\n            j++;\n          }\n        }\n\n        if (i + 6 !== start) {\n          w = parseHex(number, start, i + 6);\n          this.words[j] |= w << off & 0x3ffffff;\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n        }\n\n        this.strip();\n      };\n\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul; // 'a'\n\n          if (c >= 49) {\n            r += c - 49 + 0xa; // 'A'\n          } else if (c >= 17) {\n            r += c - 17 + 0xa; // '0' - '9'\n          } else {\n            r += c;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [0];\n        this.length = 1; // Find length of limb in base\n\n        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n          limbLen++;\n        }\n\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n\n          this.imuln(pow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n      };\n\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n\n        return this;\n      }; // Remove leading `0` from `this`\n\n\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n\n        return this._normSign();\n      };\n\n      BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n\n        return this;\n      };\n\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n      };\n      /*\n       var zeros = [];\n      var groupSizes = [];\n      var groupBases = [];\n       var s = '';\n      var i = -1;\n      while (++i < BN.wordSize) {\n        zeros[i] = s;\n        s += '0';\n      }\n      groupSizes[0] = 0;\n      groupSizes[1] = 0;\n      groupBases[0] = 0;\n      groupBases[1] = 0;\n      var base = 2 - 1;\n      while (++base < 36 + 1) {\n        var groupSize = 0;\n        var groupBase = 1;\n        while (groupBase < (1 << BN.wordSize) / base) {\n          groupBase *= base;\n          groupSize += 1;\n        }\n        groupSizes[base] = groupSize;\n        groupBases[base] = groupBase;\n      }\n       */\n\n\n      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\n      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\n      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];\n\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n\n        if (base === 16 || base === 'hex') {\n          out = '';\n          var off = 0;\n          var carry = 0;\n\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 0xffffff).toString(16);\n            carry = w >>> 24 - off & 0xffffff;\n\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n\n            off += 2;\n\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);\n\n          var groupBase = groupBases[base];\n          out = '';\n          var c = this.clone();\n          c.negative = 0;\n\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n\n          if (this.isZero()) {\n            out = '0' + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        assert(false, 'Base should be between 2 and 36');\n      };\n\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n\n        if (this.length === 2) {\n          ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n          // NOTE: at this stage it is known that the top bit is set\n          ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n          assert(false, 'Number can only safely store up to 53 bits');\n        }\n\n        return this.negative !== 0 ? -ret : ret;\n      };\n\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== 'undefined');\n        return this.toArrayLike(Buffer, endian, length);\n      };\n\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, 'byte array longer than desired length');\n        assert(reqLength > 0, 'Requested array length <= 0');\n        this.strip();\n        var littleEndian = endian === 'le';\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n\n        if (!littleEndian) {\n          // Assume big-endian\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[i] = b;\n          }\n\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n\n        return res;\n      };\n\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n\n          if (t >= 0x1000) {\n            r += 13;\n            t >>>= 13;\n          }\n\n          if (t >= 0x40) {\n            r += 7;\n            t >>>= 7;\n          }\n\n          if (t >= 0x8) {\n            r += 4;\n            t >>>= 4;\n          }\n\n          if (t >= 0x02) {\n            r += 2;\n            t >>>= 2;\n          }\n\n          return r + t;\n        };\n      }\n\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n\n        if ((t & 0x1fff) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n\n        if ((t & 0x7f) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n\n        if ((t & 0xf) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n\n        if ((t & 0x3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n\n        if ((t & 0x1) === 0) {\n          r++;\n        }\n\n        return r;\n      }; // Return number of used bits in a BN\n\n\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n\n        var hi = this._countBits(w);\n\n        return (this.length - 1) * 26 + hi;\n      };\n\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n\n        return w;\n      } // Number of trailing zero bits\n\n\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n\n          r += b;\n          if (b !== 26) break;\n        }\n\n        return r;\n      };\n\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      }; // Return negative clone of `this`\n\n\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n\n        return this;\n      }; // Or `num` with `this` in-place\n\n\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      }; // Or `num` with `this`\n\n\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      }; // And `num` with `this` in-place\n\n\n      BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n\n        this.length = b.length;\n        return this.strip();\n      };\n\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      }; // And `num` with `this`\n\n\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      }; // Xor `num` with `this` in-place\n\n\n      BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = a.length;\n        return this.strip();\n      };\n\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      }; // Xor `num` with `this`\n\n\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      }; // Not ``this`` with ``width`` bitwidth\n\n\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === 'number' && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26; // Extend the buffer with leading zeroes\n\n        this._expand(bytesNeeded);\n\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        } // Handle complete words\n\n\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 0x3ffffff;\n        } // Handle the residue\n\n\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        } // And remove leading zeroes\n\n\n        return this.strip();\n      };\n\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      }; // Set `bit` of `this`\n\n\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n\n        this._expand(off + 1);\n\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n\n        return this.strip();\n      }; // Add `num` to `this` in-place\n\n\n      BN.prototype.iadd = function iadd(num) {\n        var r; // negative + positive\n\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign(); // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        } // a.length > b.length\n\n\n        var a, b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        this.length = a.length;\n\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++; // Copy the rest of the words\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        return this;\n      }; // Add `num` to `this`\n\n\n      BN.prototype.add = function add(num) {\n        var res;\n\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      }; // Subtract `num` from `this` in-place\n\n\n      BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign(); // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        } // At this point both numbers are positive\n\n\n        var cmp = this.cmp(num); // Optimization - zeroify\n\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        } // a > b\n\n\n        var a, b;\n\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        } // Copy rest of the words\n\n\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = Math.max(this.length, i);\n\n        if (a !== this) {\n          this.negative = 1;\n        }\n\n        return this.strip();\n      }; // Subtract `num` from `this`\n\n\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n\n      function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)\n\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n\n        for (var k = 1; k < len; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = carry >>> 26;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 0x4000000 | 0;\n            rword = r & 0x3ffffff;\n          }\n\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      } // TODO(indutny): it may be reasonable to omit it for users who don't need\n      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n      // multiplication (like elliptic secp256k1).\n\n\n      var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */\n\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */\n\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */\n\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */\n\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */\n\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */\n\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */\n\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */\n\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */\n\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */\n\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */\n\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */\n\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */\n\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */\n\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */\n\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */\n\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */\n\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */\n\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */\n\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n\n        return out;\n      }; // Polyfill comb\n\n\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n\n      function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n\n        for (var k = 0; k < out.length - 1; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 0x3ffffff;\n            ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 0x3ffffff;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 0x3ffffff;\n          }\n\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      }\n\n      function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n      }\n\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n\n        return res;\n      }; // Cooley-Tukey algorithm for FFT\n      // slightly revisited to rely on looping instead of recursion\n\n\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n\n        return t;\n      }; // Returns binary-reversed representation of `x`\n\n\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n\n        return rb;\n      }; // Performs \"tweedling\" phase, therefore 'emulating'\n      // behaviour of the recursive algorithm\n\n\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              /* jshint maxdepth : false */\n\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n\n        return 1 << i + 1 + odd;\n      };\n\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 0x3ffffff;\n\n          if (w < 0x4000000) {\n            carry = 0;\n          } else {\n            carry = w / 0x4000000 | 0;\n          }\n        }\n\n        return ws;\n      };\n\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 0x1fff;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 0x1fff;\n          carry = carry >>> 13;\n        } // Pad with zeroes\n\n\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n      };\n\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n\n        return ph;\n      };\n\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n\n        var _ = this.stub(N);\n\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      }; // Multiply `this` by `num`\n\n\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      }; // Multiply employing FFT\n\n\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      }; // In-place Multiplication\n\n\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000); // Carry\n\n        var carry = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n          carry >>= 26;\n          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum\n\n          carry += lo >>> 26;\n          this.words[i] = lo & 0x3ffffff;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      }; // `this` * `this`\n\n\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      }; // `this` * `this` in-place\n\n\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      }; // Math.pow(`this`, `num`)\n\n\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1); // Skip leading zeroes\n\n        var res = this;\n\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0) break;\n        }\n\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0) continue;\n            res = res.mul(q);\n          }\n        }\n\n        return res;\n      }; // Shift-left in-place\n\n\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n\n        if (r !== 0) {\n          var carry = 0;\n\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n\n          this.length += s;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      }; // Shift-right in-place\n      // NOTE: `hint` is a lowest bit before trailing zeroes\n      // NOTE: if `extended` is present - it will be filled with destroyed bits\n\n\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var h;\n\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h); // Extended mode, copy masked part\n\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n\n          maskedWords.length = s;\n        }\n\n        if (s === 0) {// No-op, we should not move anything at all\n        } else if (this.length > s) {\n          this.length -= s;\n\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n\n        var carry = 0;\n\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        } // Push carried bits as a mask\n\n\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      }; // Shift-left\n\n\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      }; // Shift-right\n\n\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      }; // Test if n bit is set\n\n\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) return false; // Check bit and return\n\n        var w = this.words[s];\n        return !!(w & q);\n      }; // Return only lowers bits of number (in-place)\n\n\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n        if (this.length <= s) {\n          return this;\n        }\n\n        if (r !== 0) {\n          s++;\n        }\n\n        this.length = Math.min(s, this.length);\n\n        if (r !== 0) {\n          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n\n        return this.strip();\n      }; // Return only lowers bits of number\n\n\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      }; // Add plain number `num` to `this`\n\n\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num); // Possible sign change\n\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        } // Add without checks\n\n\n        return this._iaddn(num);\n      };\n\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num; // Carry\n\n        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n          this.words[i] -= 0x4000000;\n\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      }; // Subtract plain number `num` from `this`\n\n\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n\n        this.words[0] -= num;\n\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          // Carry\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 0x4000000;\n            this.words[i + 1] -= 1;\n          }\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n\n        this._expand(len);\n\n        var w;\n        var carry = 0;\n\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 0x3ffffff;\n          carry = (w >> 26) - (right / 0x4000000 | 0);\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        if (carry === 0) return this.strip(); // Subtraction overflow\n\n        assert(carry === -1);\n        carry = 0;\n\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 0x3ffffff;\n        }\n\n        this.negative = 1;\n        return this.strip();\n      };\n\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num; // Normalize\n\n        var bhi = b.words[b.length - 1] | 0;\n\n        var bhiBits = this._countBits(bhi);\n\n        shift = 26 - bhiBits;\n\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        } // Initialize quotient\n\n\n        var m = a.length - b.length;\n        var q;\n\n        if (mode !== 'mod') {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n\n        if (diff.negative === 0) {\n          a = diff;\n\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n          // (0x7ffffff)\n\n          qj = Math.min(qj / bhi | 0, 0x3ffffff);\n\n          a._ishlnsubmul(b, qj, j);\n\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n\n            a._ishlnsubmul(b, 1, j);\n\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n\n        if (q) {\n          q.strip();\n        }\n\n        a.strip(); // Denormalize\n\n        if (mode !== 'div' && shift !== 0) {\n          a.iushrn(shift);\n        }\n\n        return {\n          div: q || null,\n          mod: a\n        };\n      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,\n      //       to `div` to request div only, or be absent to\n      //       request both div & mod\n      //       2) `positive` is true if unsigned mod is requested\n\n\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n\n        var div, mod, res;\n\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n\n          return {\n            div: div,\n            mod: mod\n          };\n        }\n\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          return {\n            div: div,\n            mod: res.mod\n          };\n        }\n\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n\n          return {\n            div: res.div,\n            mod: mod\n          };\n        } // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n\n\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        } // Very short reduction\n\n\n        if (num.length === 1) {\n          if (mode === 'div') {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n\n          if (mode === 'mod') {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n\n        return this._wordDiv(num, mode);\n      }; // Find `this` / `num`\n\n\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, 'div', false).div;\n      }; // Find `this` % `num`\n\n\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, 'mod', false).mod;\n      };\n\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, 'mod', true).mod;\n      }; // Find Round(`this` / `num`)\n\n\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num); // Fast case - exact division\n\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half); // Round down\n\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up\n\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n\n        return acc;\n      }; // In-place division by number\n\n\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 0x4000000;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        } // A * x + B * y = x\n\n\n        var A = new BN(1);\n        var B = new BN(0); // C * x + D * y = y\n\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n\n        var yp = y.clone();\n        var xp = x.clone();\n\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            x.iushrn(i);\n\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            y.iushrn(j);\n\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      }; // This is reduced incarnation of the binary EEA\n      // above, designated to invert members of the\n      // _prime_ fields F(p) at a maximal speed\n\n\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            a.iushrn(i);\n\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n\n              x1.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            b.iushrn(j);\n\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n\n              x2.iushrn(1);\n            }\n          }\n\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n\n        var res;\n\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n\n        return res;\n      };\n\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0; // Remove common factor of two\n\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n\n          var r = a.cmp(b);\n\n          if (r < 0) {\n            // Swap `a` and `b` to make `a` always bigger than `b`\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n\n          a.isub(b);\n        } while (true);\n\n        return b.iushln(shift);\n      }; // Invert number in the field F(num)\n\n\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      }; // And first word and num\n\n\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      }; // Increment at the bit position in-line\n\n\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === 'number');\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) {\n          this._expand(s + 1);\n\n          this.words[s] |= q;\n          return this;\n        } // Add bit and propagate, if needed\n\n\n        var carry = q;\n\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 0x3ffffff;\n          this.words[i] = w;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n\n          assert(num <= 0x3ffffff, 'Number is too big');\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Compare two numbers and return:\n      // 1 - if `this` > `num`\n      // 0 - if `this` == `num`\n      // -1 - if `this` < `num`\n\n\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Unsigned comparison\n\n\n      BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b) continue;\n\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n\n          break;\n        }\n\n        return res;\n      };\n\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      }; //\n      // A reduce context, could be using montgomery or something better, depending\n      // on the `m` itself.\n      //\n\n\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        assert(this.negative === 0, 'red works only with positives');\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, 'fromRed works only with numbers in reduction context');\n        return this.red.convertFrom(this);\n      };\n\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        return this._forceRed(ctx);\n      };\n\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, 'redAdd works only with red numbers');\n        return this.red.add(this, num);\n      };\n\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, 'redIAdd works only with red numbers');\n        return this.red.iadd(this, num);\n      };\n\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, 'redSub works only with red numbers');\n        return this.red.sub(this, num);\n      };\n\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, 'redISub works only with red numbers');\n        return this.red.isub(this, num);\n      };\n\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, 'redShl works only with red numbers');\n        return this.red.shl(this, num);\n      };\n\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.mul(this, num);\n      };\n\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.imul(this, num);\n      };\n\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, 'redSqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqr(this);\n      };\n\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, 'redISqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.isqr(this);\n      }; // Square root over p\n\n\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, 'redSqrt works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqrt(this);\n      };\n\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, 'redInvm works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.invm(this);\n      }; // Return negative clone of `this` % `red modulo`\n\n\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, 'redNeg works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.neg(this);\n      };\n\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, 'redPow(normalNum)');\n\n        this.red._verify1(this);\n\n        return this.red.pow(this, num);\n      }; // Prime numbers with efficient reduction\n\n\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      }; // Pseudo-Mersenne prime\n\n      function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n\n      MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== undefined) {\n            // r is BN v4 instance\n            r.strip();\n          } else {\n            // r is BN v5 instance\n            r._strip();\n          }\n        }\n\n        return r;\n      };\n\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n\n      function K256() {\n        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n      }\n\n      inherits(K256, MPrime);\n\n      K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n\n        output.length = outLen;\n\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        } // Shift by 9 limbs\n\n\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n\n      K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\n        var lo = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 0x3d1;\n          num.words[i] = lo & 0x3ffffff;\n          lo = w * 0x40 + (lo / 0x4000000 | 0);\n        } // Fast length reduction\n\n\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n\n        return num;\n      };\n\n      function P224() {\n        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n      }\n\n      inherits(P224, MPrime);\n\n      function P192() {\n        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n      }\n\n      inherits(P192, MPrime);\n\n      function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n      }\n\n      inherits(P25519, MPrime);\n\n      P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 0x13 + carry;\n          var lo = hi & 0x3ffffff;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n\n        return num;\n      }; // Exported mostly for testing purposes, use plain name instead\n\n\n      BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n\n        if (name === 'k256') {\n          prime = new K256();\n        } else if (name === 'p224') {\n          prime = new P224();\n        } else if (name === 'p192') {\n          prime = new P192();\n        } else if (name === 'p25519') {\n          prime = new P25519();\n        } else {\n          throw new Error('Unknown prime ' + name);\n        }\n\n        primes[name] = prime;\n        return prime;\n      }; //\n      // Base reduction engine\n      //\n\n\n      function Red(m) {\n        if (typeof m === 'string') {\n          var prime = BN._prime(m);\n\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), 'modulus must be greater than 1');\n          this.m = m;\n          this.prime = null;\n        }\n      }\n\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, 'red works only with positives');\n        assert(a.red, 'red works only with red numbers');\n      };\n\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, 'red works only with positives');\n        assert(a.red && a.red === b.red, 'red works only with red numbers');\n      };\n\n      Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n\n        return this.m.sub(a)._forceRed(this);\n      };\n\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n\n        var res = a.add(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n\n        var res = a.iadd(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.sub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.isub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n\n        return this.imod(a.ushln(num));\n      };\n\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.imul(b));\n      };\n\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.mul(b));\n      };\n\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1); // Fast case\n\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n\n\n        var q = this.m.subn(1);\n        var s = 0;\n\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg(); // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n\n        return r;\n      };\n\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n\n        if (start === 0) {\n          start = 26;\n        }\n\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n\n          start = 26;\n        }\n\n        return res;\n      };\n\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      }; //\n      // Montgomery method engine\n      //\n\n\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n\n      inherits(Mont, Red);\n\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })('object' === 'undefined' || module, commonjsGlobal);\n  });\n  var bn_1 = bn.BN;\n\n  var _version = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"logger/5.0.5\";\n  });\n\n  var _version$1 = unwrapExports(_version);\n\n  var _version_1 = _version.version;\n  var lib = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var _permanentCensorErrors = false;\n    var _censorErrors = false;\n    var LogLevels = {\n      debug: 1,\n      \"default\": 2,\n      info: 2,\n      warning: 3,\n      error: 4,\n      off: 5\n    };\n    var _logLevel = LogLevels[\"default\"];\n    var _globalLogger = null;\n\n    function _checkNormalize() {\n      try {\n        var missing_1 = []; // Make sure all forms of normalization are supported\n\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n          try {\n            if (\"test\".normalize(form) !== \"test\") {\n              throw new Error(\"bad normalize\");\n            }\n\n            ;\n          } catch (error) {\n            missing_1.push(form);\n          }\n        });\n\n        if (missing_1.length) {\n          throw new Error(\"missing \" + missing_1.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n          throw new Error(\"broken implementation\");\n        }\n      } catch (error) {\n        return error.message;\n      }\n\n      return null;\n    }\n\n    var _normalizeError = _checkNormalize();\n\n    var LogLevel;\n\n    (function (LogLevel) {\n      LogLevel[\"DEBUG\"] = \"DEBUG\";\n      LogLevel[\"INFO\"] = \"INFO\";\n      LogLevel[\"WARNING\"] = \"WARNING\";\n      LogLevel[\"ERROR\"] = \"ERROR\";\n      LogLevel[\"OFF\"] = \"OFF\";\n    })(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n\n    var ErrorCode;\n\n    (function (ErrorCode) {\n      ///////////////////\n      // Generic Errors\n      // Unknown Error\n      ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n      ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n      //   - operation\n\n      ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n      //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n      ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n      ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n      ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n      // Operational  Errors\n      // Buffer Overrun\n\n      ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n      //   - operation: the operation being executed\n      //   - fault: the reason this faulted\n\n      ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n      // Argument Errors\n      // Missing new operator to an object\n      //  - name: The name of the class\n\n      ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n      //   - argument: The argument name that was invalid\n      //   - value: The value of the argument\n\n      ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n      //   - count: The number of arguments received\n      //   - expectedCount: The number of arguments expected\n\n      ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n      //   - count: The number of arguments received\n      //   - expectedCount: The number of arguments expected\n\n      ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n      // Blockchain Errors\n      // Call exception\n      //  - transaction: the transaction\n      //  - address?: the contract address\n      //  - args?: The arguments passed into the function\n      //  - method?: The Solidity method signature\n      //  - errorSignature?: The EIP848 error signature\n      //  - errorArgs?: The EIP848 error parameters\n      //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n      ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficien funds (< value + gasLimit * gasPrice)\n      //   - transaction: the transaction attempted\n\n      ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n      //   - transaction: the transaction attempted\n\n      ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n      //   - transaction: the transaction attempted\n\n      ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n      //   - transaction: the transaction passed to estimateGas\n\n      ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    })(ErrorCode = exports.ErrorCode || (exports.ErrorCode = {}));\n\n    ;\n\n    var Logger =\n    /** @class */\n    function () {\n      function Logger(version) {\n        Object.defineProperty(this, \"version\", {\n          enumerable: true,\n          value: version,\n          writable: false\n        });\n      }\n\n      Logger.prototype._log = function (logLevel, args) {\n        var level = logLevel.toLowerCase();\n\n        if (LogLevels[level] == null) {\n          this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n\n        if (_logLevel > LogLevels[level]) {\n          return;\n        }\n\n        console.log.apply(console, args);\n      };\n\n      Logger.prototype.debug = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        this._log(Logger.levels.DEBUG, args);\n      };\n\n      Logger.prototype.info = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        this._log(Logger.levels.INFO, args);\n      };\n\n      Logger.prototype.warn = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        this._log(Logger.levels.WARNING, args);\n      };\n\n      Logger.prototype.makeError = function (message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n          return this.makeError(\"censored error\", code, {});\n        }\n\n        if (!code) {\n          code = Logger.errors.UNKNOWN_ERROR;\n        }\n\n        if (!params) {\n          params = {};\n        }\n\n        var messageDetails = [];\n        Object.keys(params).forEach(function (key) {\n          try {\n            messageDetails.push(key + \"=\" + JSON.stringify(params[key]));\n          } catch (error) {\n            messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n          }\n        });\n        messageDetails.push(\"code=\" + code);\n        messageDetails.push(\"version=\" + this.version);\n        var reason = message;\n\n        if (messageDetails.length) {\n          message += \" (\" + messageDetails.join(\", \") + \")\";\n        } // @TODO: Any??\n\n\n        var error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n          error[key] = params[key];\n        });\n        return error;\n      };\n\n      Logger.prototype.throwError = function (message, code, params) {\n        throw this.makeError(message, code, params);\n      };\n\n      Logger.prototype.throwArgumentError = function (message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n          argument: name,\n          value: value\n        });\n      };\n\n      Logger.prototype.assert = function (condition, message, code, params) {\n        if (!!condition) {\n          return;\n        }\n\n        this.throwError(message, code, params);\n      };\n\n      Logger.prototype.assertArgument = function (condition, message, name, value) {\n        if (!!condition) {\n          return;\n        }\n\n        this.throwArgumentError(message, name, value);\n      };\n\n      Logger.prototype.checkNormalize = function (message) {\n        if (message == null) {\n          message = \"platform missing String.prototype.normalize\";\n        }\n\n        if (_normalizeError) {\n          this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"String.prototype.normalize\",\n            form: _normalizeError\n          });\n        }\n      };\n\n      Logger.prototype.checkSafeUint53 = function (value, message) {\n        if (typeof value !== \"number\") {\n          return;\n        }\n\n        if (message == null) {\n          message = \"value not safe\";\n        }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n          this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"out-of-safe-range\",\n            value: value\n          });\n        }\n\n        if (value % 1) {\n          this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n            operation: \"checkSafeInteger\",\n            fault: \"non-integer\",\n            value: value\n          });\n        }\n      };\n\n      Logger.prototype.checkArgumentCount = function (count, expectedCount, message) {\n        if (message) {\n          message = \": \" + message;\n        } else {\n          message = \"\";\n        }\n\n        if (count < expectedCount) {\n          this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount\n          });\n        }\n\n        if (count > expectedCount) {\n          this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n            count: count,\n            expectedCount: expectedCount\n          });\n        }\n      };\n\n      Logger.prototype.checkNew = function (target, kind) {\n        if (target === Object || target == null) {\n          this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n            name: kind.name\n          });\n        }\n      };\n\n      Logger.prototype.checkAbstract = function (target, kind) {\n        if (target === kind) {\n          this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n            name: target.name,\n            operation: \"new\"\n          });\n        } else if (target === Object || target == null) {\n          this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n            name: kind.name\n          });\n        }\n      };\n\n      Logger.globalLogger = function () {\n        if (!_globalLogger) {\n          _globalLogger = new Logger(_version.version);\n        }\n\n        return _globalLogger;\n      };\n\n      Logger.setCensorship = function (censorship, permanent) {\n        if (!censorship && permanent) {\n          this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setCensorship\"\n          });\n        }\n\n        if (_permanentCensorErrors) {\n          if (!censorship) {\n            return;\n          }\n\n          this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setCensorship\"\n          });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n      };\n\n      Logger.setLogLevel = function (logLevel) {\n        var level = LogLevels[logLevel.toLowerCase()];\n\n        if (level == null) {\n          Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n          return;\n        }\n\n        _logLevel = level;\n      };\n\n      Logger.errors = ErrorCode;\n      Logger.levels = LogLevel;\n      return Logger;\n    }();\n\n    exports.Logger = Logger;\n  });\n  var index = unwrapExports(lib);\n  var lib_1 = lib.LogLevel;\n  var lib_2 = lib.ErrorCode;\n  var lib_3 = lib.Logger;\n\n  var _version$2 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"bytes/5.0.4\";\n  });\n\n  var _version$3 = unwrapExports(_version$2);\n\n  var _version_1$1 = _version$2.version;\n  var lib$1 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$2.version); ///////////////////////////////\n\n    function isHexable(value) {\n      return !!value.toHexString;\n    }\n\n    function addSlice(array) {\n      if (array.slice) {\n        return array;\n      }\n\n      array.slice = function () {\n        var args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n      };\n\n      return array;\n    }\n\n    function isBytesLike(value) {\n      return isHexString(value) && !(value.length % 2) || isBytes(value);\n    }\n\n    exports.isBytesLike = isBytesLike;\n\n    function isBytes(value) {\n      if (value == null) {\n        return false;\n      }\n\n      if (value.constructor === Uint8Array) {\n        return true;\n      }\n\n      if (typeof value === \"string\") {\n        return false;\n      }\n\n      if (value.length == null) {\n        return false;\n      }\n\n      for (var i = 0; i < value.length; i++) {\n        var v = value[i];\n\n        if (v < 0 || v >= 256 || v % 1) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    exports.isBytes = isBytes;\n\n    function arrayify(value, options) {\n      if (!options) {\n        options = {};\n      }\n\n      if (typeof value === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        var result = [];\n\n        while (value) {\n          result.unshift(value & 0xff);\n          value = parseInt(String(value / 256));\n        }\n\n        if (result.length === 0) {\n          result.push(0);\n        }\n\n        return addSlice(new Uint8Array(result));\n      }\n\n      if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n\n      if (isHexable(value)) {\n        value = value.toHexString();\n      }\n\n      if (isHexString(value)) {\n        var hex = value.substring(2);\n\n        if (hex.length % 2) {\n          if (options.hexPad === \"left\") {\n            hex = \"0x0\" + hex.substring(2);\n          } else if (options.hexPad === \"right\") {\n            hex += \"0\";\n          } else {\n            logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n          }\n        }\n\n        var result = [];\n\n        for (var i = 0; i < hex.length; i += 2) {\n          result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n\n        return addSlice(new Uint8Array(result));\n      }\n\n      if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n      }\n\n      return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n    }\n\n    exports.arrayify = arrayify;\n\n    function concat(items) {\n      var objects = items.map(function (item) {\n        return arrayify(item);\n      });\n      var length = objects.reduce(function (accum, item) {\n        return accum + item.length;\n      }, 0);\n      var result = new Uint8Array(length);\n      objects.reduce(function (offset, object) {\n        result.set(object, offset);\n        return offset + object.length;\n      }, 0);\n      return addSlice(result);\n    }\n\n    exports.concat = concat;\n\n    function stripZeros(value) {\n      var result = arrayify(value);\n\n      if (result.length === 0) {\n        return result;\n      } // Find the first non-zero entry\n\n\n      var start = 0;\n\n      while (start < result.length && result[start] === 0) {\n        start++;\n      } // If we started with zeros, strip them\n\n\n      if (start) {\n        result = result.slice(start);\n      }\n\n      return result;\n    }\n\n    exports.stripZeros = stripZeros;\n\n    function zeroPad(value, length) {\n      value = arrayify(value);\n\n      if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n      }\n\n      var result = new Uint8Array(length);\n      result.set(value, length - value.length);\n      return addSlice(result);\n    }\n\n    exports.zeroPad = zeroPad;\n\n    function isHexString(value, length) {\n      if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n      }\n\n      if (length && value.length !== 2 + 2 * length) {\n        return false;\n      }\n\n      return true;\n    }\n\n    exports.isHexString = isHexString;\n    var HexCharacters = \"0123456789abcdef\";\n\n    function hexlify(value, options) {\n      if (!options) {\n        options = {};\n      }\n\n      if (typeof value === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        var hex = \"\";\n\n        while (value) {\n          hex = HexCharacters[value & 0x0f] + hex;\n          value = Math.floor(value / 16);\n        }\n\n        if (hex.length) {\n          if (hex.length % 2) {\n            hex = \"0\" + hex;\n          }\n\n          return \"0x\" + hex;\n        }\n\n        return \"0x00\";\n      }\n\n      if (options.allowMissingPrefix && typeof value === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n\n      if (isHexable(value)) {\n        return value.toHexString();\n      }\n\n      if (isHexString(value)) {\n        if (value.length % 2) {\n          if (options.hexPad === \"left\") {\n            value = \"0x0\" + value.substring(2);\n          } else if (options.hexPad === \"right\") {\n            value += \"0\";\n          } else {\n            logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n          }\n        }\n\n        return value.toLowerCase();\n      }\n\n      if (isBytes(value)) {\n        var result = \"0x\";\n\n        for (var i = 0; i < value.length; i++) {\n          var v = value[i];\n          result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n\n        return result;\n      }\n\n      return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n    }\n\n    exports.hexlify = hexlify;\n    /*\n    function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n        if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n            return \"0x0\" + value.substring(2);\n        }\n        return value;\n    }\n    */\n\n    function hexDataLength(data) {\n      if (typeof data !== \"string\") {\n        data = hexlify(data);\n      } else if (!isHexString(data) || data.length % 2) {\n        return null;\n      }\n\n      return (data.length - 2) / 2;\n    }\n\n    exports.hexDataLength = hexDataLength;\n\n    function hexDataSlice(data, offset, endOffset) {\n      if (typeof data !== \"string\") {\n        data = hexlify(data);\n      } else if (!isHexString(data) || data.length % 2) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n      }\n\n      offset = 2 + 2 * offset;\n\n      if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n      }\n\n      return \"0x\" + data.substring(offset);\n    }\n\n    exports.hexDataSlice = hexDataSlice;\n\n    function hexConcat(items) {\n      var result = \"0x\";\n      items.forEach(function (item) {\n        result += hexlify(item).substring(2);\n      });\n      return result;\n    }\n\n    exports.hexConcat = hexConcat;\n\n    function hexValue(value) {\n      var trimmed = hexStripZeros(hexlify(value, {\n        hexPad: \"left\"\n      }));\n\n      if (trimmed === \"0x\") {\n        return \"0x0\";\n      }\n\n      return trimmed;\n    }\n\n    exports.hexValue = hexValue;\n\n    function hexStripZeros(value) {\n      if (typeof value !== \"string\") {\n        value = hexlify(value);\n      }\n\n      if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n      }\n\n      value = value.substring(2);\n      var offset = 0;\n\n      while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n      }\n\n      return \"0x\" + value.substring(offset);\n    }\n\n    exports.hexStripZeros = hexStripZeros;\n\n    function hexZeroPad(value, length) {\n      if (typeof value !== \"string\") {\n        value = hexlify(value);\n      } else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n      }\n\n      if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n      }\n\n      while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n      }\n\n      return value;\n    }\n\n    exports.hexZeroPad = hexZeroPad;\n\n    function splitSignature(signature) {\n      var result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n      };\n\n      if (isBytesLike(signature)) {\n        var bytes = arrayify(signature);\n\n        if (bytes.length !== 65) {\n          logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        } // Get the r, s and v\n\n\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64]; // Allow a recid to be used as the v\n\n        if (result.v < 27) {\n          if (result.v === 0 || result.v === 1) {\n            result.v += 27;\n          } else {\n            logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n          }\n        } // Compute recoveryParam from v\n\n\n        result.recoveryParam = 1 - result.v % 2; // Compute _vs from recoveryParam and s\n\n        if (result.recoveryParam) {\n          bytes[32] |= 0x80;\n        }\n\n        result._vs = hexlify(bytes.slice(32, 64));\n      } else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs; // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n\n        if (result._vs != null) {\n          var vs_1 = zeroPad(arrayify(result._vs), 32);\n          result._vs = hexlify(vs_1); // Set or check the recid\n\n          var recoveryParam = vs_1[0] >= 128 ? 1 : 0;\n\n          if (result.recoveryParam == null) {\n            result.recoveryParam = recoveryParam;\n          } else if (result.recoveryParam !== recoveryParam) {\n            logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n          } // Set or check the s\n\n\n          vs_1[0] &= 0x7f;\n          var s = hexlify(vs_1);\n\n          if (result.s == null) {\n            result.s = s;\n          } else if (result.s !== s) {\n            logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n          }\n        } // Use recid and v to populate each other\n\n\n        if (result.recoveryParam == null) {\n          if (result.v == null) {\n            logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n          } else {\n            result.recoveryParam = 1 - result.v % 2;\n          }\n        } else {\n          if (result.v == null) {\n            result.v = 27 + result.recoveryParam;\n          } else if (result.recoveryParam !== 1 - result.v % 2) {\n            logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n          }\n        }\n\n        if (result.r == null || !isHexString(result.r)) {\n          logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        } else {\n          result.r = hexZeroPad(result.r, 32);\n        }\n\n        if (result.s == null || !isHexString(result.s)) {\n          logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        } else {\n          result.s = hexZeroPad(result.s, 32);\n        }\n\n        var vs = arrayify(result.s);\n\n        if (vs[0] >= 128) {\n          logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n\n        if (result.recoveryParam) {\n          vs[0] |= 0x80;\n        }\n\n        var _vs = hexlify(vs);\n\n        if (result._vs) {\n          if (!isHexString(result._vs)) {\n            logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n          }\n\n          result._vs = hexZeroPad(result._vs, 32);\n        } // Set or check the _vs\n\n\n        if (result._vs == null) {\n          result._vs = _vs;\n        } else if (result._vs !== _vs) {\n          logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n      }\n\n      return result;\n    }\n\n    exports.splitSignature = splitSignature;\n\n    function joinSignature(signature) {\n      signature = splitSignature(signature);\n      return hexlify(concat([signature.r, signature.s, signature.recoveryParam ? \"0x1c\" : \"0x1b\"]));\n    }\n\n    exports.joinSignature = joinSignature;\n  });\n  var index$1 = unwrapExports(lib$1);\n  var lib_1$1 = lib$1.isBytesLike;\n  var lib_2$1 = lib$1.isBytes;\n  var lib_3$1 = lib$1.arrayify;\n  var lib_4 = lib$1.concat;\n  var lib_5 = lib$1.stripZeros;\n  var lib_6 = lib$1.zeroPad;\n  var lib_7 = lib$1.isHexString;\n  var lib_8 = lib$1.hexlify;\n  var lib_9 = lib$1.hexDataLength;\n  var lib_10 = lib$1.hexDataSlice;\n  var lib_11 = lib$1.hexConcat;\n  var lib_12 = lib$1.hexValue;\n  var lib_13 = lib$1.hexStripZeros;\n  var lib_14 = lib$1.hexZeroPad;\n  var lib_15 = lib$1.splitSignature;\n  var lib_16 = lib$1.joinSignature;\n\n  var _version$4 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"bignumber/5.0.6\";\n  });\n\n  var _version$5 = unwrapExports(_version$4);\n\n  var _version_1$2 = _version$4.version;\n  var bignumber = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    /**\n     *  BigNumber\n     *\n     *  A wrapper around the BN.js object. We use the BN.js library\n     *  because it is used by elliptic, so it is required regardles.\n     *\n     */\n\n    var logger = new lib.Logger(_version$4.version);\n    var _constructorGuard = {};\n    var MAX_SAFE = 0x1fffffffffffff;\n\n    function isBigNumberish(value) {\n      return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || lib$1.isHexString(value) || typeof value === \"bigint\" || lib$1.isBytes(value));\n    }\n\n    exports.isBigNumberish = isBigNumberish;\n\n    var BigNumber =\n    /** @class */\n    function () {\n      function BigNumber(constructorGuard, hex) {\n        var _newTarget = this.constructor;\n        logger.checkNew(_newTarget, BigNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n          logger.throwError(\"cannot call constructor directly; use BigNumber.from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new (BigNumber)\"\n          });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n      }\n\n      BigNumber.prototype.fromTwos = function (value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n      };\n\n      BigNumber.prototype.toTwos = function (value) {\n        return toBigNumber(toBN(this).toTwos(value));\n      };\n\n      BigNumber.prototype.abs = function () {\n        if (this._hex[0] === \"-\") {\n          return BigNumber.from(this._hex.substring(1));\n        }\n\n        return this;\n      };\n\n      BigNumber.prototype.add = function (other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n      };\n\n      BigNumber.prototype.sub = function (other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n      };\n\n      BigNumber.prototype.div = function (other) {\n        var o = BigNumber.from(other);\n\n        if (o.isZero()) {\n          throwFault(\"division by zero\", \"div\");\n        }\n\n        return toBigNumber(toBN(this).div(toBN(other)));\n      };\n\n      BigNumber.prototype.mul = function (other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n      };\n\n      BigNumber.prototype.mod = function (other) {\n        var value = toBN(other);\n\n        if (value.isNeg()) {\n          throwFault(\"cannot modulo negative values\", \"mod\");\n        }\n\n        return toBigNumber(toBN(this).umod(value));\n      };\n\n      BigNumber.prototype.pow = function (other) {\n        var value = toBN(other);\n\n        if (value.isNeg()) {\n          throwFault(\"cannot raise to negative values\", \"pow\");\n        }\n\n        return toBigNumber(toBN(this).pow(value));\n      };\n\n      BigNumber.prototype.and = function (other) {\n        var value = toBN(other);\n\n        if (this.isNegative() || value.isNeg()) {\n          throwFault(\"cannot 'and' negative values\", \"and\");\n        }\n\n        return toBigNumber(toBN(this).and(value));\n      };\n\n      BigNumber.prototype.or = function (other) {\n        var value = toBN(other);\n\n        if (this.isNegative() || value.isNeg()) {\n          throwFault(\"cannot 'or' negative values\", \"or\");\n        }\n\n        return toBigNumber(toBN(this).or(value));\n      };\n\n      BigNumber.prototype.xor = function (other) {\n        var value = toBN(other);\n\n        if (this.isNegative() || value.isNeg()) {\n          throwFault(\"cannot 'xor' negative values\", \"xor\");\n        }\n\n        return toBigNumber(toBN(this).xor(value));\n      };\n\n      BigNumber.prototype.mask = function (value) {\n        if (this.isNegative() || value < 0) {\n          throwFault(\"cannot mask negative values\", \"mask\");\n        }\n\n        return toBigNumber(toBN(this).maskn(value));\n      };\n\n      BigNumber.prototype.shl = function (value) {\n        if (this.isNegative() || value < 0) {\n          throwFault(\"cannot shift negative values\", \"shl\");\n        }\n\n        return toBigNumber(toBN(this).shln(value));\n      };\n\n      BigNumber.prototype.shr = function (value) {\n        if (this.isNegative() || value < 0) {\n          throwFault(\"cannot shift negative values\", \"shr\");\n        }\n\n        return toBigNumber(toBN(this).shrn(value));\n      };\n\n      BigNumber.prototype.eq = function (other) {\n        return toBN(this).eq(toBN(other));\n      };\n\n      BigNumber.prototype.lt = function (other) {\n        return toBN(this).lt(toBN(other));\n      };\n\n      BigNumber.prototype.lte = function (other) {\n        return toBN(this).lte(toBN(other));\n      };\n\n      BigNumber.prototype.gt = function (other) {\n        return toBN(this).gt(toBN(other));\n      };\n\n      BigNumber.prototype.gte = function (other) {\n        return toBN(this).gte(toBN(other));\n      };\n\n      BigNumber.prototype.isNegative = function () {\n        return this._hex[0] === \"-\";\n      };\n\n      BigNumber.prototype.isZero = function () {\n        return toBN(this).isZero();\n      };\n\n      BigNumber.prototype.toNumber = function () {\n        try {\n          return toBN(this).toNumber();\n        } catch (error) {\n          throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n\n        return null;\n      };\n\n      BigNumber.prototype.toString = function () {\n        // Lots of people expect this, which we do not support, so check\n        if (arguments.length !== 0) {\n          logger.throwError(\"bigNumber.toString does not accept parameters\", lib.Logger.errors.UNEXPECTED_ARGUMENT, {});\n        }\n\n        return toBN(this).toString(10);\n      };\n\n      BigNumber.prototype.toHexString = function () {\n        return this._hex;\n      };\n\n      BigNumber.prototype.toJSON = function (key) {\n        return {\n          type: \"BigNumber\",\n          hex: this.toHexString()\n        };\n      };\n\n      BigNumber.from = function (value) {\n        if (value instanceof BigNumber) {\n          return value;\n        }\n\n        if (typeof value === \"string\") {\n          if (value.match(/^-?0x[0-9a-f]+$/i)) {\n            return new BigNumber(_constructorGuard, toHex(value));\n          }\n\n          if (value.match(/^-?[0-9]+$/)) {\n            return new BigNumber(_constructorGuard, toHex(new bn.BN(value)));\n          }\n\n          return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof value === \"number\") {\n          if (value % 1) {\n            throwFault(\"underflow\", \"BigNumber.from\", value);\n          }\n\n          if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n            throwFault(\"overflow\", \"BigNumber.from\", value);\n          }\n\n          return BigNumber.from(String(value));\n        }\n\n        var anyValue = value;\n\n        if (typeof anyValue === \"bigint\") {\n          return BigNumber.from(anyValue.toString());\n        }\n\n        if (lib$1.isBytes(anyValue)) {\n          return BigNumber.from(lib$1.hexlify(anyValue));\n        }\n\n        if (anyValue) {\n          // Hexable interface (takes piority)\n          if (anyValue.toHexString) {\n            var hex = anyValue.toHexString();\n\n            if (typeof hex === \"string\") {\n              return BigNumber.from(hex);\n            }\n          } else {\n            // For now, handle legacy JSON-ified values (goes away in v6)\n            var hex = anyValue._hex; // New-form JSON\n\n            if (hex == null && anyValue.type === \"BigNumber\") {\n              hex = anyValue.hex;\n            }\n\n            if (typeof hex === \"string\") {\n              if (lib$1.isHexString(hex) || hex[0] === \"-\" && lib$1.isHexString(hex.substring(1))) {\n                return BigNumber.from(hex);\n              }\n            }\n          }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n      };\n\n      BigNumber.isBigNumber = function (value) {\n        return !!(value && value._isBigNumber);\n      };\n\n      return BigNumber;\n    }();\n\n    exports.BigNumber = BigNumber; // Normalize the hex string\n\n    function toHex(value) {\n      // For BN, call on the hex string\n      if (typeof value !== \"string\") {\n        return toHex(value.toString(16));\n      } // If negative, prepend the negative sign to the normalized positive value\n\n\n      if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1); // Cannot have mulitple negative signs (e.g. \"--0x04\")\n\n        if (value[0] === \"-\") {\n          logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        } // Call toHex on the positive component\n\n\n        value = toHex(value); // Do not allow \"-0x00\"\n\n        if (value === \"0x00\") {\n          return value;\n        } // Negate the value\n\n\n        return \"-\" + value;\n      } // Add a \"0x\" prefix if missing\n\n\n      if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      } // Normalize zero\n\n\n      if (value === \"0x\") {\n        return \"0x00\";\n      } // Make the string even length\n\n\n      if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n      } // Trim to smallest even-length string\n\n\n      while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n      }\n\n      return value;\n    }\n\n    function toBigNumber(value) {\n      return BigNumber.from(toHex(value));\n    }\n\n    function toBN(value) {\n      var hex = BigNumber.from(value).toHexString();\n\n      if (hex[0] === \"-\") {\n        return new bn.BN(\"-\" + hex.substring(3), 16);\n      }\n\n      return new bn.BN(hex.substring(2), 16);\n    }\n\n    function throwFault(fault, operation, value) {\n      var params = {\n        fault: fault,\n        operation: operation\n      };\n\n      if (value != null) {\n        params.value = value;\n      }\n\n      return logger.throwError(fault, lib.Logger.errors.NUMERIC_FAULT, params);\n    }\n  });\n  var bignumber$1 = unwrapExports(bignumber);\n  var bignumber_1 = bignumber.isBigNumberish;\n  var bignumber_2 = bignumber.BigNumber;\n  var fixednumber = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$4.version);\n    var _constructorGuard = {};\n    var Zero = bignumber.BigNumber.from(0);\n    var NegativeOne = bignumber.BigNumber.from(-1);\n\n    function throwFault(message, fault, operation, value) {\n      var params = {\n        fault: fault,\n        operation: operation\n      };\n\n      if (value !== undefined) {\n        params.value = value;\n      }\n\n      return logger.throwError(message, lib.Logger.errors.NUMERIC_FAULT, params);\n    } // Constant to pull zeros from for multipliers\n\n\n    var zeros = \"0\";\n\n    while (zeros.length < 256) {\n      zeros += zeros;\n    } // Returns a string \"1\" followed by decimal \"0\"s\n\n\n    function getMultiplier(decimals) {\n      if (typeof decimals !== \"number\") {\n        try {\n          decimals = bignumber.BigNumber.from(decimals).toNumber();\n        } catch (e) {}\n      }\n\n      if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return \"1\" + zeros.substring(0, decimals);\n      }\n\n      return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n    }\n\n    function formatFixed(value, decimals) {\n      if (decimals == null) {\n        decimals = 0;\n      }\n\n      var multiplier = getMultiplier(decimals); // Make sure wei is a big number (convert as necessary)\n\n      value = bignumber.BigNumber.from(value);\n      var negative = value.lt(Zero);\n\n      if (negative) {\n        value = value.mul(NegativeOne);\n      }\n\n      var fraction = value.mod(multiplier).toString();\n\n      while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n      } // Strip training 0\n\n\n      fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n      var whole = value.div(multiplier).toString();\n      value = whole + \".\" + fraction;\n\n      if (negative) {\n        value = \"-\" + value;\n      }\n\n      return value;\n    }\n\n    exports.formatFixed = formatFixed;\n\n    function parseFixed(value, decimals) {\n      if (decimals == null) {\n        decimals = 0;\n      }\n\n      var multiplier = getMultiplier(decimals);\n\n      if (typeof value !== \"string\" || !value.match(/^-?[0-9.,]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n      }\n\n      if (multiplier.length - 1 === 0) {\n        return bignumber.BigNumber.from(value);\n      } // Is it negative?\n\n\n      var negative = value.substring(0, 1) === \"-\";\n\n      if (negative) {\n        value = value.substring(1);\n      }\n\n      if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n      } // Split it into a whole and fractional part\n\n\n      var comps = value.split(\".\");\n\n      if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n      }\n\n      var whole = comps[0],\n          fraction = comps[1];\n\n      if (!whole) {\n        whole = \"0\";\n      }\n\n      if (!fraction) {\n        fraction = \"0\";\n      } // Prevent underflow\n\n\n      if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n      } // Fully pad the string with zeros to get to wei\n\n\n      while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n      }\n\n      var wholeValue = bignumber.BigNumber.from(whole);\n      var fractionValue = bignumber.BigNumber.from(fraction);\n      var wei = wholeValue.mul(multiplier).add(fractionValue);\n\n      if (negative) {\n        wei = wei.mul(NegativeOne);\n      }\n\n      return wei;\n    }\n\n    exports.parseFixed = parseFixed;\n\n    var FixedFormat =\n    /** @class */\n    function () {\n      function FixedFormat(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n          logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n          });\n        }\n\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n      }\n\n      FixedFormat.from = function (value) {\n        if (value instanceof FixedFormat) {\n          return value;\n        }\n\n        var signed = true;\n        var width = 128;\n        var decimals = 18;\n\n        if (typeof value === \"string\") {\n          if (value === \"fixed\") {// defaults...\n          } else if (value === \"ufixed\") {\n            signed = false;\n          } else if (value != null) {\n            var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n\n            if (!match) {\n              logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n            }\n\n            signed = match[1] !== \"u\";\n            width = parseInt(match[2]);\n            decimals = parseInt(match[3]);\n          }\n        } else if (value) {\n          var check = function (key, type, defaultValue) {\n            if (value[key] == null) {\n              return defaultValue;\n            }\n\n            if (typeof value[key] !== type) {\n              logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n            }\n\n            return value[key];\n          };\n\n          signed = check(\"signed\", \"boolean\", signed);\n          width = check(\"width\", \"number\", width);\n          decimals = check(\"decimals\", \"number\", decimals);\n        }\n\n        if (width % 8) {\n          logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n\n        if (decimals > 80) {\n          logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n      };\n\n      return FixedFormat;\n    }();\n\n    exports.FixedFormat = FixedFormat;\n\n    var FixedNumber =\n    /** @class */\n    function () {\n      function FixedNumber(constructorGuard, hex, value, format) {\n        var _newTarget = this.constructor;\n        logger.checkNew(_newTarget, FixedNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n          logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new FixedFormat\"\n          });\n        }\n\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n      }\n\n      FixedNumber.prototype._checkFormat = function (other) {\n        if (this.format.name !== other.format.name) {\n          logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n      };\n\n      FixedNumber.prototype.addUnsafe = function (other) {\n        this._checkFormat(other);\n\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n      };\n\n      FixedNumber.prototype.subUnsafe = function (other) {\n        this._checkFormat(other);\n\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n      };\n\n      FixedNumber.prototype.mulUnsafe = function (other) {\n        this._checkFormat(other);\n\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n      };\n\n      FixedNumber.prototype.divUnsafe = function (other) {\n        this._checkFormat(other);\n\n        var a = parseFixed(this._value, this.format.decimals);\n        var b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n      }; // @TODO: Support other rounding algorithms\n\n\n      FixedNumber.prototype.round = function (decimals) {\n        if (decimals == null) {\n          decimals = 0;\n        }\n\n        if (decimals < 0 || decimals > 80 || decimals % 1) {\n          logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        } // If we are already in range, we're done\n\n\n        var comps = this.toString().split(\".\");\n\n        if (comps[1].length <= decimals) {\n          return this;\n        } // Bump the value up by the 0.00...0005\n\n\n        var bump = \"0.\" + zeros.substring(0, decimals) + \"5\";\n        comps = this.addUnsafe(FixedNumber.fromString(bump, this.format))._value.split(\".\"); // Now it is safe to truncate\n\n        return FixedNumber.fromString(comps[0] + \".\" + comps[1].substring(0, decimals));\n      };\n\n      FixedNumber.prototype.isZero = function () {\n        return this._value === \"0.0\";\n      };\n\n      FixedNumber.prototype.toString = function () {\n        return this._value;\n      };\n\n      FixedNumber.prototype.toHexString = function (width) {\n        if (width == null) {\n          return this._hex;\n        }\n\n        if (width % 8) {\n          logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n\n        var hex = bignumber.BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return lib$1.hexZeroPad(hex, width / 8);\n      };\n\n      FixedNumber.prototype.toUnsafeFloat = function () {\n        return parseFloat(this.toString());\n      };\n\n      FixedNumber.prototype.toFormat = function (format) {\n        return FixedNumber.fromString(this._value, format);\n      };\n\n      FixedNumber.fromValue = function (value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !bignumber.isBigNumberish(decimals)) {\n          format = decimals;\n          decimals = null;\n        }\n\n        if (decimals == null) {\n          decimals = 0;\n        }\n\n        if (format == null) {\n          format = \"fixed\";\n        }\n\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n      };\n\n      FixedNumber.fromString = function (value, format) {\n        if (format == null) {\n          format = \"fixed\";\n        }\n\n        var fixedFormat = FixedFormat.from(format);\n        var numeric = parseFixed(value, fixedFormat.decimals);\n\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n          throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n\n        var hex = null;\n\n        if (fixedFormat.signed) {\n          hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n          hex = numeric.toHexString();\n          hex = lib$1.hexZeroPad(hex, fixedFormat.width / 8);\n        }\n\n        var decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n      };\n\n      FixedNumber.fromBytes = function (value, format) {\n        if (format == null) {\n          format = \"fixed\";\n        }\n\n        var fixedFormat = FixedFormat.from(format);\n\n        if (lib$1.arrayify(value).length > fixedFormat.width / 8) {\n          throw new Error(\"overflow\");\n        }\n\n        var numeric = bignumber.BigNumber.from(value);\n\n        if (fixedFormat.signed) {\n          numeric = numeric.fromTwos(fixedFormat.width);\n        }\n\n        var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        var decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n      };\n\n      FixedNumber.from = function (value, format) {\n        if (typeof value === \"string\") {\n          return FixedNumber.fromString(value, format);\n        }\n\n        if (lib$1.isBytes(value)) {\n          return FixedNumber.fromBytes(value, format);\n        }\n\n        try {\n          return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n          // Allow NUMERIC_FAULT to bubble up\n          if (error.code !== lib.Logger.errors.INVALID_ARGUMENT) {\n            throw error;\n          }\n        }\n\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n      };\n\n      FixedNumber.isFixedNumber = function (value) {\n        return !!(value && value._isFixedNumber);\n      };\n\n      return FixedNumber;\n    }();\n\n    exports.FixedNumber = FixedNumber;\n  });\n  var fixednumber$1 = unwrapExports(fixednumber);\n  var fixednumber_1 = fixednumber.formatFixed;\n  var fixednumber_2 = fixednumber.parseFixed;\n  var fixednumber_3 = fixednumber.FixedFormat;\n  var fixednumber_4 = fixednumber.FixedNumber;\n  var lib$2 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.BigNumber = bignumber.BigNumber;\n    exports.formatFixed = fixednumber.formatFixed;\n    exports.FixedFormat = fixednumber.FixedFormat;\n    exports.FixedNumber = fixednumber.FixedNumber;\n    exports.parseFixed = fixednumber.parseFixed;\n  });\n  var index$2 = unwrapExports(lib$2);\n  var lib_1$2 = lib$2.BigNumber;\n  var lib_2$2 = lib$2.formatFixed;\n  var lib_3$2 = lib$2.FixedFormat;\n  var lib_4$1 = lib$2.FixedNumber;\n  var lib_5$1 = lib$2.parseFixed;\n\n  var _version$6 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"properties/5.0.3\";\n  });\n\n  var _version$7 = unwrapExports(_version$6);\n\n  var _version_1$3 = _version$6.version;\n  var lib$3 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$6.version);\n\n    function defineReadOnly(object, name, value) {\n      Object.defineProperty(object, name, {\n        enumerable: true,\n        value: value,\n        writable: false\n      });\n    }\n\n    exports.defineReadOnly = defineReadOnly; // Crawl up the constructor chain to find a static method\n\n    function getStatic(ctor, key) {\n      for (var i = 0; i < 32; i++) {\n        if (ctor[key]) {\n          return ctor[key];\n        }\n\n        if (!ctor.prototype || typeof ctor.prototype !== \"object\") {\n          break;\n        }\n\n        ctor = Object.getPrototypeOf(ctor.prototype).constructor;\n      }\n\n      return null;\n    }\n\n    exports.getStatic = getStatic;\n\n    function resolveProperties(object) {\n      return __awaiter(this, void 0, void 0, function () {\n        var promises, results;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              promises = Object.keys(object).map(function (key) {\n                var value = object[key];\n                return Promise.resolve(value).then(function (v) {\n                  return {\n                    key: key,\n                    value: v\n                  };\n                });\n              });\n              return [4\n              /*yield*/\n              , Promise.all(promises)];\n\n            case 1:\n              results = _a.sent();\n              return [2\n              /*return*/\n              , results.reduce(function (accum, result) {\n                accum[result.key] = result.value;\n                return accum;\n              }, {})];\n          }\n        });\n      });\n    }\n\n    exports.resolveProperties = resolveProperties;\n\n    function checkProperties(object, properties) {\n      if (!object || typeof object !== \"object\") {\n        logger.throwArgumentError(\"invalid object\", \"object\", object);\n      }\n\n      Object.keys(object).forEach(function (key) {\n        if (!properties[key]) {\n          logger.throwArgumentError(\"invalid object key - \" + key, \"transaction:\" + key, object);\n        }\n      });\n    }\n\n    exports.checkProperties = checkProperties;\n\n    function shallowCopy(object) {\n      var result = {};\n\n      for (var key in object) {\n        result[key] = object[key];\n      }\n\n      return result;\n    }\n\n    exports.shallowCopy = shallowCopy;\n    var opaque = {\n      bigint: true,\n      boolean: true,\n      \"function\": true,\n      number: true,\n      string: true\n    };\n\n    function _isFrozen(object) {\n      // Opaque objects are not mutable, so safe to copy by assignment\n      if (object === undefined || object === null || opaque[typeof object]) {\n        return true;\n      }\n\n      if (Array.isArray(object) || typeof object === \"object\") {\n        if (!Object.isFrozen(object)) {\n          return false;\n        }\n\n        var keys = Object.keys(object);\n\n        for (var i = 0; i < keys.length; i++) {\n          if (!_isFrozen(object[keys[i]])) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      return logger.throwArgumentError(\"Cannot deepCopy \" + typeof object, \"object\", object);\n    } // Returns a new copy of object, such that no properties may be replaced.\n    // New properties may be added only to objects.\n\n\n    function _deepCopy(object) {\n      if (_isFrozen(object)) {\n        return object;\n      } // Arrays are mutable, so we need to create a copy\n\n\n      if (Array.isArray(object)) {\n        return Object.freeze(object.map(function (item) {\n          return deepCopy(item);\n        }));\n      }\n\n      if (typeof object === \"object\") {\n        var result = {};\n\n        for (var key in object) {\n          var value = object[key];\n\n          if (value === undefined) {\n            continue;\n          }\n\n          defineReadOnly(result, key, deepCopy(value));\n        }\n\n        return result;\n      }\n\n      return logger.throwArgumentError(\"Cannot deepCopy \" + typeof object, \"object\", object);\n    }\n\n    function deepCopy(object) {\n      return _deepCopy(object);\n    }\n\n    exports.deepCopy = deepCopy;\n\n    var Description =\n    /** @class */\n    function () {\n      function Description(info) {\n        for (var key in info) {\n          this[key] = deepCopy(info[key]);\n        }\n      }\n\n      return Description;\n    }();\n\n    exports.Description = Description;\n  });\n  var index$3 = unwrapExports(lib$3);\n  var lib_1$3 = lib$3.defineReadOnly;\n  var lib_2$3 = lib$3.getStatic;\n  var lib_3$3 = lib$3.resolveProperties;\n  var lib_4$2 = lib$3.checkProperties;\n  var lib_5$2 = lib$3.shallowCopy;\n  var lib_6$1 = lib$3.deepCopy;\n  var lib_7$1 = lib$3.Description;\n\n  var _version$8 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"abi/5.0.3\";\n  });\n\n  var _version$9 = unwrapExports(_version$8);\n\n  var _version_1$4 = _version$8.version;\n  var fragments = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$8.version);\n    ;\n    var _constructorGuard = {};\n    var ModifiersBytes = {\n      calldata: true,\n      memory: true,\n      storage: true\n    };\n    var ModifiersNest = {\n      calldata: true,\n      memory: true\n    };\n\n    function checkModifier(type, name) {\n      if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) {\n          return true;\n        }\n      } else if (type === \"address\") {\n        if (name === \"payable\") {\n          return true;\n        }\n      } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) {\n          return true;\n        }\n      }\n\n      if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n      }\n\n      return false;\n    } // @TODO: Make sure that children of an indexed tuple are marked with a null indexed\n\n\n    function parseParamType(param, allowIndexed) {\n      var originalParam = param;\n\n      function throwError(i) {\n        logger.throwArgumentError(\"unexpected character at position \" + i, \"param\", param);\n      }\n\n      param = param.replace(/\\s/g, \" \");\n\n      function newNode(parent) {\n        var node = {\n          type: \"\",\n          name: \"\",\n          parent: parent,\n          state: {\n            allowType: true\n          }\n        };\n\n        if (allowIndexed) {\n          node.indexed = false;\n        }\n\n        return node;\n      }\n\n      var parent = {\n        type: \"\",\n        name: \"\",\n        state: {\n          allowType: true\n        }\n      };\n      var node = parent;\n\n      for (var i = 0; i < param.length; i++) {\n        var c = param[i];\n\n        switch (c) {\n          case \"(\":\n            if (node.state.allowType && node.type === \"\") {\n              node.type = \"tuple\";\n            } else if (!node.state.allowParams) {\n              throwError(i);\n            }\n\n            node.state.allowType = false;\n            node.type = verifyType(node.type);\n            node.components = [newNode(node)];\n            node = node.components[0];\n            break;\n\n          case \")\":\n            delete node.state;\n\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n\n              node.indexed = true;\n              node.name = \"\";\n            }\n\n            if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            }\n\n            node.type = verifyType(node.type);\n            var child = node;\n            node = node.parent;\n\n            if (!node) {\n              throwError(i);\n            }\n\n            delete child.parent;\n            node.state.allowParams = false;\n            node.state.allowName = true;\n            node.state.allowArray = true;\n            break;\n\n          case \",\":\n            delete node.state;\n\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n\n              node.indexed = true;\n              node.name = \"\";\n            }\n\n            if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            }\n\n            node.type = verifyType(node.type);\n            var sibling = newNode(node.parent); //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n\n            node.parent.components.push(sibling);\n            delete node.parent;\n            node = sibling;\n            break;\n          // Hit a space...\n\n          case \" \":\n            // If reading type, the type is done and may read a param or name\n            if (node.state.allowType) {\n              if (node.type !== \"\") {\n                node.type = verifyType(node.type);\n                delete node.state.allowType;\n                node.state.allowName = true;\n                node.state.allowParams = true;\n              }\n            } // If reading name, the name is done\n\n\n            if (node.state.allowName) {\n              if (node.name !== \"\") {\n                if (node.name === \"indexed\") {\n                  if (!allowIndexed) {\n                    throwError(i);\n                  }\n\n                  if (node.indexed) {\n                    throwError(i);\n                  }\n\n                  node.indexed = true;\n                  node.name = \"\";\n                } else if (checkModifier(node.type, node.name)) {\n                  node.name = \"\";\n                } else {\n                  node.state.allowName = false;\n                }\n              }\n            }\n\n            break;\n\n          case \"[\":\n            if (!node.state.allowArray) {\n              throwError(i);\n            }\n\n            node.type += c;\n            node.state.allowArray = false;\n            node.state.allowName = false;\n            node.state.readArray = true;\n            break;\n\n          case \"]\":\n            if (!node.state.readArray) {\n              throwError(i);\n            }\n\n            node.type += c;\n            node.state.readArray = false;\n            node.state.allowArray = true;\n            node.state.allowName = true;\n            break;\n\n          default:\n            if (node.state.allowType) {\n              node.type += c;\n              node.state.allowParams = true;\n              node.state.allowArray = true;\n            } else if (node.state.allowName) {\n              node.name += c;\n              delete node.state.allowArray;\n            } else if (node.state.readArray) {\n              node.type += c;\n            } else {\n              throwError(i);\n            }\n\n        }\n      }\n\n      if (node.parent) {\n        logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n      }\n\n      delete parent.state;\n\n      if (node.name === \"indexed\") {\n        if (!allowIndexed) {\n          throwError(originalParam.length - 7);\n        }\n\n        if (node.indexed) {\n          throwError(originalParam.length - 7);\n        }\n\n        node.indexed = true;\n        node.name = \"\";\n      } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n      }\n\n      parent.type = verifyType(parent.type);\n      return parent;\n    }\n\n    function populate(object, params) {\n      for (var key in params) {\n        lib$3.defineReadOnly(object, key, params[key]);\n      }\n    }\n\n    exports.FormatTypes = Object.freeze({\n      // Bare formatting, as is needed for computing a sighash of an event or function\n      sighash: \"sighash\",\n      // Human-Readable with Minimal spacing and without names (compact human-readable)\n      minimal: \"minimal\",\n      // Human-Readble with nice spacing, including all names\n      full: \"full\",\n      // JSON-format a la Solidity\n      json: \"json\"\n    });\n    var paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\n    var ParamType =\n    /** @class */\n    function () {\n      function ParamType(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n          logger.throwError(\"use fromString\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n          });\n        }\n\n        populate(this, params);\n        var match = this.type.match(paramTypeArray);\n\n        if (match) {\n          populate(this, {\n            arrayLength: parseInt(match[2] || \"-1\"),\n            arrayChildren: ParamType.fromObject({\n              type: match[1],\n              components: this.components\n            }),\n            baseType: \"array\"\n          });\n        } else {\n          populate(this, {\n            arrayLength: null,\n            arrayChildren: null,\n            baseType: this.components != null ? \"tuple\" : this.type\n          });\n        }\n\n        this._isParamType = true;\n        Object.freeze(this);\n      } // Format the parameter fragment\n      //   - sighash: \"(uint256,address)\"\n      //   - minimal: \"tuple(uint256,address) indexed\"\n      //   - full:    \"tuple(uint256 foo, addres bar) indexed baz\"\n\n\n      ParamType.prototype.format = function (format) {\n        if (!format) {\n          format = exports.FormatTypes.sighash;\n        }\n\n        if (!exports.FormatTypes[format]) {\n          logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === exports.FormatTypes.json) {\n          var result_1 = {\n            type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n            name: this.name || undefined\n          };\n\n          if (typeof this.indexed === \"boolean\") {\n            result_1.indexed = this.indexed;\n          }\n\n          if (this.components) {\n            result_1.components = this.components.map(function (comp) {\n              return JSON.parse(comp.format(format));\n            });\n          }\n\n          return JSON.stringify(result_1);\n        }\n\n        var result = \"\"; // Array\n\n        if (this.baseType === \"array\") {\n          result += this.arrayChildren.format(format);\n          result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n        } else {\n          if (this.baseType === \"tuple\") {\n            if (format !== exports.FormatTypes.sighash) {\n              result += this.type;\n            }\n\n            result += \"(\" + this.components.map(function (comp) {\n              return comp.format(format);\n            }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \")\";\n          } else {\n            result += this.type;\n          }\n        }\n\n        if (format !== exports.FormatTypes.sighash) {\n          if (this.indexed === true) {\n            result += \" indexed\";\n          }\n\n          if (format === exports.FormatTypes.full && this.name) {\n            result += \" \" + this.name;\n          }\n        }\n\n        return result;\n      };\n\n      ParamType.from = function (value, allowIndexed) {\n        if (typeof value === \"string\") {\n          return ParamType.fromString(value, allowIndexed);\n        }\n\n        return ParamType.fromObject(value);\n      };\n\n      ParamType.fromObject = function (value) {\n        if (ParamType.isParamType(value)) {\n          return value;\n        }\n\n        return new ParamType(_constructorGuard, {\n          name: value.name || null,\n          type: verifyType(value.type),\n          indexed: value.indexed == null ? null : !!value.indexed,\n          components: value.components ? value.components.map(ParamType.fromObject) : null\n        });\n      };\n\n      ParamType.fromString = function (value, allowIndexed) {\n        function ParamTypify(node) {\n          return ParamType.fromObject({\n            name: node.name,\n            type: node.type,\n            indexed: node.indexed,\n            components: node.components\n          });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n      };\n\n      ParamType.isParamType = function (value) {\n        return !!(value != null && value._isParamType);\n      };\n\n      return ParamType;\n    }();\n\n    exports.ParamType = ParamType;\n    ;\n\n    function parseParams(value, allowIndex) {\n      return splitNesting(value).map(function (param) {\n        return ParamType.fromString(param, allowIndex);\n      });\n    }\n\n    var Fragment =\n    /** @class */\n    function () {\n      function Fragment(constructorGuard, params) {\n        if (constructorGuard !== _constructorGuard) {\n          logger.throwError(\"use a static from method\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new Fragment()\"\n          });\n        }\n\n        populate(this, params);\n        this._isFragment = true;\n        Object.freeze(this);\n      }\n\n      Fragment.from = function (value) {\n        if (Fragment.isFragment(value)) {\n          return value;\n        }\n\n        if (typeof value === \"string\") {\n          return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n      };\n\n      Fragment.fromObject = function (value) {\n        if (Fragment.isFragment(value)) {\n          return value;\n        }\n\n        switch (value.type) {\n          case \"function\":\n            return FunctionFragment.fromObject(value);\n\n          case \"event\":\n            return EventFragment.fromObject(value);\n\n          case \"constructor\":\n            return ConstructorFragment.fromObject(value);\n\n          case \"fallback\":\n          case \"receive\":\n            // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n            return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n      };\n\n      Fragment.fromString = function (value) {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n          return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n          return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n          return ConstructorFragment.fromString(value.trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n      };\n\n      Fragment.isFragment = function (value) {\n        return !!(value && value._isFragment);\n      };\n\n      return Fragment;\n    }();\n\n    exports.Fragment = Fragment;\n\n    var EventFragment =\n    /** @class */\n    function (_super) {\n      __extends(EventFragment, _super);\n\n      function EventFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      EventFragment.prototype.format = function (format) {\n        if (!format) {\n          format = exports.FormatTypes.sighash;\n        }\n\n        if (!exports.FormatTypes[format]) {\n          logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === exports.FormatTypes.json) {\n          return JSON.stringify({\n            type: \"event\",\n            anonymous: this.anonymous,\n            name: this.name,\n            inputs: this.inputs.map(function (input) {\n              return JSON.parse(input.format(format));\n            })\n          });\n        }\n\n        var result = \"\";\n\n        if (format !== exports.FormatTypes.sighash) {\n          result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(function (input) {\n          return input.format(format);\n        }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \") \";\n\n        if (format !== exports.FormatTypes.sighash) {\n          if (this.anonymous) {\n            result += \"anonymous \";\n          }\n        }\n\n        return result.trim();\n      };\n\n      EventFragment.from = function (value) {\n        if (typeof value === \"string\") {\n          return EventFragment.fromString(value);\n        }\n\n        return EventFragment.fromObject(value);\n      };\n\n      EventFragment.fromObject = function (value) {\n        if (EventFragment.isEventFragment(value)) {\n          return value;\n        }\n\n        if (value.type !== \"event\") {\n          logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        var params = {\n          name: verifyIdentifier(value.name),\n          anonymous: value.anonymous,\n          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n          type: \"event\"\n        };\n        return new EventFragment(_constructorGuard, params);\n      };\n\n      EventFragment.fromString = function (value) {\n        var match = value.match(regexParen);\n\n        if (!match) {\n          logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        var anonymous = false;\n        match[3].split(\" \").forEach(function (modifier) {\n          switch (modifier.trim()) {\n            case \"anonymous\":\n              anonymous = true;\n              break;\n\n            case \"\":\n              break;\n\n            default:\n              logger.warn(\"unknown modifier: \" + modifier);\n          }\n        });\n        return EventFragment.fromObject({\n          name: match[1].trim(),\n          anonymous: anonymous,\n          inputs: parseParams(match[2], true),\n          type: \"event\"\n        });\n      };\n\n      EventFragment.isEventFragment = function (value) {\n        return value && value._isFragment && value.type === \"event\";\n      };\n\n      return EventFragment;\n    }(Fragment);\n\n    exports.EventFragment = EventFragment;\n\n    function parseGas(value, params) {\n      params.gas = null;\n      var comps = value.split(\"@\");\n\n      if (comps.length !== 1) {\n        if (comps.length > 2) {\n          logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n\n        if (!comps[1].match(/^[0-9]+$/)) {\n          logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n\n        params.gas = lib$2.BigNumber.from(comps[1]);\n        return comps[0];\n      }\n\n      return value;\n    }\n\n    function parseModifiers(value, params) {\n      params.constant = false;\n      params.payable = false;\n      params.stateMutability = \"nonpayable\";\n      value.split(\" \").forEach(function (modifier) {\n        switch (modifier.trim()) {\n          case \"constant\":\n            params.constant = true;\n            break;\n\n          case \"payable\":\n            params.payable = true;\n            params.stateMutability = \"payable\";\n            break;\n\n          case \"nonpayable\":\n            params.payable = false;\n            params.stateMutability = \"nonpayable\";\n            break;\n\n          case \"pure\":\n            params.constant = true;\n            params.stateMutability = \"pure\";\n            break;\n\n          case \"view\":\n            params.constant = true;\n            params.stateMutability = \"view\";\n            break;\n\n          case \"external\":\n          case \"public\":\n          case \"\":\n            break;\n\n          default:\n            console.log(\"unknown modifier: \" + modifier);\n        }\n      });\n    }\n\n    function verifyState(value) {\n      var result = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n      };\n\n      if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability; // Set (and check things are consistent) the constant property\n\n        result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n\n        if (value.constant != null) {\n          if (!!value.constant !== result.constant) {\n            logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n          }\n        } // Set (and check things are consistent) the payable property\n\n\n        result.payable = result.stateMutability === \"payable\";\n\n        if (value.payable != null) {\n          if (!!value.payable !== result.payable) {\n            logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n          }\n        }\n      } else if (value.payable != null) {\n        result.payable = !!value.payable; // If payable we can assume non-constant; otherwise we can't assume\n\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n          logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n          result.stateMutability = \"view\";\n        } else {\n          result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n        }\n\n        if (result.payable && result.constant) {\n          logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n      } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = result.constant ? \"view\" : \"payable\";\n      } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n      }\n\n      return result;\n    }\n\n    var ConstructorFragment =\n    /** @class */\n    function (_super) {\n      __extends(ConstructorFragment, _super);\n\n      function ConstructorFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      ConstructorFragment.prototype.format = function (format) {\n        if (!format) {\n          format = exports.FormatTypes.sighash;\n        }\n\n        if (!exports.FormatTypes[format]) {\n          logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === exports.FormatTypes.json) {\n          return JSON.stringify({\n            type: \"constructor\",\n            stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n            payble: this.payable,\n            gas: this.gas ? this.gas.toNumber() : undefined,\n            inputs: this.inputs.map(function (input) {\n              return JSON.parse(input.format(format));\n            })\n          });\n        }\n\n        if (format === exports.FormatTypes.sighash) {\n          logger.throwError(\"cannot format a constructor for sighash\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"format(sighash)\"\n          });\n        }\n\n        var result = \"constructor(\" + this.inputs.map(function (input) {\n          return input.format(format);\n        }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n          result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n      };\n\n      ConstructorFragment.from = function (value) {\n        if (typeof value === \"string\") {\n          return ConstructorFragment.fromString(value);\n        }\n\n        return ConstructorFragment.fromObject(value);\n      };\n\n      ConstructorFragment.fromObject = function (value) {\n        if (ConstructorFragment.isConstructorFragment(value)) {\n          return value;\n        }\n\n        if (value.type !== \"constructor\") {\n          logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        var state = verifyState(value);\n\n        if (state.constant) {\n          logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        var params = {\n          name: null,\n          type: value.type,\n          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n          payable: state.payable,\n          stateMutability: state.stateMutability,\n          gas: value.gas ? lib$2.BigNumber.from(value.gas) : null\n        };\n        return new ConstructorFragment(_constructorGuard, params);\n      };\n\n      ConstructorFragment.fromString = function (value) {\n        var params = {\n          type: \"constructor\"\n        };\n        value = parseGas(value, params);\n        var parens = value.match(regexParen);\n\n        if (!parens || parens[1].trim() !== \"constructor\") {\n          logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n        parseModifiers(parens[3].trim(), params);\n        return ConstructorFragment.fromObject(params);\n      };\n\n      ConstructorFragment.isConstructorFragment = function (value) {\n        return value && value._isFragment && value.type === \"constructor\";\n      };\n\n      return ConstructorFragment;\n    }(Fragment);\n\n    exports.ConstructorFragment = ConstructorFragment;\n\n    var FunctionFragment =\n    /** @class */\n    function (_super) {\n      __extends(FunctionFragment, _super);\n\n      function FunctionFragment() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      FunctionFragment.prototype.format = function (format) {\n        if (!format) {\n          format = exports.FormatTypes.sighash;\n        }\n\n        if (!exports.FormatTypes[format]) {\n          logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === exports.FormatTypes.json) {\n          return JSON.stringify({\n            type: \"function\",\n            name: this.name,\n            constant: this.constant,\n            stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n            payble: this.payable,\n            gas: this.gas ? this.gas.toNumber() : undefined,\n            inputs: this.inputs.map(function (input) {\n              return JSON.parse(input.format(format));\n            }),\n            ouputs: this.outputs.map(function (output) {\n              return JSON.parse(output.format(format));\n            })\n          });\n        }\n\n        var result = \"\";\n\n        if (format !== exports.FormatTypes.sighash) {\n          result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(function (input) {\n          return input.format(format);\n        }).join(format === exports.FormatTypes.full ? \", \" : \",\") + \") \";\n\n        if (format !== exports.FormatTypes.sighash) {\n          if (this.stateMutability) {\n            if (this.stateMutability !== \"nonpayable\") {\n              result += this.stateMutability + \" \";\n            }\n          } else if (this.constant) {\n            result += \"view \";\n          }\n\n          if (this.outputs && this.outputs.length) {\n            result += \"returns (\" + this.outputs.map(function (output) {\n              return output.format(format);\n            }).join(\", \") + \") \";\n          }\n\n          if (this.gas != null) {\n            result += \"@\" + this.gas.toString() + \" \";\n          }\n        }\n\n        return result.trim();\n      };\n\n      FunctionFragment.from = function (value) {\n        if (typeof value === \"string\") {\n          return FunctionFragment.fromString(value);\n        }\n\n        return FunctionFragment.fromObject(value);\n      };\n\n      FunctionFragment.fromObject = function (value) {\n        if (FunctionFragment.isFunctionFragment(value)) {\n          return value;\n        }\n\n        if (value.type !== \"function\") {\n          logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        var state = verifyState(value);\n        var params = {\n          type: value.type,\n          name: verifyIdentifier(value.name),\n          constant: state.constant,\n          inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n          outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n          payable: state.payable,\n          stateMutability: state.stateMutability,\n          gas: value.gas ? lib$2.BigNumber.from(value.gas) : null\n        };\n        return new FunctionFragment(_constructorGuard, params);\n      };\n\n      FunctionFragment.fromString = function (value) {\n        var params = {\n          type: \"function\"\n        };\n        value = parseGas(value, params);\n        var comps = value.split(\" returns \");\n\n        if (comps.length > 2) {\n          logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        var parens = comps[0].match(regexParen);\n\n        if (!parens) {\n          logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n\n        if (params.name) {\n          verifyIdentifier(params.name);\n        }\n\n        params.inputs = parseParams(parens[2], false);\n        parseModifiers(parens[3].trim(), params); // We have outputs\n\n        if (comps.length > 1) {\n          var returns = comps[1].match(regexParen);\n\n          if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n            logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n          }\n\n          params.outputs = parseParams(returns[2], false);\n        } else {\n          params.outputs = [];\n        }\n\n        return FunctionFragment.fromObject(params);\n      };\n\n      FunctionFragment.isFunctionFragment = function (value) {\n        return value && value._isFragment && value.type === \"function\";\n      };\n\n      return FunctionFragment;\n    }(ConstructorFragment);\n\n    exports.FunctionFragment = FunctionFragment; //export class ErrorFragment extends Fragment {\n    //}\n    //export class StructFragment extends Fragment {\n    //}\n\n    function verifyType(type) {\n      // These need to be transformed to their full description\n      if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n      } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n      } // @TODO: more verification\n\n\n      return type;\n    }\n\n    var regexIdentifier = new RegExp(\"^[A-Za-z_][A-Za-z0-9_]*$\");\n\n    function verifyIdentifier(value) {\n      if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(\"invalid identifier \\\"\" + value + \"\\\"\", \"value\", value);\n      }\n\n      return value;\n    }\n\n    var regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\n    function splitNesting(value) {\n      value = value.trim();\n      var result = [];\n      var accum = \"\";\n      var depth = 0;\n\n      for (var offset = 0; offset < value.length; offset++) {\n        var c = value[offset];\n\n        if (c === \",\" && depth === 0) {\n          result.push(accum);\n          accum = \"\";\n        } else {\n          accum += c;\n\n          if (c === \"(\") {\n            depth++;\n          } else if (c === \")\") {\n            depth--;\n\n            if (depth === -1) {\n              logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n            }\n          }\n        }\n      }\n\n      if (accum) {\n        result.push(accum);\n      }\n\n      return result;\n    }\n  });\n  var fragments$1 = unwrapExports(fragments);\n  var fragments_1 = fragments.FormatTypes;\n  var fragments_2 = fragments.ParamType;\n  var fragments_3 = fragments.Fragment;\n  var fragments_4 = fragments.EventFragment;\n  var fragments_5 = fragments.ConstructorFragment;\n  var fragments_6 = fragments.FunctionFragment;\n  var abstractCoder = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$8.version);\n\n    function checkResultErrors(result) {\n      // Find the first error (if any)\n      var errors = [];\n\n      var checkErrors = function (path, object) {\n        if (!Array.isArray(object)) {\n          return;\n        }\n\n        for (var key in object) {\n          var childPath = path.slice();\n          childPath.push(key);\n\n          try {\n            checkErrors(childPath, object[key]);\n          } catch (error) {\n            errors.push({\n              path: childPath,\n              error: error\n            });\n          }\n        }\n      };\n\n      checkErrors([], result);\n      return errors;\n    }\n\n    exports.checkResultErrors = checkResultErrors;\n\n    var Coder =\n    /** @class */\n    function () {\n      function Coder(name, type, localName, dynamic) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n      }\n\n      Coder.prototype._throwError = function (message, value) {\n        logger.throwArgumentError(message, this.localName, value);\n      };\n\n      return Coder;\n    }();\n\n    exports.Coder = Coder;\n\n    var Writer =\n    /** @class */\n    function () {\n      function Writer(wordSize) {\n        lib$3.defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = lib$1.arrayify([]);\n        this._padding = new Uint8Array(wordSize);\n      }\n\n      Object.defineProperty(Writer.prototype, \"data\", {\n        get: function () {\n          return lib$1.hexlify(this._data);\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(Writer.prototype, \"length\", {\n        get: function () {\n          return this._data.length;\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      Writer.prototype._writeData = function (data) {\n        this._data = lib$1.concat([this._data, data]);\n        return data.length;\n      }; // Arrayish items; padded on the right to wordSize\n\n\n      Writer.prototype.writeBytes = function (value) {\n        var bytes = lib$1.arrayify(value);\n\n        if (bytes.length % this.wordSize) {\n          bytes = lib$1.concat([bytes, this._padding.slice(bytes.length % this.wordSize)]);\n        }\n\n        return this._writeData(bytes);\n      };\n\n      Writer.prototype._getValue = function (value) {\n        var bytes = lib$1.arrayify(lib$2.BigNumber.from(value));\n\n        if (bytes.length > this.wordSize) {\n          logger.throwError(\"value out-of-bounds\", lib.Logger.errors.BUFFER_OVERRUN, {\n            length: this.wordSize,\n            offset: bytes.length\n          });\n        }\n\n        if (bytes.length % this.wordSize) {\n          bytes = lib$1.concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n        }\n\n        return bytes;\n      }; // BigNumberish items; padded on the left to wordSize\n\n\n      Writer.prototype.writeValue = function (value) {\n        return this._writeData(this._getValue(value));\n      };\n\n      Writer.prototype.writeUpdatableValue = function () {\n        var _this = this;\n\n        var offset = this.length;\n        this.writeValue(0);\n        return function (value) {\n          _this._data.set(_this._getValue(value), offset);\n        };\n      };\n\n      return Writer;\n    }();\n\n    exports.Writer = Writer;\n\n    var Reader =\n    /** @class */\n    function () {\n      function Reader(data, wordSize, coerceFunc) {\n        lib$3.defineReadOnly(this, \"_data\", lib$1.arrayify(data));\n        lib$3.defineReadOnly(this, \"wordSize\", wordSize || 32);\n        lib$3.defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        this._offset = 0;\n      }\n\n      Object.defineProperty(Reader.prototype, \"data\", {\n        get: function () {\n          return lib$1.hexlify(this._data);\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(Reader.prototype, \"consumed\", {\n        get: function () {\n          return this._offset;\n        },\n        enumerable: true,\n        configurable: true\n      }); // The default Coerce function\n\n      Reader.coerce = function (name, value) {\n        var match = name.match(\"^u?int([0-9]+)$\");\n\n        if (match && parseInt(match[1]) <= 48) {\n          value = value.toNumber();\n        }\n\n        return value;\n      };\n\n      Reader.prototype.coerce = function (name, value) {\n        if (this._coerceFunc) {\n          return this._coerceFunc(name, value);\n        }\n\n        return Reader.coerce(name, value);\n      };\n\n      Reader.prototype._peekBytes = function (offset, length) {\n        var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\n        if (this._offset + alignedLength > this._data.length) {\n          logger.throwError(\"data out-of-bounds\", lib.Logger.errors.BUFFER_OVERRUN, {\n            length: this._data.length,\n            offset: this._offset + alignedLength\n          });\n        }\n\n        return this._data.slice(this._offset, this._offset + alignedLength);\n      };\n\n      Reader.prototype.subReader = function (offset) {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc);\n      };\n\n      Reader.prototype.readBytes = function (length) {\n        var bytes = this._peekBytes(0, length);\n\n        this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?\n\n        return bytes.slice(0, length);\n      };\n\n      Reader.prototype.readValue = function () {\n        return lib$2.BigNumber.from(this.readBytes(this.wordSize));\n      };\n\n      return Reader;\n    }();\n\n    exports.Reader = Reader;\n  });\n  var abstractCoder$1 = unwrapExports(abstractCoder);\n  var abstractCoder_1 = abstractCoder.checkResultErrors;\n  var abstractCoder_2 = abstractCoder.Coder;\n  var abstractCoder_3 = abstractCoder.Writer;\n  var abstractCoder_4 = abstractCoder.Reader;\n  var sha3 = createCommonjsModule(function (module) {\n    /**\r\n     * [js-sha3]{@link https://github.com/emn178/js-sha3}\r\n     *\r\n     * @version 0.5.7\r\n     * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n     * @copyright Chen, Yi-Cyuan 2015-2016\r\n     * @license MIT\r\n     */\n\n    /*jslint bitwise: true */\n    (function () {\n      'use strict';\n\n      var root = typeof window === 'object' ? window : {};\n      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\n      if (NODE_JS) {\n        root = commonjsGlobal;\n      }\n\n      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;\n      var HEX_CHARS = '0123456789abcdef'.split('');\n      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n      var KECCAK_PADDING = [1, 256, 65536, 16777216];\n      var PADDING = [6, 1536, 393216, 100663296];\n      var SHIFT = [0, 8, 16, 24];\n      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n      var BITS = [224, 256, 384, 512];\n      var SHAKE_BITS = [128, 256];\n      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];\n\n      var createOutputMethod = function (bits, padding, outputType) {\n        return function (message) {\n          return new Keccak(bits, padding, bits).update(message)[outputType]();\n        };\n      };\n\n      var createShakeOutputMethod = function (bits, padding, outputType) {\n        return function (message, outputBits) {\n          return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n        };\n      };\n\n      var createMethod = function (bits, padding) {\n        var method = createOutputMethod(bits, padding, 'hex');\n\n        method.create = function () {\n          return new Keccak(bits, padding, bits);\n        };\n\n        method.update = function (message) {\n          return method.create().update(message);\n        };\n\n        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n          var type = OUTPUT_TYPES[i];\n          method[type] = createOutputMethod(bits, padding, type);\n        }\n\n        return method;\n      };\n\n      var createShakeMethod = function (bits, padding) {\n        var method = createShakeOutputMethod(bits, padding, 'hex');\n\n        method.create = function (outputBits) {\n          return new Keccak(bits, padding, outputBits);\n        };\n\n        method.update = function (message, outputBits) {\n          return method.create(outputBits).update(message);\n        };\n\n        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n          var type = OUTPUT_TYPES[i];\n          method[type] = createShakeOutputMethod(bits, padding, type);\n        }\n\n        return method;\n      };\n\n      var algorithms = [{\n        name: 'keccak',\n        padding: KECCAK_PADDING,\n        bits: BITS,\n        createMethod: createMethod\n      }, {\n        name: 'sha3',\n        padding: PADDING,\n        bits: BITS,\n        createMethod: createMethod\n      }, {\n        name: 'shake',\n        padding: SHAKE_PADDING,\n        bits: SHAKE_BITS,\n        createMethod: createShakeMethod\n      }];\n      var methods = {},\n          methodNames = [];\n\n      for (var i = 0; i < algorithms.length; ++i) {\n        var algorithm = algorithms[i];\n        var bits = algorithm.bits;\n\n        for (var j = 0; j < bits.length; ++j) {\n          var methodName = algorithm.name + '_' + bits[j];\n          methodNames.push(methodName);\n          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n        }\n      }\n\n      function Keccak(bits, padding, outputBits) {\n        this.blocks = [];\n        this.s = [];\n        this.padding = padding;\n        this.outputBits = outputBits;\n        this.reset = true;\n        this.block = 0;\n        this.start = 0;\n        this.blockCount = 1600 - (bits << 1) >> 5;\n        this.byteCount = this.blockCount << 2;\n        this.outputBlocks = outputBits >> 5;\n        this.extraBytes = (outputBits & 31) >> 3;\n\n        for (var i = 0; i < 50; ++i) {\n          this.s[i] = 0;\n        }\n      }\n\n      Keccak.prototype.update = function (message) {\n        var notString = typeof message !== 'string';\n\n        if (notString && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n\n        var length = message.length,\n            blocks = this.blocks,\n            byteCount = this.byteCount,\n            blockCount = this.blockCount,\n            index = 0,\n            s = this.s,\n            i,\n            code;\n\n        while (index < length) {\n          if (this.reset) {\n            this.reset = false;\n            blocks[0] = this.block;\n\n            for (i = 1; i < blockCount + 1; ++i) {\n              blocks[i] = 0;\n            }\n          }\n\n          if (notString) {\n            for (i = this.start; index < length && i < byteCount; ++index) {\n              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n            }\n          } else {\n            for (i = this.start; index < length && i < byteCount; ++index) {\n              code = message.charCodeAt(index);\n\n              if (code < 0x80) {\n                blocks[i >> 2] |= code << SHIFT[i++ & 3];\n              } else if (code < 0x800) {\n                blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n              } else if (code < 0xd800 || code >= 0xe000) {\n                blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n              } else {\n                code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n                blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n                blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n              }\n            }\n          }\n\n          this.lastByteIndex = i;\n\n          if (i >= byteCount) {\n            this.start = i - byteCount;\n            this.block = blocks[blockCount];\n\n            for (i = 0; i < blockCount; ++i) {\n              s[i] ^= blocks[i];\n            }\n\n            f(s);\n            this.reset = true;\n          } else {\n            this.start = i;\n          }\n        }\n\n        return this;\n      };\n\n      Keccak.prototype.finalize = function () {\n        var blocks = this.blocks,\n            i = this.lastByteIndex,\n            blockCount = this.blockCount,\n            s = this.s;\n        blocks[i >> 2] |= this.padding[i & 3];\n\n        if (this.lastByteIndex === this.byteCount) {\n          blocks[0] = blocks[blockCount];\n\n          for (i = 1; i < blockCount + 1; ++i) {\n            blocks[i] = 0;\n          }\n        }\n\n        blocks[blockCount - 1] |= 0x80000000;\n\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n\n        f(s);\n      };\n\n      Keccak.prototype.toString = Keccak.prototype.hex = function () {\n        this.finalize();\n        var blockCount = this.blockCount,\n            s = this.s,\n            outputBlocks = this.outputBlocks,\n            extraBytes = this.extraBytes,\n            i = 0,\n            j = 0;\n        var hex = '',\n            block;\n\n        while (j < outputBlocks) {\n          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            block = s[i];\n            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n          }\n\n          if (j % blockCount === 0) {\n            f(s);\n            i = 0;\n          }\n        }\n\n        if (extraBytes) {\n          block = s[i];\n\n          if (extraBytes > 0) {\n            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];\n          }\n\n          if (extraBytes > 1) {\n            hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];\n          }\n\n          if (extraBytes > 2) {\n            hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];\n          }\n        }\n\n        return hex;\n      };\n\n      Keccak.prototype.arrayBuffer = function () {\n        this.finalize();\n        var blockCount = this.blockCount,\n            s = this.s,\n            outputBlocks = this.outputBlocks,\n            extraBytes = this.extraBytes,\n            i = 0,\n            j = 0;\n        var bytes = this.outputBits >> 3;\n        var buffer;\n\n        if (extraBytes) {\n          buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n        } else {\n          buffer = new ArrayBuffer(bytes);\n        }\n\n        var array = new Uint32Array(buffer);\n\n        while (j < outputBlocks) {\n          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            array[j] = s[i];\n          }\n\n          if (j % blockCount === 0) {\n            f(s);\n          }\n        }\n\n        if (extraBytes) {\n          array[i] = s[i];\n          buffer = buffer.slice(0, bytes);\n        }\n\n        return buffer;\n      };\n\n      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n      Keccak.prototype.digest = Keccak.prototype.array = function () {\n        this.finalize();\n        var blockCount = this.blockCount,\n            s = this.s,\n            outputBlocks = this.outputBlocks,\n            extraBytes = this.extraBytes,\n            i = 0,\n            j = 0;\n        var array = [],\n            offset,\n            block;\n\n        while (j < outputBlocks) {\n          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n            offset = j << 2;\n            block = s[i];\n            array[offset] = block & 0xFF;\n            array[offset + 1] = block >> 8 & 0xFF;\n            array[offset + 2] = block >> 16 & 0xFF;\n            array[offset + 3] = block >> 24 & 0xFF;\n          }\n\n          if (j % blockCount === 0) {\n            f(s);\n          }\n        }\n\n        if (extraBytes) {\n          offset = j << 2;\n          block = s[i];\n\n          if (extraBytes > 0) {\n            array[offset] = block & 0xFF;\n          }\n\n          if (extraBytes > 1) {\n            array[offset + 1] = block >> 8 & 0xFF;\n          }\n\n          if (extraBytes > 2) {\n            array[offset + 2] = block >> 16 & 0xFF;\n          }\n        }\n\n        return array;\n      };\n\n      var f = function (s) {\n        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n        for (n = 0; n < 48; n += 2) {\n          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n          h = c8 ^ (c2 << 1 | c3 >>> 31);\n          l = c9 ^ (c3 << 1 | c2 >>> 31);\n          s[0] ^= h;\n          s[1] ^= l;\n          s[10] ^= h;\n          s[11] ^= l;\n          s[20] ^= h;\n          s[21] ^= l;\n          s[30] ^= h;\n          s[31] ^= l;\n          s[40] ^= h;\n          s[41] ^= l;\n          h = c0 ^ (c4 << 1 | c5 >>> 31);\n          l = c1 ^ (c5 << 1 | c4 >>> 31);\n          s[2] ^= h;\n          s[3] ^= l;\n          s[12] ^= h;\n          s[13] ^= l;\n          s[22] ^= h;\n          s[23] ^= l;\n          s[32] ^= h;\n          s[33] ^= l;\n          s[42] ^= h;\n          s[43] ^= l;\n          h = c2 ^ (c6 << 1 | c7 >>> 31);\n          l = c3 ^ (c7 << 1 | c6 >>> 31);\n          s[4] ^= h;\n          s[5] ^= l;\n          s[14] ^= h;\n          s[15] ^= l;\n          s[24] ^= h;\n          s[25] ^= l;\n          s[34] ^= h;\n          s[35] ^= l;\n          s[44] ^= h;\n          s[45] ^= l;\n          h = c4 ^ (c8 << 1 | c9 >>> 31);\n          l = c5 ^ (c9 << 1 | c8 >>> 31);\n          s[6] ^= h;\n          s[7] ^= l;\n          s[16] ^= h;\n          s[17] ^= l;\n          s[26] ^= h;\n          s[27] ^= l;\n          s[36] ^= h;\n          s[37] ^= l;\n          s[46] ^= h;\n          s[47] ^= l;\n          h = c6 ^ (c0 << 1 | c1 >>> 31);\n          l = c7 ^ (c1 << 1 | c0 >>> 31);\n          s[8] ^= h;\n          s[9] ^= l;\n          s[18] ^= h;\n          s[19] ^= l;\n          s[28] ^= h;\n          s[29] ^= l;\n          s[38] ^= h;\n          s[39] ^= l;\n          s[48] ^= h;\n          s[49] ^= l;\n          b0 = s[0];\n          b1 = s[1];\n          b32 = s[11] << 4 | s[10] >>> 28;\n          b33 = s[10] << 4 | s[11] >>> 28;\n          b14 = s[20] << 3 | s[21] >>> 29;\n          b15 = s[21] << 3 | s[20] >>> 29;\n          b46 = s[31] << 9 | s[30] >>> 23;\n          b47 = s[30] << 9 | s[31] >>> 23;\n          b28 = s[40] << 18 | s[41] >>> 14;\n          b29 = s[41] << 18 | s[40] >>> 14;\n          b20 = s[2] << 1 | s[3] >>> 31;\n          b21 = s[3] << 1 | s[2] >>> 31;\n          b2 = s[13] << 12 | s[12] >>> 20;\n          b3 = s[12] << 12 | s[13] >>> 20;\n          b34 = s[22] << 10 | s[23] >>> 22;\n          b35 = s[23] << 10 | s[22] >>> 22;\n          b16 = s[33] << 13 | s[32] >>> 19;\n          b17 = s[32] << 13 | s[33] >>> 19;\n          b48 = s[42] << 2 | s[43] >>> 30;\n          b49 = s[43] << 2 | s[42] >>> 30;\n          b40 = s[5] << 30 | s[4] >>> 2;\n          b41 = s[4] << 30 | s[5] >>> 2;\n          b22 = s[14] << 6 | s[15] >>> 26;\n          b23 = s[15] << 6 | s[14] >>> 26;\n          b4 = s[25] << 11 | s[24] >>> 21;\n          b5 = s[24] << 11 | s[25] >>> 21;\n          b36 = s[34] << 15 | s[35] >>> 17;\n          b37 = s[35] << 15 | s[34] >>> 17;\n          b18 = s[45] << 29 | s[44] >>> 3;\n          b19 = s[44] << 29 | s[45] >>> 3;\n          b10 = s[6] << 28 | s[7] >>> 4;\n          b11 = s[7] << 28 | s[6] >>> 4;\n          b42 = s[17] << 23 | s[16] >>> 9;\n          b43 = s[16] << 23 | s[17] >>> 9;\n          b24 = s[26] << 25 | s[27] >>> 7;\n          b25 = s[27] << 25 | s[26] >>> 7;\n          b6 = s[36] << 21 | s[37] >>> 11;\n          b7 = s[37] << 21 | s[36] >>> 11;\n          b38 = s[47] << 24 | s[46] >>> 8;\n          b39 = s[46] << 24 | s[47] >>> 8;\n          b30 = s[8] << 27 | s[9] >>> 5;\n          b31 = s[9] << 27 | s[8] >>> 5;\n          b12 = s[18] << 20 | s[19] >>> 12;\n          b13 = s[19] << 20 | s[18] >>> 12;\n          b44 = s[29] << 7 | s[28] >>> 25;\n          b45 = s[28] << 7 | s[29] >>> 25;\n          b26 = s[38] << 8 | s[39] >>> 24;\n          b27 = s[39] << 8 | s[38] >>> 24;\n          b8 = s[48] << 14 | s[49] >>> 18;\n          b9 = s[49] << 14 | s[48] >>> 18;\n          s[0] = b0 ^ ~b2 & b4;\n          s[1] = b1 ^ ~b3 & b5;\n          s[10] = b10 ^ ~b12 & b14;\n          s[11] = b11 ^ ~b13 & b15;\n          s[20] = b20 ^ ~b22 & b24;\n          s[21] = b21 ^ ~b23 & b25;\n          s[30] = b30 ^ ~b32 & b34;\n          s[31] = b31 ^ ~b33 & b35;\n          s[40] = b40 ^ ~b42 & b44;\n          s[41] = b41 ^ ~b43 & b45;\n          s[2] = b2 ^ ~b4 & b6;\n          s[3] = b3 ^ ~b5 & b7;\n          s[12] = b12 ^ ~b14 & b16;\n          s[13] = b13 ^ ~b15 & b17;\n          s[22] = b22 ^ ~b24 & b26;\n          s[23] = b23 ^ ~b25 & b27;\n          s[32] = b32 ^ ~b34 & b36;\n          s[33] = b33 ^ ~b35 & b37;\n          s[42] = b42 ^ ~b44 & b46;\n          s[43] = b43 ^ ~b45 & b47;\n          s[4] = b4 ^ ~b6 & b8;\n          s[5] = b5 ^ ~b7 & b9;\n          s[14] = b14 ^ ~b16 & b18;\n          s[15] = b15 ^ ~b17 & b19;\n          s[24] = b24 ^ ~b26 & b28;\n          s[25] = b25 ^ ~b27 & b29;\n          s[34] = b34 ^ ~b36 & b38;\n          s[35] = b35 ^ ~b37 & b39;\n          s[44] = b44 ^ ~b46 & b48;\n          s[45] = b45 ^ ~b47 & b49;\n          s[6] = b6 ^ ~b8 & b0;\n          s[7] = b7 ^ ~b9 & b1;\n          s[16] = b16 ^ ~b18 & b10;\n          s[17] = b17 ^ ~b19 & b11;\n          s[26] = b26 ^ ~b28 & b20;\n          s[27] = b27 ^ ~b29 & b21;\n          s[36] = b36 ^ ~b38 & b30;\n          s[37] = b37 ^ ~b39 & b31;\n          s[46] = b46 ^ ~b48 & b40;\n          s[47] = b47 ^ ~b49 & b41;\n          s[8] = b8 ^ ~b0 & b2;\n          s[9] = b9 ^ ~b1 & b3;\n          s[18] = b18 ^ ~b10 & b12;\n          s[19] = b19 ^ ~b11 & b13;\n          s[28] = b28 ^ ~b20 & b22;\n          s[29] = b29 ^ ~b21 & b23;\n          s[38] = b38 ^ ~b30 & b32;\n          s[39] = b39 ^ ~b31 & b33;\n          s[48] = b48 ^ ~b40 & b42;\n          s[49] = b49 ^ ~b41 & b43;\n          s[0] ^= RC[n];\n          s[1] ^= RC[n + 1];\n        }\n      };\n\n      if (COMMON_JS) {\n        module.exports = methods;\n      } else {\n        for (var i = 0; i < methodNames.length; ++i) {\n          root[methodNames[i]] = methods[methodNames[i]];\n        }\n      }\n    })();\n  });\n  var lib$4 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n      return mod && mod.__esModule ? mod : {\n        \"default\": mod\n      };\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var js_sha3_1 = __importDefault(sha3);\n\n    function keccak256(data) {\n      return '0x' + js_sha3_1.default.keccak_256(lib$1.arrayify(data));\n    }\n\n    exports.keccak256 = keccak256;\n  });\n  var index$4 = unwrapExports(lib$4);\n  var lib_1$4 = lib$4.keccak256;\n\n  var _version$a = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"rlp/5.0.3\";\n  });\n\n  var _version$b = unwrapExports(_version$a);\n\n  var _version_1$5 = _version$a.version;\n  var lib$5 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); //See: https://github.com/ethereum/wiki/wiki/RLP\n\n    var logger = new lib.Logger(_version$a.version);\n\n    function arrayifyInteger(value) {\n      var result = [];\n\n      while (value) {\n        result.unshift(value & 0xff);\n        value >>= 8;\n      }\n\n      return result;\n    }\n\n    function unarrayifyInteger(data, offset, length) {\n      var result = 0;\n\n      for (var i = 0; i < length; i++) {\n        result = result * 256 + data[offset + i];\n      }\n\n      return result;\n    }\n\n    function _encode(object) {\n      if (Array.isArray(object)) {\n        var payload_1 = [];\n        object.forEach(function (child) {\n          payload_1 = payload_1.concat(_encode(child));\n        });\n\n        if (payload_1.length <= 55) {\n          payload_1.unshift(0xc0 + payload_1.length);\n          return payload_1;\n        }\n\n        var length_1 = arrayifyInteger(payload_1.length);\n        length_1.unshift(0xf7 + length_1.length);\n        return length_1.concat(payload_1);\n      }\n\n      if (!lib$1.isBytesLike(object)) {\n        logger.throwArgumentError(\"RLP object must be BytesLike\", \"object\", object);\n      }\n\n      var data = Array.prototype.slice.call(lib$1.arrayify(object));\n\n      if (data.length === 1 && data[0] <= 0x7f) {\n        return data;\n      } else if (data.length <= 55) {\n        data.unshift(0x80 + data.length);\n        return data;\n      }\n\n      var length = arrayifyInteger(data.length);\n      length.unshift(0xb7 + length.length);\n      return length.concat(data);\n    }\n\n    function encode(object) {\n      return lib$1.hexlify(_encode(object));\n    }\n\n    exports.encode = encode;\n\n    function _decodeChildren(data, offset, childOffset, length) {\n      var result = [];\n\n      while (childOffset < offset + 1 + length) {\n        var decoded = _decode(data, childOffset);\n\n        result.push(decoded.result);\n        childOffset += decoded.consumed;\n\n        if (childOffset > offset + 1 + length) {\n          logger.throwError(\"child data too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n        }\n      }\n\n      return {\n        consumed: 1 + length,\n        result: result\n      };\n    } // returns { consumed: number, result: Object }\n\n\n    function _decode(data, offset) {\n      if (data.length === 0) {\n        logger.throwError(\"data too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n      } // Array with extra length prefix\n\n\n      if (data[offset] >= 0xf8) {\n        var lengthLength = data[offset] - 0xf7;\n\n        if (offset + 1 + lengthLength > data.length) {\n          logger.throwError(\"data short segment too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n        }\n\n        var length_2 = unarrayifyInteger(data, offset + 1, lengthLength);\n\n        if (offset + 1 + lengthLength + length_2 > data.length) {\n          logger.throwError(\"data long segment too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n        }\n\n        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length_2);\n      } else if (data[offset] >= 0xc0) {\n        var length_3 = data[offset] - 0xc0;\n\n        if (offset + 1 + length_3 > data.length) {\n          logger.throwError(\"data array too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n        }\n\n        return _decodeChildren(data, offset, offset + 1, length_3);\n      } else if (data[offset] >= 0xb8) {\n        var lengthLength = data[offset] - 0xb7;\n\n        if (offset + 1 + lengthLength > data.length) {\n          logger.throwError(\"data array too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n        }\n\n        var length_4 = unarrayifyInteger(data, offset + 1, lengthLength);\n\n        if (offset + 1 + lengthLength + length_4 > data.length) {\n          logger.throwError(\"data array too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n        }\n\n        var result = lib$1.hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length_4));\n        return {\n          consumed: 1 + lengthLength + length_4,\n          result: result\n        };\n      } else if (data[offset] >= 0x80) {\n        var length_5 = data[offset] - 0x80;\n\n        if (offset + 1 + length_5 > data.length) {\n          logger.throwError(\"data too short\", lib.Logger.errors.BUFFER_OVERRUN, {});\n        }\n\n        var result = lib$1.hexlify(data.slice(offset + 1, offset + 1 + length_5));\n        return {\n          consumed: 1 + length_5,\n          result: result\n        };\n      }\n\n      return {\n        consumed: 1,\n        result: lib$1.hexlify(data[offset])\n      };\n    }\n\n    function decode(data) {\n      var bytes = lib$1.arrayify(data);\n\n      var decoded = _decode(bytes, 0);\n\n      if (decoded.consumed !== bytes.length) {\n        logger.throwArgumentError(\"invalid rlp data\", \"data\", data);\n      }\n\n      return decoded.result;\n    }\n\n    exports.decode = decode;\n  });\n  var index$5 = unwrapExports(lib$5);\n  var lib_1$5 = lib$5.encode;\n  var lib_2$4 = lib$5.decode;\n\n  var _version$c = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"address/5.0.3\";\n  });\n\n  var _version$d = unwrapExports(_version$c);\n\n  var _version_1$6 = _version$c.version;\n  var lib$6 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // We use this for base 36 maths\n\n    var logger = new lib.Logger(_version$c.version);\n\n    function getChecksumAddress(address) {\n      if (!lib$1.isHexString(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n      }\n\n      address = address.toLowerCase();\n      var chars = address.substring(2).split(\"\");\n      var expanded = new Uint8Array(40);\n\n      for (var i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n      }\n\n      var hashed = lib$1.arrayify(lib$4.keccak256(expanded));\n\n      for (var i = 0; i < 40; i += 2) {\n        if (hashed[i >> 1] >> 4 >= 8) {\n          chars[i] = chars[i].toUpperCase();\n        }\n\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n          chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n      }\n\n      return \"0x\" + chars.join(\"\");\n    } // Shims for environments that are missing some required constants and functions\n\n\n    var MAX_SAFE_INTEGER = 0x1fffffffffffff;\n\n    function log10(x) {\n      if (Math.log10) {\n        return Math.log10(x);\n      }\n\n      return Math.log(x) / Math.LN10;\n    } // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n    // Create lookup table\n\n\n    var ibanLookup = {};\n\n    for (var i = 0; i < 10; i++) {\n      ibanLookup[String(i)] = String(i);\n    }\n\n    for (var i = 0; i < 26; i++) {\n      ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);\n    } // How many decimal digits can we process? (for 64-bit float, this is 15)\n\n\n    var safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n\n    function ibanChecksum(address) {\n      address = address.toUpperCase();\n      address = address.substring(4) + address.substring(0, 2) + \"00\";\n      var expanded = address.split(\"\").map(function (c) {\n        return ibanLookup[c];\n      }).join(\"\"); // Javascript can handle integers safely up to 15 (decimal) digits\n\n      while (expanded.length >= safeDigits) {\n        var block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n      }\n\n      var checksum = String(98 - parseInt(expanded, 10) % 97);\n\n      while (checksum.length < 2) {\n        checksum = \"0\" + checksum;\n      }\n\n      return checksum;\n    }\n\n    ;\n\n    function getAddress(address) {\n      var result = null;\n\n      if (typeof address !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n      }\n\n      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") {\n          address = \"0x\" + address;\n        }\n\n        result = getChecksumAddress(address); // It is a checksummed address with a bad checksum\n\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n          logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        } // Maybe ICAP? (we only support direct mode)\n\n      } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n          logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n\n        result = new bn.BN(address.substring(4), 36).toString(16);\n\n        while (result.length < 40) {\n          result = \"0\" + result;\n        }\n\n        result = getChecksumAddress(\"0x\" + result);\n      } else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n      }\n\n      return result;\n    }\n\n    exports.getAddress = getAddress;\n\n    function isAddress(address) {\n      try {\n        getAddress(address);\n        return true;\n      } catch (error) {}\n\n      return false;\n    }\n\n    exports.isAddress = isAddress;\n\n    function getIcapAddress(address) {\n      var base36 = new bn.BN(getAddress(address).substring(2), 16).toString(36).toUpperCase();\n\n      while (base36.length < 30) {\n        base36 = \"0\" + base36;\n      }\n\n      return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n    }\n\n    exports.getIcapAddress = getIcapAddress; // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\n\n    function getContractAddress(transaction) {\n      var from = null;\n\n      try {\n        from = getAddress(transaction.from);\n      } catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n      }\n\n      var nonce = lib$1.stripZeros(lib$1.arrayify(lib$2.BigNumber.from(transaction.nonce).toHexString()));\n      return getAddress(lib$1.hexDataSlice(lib$4.keccak256(lib$5.encode([from, nonce])), 12));\n    }\n\n    exports.getContractAddress = getContractAddress;\n\n    function getCreate2Address(from, salt, initCodeHash) {\n      if (lib$1.hexDataLength(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n      }\n\n      if (lib$1.hexDataLength(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n      }\n\n      return getAddress(lib$1.hexDataSlice(lib$4.keccak256(lib$1.concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n    }\n\n    exports.getCreate2Address = getCreate2Address;\n  });\n  var index$6 = unwrapExports(lib$6);\n  var lib_1$6 = lib$6.getAddress;\n  var lib_2$5 = lib$6.isAddress;\n  var lib_3$4 = lib$6.getIcapAddress;\n  var lib_4$3 = lib$6.getContractAddress;\n  var lib_5$3 = lib$6.getCreate2Address;\n  var address = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var AddressCoder =\n    /** @class */\n    function (_super) {\n      __extends(AddressCoder, _super);\n\n      function AddressCoder(localName) {\n        return _super.call(this, \"address\", \"address\", localName, false) || this;\n      }\n\n      AddressCoder.prototype.encode = function (writer, value) {\n        try {\n          lib$6.getAddress(value);\n        } catch (error) {\n          this._throwError(error.message, value);\n        }\n\n        return writer.writeValue(value);\n      };\n\n      AddressCoder.prototype.decode = function (reader) {\n        return lib$6.getAddress(lib$1.hexZeroPad(reader.readValue().toHexString(), 20));\n      };\n\n      return AddressCoder;\n    }(abstractCoder.Coder);\n\n    exports.AddressCoder = AddressCoder;\n  });\n  var address$1 = unwrapExports(address);\n  var address_2 = address.AddressCoder;\n  var anonymous = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // Clones the functionality of an existing Coder, but without a localName\n\n    var AnonymousCoder =\n    /** @class */\n    function (_super) {\n      __extends(AnonymousCoder, _super);\n\n      function AnonymousCoder(coder) {\n        var _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic) || this;\n\n        _this.coder = coder;\n        return _this;\n      }\n\n      AnonymousCoder.prototype.encode = function (writer, value) {\n        return this.coder.encode(writer, value);\n      };\n\n      AnonymousCoder.prototype.decode = function (reader) {\n        return this.coder.decode(reader);\n      };\n\n      return AnonymousCoder;\n    }(abstractCoder.Coder);\n\n    exports.AnonymousCoder = AnonymousCoder;\n  });\n  var anonymous$1 = unwrapExports(anonymous);\n  var anonymous_1 = anonymous.AnonymousCoder;\n  var array = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$8.version);\n\n    function pack(writer, coders, values) {\n      var arrayValues = null;\n\n      if (Array.isArray(values)) {\n        arrayValues = values;\n      } else if (values && typeof values === \"object\") {\n        var unique_1 = {};\n        arrayValues = coders.map(function (coder) {\n          var name = coder.localName;\n\n          if (!name) {\n            logger.throwError(\"cannot encode object for signature with missing names\", lib.Logger.errors.INVALID_ARGUMENT, {\n              argument: \"values\",\n              coder: coder,\n              value: values\n            });\n          }\n\n          if (unique_1[name]) {\n            logger.throwError(\"cannot encode object for signature with duplicate names\", lib.Logger.errors.INVALID_ARGUMENT, {\n              argument: \"values\",\n              coder: coder,\n              value: values\n            });\n          }\n\n          unique_1[name] = true;\n          return values[name];\n        });\n      } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n      }\n\n      if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n      }\n\n      var staticWriter = new abstractCoder.Writer(writer.wordSize);\n      var dynamicWriter = new abstractCoder.Writer(writer.wordSize);\n      var updateFuncs = [];\n      coders.forEach(function (coder, index) {\n        var value = arrayValues[index];\n\n        if (coder.dynamic) {\n          // Get current dynamic offset (for the future pointer)\n          var dynamicOffset_1 = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n          coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n          var updateFunc_1 = staticWriter.writeUpdatableValue();\n          updateFuncs.push(function (baseOffset) {\n            updateFunc_1(baseOffset + dynamicOffset_1);\n          });\n        } else {\n          coder.encode(staticWriter, value);\n        }\n      }); // Backfill all the dynamic offsets, now that we know the static length\n\n      updateFuncs.forEach(function (func) {\n        func(staticWriter.length);\n      });\n      var length = writer.writeBytes(staticWriter.data);\n      length += writer.writeBytes(dynamicWriter.data);\n      return length;\n    }\n\n    exports.pack = pack;\n\n    function unpack(reader, coders) {\n      var values = []; // A reader anchored to this base\n\n      var baseReader = reader.subReader(0); // The amount of dynamic data read; to consume later to synchronize\n\n      var dynamicLength = 0;\n      coders.forEach(function (coder) {\n        var value = null;\n\n        if (coder.dynamic) {\n          var offset = reader.readValue();\n          var offsetReader = baseReader.subReader(offset.toNumber());\n\n          try {\n            value = coder.decode(offsetReader);\n          } catch (error) {\n            // Cannot recover from this\n            if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {\n              throw error;\n            }\n\n            value = error;\n            value.baseType = coder.name;\n            value.name = coder.localName;\n            value.type = coder.type;\n          }\n\n          dynamicLength += offsetReader.consumed;\n        } else {\n          try {\n            value = coder.decode(reader);\n          } catch (error) {\n            // Cannot recover from this\n            if (error.code === lib.Logger.errors.BUFFER_OVERRUN) {\n              throw error;\n            }\n\n            value = error;\n            value.baseType = coder.name;\n            value.name = coder.localName;\n            value.type = coder.type;\n          }\n        }\n\n        if (value != undefined) {\n          values.push(value);\n        }\n      }); // @TODO: get rid of this an see if it still works?\n      // Consume the dynamic components in the main reader\n\n      reader.readBytes(dynamicLength); // We only output named properties for uniquely named coders\n\n      var uniqueNames = coders.reduce(function (accum, coder) {\n        var name = coder.localName;\n\n        if (name) {\n          if (!accum[name]) {\n            accum[name] = 0;\n          }\n\n          accum[name]++;\n        }\n\n        return accum;\n      }, {}); // Add any named parameters (i.e. tuples)\n\n      coders.forEach(function (coder, index) {\n        var name = coder.localName;\n\n        if (!name || uniqueNames[name] !== 1) {\n          return;\n        }\n\n        if (name === \"length\") {\n          name = \"_length\";\n        }\n\n        if (values[name] != null) {\n          return;\n        }\n\n        var value = values[index];\n\n        if (value instanceof Error) {\n          Object.defineProperty(values, name, {\n            get: function () {\n              throw value;\n            }\n          });\n        } else {\n          values[name] = value;\n        }\n      });\n\n      var _loop_1 = function (i) {\n        var value = values[i];\n\n        if (value instanceof Error) {\n          Object.defineProperty(values, i, {\n            get: function () {\n              throw value;\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < values.length; i++) {\n        _loop_1(i);\n      }\n\n      return Object.freeze(values);\n    }\n\n    exports.unpack = unpack;\n\n    var ArrayCoder =\n    /** @class */\n    function (_super) {\n      __extends(ArrayCoder, _super);\n\n      function ArrayCoder(coder, length, localName) {\n        var _this = this;\n\n        var type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n        var dynamic = length === -1 || coder.dynamic;\n        _this = _super.call(this, \"array\", type, localName, dynamic) || this;\n        _this.coder = coder;\n        _this.length = length;\n        return _this;\n      }\n\n      ArrayCoder.prototype.encode = function (writer, value) {\n        if (!Array.isArray(value)) {\n          this._throwError(\"expected array value\", value);\n        }\n\n        var count = this.length;\n\n        if (count === -1) {\n          count = value.length;\n          writer.writeValue(value.length);\n        }\n\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n        var coders = [];\n\n        for (var i = 0; i < value.length; i++) {\n          coders.push(this.coder);\n        }\n\n        return pack(writer, coders, value);\n      };\n\n      ArrayCoder.prototype.decode = function (reader) {\n        var count = this.length;\n\n        if (count === -1) {\n          count = reader.readValue().toNumber();\n        }\n\n        var coders = [];\n\n        for (var i = 0; i < count; i++) {\n          coders.push(new anonymous.AnonymousCoder(this.coder));\n        }\n\n        return reader.coerce(this.name, unpack(reader, coders));\n      };\n\n      return ArrayCoder;\n    }(abstractCoder.Coder);\n\n    exports.ArrayCoder = ArrayCoder;\n  });\n  var array$1 = unwrapExports(array);\n  var array_1 = array.pack;\n  var array_2 = array.unpack;\n  var array_3 = array.ArrayCoder;\n  var boolean_1 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var BooleanCoder =\n    /** @class */\n    function (_super) {\n      __extends(BooleanCoder, _super);\n\n      function BooleanCoder(localName) {\n        return _super.call(this, \"bool\", \"bool\", localName, false) || this;\n      }\n\n      BooleanCoder.prototype.encode = function (writer, value) {\n        return writer.writeValue(value ? 1 : 0);\n      };\n\n      BooleanCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n      };\n\n      return BooleanCoder;\n    }(abstractCoder.Coder);\n\n    exports.BooleanCoder = BooleanCoder;\n  });\n  var boolean = unwrapExports(boolean_1);\n  var boolean_2 = boolean_1.BooleanCoder;\n  var bytes = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var DynamicBytesCoder =\n    /** @class */\n    function (_super) {\n      __extends(DynamicBytesCoder, _super);\n\n      function DynamicBytesCoder(type, localName) {\n        return _super.call(this, type, type, localName, true) || this;\n      }\n\n      DynamicBytesCoder.prototype.encode = function (writer, value) {\n        value = lib$1.arrayify(value);\n        var length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n      };\n\n      DynamicBytesCoder.prototype.decode = function (reader) {\n        return reader.readBytes(reader.readValue().toNumber());\n      };\n\n      return DynamicBytesCoder;\n    }(abstractCoder.Coder);\n\n    exports.DynamicBytesCoder = DynamicBytesCoder;\n\n    var BytesCoder =\n    /** @class */\n    function (_super) {\n      __extends(BytesCoder, _super);\n\n      function BytesCoder(localName) {\n        return _super.call(this, \"bytes\", localName) || this;\n      }\n\n      BytesCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.name, lib$1.hexlify(_super.prototype.decode.call(this, reader)));\n      };\n\n      return BytesCoder;\n    }(DynamicBytesCoder);\n\n    exports.BytesCoder = BytesCoder;\n  });\n  var bytes$1 = unwrapExports(bytes);\n  var bytes_2 = bytes.DynamicBytesCoder;\n  var bytes_3 = bytes.BytesCoder;\n  var fixedBytes = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // @TODO: Merge this with bytes\n\n    var FixedBytesCoder =\n    /** @class */\n    function (_super) {\n      __extends(FixedBytesCoder, _super);\n\n      function FixedBytesCoder(size, localName) {\n        var _this = this;\n\n        var name = \"bytes\" + String(size);\n        _this = _super.call(this, name, name, localName, false) || this;\n        _this.size = size;\n        return _this;\n      }\n\n      FixedBytesCoder.prototype.encode = function (writer, value) {\n        var data = lib$1.arrayify(value);\n\n        if (data.length !== this.size) {\n          this._throwError(\"incorrect data length\", value);\n        }\n\n        return writer.writeBytes(data);\n      };\n\n      FixedBytesCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.name, lib$1.hexlify(reader.readBytes(this.size)));\n      };\n\n      return FixedBytesCoder;\n    }(abstractCoder.Coder);\n\n    exports.FixedBytesCoder = FixedBytesCoder;\n  });\n  var fixedBytes$1 = unwrapExports(fixedBytes);\n  var fixedBytes_1 = fixedBytes.FixedBytesCoder;\n\n  var _null = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var NullCoder =\n    /** @class */\n    function (_super) {\n      __extends(NullCoder, _super);\n\n      function NullCoder(localName) {\n        return _super.call(this, \"null\", \"\", localName, false) || this;\n      }\n\n      NullCoder.prototype.encode = function (writer, value) {\n        if (value != null) {\n          this._throwError(\"not null\", value);\n        }\n\n        return writer.writeBytes([]);\n      };\n\n      NullCoder.prototype.decode = function (reader) {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n      };\n\n      return NullCoder;\n    }(abstractCoder.Coder);\n\n    exports.NullCoder = NullCoder;\n  });\n\n  var _null$1 = unwrapExports(_null);\n\n  var _null_1 = _null.NullCoder;\n  var lib$7 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var AddressZero = \"0x0000000000000000000000000000000000000000\";\n    exports.AddressZero = AddressZero;\n    var HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n    exports.HashZero = HashZero; // NFKC (composed)             // (decomposed)\n\n    var EtherSymbol = \"\\u039e\"; // \"\\uD835\\uDF63\";\n\n    exports.EtherSymbol = EtherSymbol;\n    var NegativeOne = lib$2.BigNumber.from(-1);\n    exports.NegativeOne = NegativeOne;\n    var Zero = lib$2.BigNumber.from(0);\n    exports.Zero = Zero;\n    var One = lib$2.BigNumber.from(1);\n    exports.One = One;\n    var Two = lib$2.BigNumber.from(2);\n    exports.Two = Two;\n    var WeiPerEther = lib$2.BigNumber.from(\"1000000000000000000\");\n    exports.WeiPerEther = WeiPerEther;\n    var MaxUint256 = lib$2.BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n    exports.MaxUint256 = MaxUint256;\n  });\n  var index$7 = unwrapExports(lib$7);\n  var lib_1$7 = lib$7.AddressZero;\n  var lib_2$6 = lib$7.HashZero;\n  var lib_3$5 = lib$7.EtherSymbol;\n  var lib_4$4 = lib$7.NegativeOne;\n  var lib_5$4 = lib$7.Zero;\n  var lib_6$2 = lib$7.One;\n  var lib_7$2 = lib$7.Two;\n  var lib_8$1 = lib$7.WeiPerEther;\n  var lib_9$1 = lib$7.MaxUint256;\n  var number = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var NumberCoder =\n    /** @class */\n    function (_super) {\n      __extends(NumberCoder, _super);\n\n      function NumberCoder(size, signed, localName) {\n        var _this = this;\n\n        var name = (signed ? \"int\" : \"uint\") + size * 8;\n        _this = _super.call(this, name, name, localName, false) || this;\n        _this.size = size;\n        _this.signed = signed;\n        return _this;\n      }\n\n      NumberCoder.prototype.encode = function (writer, value) {\n        var v = lib$2.BigNumber.from(value); // Check bounds are safe for encoding\n\n        var maxUintValue = lib$7.MaxUint256.mask(writer.wordSize * 8);\n\n        if (this.signed) {\n          var bounds = maxUintValue.mask(this.size * 8 - 1);\n\n          if (v.gt(bounds) || v.lt(bounds.add(lib$7.One).mul(lib$7.NegativeOne))) {\n            this._throwError(\"value out-of-bounds\", value);\n          }\n        } else if (v.lt(lib$7.Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n          this._throwError(\"value out-of-bounds\", value);\n        }\n\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n        if (this.signed) {\n          v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n\n        return writer.writeValue(v);\n      };\n\n      NumberCoder.prototype.decode = function (reader) {\n        var value = reader.readValue().mask(this.size * 8);\n\n        if (this.signed) {\n          value = value.fromTwos(this.size * 8);\n        }\n\n        return reader.coerce(this.name, value);\n      };\n\n      return NumberCoder;\n    }(abstractCoder.Coder);\n\n    exports.NumberCoder = NumberCoder;\n  });\n  var number$1 = unwrapExports(number);\n  var number_1 = number.NumberCoder;\n\n  var _version$e = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"strings/5.0.3\";\n  });\n\n  var _version$f = unwrapExports(_version$e);\n\n  var _version_1$7 = _version$e.version;\n  var utf8 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$e.version); ///////////////////////////////\n\n    var UnicodeNormalizationForm;\n\n    (function (UnicodeNormalizationForm) {\n      UnicodeNormalizationForm[\"current\"] = \"\";\n      UnicodeNormalizationForm[\"NFC\"] = \"NFC\";\n      UnicodeNormalizationForm[\"NFD\"] = \"NFD\";\n      UnicodeNormalizationForm[\"NFKC\"] = \"NFKC\";\n      UnicodeNormalizationForm[\"NFKD\"] = \"NFKD\";\n    })(UnicodeNormalizationForm = exports.UnicodeNormalizationForm || (exports.UnicodeNormalizationForm = {}));\n\n    ;\n    var Utf8ErrorReason;\n\n    (function (Utf8ErrorReason) {\n      // A continuation byte was present where there was nothing to continue\n      // - offset = the index the codepoint began in\n      Utf8ErrorReason[\"UNEXPECTED_CONTINUE\"] = \"unexpected continuation byte\"; // An invalid (non-continuation) byte to start a UTF-8 codepoint was found\n      // - offset = the index the codepoint began in\n\n      Utf8ErrorReason[\"BAD_PREFIX\"] = \"bad codepoint prefix\"; // The string is too short to process the expected codepoint\n      // - offset = the index the codepoint began in\n\n      Utf8ErrorReason[\"OVERRUN\"] = \"string overrun\"; // A missing continuation byte was expected but not found\n      // - offset = the index the continuation byte was expected at\n\n      Utf8ErrorReason[\"MISSING_CONTINUE\"] = \"missing continuation byte\"; // The computed code point is outside the range for UTF-8\n      // - offset       = start of this codepoint\n      // - badCodepoint = the computed codepoint; outside the UTF-8 range\n\n      Utf8ErrorReason[\"OUT_OF_RANGE\"] = \"out of UTF-8 range\"; // UTF-8 strings may not contain UTF-16 surrogate pairs\n      // - offset       = start of this codepoint\n      // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range\n\n      Utf8ErrorReason[\"UTF16_SURROGATE\"] = \"UTF-16 surrogate\"; // The string is an overlong reperesentation\n      // - offset       = start of this codepoint\n      // - badCodepoint = the computed codepoint; already bounds checked\n\n      Utf8ErrorReason[\"OVERLONG\"] = \"overlong representation\";\n    })(Utf8ErrorReason = exports.Utf8ErrorReason || (exports.Utf8ErrorReason = {}));\n\n    ;\n\n    function errorFunc(reason, offset, bytes, output, badCodepoint) {\n      return logger.throwArgumentError(\"invalid codepoint at offset \" + offset + \"; \" + reason, \"bytes\", bytes);\n    }\n\n    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {\n      // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes\n      if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {\n        var i = 0;\n\n        for (var o = offset + 1; o < bytes.length; o++) {\n          if (bytes[o] >> 6 !== 0x02) {\n            break;\n          }\n\n          i++;\n        }\n\n        return i;\n      } // This byte runs us past the end of the string, so just jump to the end\n      // (but the first byte was read already read and therefore skipped)\n\n\n      if (reason === Utf8ErrorReason.OVERRUN) {\n        return bytes.length - offset - 1;\n      } // Nothing to skip\n\n\n      return 0;\n    }\n\n    function replaceFunc(reason, offset, bytes, output, badCodepoint) {\n      // Overlong representations are otherwise \"valid\" code points; just non-deistingtished\n      if (reason === Utf8ErrorReason.OVERLONG) {\n        output.push(badCodepoint);\n        return 0;\n      } // Put the replacement character into the output\n\n\n      output.push(0xfffd); // Otherwise, process as if ignoring errors\n\n      return ignoreFunc(reason, offset, bytes, output, badCodepoint);\n    } // Common error handing strategies\n\n\n    exports.Utf8ErrorFuncs = Object.freeze({\n      error: errorFunc,\n      ignore: ignoreFunc,\n      replace: replaceFunc\n    }); // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499\n\n    function getUtf8CodePoints(bytes, onError) {\n      if (onError == null) {\n        onError = exports.Utf8ErrorFuncs.error;\n      }\n\n      bytes = lib$1.arrayify(bytes);\n      var result = [];\n      var i = 0; // Invalid bytes are ignored\n\n      while (i < bytes.length) {\n        var c = bytes[i++]; // 0xxx xxxx\n\n        if (c >> 7 === 0) {\n          result.push(c);\n          continue;\n        } // Multibyte; how many bytes left for this character?\n\n\n        var extraLength = null;\n        var overlongMask = null; // 110x xxxx 10xx xxxx\n\n        if ((c & 0xe0) === 0xc0) {\n          extraLength = 1;\n          overlongMask = 0x7f; // 1110 xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf0) === 0xe0) {\n          extraLength = 2;\n          overlongMask = 0x7ff; // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx\n        } else if ((c & 0xf8) === 0xf0) {\n          extraLength = 3;\n          overlongMask = 0xffff;\n        } else {\n          if ((c & 0xc0) === 0x80) {\n            i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);\n          } else {\n            i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);\n          }\n\n          continue;\n        } // Do we have enough bytes in our data?\n\n\n        if (i - 1 + extraLength >= bytes.length) {\n          i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);\n          continue;\n        } // Remove the length prefix from the char\n\n\n        var res = c & (1 << 8 - extraLength - 1) - 1;\n\n        for (var j = 0; j < extraLength; j++) {\n          var nextChar = bytes[i]; // Invalid continuation byte\n\n          if ((nextChar & 0xc0) != 0x80) {\n            i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);\n            res = null;\n            break;\n          }\n\n          ;\n          res = res << 6 | nextChar & 0x3f;\n          i++;\n        } // See above loop for invalid contimuation byte\n\n\n        if (res === null) {\n          continue;\n        } // Maximum code point\n\n\n        if (res > 0x10ffff) {\n          i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);\n          continue;\n        } // Reserved for UTF-16 surrogate halves\n\n\n        if (res >= 0xd800 && res <= 0xdfff) {\n          i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);\n          continue;\n        } // Check for overlong sequences (more bytes than needed)\n\n\n        if (res <= overlongMask) {\n          i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);\n          continue;\n        }\n\n        result.push(res);\n      }\n\n      return result;\n    } // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array\n\n\n    function toUtf8Bytes(str, form) {\n      if (form === void 0) {\n        form = UnicodeNormalizationForm.current;\n      }\n\n      if (form != UnicodeNormalizationForm.current) {\n        logger.checkNormalize();\n        str = str.normalize(form);\n      }\n\n      var result = [];\n\n      for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n\n        if (c < 0x80) {\n          result.push(c);\n        } else if (c < 0x800) {\n          result.push(c >> 6 | 0xc0);\n          result.push(c & 0x3f | 0x80);\n        } else if ((c & 0xfc00) == 0xd800) {\n          i++;\n          var c2 = str.charCodeAt(i);\n\n          if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {\n            throw new Error(\"invalid utf-8 string\");\n          } // Surrogate Pair\n\n\n          var pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);\n          result.push(pair >> 18 | 0xf0);\n          result.push(pair >> 12 & 0x3f | 0x80);\n          result.push(pair >> 6 & 0x3f | 0x80);\n          result.push(pair & 0x3f | 0x80);\n        } else {\n          result.push(c >> 12 | 0xe0);\n          result.push(c >> 6 & 0x3f | 0x80);\n          result.push(c & 0x3f | 0x80);\n        }\n      }\n\n      return lib$1.arrayify(result);\n    }\n\n    exports.toUtf8Bytes = toUtf8Bytes;\n    ;\n\n    function escapeChar(value) {\n      var hex = \"0000\" + value.toString(16);\n      return \"\\\\u\" + hex.substring(hex.length - 4);\n    }\n\n    function _toEscapedUtf8String(bytes, onError) {\n      return '\"' + getUtf8CodePoints(bytes, onError).map(function (codePoint) {\n        if (codePoint < 256) {\n          switch (codePoint) {\n            case 8:\n              return \"\\\\b\";\n\n            case 9:\n              return \"\\\\t\";\n\n            case 10:\n              return \"\\\\n\";\n\n            case 13:\n              return \"\\\\r\";\n\n            case 34:\n              return \"\\\\\\\"\";\n\n            case 92:\n              return \"\\\\\\\\\";\n          }\n\n          if (codePoint >= 32 && codePoint < 127) {\n            return String.fromCharCode(codePoint);\n          }\n        }\n\n        if (codePoint <= 0xffff) {\n          return escapeChar(codePoint);\n        }\n\n        codePoint -= 0x10000;\n        return escapeChar((codePoint >> 10 & 0x3ff) + 0xd800) + escapeChar((codePoint & 0x3ff) + 0xdc00);\n      }).join(\"\") + '\"';\n    }\n\n    exports._toEscapedUtf8String = _toEscapedUtf8String;\n\n    function _toUtf8String(codePoints) {\n      return codePoints.map(function (codePoint) {\n        if (codePoint <= 0xffff) {\n          return String.fromCharCode(codePoint);\n        }\n\n        codePoint -= 0x10000;\n        return String.fromCharCode((codePoint >> 10 & 0x3ff) + 0xd800, (codePoint & 0x3ff) + 0xdc00);\n      }).join(\"\");\n    }\n\n    exports._toUtf8String = _toUtf8String;\n\n    function toUtf8String(bytes, onError) {\n      return _toUtf8String(getUtf8CodePoints(bytes, onError));\n    }\n\n    exports.toUtf8String = toUtf8String;\n\n    function toUtf8CodePoints(str, form) {\n      if (form === void 0) {\n        form = UnicodeNormalizationForm.current;\n      }\n\n      return getUtf8CodePoints(toUtf8Bytes(str, form));\n    }\n\n    exports.toUtf8CodePoints = toUtf8CodePoints;\n  });\n  var utf8$1 = unwrapExports(utf8);\n  var utf8_1 = utf8.UnicodeNormalizationForm;\n  var utf8_2 = utf8.Utf8ErrorReason;\n  var utf8_3 = utf8.Utf8ErrorFuncs;\n  var utf8_4 = utf8.toUtf8Bytes;\n  var utf8_5 = utf8._toEscapedUtf8String;\n  var utf8_6 = utf8._toUtf8String;\n  var utf8_7 = utf8.toUtf8String;\n  var utf8_8 = utf8.toUtf8CodePoints;\n  var bytes32 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function formatBytes32String(text) {\n      // Get the bytes\n      var bytes = utf8.toUtf8Bytes(text); // Check we have room for null-termination\n\n      if (bytes.length > 31) {\n        throw new Error(\"bytes32 string must be less than 32 bytes\");\n      } // Zero-pad (implicitly null-terminates)\n\n\n      return lib$1.hexlify(lib$1.concat([bytes, lib$7.HashZero]).slice(0, 32));\n    }\n\n    exports.formatBytes32String = formatBytes32String;\n\n    function parseBytes32String(bytes) {\n      var data = lib$1.arrayify(bytes); // Must be 32 bytes with a null-termination\n\n      if (data.length !== 32) {\n        throw new Error(\"invalid bytes32 - not 32 bytes long\");\n      }\n\n      if (data[31] !== 0) {\n        throw new Error(\"invalid bytes32 string - no null terminator\");\n      } // Find the null termination\n\n\n      var length = 31;\n\n      while (data[length - 1] === 0) {\n        length--;\n      } // Determine the string value\n\n\n      return utf8.toUtf8String(data.slice(0, length));\n    }\n\n    exports.parseBytes32String = parseBytes32String;\n  });\n  var bytes32$1 = unwrapExports(bytes32);\n  var bytes32_1 = bytes32.formatBytes32String;\n  var bytes32_2 = bytes32.parseBytes32String;\n  var idna = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function bytes2(data) {\n      if (data.length % 4 !== 0) {\n        throw new Error(\"bad data\");\n      }\n\n      var result = [];\n\n      for (var i = 0; i < data.length; i += 4) {\n        result.push(parseInt(data.substring(i, i + 4), 16));\n      }\n\n      return result;\n    }\n\n    function createTable(data, func) {\n      if (!func) {\n        func = function (value) {\n          return [parseInt(value, 16)];\n        };\n      }\n\n      var lo = 0;\n      var result = {};\n      data.split(\",\").forEach(function (pair) {\n        var comps = pair.split(\":\");\n        lo += parseInt(comps[0], 16);\n        result[lo] = func(comps[1]);\n      });\n      return result;\n    }\n\n    function createRangeTable(data) {\n      var hi = 0;\n      return data.split(\",\").map(function (v) {\n        var comps = v.split(\"-\");\n\n        if (comps.length === 1) {\n          comps[1] = \"0\";\n        } else if (comps[1] === \"\") {\n          comps[1] = \"1\";\n        }\n\n        var lo = hi + parseInt(comps[0], 16);\n        hi = parseInt(comps[1], 16);\n        return {\n          l: lo,\n          h: hi\n        };\n      });\n    }\n\n    function matchMap(value, ranges) {\n      var lo = 0;\n\n      for (var i = 0; i < ranges.length; i++) {\n        var range = ranges[i];\n        lo += range.l;\n\n        if (value >= lo && value <= lo + range.h && (value - lo) % (range.d || 1) === 0) {\n          if (range.e && range.e.indexOf(value - lo) !== -1) {\n            continue;\n          }\n\n          return range;\n        }\n      }\n\n      return null;\n    }\n\n    var Table_A_1_ranges = createRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\"); // @TODO: Make this relative...\n\n    var Table_B_1_flags = \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map(function (v) {\n      return parseInt(v, 16);\n    });\n    var Table_B_2_ranges = [{\n      h: 25,\n      s: 32,\n      l: 65\n    }, {\n      h: 30,\n      s: 32,\n      e: [23],\n      l: 127\n    }, {\n      h: 54,\n      s: 1,\n      e: [48],\n      l: 64,\n      d: 2\n    }, {\n      h: 14,\n      s: 1,\n      l: 57,\n      d: 2\n    }, {\n      h: 44,\n      s: 1,\n      l: 17,\n      d: 2\n    }, {\n      h: 10,\n      s: 1,\n      e: [2, 6, 8],\n      l: 61,\n      d: 2\n    }, {\n      h: 16,\n      s: 1,\n      l: 68,\n      d: 2\n    }, {\n      h: 84,\n      s: 1,\n      e: [18, 24, 66],\n      l: 19,\n      d: 2\n    }, {\n      h: 26,\n      s: 32,\n      e: [17],\n      l: 435\n    }, {\n      h: 22,\n      s: 1,\n      l: 71,\n      d: 2\n    }, {\n      h: 15,\n      s: 80,\n      l: 40\n    }, {\n      h: 31,\n      s: 32,\n      l: 16\n    }, {\n      h: 32,\n      s: 1,\n      l: 80,\n      d: 2\n    }, {\n      h: 52,\n      s: 1,\n      l: 42,\n      d: 2\n    }, {\n      h: 12,\n      s: 1,\n      l: 55,\n      d: 2\n    }, {\n      h: 40,\n      s: 1,\n      e: [38],\n      l: 15,\n      d: 2\n    }, {\n      h: 14,\n      s: 1,\n      l: 48,\n      d: 2\n    }, {\n      h: 37,\n      s: 48,\n      l: 49\n    }, {\n      h: 148,\n      s: 1,\n      l: 6351,\n      d: 2\n    }, {\n      h: 88,\n      s: 1,\n      l: 160,\n      d: 2\n    }, {\n      h: 15,\n      s: 16,\n      l: 704\n    }, {\n      h: 25,\n      s: 26,\n      l: 854\n    }, {\n      h: 25,\n      s: 32,\n      l: 55915\n    }, {\n      h: 37,\n      s: 40,\n      l: 1247\n    }, {\n      h: 25,\n      s: -119711,\n      l: 53248\n    }, {\n      h: 25,\n      s: -119763,\n      l: 52\n    }, {\n      h: 25,\n      s: -119815,\n      l: 52\n    }, {\n      h: 25,\n      s: -119867,\n      e: [1, 4, 5, 7, 8, 11, 12, 17],\n      l: 52\n    }, {\n      h: 25,\n      s: -119919,\n      l: 52\n    }, {\n      h: 24,\n      s: -119971,\n      e: [2, 7, 8, 17],\n      l: 52\n    }, {\n      h: 24,\n      s: -120023,\n      e: [2, 7, 13, 15, 16, 17],\n      l: 52\n    }, {\n      h: 25,\n      s: -120075,\n      l: 52\n    }, {\n      h: 25,\n      s: -120127,\n      l: 52\n    }, {\n      h: 25,\n      s: -120179,\n      l: 52\n    }, {\n      h: 25,\n      s: -120231,\n      l: 52\n    }, {\n      h: 25,\n      s: -120283,\n      l: 52\n    }, {\n      h: 25,\n      s: -120335,\n      l: 52\n    }, {\n      h: 24,\n      s: -119543,\n      e: [17],\n      l: 56\n    }, {\n      h: 24,\n      s: -119601,\n      e: [17],\n      l: 58\n    }, {\n      h: 24,\n      s: -119659,\n      e: [17],\n      l: 58\n    }, {\n      h: 24,\n      s: -119717,\n      e: [17],\n      l: 58\n    }, {\n      h: 24,\n      s: -119775,\n      e: [17],\n      l: 58\n    }];\n    var Table_B_2_lut_abs = createTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\n    var Table_B_2_lut_rel = createTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\n    var Table_B_2_complex = createTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\n    var Table_C_ranges = createRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\n\n    function flatten(values) {\n      return values.reduce(function (accum, value) {\n        value.forEach(function (value) {\n          accum.push(value);\n        });\n        return accum;\n      }, []);\n    }\n\n    function _nameprepTableA1(codepoint) {\n      return !!matchMap(codepoint, Table_A_1_ranges);\n    }\n\n    exports._nameprepTableA1 = _nameprepTableA1;\n\n    function _nameprepTableB2(codepoint) {\n      var range = matchMap(codepoint, Table_B_2_ranges);\n\n      if (range) {\n        return [codepoint + range.s];\n      }\n\n      var codes = Table_B_2_lut_abs[codepoint];\n\n      if (codes) {\n        return codes;\n      }\n\n      var shift = Table_B_2_lut_rel[codepoint];\n\n      if (shift) {\n        return [codepoint + shift[0]];\n      }\n\n      var complex = Table_B_2_complex[codepoint];\n\n      if (complex) {\n        return complex;\n      }\n\n      return null;\n    }\n\n    exports._nameprepTableB2 = _nameprepTableB2;\n\n    function _nameprepTableC(codepoint) {\n      return !!matchMap(codepoint, Table_C_ranges);\n    }\n\n    exports._nameprepTableC = _nameprepTableC;\n\n    function nameprep(value) {\n      // This allows platforms with incomplete normalize to bypass\n      // it for very basic names which the built-in toLowerCase\n      // will certainly handle correctly\n      if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) {\n        return value.toLowerCase();\n      } // Get the code points (keeping the current normalization)\n\n\n      var codes = utf8.toUtf8CodePoints(value);\n      codes = flatten(codes.map(function (code) {\n        // Substitute Table B.1 (Maps to Nothing)\n        if (Table_B_1_flags.indexOf(code) >= 0) {\n          return [];\n        }\n\n        if (code >= 0xfe00 && code <= 0xfe0f) {\n          return [];\n        } // Substitute Table B.2 (Case Folding)\n\n\n        var codesTableB2 = _nameprepTableB2(code);\n\n        if (codesTableB2) {\n          return codesTableB2;\n        } // No Substitution\n\n\n        return [code];\n      })); // Normalize using form KC\n\n      codes = utf8.toUtf8CodePoints(utf8._toUtf8String(codes), utf8.UnicodeNormalizationForm.NFKC); // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9\n\n      codes.forEach(function (code) {\n        if (_nameprepTableC(code)) {\n          throw new Error(\"STRINGPREP_CONTAINS_PROHIBITED\");\n        }\n      }); // Prohibit Unassigned Code Points (Table A.1)\n\n      codes.forEach(function (code) {\n        if (_nameprepTableA1(code)) {\n          throw new Error(\"STRINGPREP_CONTAINS_UNASSIGNED\");\n        }\n      }); // IDNA extras\n\n      var name = utf8._toUtf8String(codes); // IDNA: 4.2.3.1\n\n\n      if (name.substring(0, 1) === \"-\" || name.substring(2, 4) === \"--\" || name.substring(name.length - 1) === \"-\") {\n        throw new Error(\"invalid hyphen\");\n      } // IDNA: 4.2.4\n\n\n      if (name.length > 63) {\n        throw new Error(\"too long\");\n      }\n\n      return name;\n    }\n\n    exports.nameprep = nameprep;\n  });\n  var idna$1 = unwrapExports(idna);\n  var idna_1 = idna._nameprepTableA1;\n  var idna_2 = idna._nameprepTableB2;\n  var idna_3 = idna._nameprepTableC;\n  var idna_4 = idna.nameprep;\n  var lib$8 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.formatBytes32String = bytes32.formatBytes32String;\n    exports.parseBytes32String = bytes32.parseBytes32String;\n    exports.nameprep = idna.nameprep;\n    exports._toEscapedUtf8String = utf8._toEscapedUtf8String;\n    exports.toUtf8Bytes = utf8.toUtf8Bytes;\n    exports.toUtf8CodePoints = utf8.toUtf8CodePoints;\n    exports.toUtf8String = utf8.toUtf8String;\n    exports.UnicodeNormalizationForm = utf8.UnicodeNormalizationForm;\n    exports.Utf8ErrorFuncs = utf8.Utf8ErrorFuncs;\n    exports.Utf8ErrorReason = utf8.Utf8ErrorReason;\n  });\n  var index$8 = unwrapExports(lib$8);\n  var lib_1$8 = lib$8.formatBytes32String;\n  var lib_2$7 = lib$8.parseBytes32String;\n  var lib_3$6 = lib$8.nameprep;\n  var lib_4$5 = lib$8._toEscapedUtf8String;\n  var lib_5$5 = lib$8.toUtf8Bytes;\n  var lib_6$3 = lib$8.toUtf8CodePoints;\n  var lib_7$3 = lib$8.toUtf8String;\n  var lib_8$2 = lib$8.UnicodeNormalizationForm;\n  var lib_9$2 = lib$8.Utf8ErrorFuncs;\n  var lib_10$1 = lib$8.Utf8ErrorReason;\n  var string = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var StringCoder =\n    /** @class */\n    function (_super) {\n      __extends(StringCoder, _super);\n\n      function StringCoder(localName) {\n        return _super.call(this, \"string\", localName) || this;\n      }\n\n      StringCoder.prototype.encode = function (writer, value) {\n        return _super.prototype.encode.call(this, writer, lib$8.toUtf8Bytes(value));\n      };\n\n      StringCoder.prototype.decode = function (reader) {\n        return lib$8.toUtf8String(_super.prototype.decode.call(this, reader));\n      };\n\n      return StringCoder;\n    }(bytes.DynamicBytesCoder);\n\n    exports.StringCoder = StringCoder;\n  });\n  var string$1 = unwrapExports(string);\n  var string_1 = string.StringCoder;\n  var tuple = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var TupleCoder =\n    /** @class */\n    function (_super) {\n      __extends(TupleCoder, _super);\n\n      function TupleCoder(coders, localName) {\n        var _this = this;\n\n        var dynamic = false;\n        var types = [];\n        coders.forEach(function (coder) {\n          if (coder.dynamic) {\n            dynamic = true;\n          }\n\n          types.push(coder.type);\n        });\n        var type = \"tuple(\" + types.join(\",\") + \")\";\n        _this = _super.call(this, \"tuple\", type, localName, dynamic) || this;\n        _this.coders = coders;\n        return _this;\n      }\n\n      TupleCoder.prototype.encode = function (writer, value) {\n        return array.pack(writer, this.coders, value);\n      };\n\n      TupleCoder.prototype.decode = function (reader) {\n        return reader.coerce(this.name, array.unpack(reader, this.coders));\n      };\n\n      return TupleCoder;\n    }(abstractCoder.Coder);\n\n    exports.TupleCoder = TupleCoder;\n  });\n  var tuple$1 = unwrapExports(tuple);\n  var tuple_1 = tuple.TupleCoder;\n  var abiCoder = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\n    var logger = new lib.Logger(_version$8.version);\n    var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\n    var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n    var AbiCoder =\n    /** @class */\n    function () {\n      function AbiCoder(coerceFunc) {\n        var _newTarget = this.constructor;\n        logger.checkNew(_newTarget, AbiCoder);\n        lib$3.defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n      }\n\n      AbiCoder.prototype._getCoder = function (param) {\n        var _this = this;\n\n        switch (param.baseType) {\n          case \"address\":\n            return new address.AddressCoder(param.name);\n\n          case \"bool\":\n            return new boolean_1.BooleanCoder(param.name);\n\n          case \"string\":\n            return new string.StringCoder(param.name);\n\n          case \"bytes\":\n            return new bytes.BytesCoder(param.name);\n\n          case \"array\":\n            return new array.ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n\n          case \"tuple\":\n            return new tuple.TupleCoder((param.components || []).map(function (component) {\n              return _this._getCoder(component);\n            }), param.name);\n\n          case \"\":\n            return new _null.NullCoder(param.name);\n        } // u?int[0-9]*\n\n\n        var match = param.type.match(paramTypeNumber);\n\n        if (match) {\n          var size = parseInt(match[2] || \"256\");\n\n          if (size === 0 || size > 256 || size % 8 !== 0) {\n            logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n          }\n\n          return new number.NumberCoder(size / 8, match[1] === \"int\", param.name);\n        } // bytes[0-9]+\n\n\n        match = param.type.match(paramTypeBytes);\n\n        if (match) {\n          var size = parseInt(match[1]);\n\n          if (size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n          }\n\n          return new fixedBytes.FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n      };\n\n      AbiCoder.prototype._getWordSize = function () {\n        return 32;\n      };\n\n      AbiCoder.prototype._getReader = function (data) {\n        return new abstractCoder.Reader(data, this._getWordSize(), this.coerceFunc);\n      };\n\n      AbiCoder.prototype._getWriter = function () {\n        return new abstractCoder.Writer(this._getWordSize());\n      };\n\n      AbiCoder.prototype.encode = function (types, values) {\n        var _this = this;\n\n        if (types.length !== values.length) {\n          logger.throwError(\"types/values length mismatch\", lib.Logger.errors.INVALID_ARGUMENT, {\n            count: {\n              types: types.length,\n              values: values.length\n            },\n            value: {\n              types: types,\n              values: values\n            }\n          });\n        }\n\n        var coders = types.map(function (type) {\n          return _this._getCoder(fragments.ParamType.from(type));\n        });\n        var coder = new tuple.TupleCoder(coders, \"_\");\n\n        var writer = this._getWriter();\n\n        coder.encode(writer, values);\n        return writer.data;\n      };\n\n      AbiCoder.prototype.decode = function (types, data) {\n        var _this = this;\n\n        var coders = types.map(function (type) {\n          return _this._getCoder(fragments.ParamType.from(type));\n        });\n        var coder = new tuple.TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(lib$1.arrayify(data)));\n      };\n\n      return AbiCoder;\n    }();\n\n    exports.AbiCoder = AbiCoder;\n    exports.defaultAbiCoder = new AbiCoder();\n  });\n  var abiCoder$1 = unwrapExports(abiCoder);\n  var abiCoder_1 = abiCoder.AbiCoder;\n  var abiCoder_2 = abiCoder.defaultAbiCoder;\n\n  var _version$g = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"hash/5.0.3\";\n  });\n\n  var _version$h = unwrapExports(_version$g);\n\n  var _version_1$8 = _version$g.version;\n  var lib$9 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$g.version); ///////////////////////////////\n\n    var Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    var Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\n\n    function isValidName(name) {\n      try {\n        var comps = name.split(\".\");\n\n        for (var i = 0; i < comps.length; i++) {\n          if (lib$8.nameprep(comps[i]).length === 0) {\n            throw new Error(\"empty\");\n          }\n        }\n\n        return true;\n      } catch (error) {}\n\n      return false;\n    }\n\n    exports.isValidName = isValidName;\n\n    function namehash(name) {\n      /* istanbul ignore if */\n      if (typeof name !== \"string\") {\n        logger.throwArgumentError(\"invalid address - \" + String(name), \"name\", name);\n      }\n\n      var result = Zeros;\n\n      while (name.length) {\n        var partition = name.match(Partition);\n        var label = lib$8.toUtf8Bytes(lib$8.nameprep(partition[3]));\n        result = lib$4.keccak256(lib$1.concat([result, lib$4.keccak256(label)]));\n        name = partition[2] || \"\";\n      }\n\n      return lib$1.hexlify(result);\n    }\n\n    exports.namehash = namehash;\n\n    function id(text) {\n      return lib$4.keccak256(lib$8.toUtf8Bytes(text));\n    }\n\n    exports.id = id;\n    exports.messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\n\n    function hashMessage(message) {\n      if (typeof message === \"string\") {\n        message = lib$8.toUtf8Bytes(message);\n      }\n\n      return lib$4.keccak256(lib$1.concat([lib$8.toUtf8Bytes(exports.messagePrefix), lib$8.toUtf8Bytes(String(message.length)), message]));\n    }\n\n    exports.hashMessage = hashMessage;\n  });\n  var index$9 = unwrapExports(lib$9);\n  var lib_1$9 = lib$9.isValidName;\n  var lib_2$8 = lib$9.namehash;\n  var lib_3$7 = lib$9.id;\n  var lib_4$6 = lib$9.messagePrefix;\n  var lib_5$6 = lib$9.hashMessage;\n\n  var _interface = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.checkResultErrors = abstractCoder.checkResultErrors;\n    var logger = new lib.Logger(_version$8.version);\n\n    var LogDescription =\n    /** @class */\n    function (_super) {\n      __extends(LogDescription, _super);\n\n      function LogDescription() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      return LogDescription;\n    }(lib$3.Description);\n\n    exports.LogDescription = LogDescription;\n\n    var TransactionDescription =\n    /** @class */\n    function (_super) {\n      __extends(TransactionDescription, _super);\n\n      function TransactionDescription() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      return TransactionDescription;\n    }(lib$3.Description);\n\n    exports.TransactionDescription = TransactionDescription;\n\n    var Indexed =\n    /** @class */\n    function (_super) {\n      __extends(Indexed, _super);\n\n      function Indexed() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      Indexed.isIndexed = function (value) {\n        return !!(value && value._isIndexed);\n      };\n\n      return Indexed;\n    }(lib$3.Description);\n\n    exports.Indexed = Indexed;\n\n    function wrapAccessError(property, error) {\n      var wrap = new Error(\"deferred error during ABI decoding triggered accessing \" + property);\n      wrap.error = error;\n      return wrap;\n    }\n    /*\n    function checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n        params.reduce((accum, param) => {\n            if (param.name) {\n                if (accum[param.name]) {\n                    logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n                }\n                accum[param.name] = true;\n            }\n            return accum;\n        }, <{ [ name: string ]: boolean }>{ });\n    }\n    */\n\n\n    var Interface =\n    /** @class */\n    function () {\n      function Interface(fragments$1) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, Interface);\n        var abi = [];\n\n        if (typeof fragments$1 === \"string\") {\n          abi = JSON.parse(fragments$1);\n        } else {\n          abi = fragments$1;\n        }\n\n        lib$3.defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n          return fragments.Fragment.from(fragment);\n        }).filter(function (fragment) {\n          return fragment != null;\n        }));\n        lib$3.defineReadOnly(this, \"_abiCoder\", lib$3.getStatic(_newTarget, \"getAbiCoder\")());\n        lib$3.defineReadOnly(this, \"functions\", {});\n        lib$3.defineReadOnly(this, \"errors\", {});\n        lib$3.defineReadOnly(this, \"events\", {});\n        lib$3.defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n        this.fragments.forEach(function (fragment) {\n          var bucket = null;\n\n          switch (fragment.type) {\n            case \"constructor\":\n              if (_this.deploy) {\n                logger.warn(\"duplicate definition - constructor\");\n                return;\n              } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n              lib$3.defineReadOnly(_this, \"deploy\", fragment);\n              return;\n\n            case \"function\":\n              //checkNames(fragment, \"input\", fragment.inputs);\n              //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n              bucket = _this.functions;\n              break;\n\n            case \"event\":\n              //checkNames(fragment, \"input\", fragment.inputs);\n              bucket = _this.events;\n              break;\n\n            default:\n              return;\n          }\n\n          var signature = fragment.format();\n\n          if (bucket[signature]) {\n            logger.warn(\"duplicate definition - \" + signature);\n            return;\n          }\n\n          bucket[signature] = fragment;\n        }); // If we do not have a constructor add a default\n\n        if (!this.deploy) {\n          lib$3.defineReadOnly(this, \"deploy\", fragments.ConstructorFragment.from({\n            payable: false,\n            type: \"constructor\"\n          }));\n        }\n\n        lib$3.defineReadOnly(this, \"_isInterface\", true);\n      }\n\n      Interface.prototype.format = function (format) {\n        if (!format) {\n          format = fragments.FormatTypes.full;\n        }\n\n        if (format === fragments.FormatTypes.sighash) {\n          logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        var abi = this.fragments.map(function (fragment) {\n          return fragment.format(format);\n        }); // We need to re-bundle the JSON fragments a bit\n\n        if (format === fragments.FormatTypes.json) {\n          return JSON.stringify(abi.map(function (j) {\n            return JSON.parse(j);\n          }));\n        }\n\n        return abi;\n      }; // Sub-classes can override these to handle other blockchains\n\n\n      Interface.getAbiCoder = function () {\n        return abiCoder.defaultAbiCoder;\n      };\n\n      Interface.getAddress = function (address) {\n        return lib$6.getAddress(address);\n      };\n\n      Interface.getSighash = function (functionFragment) {\n        return lib$1.hexDataSlice(lib$9.id(functionFragment.format()), 0, 4);\n      };\n\n      Interface.getEventTopic = function (eventFragment) {\n        return lib$9.id(eventFragment.format());\n      }; // Find a function definition by any means necessary (unless it is ambiguous)\n\n\n      Interface.prototype.getFunction = function (nameOrSignatureOrSighash) {\n        if (lib$1.isHexString(nameOrSignatureOrSighash)) {\n          for (var name_1 in this.functions) {\n            if (nameOrSignatureOrSighash === this.getSighash(name_1)) {\n              return this.functions[name_1];\n            }\n          }\n\n          logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n          var name_2 = nameOrSignatureOrSighash.trim();\n          var matching = Object.keys(this.functions).filter(function (f) {\n            return f.split(\"(\"\n            /* fix:) */\n            )[0] === name_2;\n          });\n\n          if (matching.length === 0) {\n            logger.throwArgumentError(\"no matching function\", \"name\", name_2);\n          } else if (matching.length > 1) {\n            logger.throwArgumentError(\"multiple matching functions\", \"name\", name_2);\n          }\n\n          return this.functions[matching[0]];\n        } // Normlize the signature and lookup the function\n\n\n        var result = this.functions[fragments.FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n        if (!result) {\n          logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n\n        return result;\n      }; // Find an event definition by any means necessary (unless it is ambiguous)\n\n\n      Interface.prototype.getEvent = function (nameOrSignatureOrTopic) {\n        if (lib$1.isHexString(nameOrSignatureOrTopic)) {\n          var topichash = nameOrSignatureOrTopic.toLowerCase();\n\n          for (var name_3 in this.events) {\n            if (topichash === this.getEventTopic(name_3)) {\n              return this.events[name_3];\n            }\n          }\n\n          logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n          var name_4 = nameOrSignatureOrTopic.trim();\n          var matching = Object.keys(this.events).filter(function (f) {\n            return f.split(\"(\"\n            /* fix:) */\n            )[0] === name_4;\n          });\n\n          if (matching.length === 0) {\n            logger.throwArgumentError(\"no matching event\", \"name\", name_4);\n          } else if (matching.length > 1) {\n            logger.throwArgumentError(\"multiple matching events\", \"name\", name_4);\n          }\n\n          return this.events[matching[0]];\n        } // Normlize the signature and lookup the function\n\n\n        var result = this.events[fragments.EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n        if (!result) {\n          logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n\n        return result;\n      }; // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n\n      Interface.prototype.getSighash = function (functionFragment) {\n        if (typeof functionFragment === \"string\") {\n          functionFragment = this.getFunction(functionFragment);\n        }\n\n        return lib$3.getStatic(this.constructor, \"getSighash\")(functionFragment);\n      }; // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n\n      Interface.prototype.getEventTopic = function (eventFragment) {\n        if (typeof eventFragment === \"string\") {\n          eventFragment = this.getEvent(eventFragment);\n        }\n\n        return lib$3.getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n      };\n\n      Interface.prototype._decodeParams = function (params, data) {\n        return this._abiCoder.decode(params, data);\n      };\n\n      Interface.prototype._encodeParams = function (params, values) {\n        return this._abiCoder.encode(params, values);\n      };\n\n      Interface.prototype.encodeDeploy = function (values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n      }; // Decode the data for a function call (e.g. tx.data)\n\n\n      Interface.prototype.decodeFunctionData = function (functionFragment, data) {\n        if (typeof functionFragment === \"string\") {\n          functionFragment = this.getFunction(functionFragment);\n        }\n\n        var bytes = lib$1.arrayify(data);\n\n        if (lib$1.hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n          logger.throwArgumentError(\"data signature does not match function \" + functionFragment.name + \".\", \"data\", lib$1.hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n      }; // Encode the data for a function call (e.g. tx.data)\n\n\n      Interface.prototype.encodeFunctionData = function (functionFragment, values) {\n        if (typeof functionFragment === \"string\") {\n          functionFragment = this.getFunction(functionFragment);\n        }\n\n        return lib$1.hexlify(lib$1.concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n      }; // Decode the result from a function call (e.g. from eth_call)\n\n\n      Interface.prototype.decodeFunctionResult = function (functionFragment, data) {\n        if (typeof functionFragment === \"string\") {\n          functionFragment = this.getFunction(functionFragment);\n        }\n\n        var bytes = lib$1.arrayify(data);\n        var reason = null;\n        var errorSignature = null;\n\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n          case 0:\n            try {\n              return this._abiCoder.decode(functionFragment.outputs, bytes);\n            } catch (error) {}\n\n            break;\n\n          case 4:\n            if (lib$1.hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n              errorSignature = \"Error(string)\";\n              reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n            }\n\n            break;\n        }\n\n        return logger.throwError(\"call revert exception\", lib.Logger.errors.CALL_EXCEPTION, {\n          method: functionFragment.format(),\n          errorSignature: errorSignature,\n          errorArgs: [reason],\n          reason: reason\n        });\n      }; // Encode the result for a function call (e.g. for eth_call)\n\n\n      Interface.prototype.encodeFunctionResult = function (functionFragment, values) {\n        if (typeof functionFragment === \"string\") {\n          functionFragment = this.getFunction(functionFragment);\n        }\n\n        return lib$1.hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n      }; // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n\n      Interface.prototype.encodeFilterTopics = function (eventFragment, values) {\n        var _this = this;\n\n        if (typeof eventFragment === \"string\") {\n          eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n          logger.throwError(\"too many arguments for \" + eventFragment.format(), lib.Logger.errors.UNEXPECTED_ARGUMENT, {\n            argument: \"values\",\n            value: values\n          });\n        }\n\n        var topics = [];\n\n        if (!eventFragment.anonymous) {\n          topics.push(this.getEventTopic(eventFragment));\n        }\n\n        var encodeTopic = function (param, value) {\n          if (param.type === \"string\") {\n            return lib$9.id(value);\n          } else if (param.type === \"bytes\") {\n            return lib$4.keccak256(lib$1.hexlify(value));\n          } // Check addresses are valid\n\n\n          if (param.type === \"address\") {\n            _this._abiCoder.encode([\"address\"], [value]);\n          }\n\n          return lib$1.hexZeroPad(lib$1.hexlify(value), 32);\n        };\n\n        values.forEach(function (value, index) {\n          var param = eventFragment.inputs[index];\n\n          if (!param.indexed) {\n            if (value != null) {\n              logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n            }\n\n            return;\n          }\n\n          if (value == null) {\n            topics.push(null);\n          } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n            logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n          } else if (Array.isArray(value)) {\n            topics.push(value.map(function (value) {\n              return encodeTopic(param, value);\n            }));\n          } else {\n            topics.push(encodeTopic(param, value));\n          }\n        }); // Trim off trailing nulls\n\n        while (topics.length && topics[topics.length - 1] === null) {\n          topics.pop();\n        }\n\n        return topics;\n      };\n\n      Interface.prototype.encodeEventLog = function (eventFragment, values) {\n        var _this = this;\n\n        if (typeof eventFragment === \"string\") {\n          eventFragment = this.getEvent(eventFragment);\n        }\n\n        var topics = [];\n        var dataTypes = [];\n        var dataValues = [];\n\n        if (!eventFragment.anonymous) {\n          topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n          logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach(function (param, index) {\n          var value = values[index];\n\n          if (param.indexed) {\n            if (param.type === \"string\") {\n              topics.push(lib$9.id(value));\n            } else if (param.type === \"bytes\") {\n              topics.push(lib$4.keccak256(value));\n            } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n              // @TOOD\n              throw new Error(\"not implemented\");\n            } else {\n              topics.push(_this._abiCoder.encode([param.type], [value]));\n            }\n          } else {\n            dataTypes.push(param);\n            dataValues.push(value);\n          }\n        });\n        return {\n          data: this._abiCoder.encode(dataTypes, dataValues),\n          topics: topics\n        };\n      }; // Decode a filter for the event and the search criteria\n\n\n      Interface.prototype.decodeEventLog = function (eventFragment, data, topics) {\n        if (typeof eventFragment === \"string\") {\n          eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n          var topicHash = this.getEventTopic(eventFragment);\n\n          if (!lib$1.isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n            logger.throwError(\"fragment/topic mismatch\", lib.Logger.errors.INVALID_ARGUMENT, {\n              argument: \"topics[0]\",\n              expected: topicHash,\n              value: topics[0]\n            });\n          }\n\n          topics = topics.slice(1);\n        }\n\n        var indexed = [];\n        var nonIndexed = [];\n        var dynamic = [];\n        eventFragment.inputs.forEach(function (param, index) {\n          if (param.indexed) {\n            if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n              indexed.push(fragments.ParamType.fromObject({\n                type: \"bytes32\",\n                name: param.name\n              }));\n              dynamic.push(true);\n            } else {\n              indexed.push(param);\n              dynamic.push(false);\n            }\n          } else {\n            nonIndexed.push(param);\n            dynamic.push(false);\n          }\n        });\n        var resultIndexed = topics != null ? this._abiCoder.decode(indexed, lib$1.concat(topics)) : null;\n\n        var resultNonIndexed = this._abiCoder.decode(nonIndexed, data);\n\n        var result = [];\n        var nonIndexedIndex = 0,\n            indexedIndex = 0;\n        eventFragment.inputs.forEach(function (param, index) {\n          if (param.indexed) {\n            if (resultIndexed == null) {\n              result[index] = new Indexed({\n                _isIndexed: true,\n                hash: null\n              });\n            } else if (dynamic[index]) {\n              result[index] = new Indexed({\n                _isIndexed: true,\n                hash: resultIndexed[indexedIndex++]\n              });\n            } else {\n              try {\n                result[index] = resultIndexed[indexedIndex++];\n              } catch (error) {\n                result[index] = error;\n              }\n            }\n          } else {\n            try {\n              result[index] = resultNonIndexed[nonIndexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          } // Add the keyword argument if named and safe\n\n\n          if (param.name && result[param.name] == null) {\n            var value_1 = result[index]; // Make error named values throw on access\n\n            if (value_1 instanceof Error) {\n              Object.defineProperty(result, param.name, {\n                get: function () {\n                  throw wrapAccessError(\"property \" + JSON.stringify(param.name), value_1);\n                }\n              });\n            } else {\n              result[param.name] = value_1;\n            }\n          }\n        });\n\n        var _loop_1 = function (i) {\n          var value = result[i];\n\n          if (value instanceof Error) {\n            Object.defineProperty(result, i, {\n              get: function () {\n                throw wrapAccessError(\"index \" + i, value);\n              }\n            });\n          }\n        }; // Make all error indexed values throw on access\n\n\n        for (var i = 0; i < result.length; i++) {\n          _loop_1(i);\n        }\n\n        return Object.freeze(result);\n      }; // Given a transaction, find the matching function fragment (if any) and\n      // determine all its properties and call parameters\n\n\n      Interface.prototype.parseTransaction = function (tx) {\n        var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n        if (!fragment) {\n          return null;\n        }\n\n        return new TransactionDescription({\n          args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n          functionFragment: fragment,\n          name: fragment.name,\n          signature: fragment.format(),\n          sighash: this.getSighash(fragment),\n          value: lib$2.BigNumber.from(tx.value || \"0\")\n        });\n      }; // Given an event log, find the matching event fragment (if any) and\n      // determine all its properties and values\n\n\n      Interface.prototype.parseLog = function (log) {\n        var fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) {\n          return null;\n        } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n        return new LogDescription({\n          eventFragment: fragment,\n          name: fragment.name,\n          signature: fragment.format(),\n          topic: this.getEventTopic(fragment),\n          args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n      };\n      /*\n      static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n          if (Interface.isInterface(value)) {\n              return value;\n          }\n          if (typeof(value) === \"string\") {\n              return new Interface(JSON.parse(value));\n          }\n          return new Interface(value);\n      }\n      */\n\n\n      Interface.isInterface = function (value) {\n        return !!(value && value._isInterface);\n      };\n\n      return Interface;\n    }();\n\n    exports.Interface = Interface;\n  });\n\n  var _interface$1 = unwrapExports(_interface);\n\n  var _interface_1 = _interface.checkResultErrors;\n  var _interface_2 = _interface.LogDescription;\n  var _interface_3 = _interface.TransactionDescription;\n  var _interface_4 = _interface.Indexed;\n  var _interface_5 = _interface.Interface;\n  var lib$a = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.ConstructorFragment = fragments.ConstructorFragment;\n    exports.EventFragment = fragments.EventFragment;\n    exports.FormatTypes = fragments.FormatTypes;\n    exports.Fragment = fragments.Fragment;\n    exports.FunctionFragment = fragments.FunctionFragment;\n    exports.ParamType = fragments.ParamType;\n    exports.AbiCoder = abiCoder.AbiCoder;\n    exports.defaultAbiCoder = abiCoder.defaultAbiCoder;\n    exports.checkResultErrors = _interface.checkResultErrors;\n    exports.Indexed = _interface.Indexed;\n    exports.Interface = _interface.Interface;\n    exports.LogDescription = _interface.LogDescription;\n    exports.TransactionDescription = _interface.TransactionDescription;\n  });\n  var index$a = unwrapExports(lib$a);\n  var lib_1$a = lib$a.ConstructorFragment;\n  var lib_2$9 = lib$a.EventFragment;\n  var lib_3$8 = lib$a.FormatTypes;\n  var lib_4$7 = lib$a.Fragment;\n  var lib_5$7 = lib$a.FunctionFragment;\n  var lib_6$4 = lib$a.ParamType;\n  var lib_7$4 = lib$a.AbiCoder;\n  var lib_8$3 = lib$a.defaultAbiCoder;\n  var lib_9$3 = lib$a.checkResultErrors;\n  var lib_10$2 = lib$a.Indexed;\n  var lib_11$1 = lib$a.Interface;\n  var lib_12$1 = lib$a.LogDescription;\n  var lib_13$1 = lib$a.TransactionDescription;\n\n  var _version$i = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"abstract-provider/5.0.3\";\n  });\n\n  var _version$j = unwrapExports(_version$i);\n\n  var _version_1$9 = _version$i.version;\n  var lib$b = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$i.version);\n    ;\n    ; //export type CallTransactionable = {\n    //    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n    //};\n\n    var ForkEvent =\n    /** @class */\n    function (_super) {\n      __extends(ForkEvent, _super);\n\n      function ForkEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      ForkEvent.isForkEvent = function (value) {\n        return !!(value && value._isForkEvent);\n      };\n\n      return ForkEvent;\n    }(lib$3.Description);\n\n    exports.ForkEvent = ForkEvent;\n\n    var BlockForkEvent =\n    /** @class */\n    function (_super) {\n      __extends(BlockForkEvent, _super);\n\n      function BlockForkEvent(blockHash, expiry) {\n        var _this = this;\n\n        if (!lib$1.isHexString(blockHash, 32)) {\n          logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n\n        _this = _super.call(this, {\n          _isForkEvent: true,\n          _isBlockForkEvent: true,\n          expiry: expiry || 0,\n          blockHash: blockHash\n        }) || this;\n        return _this;\n      }\n\n      return BlockForkEvent;\n    }(ForkEvent);\n\n    exports.BlockForkEvent = BlockForkEvent;\n\n    var TransactionForkEvent =\n    /** @class */\n    function (_super) {\n      __extends(TransactionForkEvent, _super);\n\n      function TransactionForkEvent(hash, expiry) {\n        var _this = this;\n\n        if (!lib$1.isHexString(hash, 32)) {\n          logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n\n        _this = _super.call(this, {\n          _isForkEvent: true,\n          _isTransactionForkEvent: true,\n          expiry: expiry || 0,\n          hash: hash\n        }) || this;\n        return _this;\n      }\n\n      return TransactionForkEvent;\n    }(ForkEvent);\n\n    exports.TransactionForkEvent = TransactionForkEvent;\n\n    var TransactionOrderForkEvent =\n    /** @class */\n    function (_super) {\n      __extends(TransactionOrderForkEvent, _super);\n\n      function TransactionOrderForkEvent(beforeHash, afterHash, expiry) {\n        var _this = this;\n\n        if (!lib$1.isHexString(beforeHash, 32)) {\n          logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n\n        if (!lib$1.isHexString(afterHash, 32)) {\n          logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n\n        _this = _super.call(this, {\n          _isForkEvent: true,\n          _isTransactionOrderForkEvent: true,\n          expiry: expiry || 0,\n          beforeHash: beforeHash,\n          afterHash: afterHash\n        }) || this;\n        return _this;\n      }\n\n      return TransactionOrderForkEvent;\n    }(ForkEvent);\n\n    exports.TransactionOrderForkEvent = TransactionOrderForkEvent; ///////////////////////////////\n    // Exported Abstracts\n\n    var Provider =\n    /** @class */\n    function () {\n      function Provider() {\n        var _newTarget = this.constructor;\n        logger.checkAbstract(_newTarget, Provider);\n        lib$3.defineReadOnly(this, \"_isProvider\", true);\n      } // Alias for \"on\"\n\n\n      Provider.prototype.addListener = function (eventName, listener) {\n        return this.on(eventName, listener);\n      }; // Alias for \"off\"\n\n\n      Provider.prototype.removeListener = function (eventName, listener) {\n        return this.off(eventName, listener);\n      };\n\n      Provider.isProvider = function (value) {\n        return !!(value && value._isProvider);\n      };\n\n      return Provider;\n    }();\n\n    exports.Provider = Provider;\n  });\n  var index$b = unwrapExports(lib$b);\n  var lib_1$b = lib$b.ForkEvent;\n  var lib_2$a = lib$b.BlockForkEvent;\n  var lib_3$9 = lib$b.TransactionForkEvent;\n  var lib_4$8 = lib$b.TransactionOrderForkEvent;\n  var lib_5$8 = lib$b.Provider;\n\n  var _version$k = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"abstract-signer/5.0.3\";\n  });\n\n  var _version$l = unwrapExports(_version$k);\n\n  var _version_1$a = _version$k.version;\n  var lib$c = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$k.version);\n    var allowedTransactionKeys = [\"chainId\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"nonce\", \"to\", \"value\"]; // Sub-Class Notes:\n    //  - A Signer MUST always make sure, that if present, the \"from\" field\n    //    matches the Signer, before sending or signing a transaction\n    //  - A Signer SHOULD always wrap private information (such as a private\n    //    key or mnemonic) in a function, so that console.log does not leak\n    //    the data\n\n    var Signer =\n    /** @class */\n    function () {\n      ///////////////////\n      // Sub-classes MUST call super\n      function Signer() {\n        var _newTarget = this.constructor;\n        logger.checkAbstract(_newTarget, Signer);\n        lib$3.defineReadOnly(this, \"_isSigner\", true);\n      } ///////////////////\n      // Sub-classes MAY override these\n\n\n      Signer.prototype.getBalance = function (blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                this._checkProvider(\"getBalance\");\n\n                return [4\n                /*yield*/\n                , this.provider.getBalance(this.getAddress(), blockTag)];\n\n              case 1:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      };\n\n      Signer.prototype.getTransactionCount = function (blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                this._checkProvider(\"getTransactionCount\");\n\n                return [4\n                /*yield*/\n                , this.provider.getTransactionCount(this.getAddress(), blockTag)];\n\n              case 1:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      }; // Populates \"from\" if unspecified, and estimates the gas for the transation\n\n\n      Signer.prototype.estimateGas = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n          var tx;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                this._checkProvider(\"estimateGas\");\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties(this.checkTransaction(transaction))];\n\n              case 1:\n                tx = _a.sent();\n                return [4\n                /*yield*/\n                , this.provider.estimateGas(tx)];\n\n              case 2:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      }; // Populates \"from\" if unspecified, and calls with the transation\n\n\n      Signer.prototype.call = function (transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          var tx;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                this._checkProvider(\"call\");\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties(this.checkTransaction(transaction))];\n\n              case 1:\n                tx = _a.sent();\n                return [4\n                /*yield*/\n                , this.provider.call(tx, blockTag)];\n\n              case 2:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      }; // Populates all fields in a transaction, signs it and sends it to the network\n\n\n      Signer.prototype.sendTransaction = function (transaction) {\n        var _this = this;\n\n        this._checkProvider(\"sendTransaction\");\n\n        return this.populateTransaction(transaction).then(function (tx) {\n          return _this.signTransaction(tx).then(function (signedTx) {\n            return _this.provider.sendTransaction(signedTx);\n          });\n        });\n      };\n\n      Signer.prototype.getChainId = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var network;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                this._checkProvider(\"getChainId\");\n\n                return [4\n                /*yield*/\n                , this.provider.getNetwork()];\n\n              case 1:\n                network = _a.sent();\n                return [2\n                /*return*/\n                , network.chainId];\n            }\n          });\n        });\n      };\n\n      Signer.prototype.getGasPrice = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                this._checkProvider(\"getGasPrice\");\n\n                return [4\n                /*yield*/\n                , this.provider.getGasPrice()];\n\n              case 1:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      };\n\n      Signer.prototype.resolveName = function (name) {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                this._checkProvider(\"resolveName\");\n\n                return [4\n                /*yield*/\n                , this.provider.resolveName(name)];\n\n              case 1:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      }; // Checks a transaction does not contain invalid keys and if\n      // no \"from\" is provided, populates it.\n      // - does NOT require a provider\n      // - adds \"from\" is not present\n      // - returns a COPY (safe to mutate the result)\n      // By default called from: (overriding these prevents it)\n      //   - call\n      //   - estimateGas\n      //   - populateTransaction (and therefor sendTransaction)\n\n\n      Signer.prototype.checkTransaction = function (transaction) {\n        for (var key in transaction) {\n          if (allowedTransactionKeys.indexOf(key) === -1) {\n            logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n          }\n        }\n\n        var tx = lib$3.shallowCopy(transaction);\n\n        if (tx.from == null) {\n          tx.from = this.getAddress();\n        } else {\n          // Make sure any provided address matches this signer\n          tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(function (result) {\n            if (result[0] !== result[1]) {\n              logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n            }\n\n            return result[0];\n          });\n        }\n\n        return tx;\n      }; // Populates ALL keys for a transaction and checks that \"from\" matches\n      // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n      // By default called from: (overriding these prevents it)\n      //   - sendTransaction\n\n\n      Signer.prototype.populateTransaction = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n          var tx;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties(this.checkTransaction(transaction))];\n\n              case 1:\n                tx = _a.sent();\n\n                if (tx.to != null) {\n                  tx.to = Promise.resolve(tx.to).then(function (to) {\n                    return _this.resolveName(to);\n                  });\n                }\n\n                if (tx.gasPrice == null) {\n                  tx.gasPrice = this.getGasPrice();\n                }\n\n                if (tx.nonce == null) {\n                  tx.nonce = this.getTransactionCount(\"pending\");\n                }\n\n                if (tx.gasLimit == null) {\n                  tx.gasLimit = this.estimateGas(tx).catch(function (error) {\n                    return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", lib.Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                      error: error,\n                      tx: tx\n                    });\n                  });\n                }\n\n                if (tx.chainId == null) {\n                  tx.chainId = this.getChainId();\n                } else {\n                  tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(function (results) {\n                    if (results[1] !== 0 && results[0] !== results[1]) {\n                      logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                    }\n\n                    return results[0];\n                  });\n                }\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties(tx)];\n\n              case 2:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      }; ///////////////////\n      // Sub-classes SHOULD leave these alone\n\n\n      Signer.prototype._checkProvider = function (operation) {\n        if (!this.provider) {\n          logger.throwError(\"missing provider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: operation || \"_checkProvider\"\n          });\n        }\n      };\n\n      Signer.isSigner = function (value) {\n        return !!(value && value._isSigner);\n      };\n\n      return Signer;\n    }();\n\n    exports.Signer = Signer;\n\n    var VoidSigner =\n    /** @class */\n    function (_super) {\n      __extends(VoidSigner, _super);\n\n      function VoidSigner(address, provider) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, VoidSigner);\n        _this = _super.call(this) || this;\n        lib$3.defineReadOnly(_this, \"address\", address);\n        lib$3.defineReadOnly(_this, \"provider\", provider || null);\n        return _this;\n      }\n\n      VoidSigner.prototype.getAddress = function () {\n        return Promise.resolve(this.address);\n      };\n\n      VoidSigner.prototype._fail = function (message, operation) {\n        return Promise.resolve().then(function () {\n          logger.throwError(message, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: operation\n          });\n        });\n      };\n\n      VoidSigner.prototype.signMessage = function (message) {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n      };\n\n      VoidSigner.prototype.signTransaction = function (transaction) {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n      };\n\n      VoidSigner.prototype.connect = function (provider) {\n        return new VoidSigner(this.address, provider);\n      };\n\n      return VoidSigner;\n    }(Signer);\n\n    exports.VoidSigner = VoidSigner;\n  });\n  var index$c = unwrapExports(lib$c);\n  var lib_1$c = lib$c.Signer;\n  var lib_2$b = lib$c.VoidSigner;\n\n  var _version$m = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"contracts/5.0.3\";\n  });\n\n  var _version$n = unwrapExports(_version$m);\n\n  var _version_1$b = _version$m.version;\n  var lib$d = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    var __spreadArrays = commonjsGlobal && commonjsGlobal.__spreadArrays || function () {\n      for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n      for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n      return r;\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); //import { AddressZero } from \"@ethersproject/constants\";\n    // @TOOD remove dependences transactions\n\n    var logger = new lib.Logger(_version$m.version);\n    ;\n    ; ///////////////////////////////\n\n    var allowedTransactionKeys = {\n      chainId: true,\n      data: true,\n      from: true,\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      to: true,\n      value: true\n    };\n\n    function resolveName(resolver, nameOrPromise) {\n      return __awaiter(this, void 0, void 0, function () {\n        var name;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , nameOrPromise];\n\n            case 1:\n              name = _a.sent(); // If it is already an address, just use it (after adding checksum)\n\n              try {\n                return [2\n                /*return*/\n                , lib$6.getAddress(name)];\n              } catch (error) {}\n\n              if (!resolver) {\n                logger.throwError(\"a provider or signer is needed to resolve ENS names\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"resolveName\"\n                });\n              }\n\n              return [4\n              /*yield*/\n              , resolver.resolveName(name)];\n\n            case 2:\n              return [2\n              /*return*/\n              , _a.sent()];\n          }\n        });\n      });\n    } // Recursively replaces ENS names with promises to resolve the name and resolves all properties\n\n\n    function resolveAddresses(resolver, value, paramType) {\n      if (Array.isArray(paramType)) {\n        return Promise.all(paramType.map(function (paramType, index) {\n          return resolveAddresses(resolver, Array.isArray(value) ? value[index] : value[paramType.name], paramType);\n        }));\n      }\n\n      if (paramType.type === \"address\") {\n        return resolveName(resolver, value);\n      }\n\n      if (paramType.type === \"tuple\") {\n        return resolveAddresses(resolver, value, paramType.components);\n      }\n\n      if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n          throw new Error(\"invalid value for array\");\n        }\n\n        return Promise.all(value.map(function (v) {\n          return resolveAddresses(resolver, v, paramType.arrayChildren);\n        }));\n      }\n\n      return Promise.resolve(value);\n    }\n\n    function populateTransaction(contract, fragment, args) {\n      return __awaiter(this, void 0, void 0, function () {\n        var overrides, resolved, tx, ro, roValue, leftovers;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              overrides = {};\n\n              if (args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n                overrides = lib$3.shallowCopy(args.pop());\n              } // Make sure the parameter count matches\n\n\n              logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\"); // Populate \"from\" override (allow promises)\n\n              if (contract.signer) {\n                if (overrides.from) {\n                  // Contracts with a Signer are from the Signer's frame-of-reference;\n                  // but we allow overriding \"from\" if it matches the signer\n                  overrides.from = lib$3.resolveProperties({\n                    override: resolveName(contract.signer, overrides.from),\n                    signer: contract.signer.getAddress()\n                  }).then(function (check) {\n                    return __awaiter(_this, void 0, void 0, function () {\n                      return __generator(this, function (_a) {\n                        if (lib$6.getAddress(check.signer) !== check.override) {\n                          logger.throwError(\"Contract with a Signer cannot override from\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"overrides.from\"\n                          });\n                        }\n\n                        return [2\n                        /*return*/\n                        , check.override];\n                      });\n                    });\n                  });\n                } else {\n                  overrides.from = contract.signer.getAddress();\n                }\n              } else if (overrides.from) {\n                overrides.from = resolveName(contract.provider, overrides.from); //} else {\n                // Contracts without a signer can override \"from\", and if\n                // unspecified the zero address is used\n                //overrides.from = AddressZero;\n              }\n\n              return [4\n              /*yield*/\n              , lib$3.resolveProperties({\n                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n                address: contract.resolvedAddress,\n                overrides: lib$3.resolveProperties(overrides) || {}\n              })];\n\n            case 1:\n              resolved = _a.sent();\n              tx = {\n                data: contract.interface.encodeFunctionData(fragment, resolved.args),\n                to: resolved.address\n              };\n              ro = resolved.overrides; // Populate simple overrides\n\n              if (ro.nonce != null) {\n                tx.nonce = lib$2.BigNumber.from(ro.nonce).toNumber();\n              }\n\n              if (ro.gasLimit != null) {\n                tx.gasLimit = lib$2.BigNumber.from(ro.gasLimit);\n              }\n\n              if (ro.gasPrice != null) {\n                tx.gasPrice = lib$2.BigNumber.from(ro.gasPrice);\n              }\n\n              if (ro.from != null) {\n                tx.from = ro.from;\n              } // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n\n\n              if (tx.gasLimit == null && fragment.gas != null) {\n                tx.gasLimit = lib$2.BigNumber.from(fragment.gas).add(21000);\n              } // Populate \"value\" override\n\n\n              if (ro.value) {\n                roValue = lib$2.BigNumber.from(ro.value);\n\n                if (!roValue.isZero() && !fragment.payable) {\n                  logger.throwError(\"non-payable method cannot override value\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: overrides.value\n                  });\n                }\n\n                tx.value = roValue;\n              } // Remvoe the overrides\n\n\n              delete overrides.nonce;\n              delete overrides.gasLimit;\n              delete overrides.gasPrice;\n              delete overrides.from;\n              delete overrides.value;\n              leftovers = Object.keys(overrides).filter(function (key) {\n                return overrides[key] != null;\n              });\n\n              if (leftovers.length) {\n                logger.throwError(\"cannot override \" + leftovers.map(function (l) {\n                  return JSON.stringify(l);\n                }).join(\",\"), lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"overrides\",\n                  overrides: leftovers\n                });\n              }\n\n              return [2\n              /*return*/\n              , tx];\n          }\n        });\n      });\n    }\n\n    function buildPopulate(contract, fragment) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , populateTransaction(contract, fragment, args)];\n          });\n        });\n      };\n    }\n\n    function buildEstimate(contract, fragment) {\n      var signerOrProvider = contract.signer || contract.provider;\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(this, void 0, void 0, function () {\n          var tx;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!signerOrProvider) {\n                  logger.throwError(\"estimate require a provider or signer\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"estimateGas\"\n                  });\n                }\n\n                return [4\n                /*yield*/\n                , populateTransaction(contract, fragment, args)];\n\n              case 1:\n                tx = _a.sent();\n                return [4\n                /*yield*/\n                , signerOrProvider.estimateGas(tx)];\n\n              case 2:\n                return [2\n                /*return*/\n                , _a.sent()];\n            }\n          });\n        });\n      };\n    }\n\n    function buildCall(contract, fragment, collapseSimple) {\n      var signerOrProvider = contract.signer || contract.provider;\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(this, void 0, void 0, function () {\n          var blockTag, overrides, tx, result, value;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                blockTag = undefined;\n                if (!(args.length === fragment.inputs.length + 1 && typeof args[args.length - 1] === \"object\")) return [3\n                /*break*/\n                , 3];\n                overrides = lib$3.shallowCopy(args.pop());\n                if (!(overrides.blockTag != null)) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , overrides.blockTag];\n\n              case 1:\n                blockTag = _a.sent();\n                _a.label = 2;\n\n              case 2:\n                delete overrides.blockTag;\n                args.push(overrides);\n                _a.label = 3;\n\n              case 3:\n                if (!(contract.deployTransaction != null)) return [3\n                /*break*/\n                , 5];\n                return [4\n                /*yield*/\n                , contract._deployed(blockTag)];\n\n              case 4:\n                _a.sent();\n\n                _a.label = 5;\n\n              case 5:\n                return [4\n                /*yield*/\n                , populateTransaction(contract, fragment, args)];\n\n              case 6:\n                tx = _a.sent();\n                return [4\n                /*yield*/\n                , signerOrProvider.call(tx, blockTag)];\n\n              case 7:\n                result = _a.sent();\n\n                try {\n                  value = contract.interface.decodeFunctionResult(fragment, result);\n\n                  if (collapseSimple && fragment.outputs.length === 1) {\n                    value = value[0];\n                  }\n\n                  return [2\n                  /*return*/\n                  , value];\n                } catch (error) {\n                  if (error.code === lib.Logger.errors.CALL_EXCEPTION) {\n                    error.address = contract.address;\n                    error.args = args;\n                    error.transaction = tx;\n                  }\n\n                  throw error;\n                }\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      };\n    }\n\n    function buildSend(contract, fragment) {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(this, void 0, void 0, function () {\n          var txRequest, tx, wait;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!contract.signer) {\n                  logger.throwError(\"sending a transaction requires a signer\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"sendTransaction\"\n                  });\n                }\n\n                if (!(contract.deployTransaction != null)) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , contract._deployed()];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                return [4\n                /*yield*/\n                , populateTransaction(contract, fragment, args)];\n\n              case 3:\n                txRequest = _a.sent();\n                return [4\n                /*yield*/\n                , contract.signer.sendTransaction(txRequest)];\n\n              case 4:\n                tx = _a.sent();\n                wait = tx.wait.bind(tx);\n\n                tx.wait = function (confirmations) {\n                  return wait(confirmations).then(function (receipt) {\n                    receipt.events = receipt.logs.map(function (log) {\n                      var event = lib$3.deepCopy(log);\n                      var parsed = null;\n\n                      try {\n                        parsed = contract.interface.parseLog(log);\n                      } catch (e) {} // Successfully parsed the event log; include it\n\n\n                      if (parsed) {\n                        event.args = parsed.args;\n\n                        event.decode = function (data, topics) {\n                          return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                        };\n\n                        event.event = parsed.name;\n                        event.eventSignature = parsed.signature;\n                      } // Useful operations\n\n\n                      event.removeListener = function () {\n                        return contract.provider;\n                      };\n\n                      event.getBlock = function () {\n                        return contract.provider.getBlock(receipt.blockHash);\n                      };\n\n                      event.getTransaction = function () {\n                        return contract.provider.getTransaction(receipt.transactionHash);\n                      };\n\n                      event.getTransactionReceipt = function () {\n                        return Promise.resolve(receipt);\n                      };\n\n                      return event;\n                    });\n                    return receipt;\n                  });\n                };\n\n                return [2\n                /*return*/\n                , tx];\n            }\n          });\n        });\n      };\n    }\n\n    function buildDefault(contract, fragment, collapseSimple) {\n      if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n      }\n\n      return buildSend(contract, fragment);\n    }\n\n    function getEventTag(filter) {\n      if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n      }\n\n      return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map(function (topic) {\n        if (Array.isArray(topic)) {\n          return topic.join(\"|\");\n        }\n\n        return topic;\n      }).join(\":\") : \"\");\n    }\n\n    var RunningEvent =\n    /** @class */\n    function () {\n      function RunningEvent(tag, filter) {\n        lib$3.defineReadOnly(this, \"tag\", tag);\n        lib$3.defineReadOnly(this, \"filter\", filter);\n        this._listeners = [];\n      }\n\n      RunningEvent.prototype.addListener = function (listener, once) {\n        this._listeners.push({\n          listener: listener,\n          once: once\n        });\n      };\n\n      RunningEvent.prototype.removeListener = function (listener) {\n        var done = false;\n        this._listeners = this._listeners.filter(function (item) {\n          if (done || item.listener !== listener) {\n            return true;\n          }\n\n          done = true;\n          return false;\n        });\n      };\n\n      RunningEvent.prototype.removeAllListeners = function () {\n        this._listeners = [];\n      };\n\n      RunningEvent.prototype.listeners = function () {\n        return this._listeners.map(function (i) {\n          return i.listener;\n        });\n      };\n\n      RunningEvent.prototype.listenerCount = function () {\n        return this._listeners.length;\n      };\n\n      RunningEvent.prototype.run = function (args) {\n        var _this = this;\n\n        var listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter(function (item) {\n          var argsCopy = args.slice(); // Call the callback in the next event loop\n\n          setTimeout(function () {\n            item.listener.apply(_this, argsCopy);\n          }, 0); // Reschedule it if it not \"once\"\n\n          return !item.once;\n        });\n        return listenerCount;\n      };\n\n      RunningEvent.prototype.prepareEvent = function (event) {}; // Returns the array that will be applied to an emit\n\n\n      RunningEvent.prototype.getEmit = function (event) {\n        return [event];\n      };\n\n      return RunningEvent;\n    }();\n\n    var ErrorRunningEvent =\n    /** @class */\n    function (_super) {\n      __extends(ErrorRunningEvent, _super);\n\n      function ErrorRunningEvent() {\n        return _super.call(this, \"error\", null) || this;\n      }\n\n      return ErrorRunningEvent;\n    }(RunningEvent); // @TODO Fragment should inherit Wildcard? and just override getEmit?\n    //       or have a common abstract super class, with enough constructor\n    //       options to configure both.\n    // A Fragment Event will populate all the properties that Wildcard\n    // will, and additioanlly dereference the arguments when emitting\n\n\n    var FragmentRunningEvent =\n    /** @class */\n    function (_super) {\n      __extends(FragmentRunningEvent, _super);\n\n      function FragmentRunningEvent(address, contractInterface, fragment, topics) {\n        var _this = this;\n\n        var filter = {\n          address: address\n        };\n        var topic = contractInterface.getEventTopic(fragment);\n\n        if (topics) {\n          if (topic !== topics[0]) {\n            logger.throwArgumentError(\"topic mismatch\", \"topics\", topics);\n          }\n\n          filter.topics = topics.slice();\n        } else {\n          filter.topics = [topic];\n        }\n\n        _this = _super.call(this, getEventTag(filter), filter) || this;\n        lib$3.defineReadOnly(_this, \"address\", address);\n        lib$3.defineReadOnly(_this, \"interface\", contractInterface);\n        lib$3.defineReadOnly(_this, \"fragment\", fragment);\n        return _this;\n      }\n\n      FragmentRunningEvent.prototype.prepareEvent = function (event) {\n        var _this = this;\n\n        _super.prototype.prepareEvent.call(this, event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = function (data, topics) {\n          return _this.interface.decodeEventLog(_this.fragment, data, topics);\n        };\n\n        try {\n          event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n          event.args = null;\n          event.decodeError = error;\n        }\n      };\n\n      FragmentRunningEvent.prototype.getEmit = function (event) {\n        var errors = lib$a.checkResultErrors(event.args);\n\n        if (errors.length) {\n          throw errors[0].error;\n        }\n\n        var args = (event.args || []).slice();\n        args.push(event);\n        return args;\n      };\n\n      return FragmentRunningEvent;\n    }(RunningEvent); // A Wildard Event will attempt to populate:\n    //  - event            The name of the event name\n    //  - eventSignature   The full signature of the event\n    //  - decode           A function to decode data and topics\n    //  - args             The decoded data and topics\n\n\n    var WildcardRunningEvent =\n    /** @class */\n    function (_super) {\n      __extends(WildcardRunningEvent, _super);\n\n      function WildcardRunningEvent(address, contractInterface) {\n        var _this = _super.call(this, \"*\", {\n          address: address\n        }) || this;\n\n        lib$3.defineReadOnly(_this, \"address\", address);\n        lib$3.defineReadOnly(_this, \"interface\", contractInterface);\n        return _this;\n      }\n\n      WildcardRunningEvent.prototype.prepareEvent = function (event) {\n        var _this = this;\n\n        _super.prototype.prepareEvent.call(this, event);\n\n        try {\n          var parsed_1 = this.interface.parseLog(event);\n          event.event = parsed_1.name;\n          event.eventSignature = parsed_1.signature;\n\n          event.decode = function (data, topics) {\n            return _this.interface.decodeEventLog(parsed_1.eventFragment, data, topics);\n          };\n\n          event.args = parsed_1.args;\n        } catch (error) {// No matching event\n        }\n      };\n\n      return WildcardRunningEvent;\n    }(RunningEvent);\n\n    var Contract =\n    /** @class */\n    function () {\n      function Contract(addressOrName, contractInterface, signerOrProvider) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, Contract); // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n\n        lib$3.defineReadOnly(this, \"interface\", lib$3.getStatic(_newTarget, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n          lib$3.defineReadOnly(this, \"provider\", null);\n          lib$3.defineReadOnly(this, \"signer\", null);\n        } else if (lib$c.Signer.isSigner(signerOrProvider)) {\n          lib$3.defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n          lib$3.defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (lib$b.Provider.isProvider(signerOrProvider)) {\n          lib$3.defineReadOnly(this, \"provider\", signerOrProvider);\n          lib$3.defineReadOnly(this, \"signer\", null);\n        } else {\n          logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        lib$3.defineReadOnly(this, \"callStatic\", {});\n        lib$3.defineReadOnly(this, \"estimateGas\", {});\n        lib$3.defineReadOnly(this, \"functions\", {});\n        lib$3.defineReadOnly(this, \"populateTransaction\", {});\n        lib$3.defineReadOnly(this, \"filters\", {});\n        {\n          var uniqueFilters_1 = {};\n          Object.keys(this.interface.events).forEach(function (eventSignature) {\n            var event = _this.interface.events[eventSignature];\n            lib$3.defineReadOnly(_this.filters, eventSignature, function () {\n              var args = [];\n\n              for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n              }\n\n              return {\n                address: _this.address,\n                topics: _this.interface.encodeFilterTopics(event, args)\n              };\n            });\n\n            if (!uniqueFilters_1[event.name]) {\n              uniqueFilters_1[event.name] = [];\n            }\n\n            uniqueFilters_1[event.name].push(eventSignature);\n          });\n          Object.keys(uniqueFilters_1).forEach(function (name) {\n            var filters = uniqueFilters_1[name];\n\n            if (filters.length === 1) {\n              lib$3.defineReadOnly(_this.filters, name, _this.filters[filters[0]]);\n            } else {\n              logger.warn(\"Duplicate definition of \" + name + \" (\" + filters.join(\", \") + \")\");\n            }\n          });\n        }\n        lib$3.defineReadOnly(this, \"_runningEvents\", {});\n        lib$3.defineReadOnly(this, \"_wrappedEmits\", {});\n        lib$3.defineReadOnly(this, \"address\", addressOrName);\n\n        if (this.provider) {\n          lib$3.defineReadOnly(this, \"resolvedAddress\", this.provider.resolveName(addressOrName).then(function (address) {\n            if (address == null) {\n              throw new Error(\"name not found\");\n            }\n\n            return address;\n          }).catch(function (error) {\n            console.log(\"ERROR: Cannot find Contract - \" + addressOrName);\n            throw error;\n          }));\n        } else {\n          try {\n            lib$3.defineReadOnly(this, \"resolvedAddress\", Promise.resolve(lib$6.getAddress(addressOrName)));\n          } catch (error) {\n            // Without a provider, we cannot use ENS names\n            logger.throwError(\"provider is required to use ENS name as contract address\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"new Contract\"\n            });\n          }\n        }\n\n        var uniqueNames = {};\n        var uniqueSignatures = {};\n        Object.keys(this.interface.functions).forEach(function (signature) {\n          var fragment = _this.interface.functions[signature]; // Check that the signature is unique; if not the ABI generation has\n          // not been cleaned or may be incorrectly generated\n\n          if (uniqueSignatures[signature]) {\n            logger.warn(\"Duplicate ABI entry for \" + JSON.stringify(name));\n            return;\n          }\n\n          uniqueSignatures[signature] = true; // Track unique names; we only expose bare named functions if they\n          // are ambiguous\n\n          {\n            var name_1 = fragment.name;\n\n            if (!uniqueNames[name_1]) {\n              uniqueNames[name_1] = [];\n            }\n\n            uniqueNames[name_1].push(signature);\n          }\n\n          if (_this[signature] == null) {\n            lib$3.defineReadOnly(_this, signature, buildDefault(_this, fragment, true));\n          } // We do not collapse simple calls on this bucket, which allows\n          // frameworks to safely use this without introspection as well as\n          // allows decoding error recovery.\n\n\n          if (_this.functions[signature] == null) {\n            lib$3.defineReadOnly(_this.functions, signature, buildDefault(_this, fragment, false));\n          }\n\n          if (_this.callStatic[signature] == null) {\n            lib$3.defineReadOnly(_this.callStatic, signature, buildCall(_this, fragment, true));\n          }\n\n          if (_this.populateTransaction[signature] == null) {\n            lib$3.defineReadOnly(_this.populateTransaction, signature, buildPopulate(_this, fragment));\n          }\n\n          if (_this.estimateGas[signature] == null) {\n            lib$3.defineReadOnly(_this.estimateGas, signature, buildEstimate(_this, fragment));\n          }\n        });\n        Object.keys(uniqueNames).forEach(function (name) {\n          // Ambiguous names to not get attached as bare names\n          var signatures = uniqueNames[name];\n\n          if (signatures.length > 1) {\n            return;\n          }\n\n          var signature = signatures[0];\n\n          if (_this[name] == null) {\n            lib$3.defineReadOnly(_this, name, _this[signature]);\n          }\n\n          if (_this.functions[name] == null) {\n            lib$3.defineReadOnly(_this.functions, name, _this.functions[signature]);\n          }\n\n          if (_this.callStatic[name] == null) {\n            lib$3.defineReadOnly(_this.callStatic, name, _this.callStatic[signature]);\n          }\n\n          if (_this.populateTransaction[name] == null) {\n            lib$3.defineReadOnly(_this.populateTransaction, name, _this.populateTransaction[signature]);\n          }\n\n          if (_this.estimateGas[name] == null) {\n            lib$3.defineReadOnly(_this.estimateGas, name, _this.estimateGas[signature]);\n          }\n        });\n      }\n\n      Contract.getContractAddress = function (transaction) {\n        return lib$6.getContractAddress(transaction);\n      };\n\n      Contract.getInterface = function (contractInterface) {\n        if (lib$a.Interface.isInterface(contractInterface)) {\n          return contractInterface;\n        }\n\n        return new lib$a.Interface(contractInterface);\n      }; // @TODO: Allow timeout?\n\n\n      Contract.prototype.deployed = function () {\n        return this._deployed();\n      };\n\n      Contract.prototype._deployed = function (blockTag) {\n        var _this = this;\n\n        if (!this._deployedPromise) {\n          // If we were just deployed, we know the transaction we should occur in\n          if (this.deployTransaction) {\n            this._deployedPromise = this.deployTransaction.wait().then(function () {\n              return _this;\n            });\n          } else {\n            // @TODO: Once we allow a timeout to be passed in, we will wait\n            // up to that many blocks for getCode\n            // Otherwise, poll for our code to be deployed\n            this._deployedPromise = this.provider.getCode(this.address, blockTag).then(function (code) {\n              if (code === \"0x\") {\n                logger.throwError(\"contract not deployed\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                  contractAddress: _this.address,\n                  operation: \"getDeployed\"\n                });\n              }\n\n              return _this;\n            });\n          }\n        }\n\n        return this._deployedPromise;\n      }; // @TODO:\n      // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n      // @TODO:\n      // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n\n      Contract.prototype.fallback = function (overrides) {\n        var _this = this;\n\n        if (!this.signer) {\n          logger.throwError(\"sending a transactions require a signer\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"sendTransaction(fallback)\"\n          });\n        }\n\n        var tx = lib$3.shallowCopy(overrides || {});\n        [\"from\", \"to\"].forEach(function (key) {\n          if (tx[key] == null) {\n            return;\n          }\n\n          logger.throwError(\"cannot override \" + key, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: key\n          });\n        });\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(function () {\n          return _this.signer.sendTransaction(tx);\n        });\n      }; // Reconnect to a different signer or provider\n\n\n      Contract.prototype.connect = function (signerOrProvider) {\n        if (typeof signerOrProvider === \"string\") {\n          signerOrProvider = new lib$c.VoidSigner(signerOrProvider, this.provider);\n        }\n\n        var contract = new this.constructor(this.address, this.interface, signerOrProvider);\n\n        if (this.deployTransaction) {\n          lib$3.defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n      }; // Re-attach to a different on-chain instance of this contract\n\n\n      Contract.prototype.attach = function (addressOrName) {\n        return new this.constructor(addressOrName, this.interface, this.signer || this.provider);\n      };\n\n      Contract.isIndexed = function (value) {\n        return lib$a.Indexed.isIndexed(value);\n      };\n\n      Contract.prototype._normalizeRunningEvent = function (runningEvent) {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n          return this._runningEvents[runningEvent.tag];\n        }\n\n        return runningEvent;\n      };\n\n      Contract.prototype._getRunningEvent = function (eventName) {\n        if (typeof eventName === \"string\") {\n          // Listen for \"error\" events (if your contract has an error event, include\n          // the full signature to bypass this special event keyword)\n          if (eventName === \"error\") {\n            return this._normalizeRunningEvent(new ErrorRunningEvent());\n          } // Listen for any event that is registered\n\n\n          if (eventName === \"event\") {\n            return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n          } // Listen for any event\n\n\n          if (eventName === \"*\") {\n            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n          } // Get the event Fragment (throws if ambiguous/unknown event)\n\n\n          var fragment = this.interface.getEvent(eventName);\n          return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        } // We have topics to filter by...\n\n\n        if (eventName.topics && eventName.topics.length > 0) {\n          // Is it a known topichash? (throws if no matching topichash)\n          try {\n            var topic = eventName.topics[0];\n\n            if (typeof topic !== \"string\") {\n              throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n            }\n\n            var fragment = this.interface.getEvent(topic);\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n          } catch (error) {} // Filter by the unknown topichash\n\n\n          var filter = {\n            address: this.address,\n            topics: eventName.topics\n          };\n          return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n      };\n\n      Contract.prototype._checkRunningEvents = function (runningEvent) {\n        if (runningEvent.listenerCount() === 0) {\n          delete this._runningEvents[runningEvent.tag]; // If we have a poller for this, remove it\n\n          var emit = this._wrappedEmits[runningEvent.tag];\n\n          if (emit) {\n            this.provider.off(runningEvent.filter, emit);\n            delete this._wrappedEmits[runningEvent.tag];\n          }\n        }\n      }; // Subclasses can override this to gracefully recover\n      // from parse errors if they wish\n\n\n      Contract.prototype._wrapEvent = function (runningEvent, log, listener) {\n        var _this = this;\n\n        var event = lib$3.deepCopy(log);\n\n        event.removeListener = function () {\n          if (!listener) {\n            return;\n          }\n\n          runningEvent.removeListener(listener);\n\n          _this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = function () {\n          return _this.provider.getBlock(log.blockHash);\n        };\n\n        event.getTransaction = function () {\n          return _this.provider.getTransaction(log.transactionHash);\n        };\n\n        event.getTransactionReceipt = function () {\n          return _this.provider.getTransactionReceipt(log.transactionHash);\n        }; // This may throw if the topics and data mismatch the signature\n\n\n        runningEvent.prepareEvent(event);\n        return event;\n      };\n\n      Contract.prototype._addEventListener = function (runningEvent, listener, once) {\n        var _this = this;\n\n        if (!this.provider) {\n          logger.throwError(\"events require a provider or a signer with a provider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"once\"\n          });\n        }\n\n        runningEvent.addListener(listener, once); // Track this running event and its listeners (may already be there; but no hard in updating)\n\n        this._runningEvents[runningEvent.tag] = runningEvent; // If we are not polling the provider, start polling\n\n        if (!this._wrappedEmits[runningEvent.tag]) {\n          var wrappedEmit = function (log) {\n            var event = _this._wrapEvent(runningEvent, log, listener); // Try to emit the result for the parameterized event...\n\n\n            if (event.decodeError == null) {\n              try {\n                var args = runningEvent.getEmit(event);\n\n                _this.emit.apply(_this, __spreadArrays([runningEvent.filter], args));\n              } catch (error) {\n                event.decodeError = error.error;\n              }\n            } // Always emit \"event\" for fragment-base events\n\n\n            if (runningEvent.filter != null) {\n              _this.emit(\"event\", event);\n            } // Emit \"error\" if there was an error\n\n\n            if (event.decodeError != null) {\n              _this.emit(\"error\", event.decodeError, event);\n            }\n          };\n\n          this._wrappedEmits[runningEvent.tag] = wrappedEmit; // Special events, like \"error\" do not have a filter\n\n          if (runningEvent.filter != null) {\n            this.provider.on(runningEvent.filter, wrappedEmit);\n          }\n        }\n      };\n\n      Contract.prototype.queryFilter = function (event, fromBlockOrBlockhash, toBlock) {\n        var _this = this;\n\n        var runningEvent = this._getRunningEvent(event);\n\n        var filter = lib$3.shallowCopy(runningEvent.filter);\n\n        if (typeof fromBlockOrBlockhash === \"string\" && lib$1.isHexString(fromBlockOrBlockhash, 32)) {\n          if (toBlock != null) {\n            logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n          }\n\n          filter.blockHash = fromBlockOrBlockhash;\n        } else {\n          filter.fromBlock = fromBlockOrBlockhash != null ? fromBlockOrBlockhash : 0;\n          filter.toBlock = toBlock != null ? toBlock : \"latest\";\n        }\n\n        return this.provider.getLogs(filter).then(function (logs) {\n          return logs.map(function (log) {\n            return _this._wrapEvent(runningEvent, log, null);\n          });\n        });\n      };\n\n      Contract.prototype.on = function (event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n\n        return this;\n      };\n\n      Contract.prototype.once = function (event, listener) {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n\n        return this;\n      };\n\n      Contract.prototype.emit = function (eventName) {\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        if (!this.provider) {\n          return false;\n        }\n\n        var runningEvent = this._getRunningEvent(eventName);\n\n        var result = runningEvent.run(args) > 0; // May have drained all the \"once\" events; check for living events\n\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n      };\n\n      Contract.prototype.listenerCount = function (eventName) {\n        if (!this.provider) {\n          return 0;\n        }\n\n        return this._getRunningEvent(eventName).listenerCount();\n      };\n\n      Contract.prototype.listeners = function (eventName) {\n        if (!this.provider) {\n          return [];\n        }\n\n        if (eventName == null) {\n          var result_1 = [];\n\n          for (var tag in this._runningEvents) {\n            this._runningEvents[tag].listeners().forEach(function (listener) {\n              result_1.push(listener);\n            });\n          }\n\n          return result_1;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n      };\n\n      Contract.prototype.removeAllListeners = function (eventName) {\n        if (!this.provider) {\n          return this;\n        }\n\n        if (eventName == null) {\n          for (var tag in this._runningEvents) {\n            var runningEvent_1 = this._runningEvents[tag];\n            runningEvent_1.removeAllListeners();\n\n            this._checkRunningEvents(runningEvent_1);\n          }\n\n          return this;\n        } // Delete any listeners\n\n\n        var runningEvent = this._getRunningEvent(eventName);\n\n        runningEvent.removeAllListeners();\n\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n      };\n\n      Contract.prototype.off = function (eventName, listener) {\n        if (!this.provider) {\n          return this;\n        }\n\n        var runningEvent = this._getRunningEvent(eventName);\n\n        runningEvent.removeListener(listener);\n\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n      };\n\n      Contract.prototype.removeListener = function (eventName, listener) {\n        return this.off(eventName, listener);\n      };\n\n      return Contract;\n    }();\n\n    exports.Contract = Contract;\n\n    var ContractFactory =\n    /** @class */\n    function () {\n      function ContractFactory(contractInterface, bytecode, signer) {\n        var _newTarget = this.constructor;\n        var bytecodeHex = null;\n\n        if (typeof bytecode === \"string\") {\n          bytecodeHex = bytecode;\n        } else if (lib$1.isBytes(bytecode)) {\n          bytecodeHex = lib$1.hexlify(bytecode);\n        } else if (bytecode && typeof bytecode.object === \"string\") {\n          // Allow the bytecode object from the Solidity compiler\n          bytecodeHex = bytecode.object;\n        } else {\n          // Crash in the next verification step\n          bytecodeHex = \"!\";\n        } // Make sure it is 0x prefixed\n\n\n        if (bytecodeHex.substring(0, 2) !== \"0x\") {\n          bytecodeHex = \"0x\" + bytecodeHex;\n        } // Make sure the final result is valid bytecode\n\n\n        if (!lib$1.isHexString(bytecodeHex) || bytecodeHex.length % 2) {\n          logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        } // If we have a signer, make sure it is valid\n\n\n        if (signer && !lib$c.Signer.isSigner(signer)) {\n          logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        lib$3.defineReadOnly(this, \"bytecode\", bytecodeHex);\n        lib$3.defineReadOnly(this, \"interface\", lib$3.getStatic(_newTarget, \"getInterface\")(contractInterface));\n        lib$3.defineReadOnly(this, \"signer\", signer || null);\n      } // @TODO: Future; rename to populteTransaction?\n\n\n      ContractFactory.prototype.getDeployTransaction = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var tx = {}; // If we have 1 additional argument, we allow transaction overrides\n\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof args[args.length - 1] === \"object\") {\n          tx = lib$3.shallowCopy(args.pop());\n\n          for (var key in tx) {\n            if (!allowedTransactionKeys[key]) {\n              throw new Error(\"unknown transaction override \" + key);\n            }\n          }\n        } // Do not allow these to be overridden in a deployment transaction\n\n\n        [\"data\", \"from\", \"to\"].forEach(function (key) {\n          if (tx[key] == null) {\n            return;\n          }\n\n          logger.throwError(\"cannot override \" + key, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: key\n          });\n        }); // Make sure the call matches the constructor signature\n\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\"); // Set the data to the bytecode + the encoded constructor arguments\n\n        tx.data = lib$1.hexlify(lib$1.concat([this.bytecode, this.interface.encodeDeploy(args)]));\n        return tx;\n      };\n\n      ContractFactory.prototype.deploy = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return __awaiter(this, void 0, void 0, function () {\n          var overrides, params, unsignedTx, tx, address, contract;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                overrides = {}; // If 1 extra parameter was passed in, it contains overrides\n\n                if (args.length === this.interface.deploy.inputs.length + 1) {\n                  overrides = args.pop();\n                } // Make sure the call matches the constructor signature\n\n\n                logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n                return [4\n                /*yield*/\n                , resolveAddresses(this.signer, args, this.interface.deploy.inputs)];\n\n              case 1:\n                params = _a.sent();\n                params.push(overrides);\n                unsignedTx = this.getDeployTransaction.apply(this, params);\n                return [4\n                /*yield*/\n                , this.signer.sendTransaction(unsignedTx)];\n\n              case 2:\n                tx = _a.sent();\n                address = lib$3.getStatic(this.constructor, \"getContractAddress\")(tx);\n                contract = lib$3.getStatic(this.constructor, \"getContract\")(address, this.interface, this.signer);\n                lib$3.defineReadOnly(contract, \"deployTransaction\", tx);\n                return [2\n                /*return*/\n                , contract];\n            }\n          });\n        });\n      };\n\n      ContractFactory.prototype.attach = function (address) {\n        return this.constructor.getContract(address, this.interface, this.signer);\n      };\n\n      ContractFactory.prototype.connect = function (signer) {\n        return new this.constructor(this.interface, this.bytecode, signer);\n      };\n\n      ContractFactory.fromSolidity = function (compilerOutput, signer) {\n        if (compilerOutput == null) {\n          logger.throwError(\"missing compiler output\", lib.Logger.errors.MISSING_ARGUMENT, {\n            argument: \"compilerOutput\"\n          });\n        }\n\n        if (typeof compilerOutput === \"string\") {\n          compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        var abi = compilerOutput.abi;\n        var bytecode = null;\n\n        if (compilerOutput.bytecode) {\n          bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n          bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n      };\n\n      ContractFactory.getInterface = function (contractInterface) {\n        return Contract.getInterface(contractInterface);\n      };\n\n      ContractFactory.getContractAddress = function (tx) {\n        return lib$6.getContractAddress(tx);\n      };\n\n      ContractFactory.getContract = function (address, contractInterface, signer) {\n        return new Contract(address, contractInterface, signer);\n      };\n\n      return ContractFactory;\n    }();\n\n    exports.ContractFactory = ContractFactory;\n  });\n  var index$d = unwrapExports(lib$d);\n  var lib_1$d = lib$d.Contract;\n  var lib_2$c = lib$d.ContractFactory;\n  var lib$e = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n    /**\n     * var basex = require(\"base-x\");\n     *\n     * This implementation is heavily based on base-x. The main reason to\n     * deviate was to prevent the dependency of Buffer.\n     *\n     * Contributors:\n     *\n     * base-x encoding\n     * Forked from https://github.com/cryptocoinjs/bs58\n     * Originally written by Mike Hearn for BitcoinJ\n     * Copyright (c) 2011 Google Inc\n     * Ported to JavaScript by Stefan Thomas\n     * Merged Buffer refactorings from base58-native by Stephen Pair\n     * Copyright (c) 2013 BitPay Inc\n     *\n     * The MIT License (MIT)\n     *\n     * Copyright base-x contributors (c) 2016\n     *\n     * Permission is hereby granted, free of charge, to any person obtaining a\n     * copy of this software and associated documentation files (the \"Software\"),\n     * to deal in the Software without restriction, including without limitation\n     * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n     * and/or sell copies of the Software, and to permit persons to whom the\n     * Software is furnished to do so, subject to the following conditions:\n     *\n     * The above copyright notice and this permission notice shall be included in\n     * all copies or substantial portions of the Software.\n    \t * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n     * IN THE SOFTWARE.\n     *\n     */\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var BaseX =\n    /** @class */\n    function () {\n      function BaseX(alphabet) {\n        lib$3.defineReadOnly(this, \"alphabet\", alphabet);\n        lib$3.defineReadOnly(this, \"base\", alphabet.length);\n        lib$3.defineReadOnly(this, \"_alphabetMap\", {});\n        lib$3.defineReadOnly(this, \"_leader\", alphabet.charAt(0)); // pre-compute lookup table\n\n        for (var i = 0; i < alphabet.length; i++) {\n          this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n      }\n\n      BaseX.prototype.encode = function (value) {\n        var source = lib$1.arrayify(value);\n\n        if (source.length === 0) {\n          return \"\";\n        }\n\n        var digits = [0];\n\n        for (var i = 0; i < source.length; ++i) {\n          var carry = source[i];\n\n          for (var j = 0; j < digits.length; ++j) {\n            carry += digits[j] << 8;\n            digits[j] = carry % this.base;\n            carry = carry / this.base | 0;\n          }\n\n          while (carry > 0) {\n            digits.push(carry % this.base);\n            carry = carry / this.base | 0;\n          }\n        }\n\n        var string = \"\"; // deal with leading zeros\n\n        for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n          string += this._leader;\n        } // convert digits to a string\n\n\n        for (var q = digits.length - 1; q >= 0; --q) {\n          string += this.alphabet[digits[q]];\n        }\n\n        return string;\n      };\n\n      BaseX.prototype.decode = function (value) {\n        if (typeof value !== \"string\") {\n          throw new TypeError(\"Expected String\");\n        }\n\n        var bytes = [];\n\n        if (value.length === 0) {\n          return new Uint8Array(bytes);\n        }\n\n        bytes.push(0);\n\n        for (var i = 0; i < value.length; i++) {\n          var byte = this._alphabetMap[value[i]];\n\n          if (byte === undefined) {\n            throw new Error(\"Non-base\" + this.base + \" character\");\n          }\n\n          var carry = byte;\n\n          for (var j = 0; j < bytes.length; ++j) {\n            carry += bytes[j] * this.base;\n            bytes[j] = carry & 0xff;\n            carry >>= 8;\n          }\n\n          while (carry > 0) {\n            bytes.push(carry & 0xff);\n            carry >>= 8;\n          }\n        } // deal with leading zeros\n\n\n        for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n          bytes.push(0);\n        }\n\n        return lib$1.arrayify(new Uint8Array(bytes.reverse()));\n      };\n\n      return BaseX;\n    }();\n\n    exports.BaseX = BaseX;\n    var Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\n    exports.Base32 = Base32;\n    var Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n    exports.Base58 = Base58; //console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n    //console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n  });\n  var index$e = unwrapExports(lib$e);\n  var lib_1$e = lib$e.BaseX;\n  var lib_2$d = lib$e.Base32;\n  var lib_3$a = lib$e.Base58;\n  var minimalisticAssert = assert;\n\n  function assert(val, msg) {\n    if (!val) throw new Error(msg || 'Assertion failed');\n  }\n\n  assert.equal = function assertEqual(l, r, msg) {\n    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);\n  };\n\n  var inherits_browser = createCommonjsModule(function (module) {\n    if (typeof Object.create === 'function') {\n      // implementation from standard node.js 'util' module\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      // old school shim for old browsers\n      module.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n\n          var TempCtor = function () {};\n\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n  });\n  'use strict';\n\n  var inherits_1 = inherits_browser;\n\n  function toArray(msg, enc) {\n    if (Array.isArray(msg)) return msg.slice();\n    if (!msg) return [];\n    var res = [];\n\n    if (typeof msg === 'string') {\n      if (!enc) {\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n          var hi = c >> 8;\n          var lo = c & 0xff;\n          if (hi) res.push(hi, lo);else res.push(lo);\n        }\n      } else if (enc === 'hex') {\n        msg = msg.replace(/[^a-z0-9]+/ig, '');\n        if (msg.length % 2 !== 0) msg = '0' + msg;\n\n        for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n      }\n    } else {\n      for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n    }\n\n    return res;\n  }\n\n  var toArray_1 = toArray;\n\n  function toHex(msg) {\n    var res = '';\n\n    for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n    return res;\n  }\n\n  var toHex_1 = toHex;\n\n  function htonl(w) {\n    var res = w >>> 24 | w >>> 8 & 0xff00 | w << 8 & 0xff0000 | (w & 0xff) << 24;\n    return res >>> 0;\n  }\n\n  var htonl_1 = htonl;\n\n  function toHex32(msg, endian) {\n    var res = '';\n\n    for (var i = 0; i < msg.length; i++) {\n      var w = msg[i];\n      if (endian === 'little') w = htonl(w);\n      res += zero8(w.toString(16));\n    }\n\n    return res;\n  }\n\n  var toHex32_1 = toHex32;\n\n  function zero2(word) {\n    if (word.length === 1) return '0' + word;else return word;\n  }\n\n  var zero2_1 = zero2;\n\n  function zero8(word) {\n    if (word.length === 7) return '0' + word;else if (word.length === 6) return '00' + word;else if (word.length === 5) return '000' + word;else if (word.length === 4) return '0000' + word;else if (word.length === 3) return '00000' + word;else if (word.length === 2) return '000000' + word;else if (word.length === 1) return '0000000' + word;else return word;\n  }\n\n  var zero8_1 = zero8;\n\n  function join32(msg, start, end, endian) {\n    var len = end - start;\n    minimalisticAssert(len % 4 === 0);\n    var res = new Array(len / 4);\n\n    for (var i = 0, k = start; i < res.length; i++, k += 4) {\n      var w;\n      if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];\n      res[i] = w >>> 0;\n    }\n\n    return res;\n  }\n\n  var join32_1 = join32;\n\n  function split32(msg, endian) {\n    var res = new Array(msg.length * 4);\n\n    for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n      var m = msg[i];\n\n      if (endian === 'big') {\n        res[k] = m >>> 24;\n        res[k + 1] = m >>> 16 & 0xff;\n        res[k + 2] = m >>> 8 & 0xff;\n        res[k + 3] = m & 0xff;\n      } else {\n        res[k + 3] = m >>> 24;\n        res[k + 2] = m >>> 16 & 0xff;\n        res[k + 1] = m >>> 8 & 0xff;\n        res[k] = m & 0xff;\n      }\n    }\n\n    return res;\n  }\n\n  var split32_1 = split32;\n\n  function rotr32(w, b) {\n    return w >>> b | w << 32 - b;\n  }\n\n  var rotr32_1 = rotr32;\n\n  function rotl32(w, b) {\n    return w << b | w >>> 32 - b;\n  }\n\n  var rotl32_1 = rotl32;\n\n  function sum32(a, b) {\n    return a + b >>> 0;\n  }\n\n  var sum32_1 = sum32;\n\n  function sum32_3(a, b, c) {\n    return a + b + c >>> 0;\n  }\n\n  var sum32_3_1 = sum32_3;\n\n  function sum32_4(a, b, c, d) {\n    return a + b + c + d >>> 0;\n  }\n\n  var sum32_4_1 = sum32_4;\n\n  function sum32_5(a, b, c, d, e) {\n    return a + b + c + d + e >>> 0;\n  }\n\n  var sum32_5_1 = sum32_5;\n\n  function sum64(buf, pos, ah, al) {\n    var bh = buf[pos];\n    var bl = buf[pos + 1];\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    buf[pos] = hi >>> 0;\n    buf[pos + 1] = lo;\n  }\n\n  var sum64_1 = sum64;\n\n  function sum64_hi(ah, al, bh, bl) {\n    var lo = al + bl >>> 0;\n    var hi = (lo < al ? 1 : 0) + ah + bh;\n    return hi >>> 0;\n  }\n\n  var sum64_hi_1 = sum64_hi;\n\n  function sum64_lo(ah, al, bh, bl) {\n    var lo = al + bl;\n    return lo >>> 0;\n  }\n\n  var sum64_lo_1 = sum64_lo;\n\n  function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    var hi = ah + bh + ch + dh + carry;\n    return hi >>> 0;\n  }\n\n  var sum64_4_hi_1 = sum64_4_hi;\n\n  function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n    var lo = al + bl + cl + dl;\n    return lo >>> 0;\n  }\n\n  var sum64_4_lo_1 = sum64_4_lo;\n\n  function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var carry = 0;\n    var lo = al;\n    lo = lo + bl >>> 0;\n    carry += lo < al ? 1 : 0;\n    lo = lo + cl >>> 0;\n    carry += lo < cl ? 1 : 0;\n    lo = lo + dl >>> 0;\n    carry += lo < dl ? 1 : 0;\n    lo = lo + el >>> 0;\n    carry += lo < el ? 1 : 0;\n    var hi = ah + bh + ch + dh + eh + carry;\n    return hi >>> 0;\n  }\n\n  var sum64_5_hi_1 = sum64_5_hi;\n\n  function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n    var lo = al + bl + cl + dl + el;\n    return lo >>> 0;\n  }\n\n  var sum64_5_lo_1 = sum64_5_lo;\n\n  function rotr64_hi(ah, al, num) {\n    var r = al << 32 - num | ah >>> num;\n    return r >>> 0;\n  }\n\n  var rotr64_hi_1 = rotr64_hi;\n\n  function rotr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n  }\n\n  var rotr64_lo_1 = rotr64_lo;\n\n  function shr64_hi(ah, al, num) {\n    return ah >>> num;\n  }\n\n  var shr64_hi_1 = shr64_hi;\n\n  function shr64_lo(ah, al, num) {\n    var r = ah << 32 - num | al >>> num;\n    return r >>> 0;\n  }\n\n  var shr64_lo_1 = shr64_lo;\n  var utils = {\n    inherits: inherits_1,\n    toArray: toArray_1,\n    toHex: toHex_1,\n    htonl: htonl_1,\n    toHex32: toHex32_1,\n    zero2: zero2_1,\n    zero8: zero8_1,\n    join32: join32_1,\n    split32: split32_1,\n    rotr32: rotr32_1,\n    rotl32: rotl32_1,\n    sum32: sum32_1,\n    sum32_3: sum32_3_1,\n    sum32_4: sum32_4_1,\n    sum32_5: sum32_5_1,\n    sum64: sum64_1,\n    sum64_hi: sum64_hi_1,\n    sum64_lo: sum64_lo_1,\n    sum64_4_hi: sum64_4_hi_1,\n    sum64_4_lo: sum64_4_lo_1,\n    sum64_5_hi: sum64_5_hi_1,\n    sum64_5_lo: sum64_5_lo_1,\n    rotr64_hi: rotr64_hi_1,\n    rotr64_lo: rotr64_lo_1,\n    shr64_hi: shr64_hi_1,\n    shr64_lo: shr64_lo_1\n  };\n  'use strict';\n\n  function BlockHash() {\n    this.pending = null;\n    this.pendingTotal = 0;\n    this.blockSize = this.constructor.blockSize;\n    this.outSize = this.constructor.outSize;\n    this.hmacStrength = this.constructor.hmacStrength;\n    this.padLength = this.constructor.padLength / 8;\n    this.endian = 'big';\n    this._delta8 = this.blockSize / 8;\n    this._delta32 = this.blockSize / 32;\n  }\n\n  var BlockHash_1 = BlockHash;\n\n  BlockHash.prototype.update = function update(msg, enc) {\n    // Convert message to array, pad it, and join into 32bit blocks\n    msg = utils.toArray(msg, enc);\n    if (!this.pending) this.pending = msg;else this.pending = this.pending.concat(msg);\n    this.pendingTotal += msg.length; // Enough data, try updating\n\n    if (this.pending.length >= this._delta8) {\n      msg = this.pending; // Process pending data in blocks\n\n      var r = msg.length % this._delta8;\n      this.pending = msg.slice(msg.length - r, msg.length);\n      if (this.pending.length === 0) this.pending = null;\n      msg = utils.join32(msg, 0, msg.length - r, this.endian);\n\n      for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);\n    }\n\n    return this;\n  };\n\n  BlockHash.prototype.digest = function digest(enc) {\n    this.update(this._pad());\n    minimalisticAssert(this.pending === null);\n    return this._digest(enc);\n  };\n\n  BlockHash.prototype._pad = function pad() {\n    var len = this.pendingTotal;\n    var bytes = this._delta8;\n    var k = bytes - (len + this.padLength) % bytes;\n    var res = new Array(k + this.padLength);\n    res[0] = 0x80;\n\n    for (var i = 1; i < k; i++) res[i] = 0; // Append length\n\n\n    len <<= 3;\n\n    if (this.endian === 'big') {\n      for (var t = 8; t < this.padLength; t++) res[i++] = 0;\n\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = len >>> 24 & 0xff;\n      res[i++] = len >>> 16 & 0xff;\n      res[i++] = len >>> 8 & 0xff;\n      res[i++] = len & 0xff;\n    } else {\n      res[i++] = len & 0xff;\n      res[i++] = len >>> 8 & 0xff;\n      res[i++] = len >>> 16 & 0xff;\n      res[i++] = len >>> 24 & 0xff;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n      res[i++] = 0;\n\n      for (t = 8; t < this.padLength; t++) res[i++] = 0;\n    }\n\n    return res;\n  };\n\n  var common = {\n    BlockHash: BlockHash_1\n  };\n  var _1 = {};\n  var _224 = {};\n  'use strict';\n\n  var rotr32$1 = utils.rotr32;\n\n  function ft_1(s, x, y, z) {\n    if (s === 0) return ch32(x, y, z);\n    if (s === 1 || s === 3) return p32(x, y, z);\n    if (s === 2) return maj32(x, y, z);\n  }\n\n  var ft_1_1 = ft_1;\n\n  function ch32(x, y, z) {\n    return x & y ^ ~x & z;\n  }\n\n  var ch32_1 = ch32;\n\n  function maj32(x, y, z) {\n    return x & y ^ x & z ^ y & z;\n  }\n\n  var maj32_1 = maj32;\n\n  function p32(x, y, z) {\n    return x ^ y ^ z;\n  }\n\n  var p32_1 = p32;\n\n  function s0_256(x) {\n    return rotr32$1(x, 2) ^ rotr32$1(x, 13) ^ rotr32$1(x, 22);\n  }\n\n  var s0_256_1 = s0_256;\n\n  function s1_256(x) {\n    return rotr32$1(x, 6) ^ rotr32$1(x, 11) ^ rotr32$1(x, 25);\n  }\n\n  var s1_256_1 = s1_256;\n\n  function g0_256(x) {\n    return rotr32$1(x, 7) ^ rotr32$1(x, 18) ^ x >>> 3;\n  }\n\n  var g0_256_1 = g0_256;\n\n  function g1_256(x) {\n    return rotr32$1(x, 17) ^ rotr32$1(x, 19) ^ x >>> 10;\n  }\n\n  var g1_256_1 = g1_256;\n  var common$1 = {\n    ft_1: ft_1_1,\n    ch32: ch32_1,\n    maj32: maj32_1,\n    p32: p32_1,\n    s0_256: s0_256_1,\n    s1_256: s1_256_1,\n    g0_256: g0_256_1,\n    g1_256: g1_256_1\n  };\n  'use strict';\n\n  var sum32$1 = utils.sum32;\n  var sum32_4$1 = utils.sum32_4;\n  var sum32_5$1 = utils.sum32_5;\n  var ch32$1 = common$1.ch32;\n  var maj32$1 = common$1.maj32;\n  var s0_256$1 = common$1.s0_256;\n  var s1_256$1 = common$1.s1_256;\n  var g0_256$1 = common$1.g0_256;\n  var g1_256$1 = common$1.g1_256;\n  var BlockHash$1 = common.BlockHash;\n  var sha256_K = [0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2];\n\n  function SHA256() {\n    if (!(this instanceof SHA256)) return new SHA256();\n    BlockHash$1.call(this);\n    this.h = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n    this.k = sha256_K;\n    this.W = new Array(64);\n  }\n\n  utils.inherits(SHA256, BlockHash$1);\n  var _256 = SHA256;\n  SHA256.blockSize = 512;\n  SHA256.outSize = 256;\n  SHA256.hmacStrength = 192;\n  SHA256.padLength = 64;\n\n  SHA256.prototype._update = function _update(msg, start) {\n    var W = this.W;\n\n    for (var i = 0; i < 16; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i++) W[i] = sum32_4$1(g1_256$1(W[i - 2]), W[i - 7], g0_256$1(W[i - 15]), W[i - 16]);\n\n    var a = this.h[0];\n    var b = this.h[1];\n    var c = this.h[2];\n    var d = this.h[3];\n    var e = this.h[4];\n    var f = this.h[5];\n    var g = this.h[6];\n    var h = this.h[7];\n    minimalisticAssert(this.k.length === W.length);\n\n    for (i = 0; i < W.length; i++) {\n      var T1 = sum32_5$1(h, s1_256$1(e), ch32$1(e, f, g), this.k[i], W[i]);\n      var T2 = sum32$1(s0_256$1(a), maj32$1(a, b, c));\n      h = g;\n      g = f;\n      f = e;\n      e = sum32$1(d, T1);\n      d = c;\n      c = b;\n      b = a;\n      a = sum32$1(T1, T2);\n    }\n\n    this.h[0] = sum32$1(this.h[0], a);\n    this.h[1] = sum32$1(this.h[1], b);\n    this.h[2] = sum32$1(this.h[2], c);\n    this.h[3] = sum32$1(this.h[3], d);\n    this.h[4] = sum32$1(this.h[4], e);\n    this.h[5] = sum32$1(this.h[5], f);\n    this.h[6] = sum32$1(this.h[6], g);\n    this.h[7] = sum32$1(this.h[7], h);\n  };\n\n  SHA256.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  var _384 = {};\n  'use strict';\n\n  var rotr64_hi$1 = utils.rotr64_hi;\n  var rotr64_lo$1 = utils.rotr64_lo;\n  var shr64_hi$1 = utils.shr64_hi;\n  var shr64_lo$1 = utils.shr64_lo;\n  var sum64$1 = utils.sum64;\n  var sum64_hi$1 = utils.sum64_hi;\n  var sum64_lo$1 = utils.sum64_lo;\n  var sum64_4_hi$1 = utils.sum64_4_hi;\n  var sum64_4_lo$1 = utils.sum64_4_lo;\n  var sum64_5_hi$1 = utils.sum64_5_hi;\n  var sum64_5_lo$1 = utils.sum64_5_lo;\n  var BlockHash$2 = common.BlockHash;\n  var sha512_K = [0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd, 0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc, 0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019, 0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118, 0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe, 0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2, 0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1, 0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694, 0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3, 0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65, 0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483, 0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5, 0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210, 0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4, 0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725, 0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70, 0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926, 0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df, 0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8, 0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b, 0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001, 0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30, 0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910, 0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8, 0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53, 0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8, 0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb, 0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3, 0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60, 0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec, 0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9, 0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b, 0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207, 0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178, 0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6, 0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b, 0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493, 0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c, 0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a, 0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817];\n\n  function SHA512() {\n    if (!(this instanceof SHA512)) return new SHA512();\n    BlockHash$2.call(this);\n    this.h = [0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1, 0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179];\n    this.k = sha512_K;\n    this.W = new Array(160);\n  }\n\n  utils.inherits(SHA512, BlockHash$2);\n  var _512 = SHA512;\n  SHA512.blockSize = 1024;\n  SHA512.outSize = 512;\n  SHA512.hmacStrength = 192;\n  SHA512.padLength = 128;\n\n  SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n    var W = this.W; // 32 x 32bit words\n\n    for (var i = 0; i < 32; i++) W[i] = msg[start + i];\n\n    for (; i < W.length; i += 2) {\n      var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2\n\n      var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n      var c1_hi = W[i - 14]; // i - 7\n\n      var c1_lo = W[i - 13];\n      var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15\n\n      var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n      var c3_hi = W[i - 32]; // i - 16\n\n      var c3_lo = W[i - 31];\n      W[i] = sum64_4_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n      W[i + 1] = sum64_4_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);\n    }\n  };\n\n  SHA512.prototype._update = function _update(msg, start) {\n    this._prepareBlock(msg, start);\n\n    var W = this.W;\n    var ah = this.h[0];\n    var al = this.h[1];\n    var bh = this.h[2];\n    var bl = this.h[3];\n    var ch = this.h[4];\n    var cl = this.h[5];\n    var dh = this.h[6];\n    var dl = this.h[7];\n    var eh = this.h[8];\n    var el = this.h[9];\n    var fh = this.h[10];\n    var fl = this.h[11];\n    var gh = this.h[12];\n    var gl = this.h[13];\n    var hh = this.h[14];\n    var hl = this.h[15];\n    minimalisticAssert(this.k.length === W.length);\n\n    for (var i = 0; i < W.length; i += 2) {\n      var c0_hi = hh;\n      var c0_lo = hl;\n      var c1_hi = s1_512_hi(eh, el);\n      var c1_lo = s1_512_lo(eh, el);\n      var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n      var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n      var c3_hi = this.k[i];\n      var c3_lo = this.k[i + 1];\n      var c4_hi = W[i];\n      var c4_lo = W[i + 1];\n      var T1_hi = sum64_5_hi$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      var T1_lo = sum64_5_lo$1(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);\n      c0_hi = s0_512_hi(ah, al);\n      c0_lo = s0_512_lo(ah, al);\n      c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n      c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n      var T2_hi = sum64_hi$1(c0_hi, c0_lo, c1_hi, c1_lo);\n      var T2_lo = sum64_lo$1(c0_hi, c0_lo, c1_hi, c1_lo);\n      hh = gh;\n      hl = gl;\n      gh = fh;\n      gl = fl;\n      fh = eh;\n      fl = el;\n      eh = sum64_hi$1(dh, dl, T1_hi, T1_lo);\n      el = sum64_lo$1(dl, dl, T1_hi, T1_lo);\n      dh = ch;\n      dl = cl;\n      ch = bh;\n      cl = bl;\n      bh = ah;\n      bl = al;\n      ah = sum64_hi$1(T1_hi, T1_lo, T2_hi, T2_lo);\n      al = sum64_lo$1(T1_hi, T1_lo, T2_hi, T2_lo);\n    }\n\n    sum64$1(this.h, 0, ah, al);\n    sum64$1(this.h, 2, bh, bl);\n    sum64$1(this.h, 4, ch, cl);\n    sum64$1(this.h, 6, dh, dl);\n    sum64$1(this.h, 8, eh, el);\n    sum64$1(this.h, 10, fh, fl);\n    sum64$1(this.h, 12, gh, gl);\n    sum64$1(this.h, 14, hh, hl);\n  };\n\n  SHA512.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'big');else return utils.split32(this.h, 'big');\n  };\n\n  function ch64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ ~xh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function ch64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ ~xl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function maj64_hi(xh, xl, yh, yl, zh) {\n    var r = xh & yh ^ xh & zh ^ yh & zh;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function maj64_lo(xh, xl, yh, yl, zh, zl) {\n    var r = xl & yl ^ xl & zl ^ yl & zl;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 28);\n    var c1_hi = rotr64_hi$1(xl, xh, 2); // 34\n\n    var c2_hi = rotr64_hi$1(xl, xh, 7); // 39\n\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 28);\n    var c1_lo = rotr64_lo$1(xl, xh, 2); // 34\n\n    var c2_lo = rotr64_lo$1(xl, xh, 7); // 39\n\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 14);\n    var c1_hi = rotr64_hi$1(xh, xl, 18);\n    var c2_hi = rotr64_hi$1(xl, xh, 9); // 41\n\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function s1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 14);\n    var c1_lo = rotr64_lo$1(xh, xl, 18);\n    var c2_lo = rotr64_lo$1(xl, xh, 9); // 41\n\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g0_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 1);\n    var c1_hi = rotr64_hi$1(xh, xl, 8);\n    var c2_hi = shr64_hi$1(xh, xl, 7);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g0_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 1);\n    var c1_lo = rotr64_lo$1(xh, xl, 8);\n    var c2_lo = shr64_lo$1(xh, xl, 7);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g1_512_hi(xh, xl) {\n    var c0_hi = rotr64_hi$1(xh, xl, 19);\n    var c1_hi = rotr64_hi$1(xl, xh, 29); // 61\n\n    var c2_hi = shr64_hi$1(xh, xl, 6);\n    var r = c0_hi ^ c1_hi ^ c2_hi;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  function g1_512_lo(xh, xl) {\n    var c0_lo = rotr64_lo$1(xh, xl, 19);\n    var c1_lo = rotr64_lo$1(xl, xh, 29); // 61\n\n    var c2_lo = shr64_lo$1(xh, xl, 6);\n    var r = c0_lo ^ c1_lo ^ c2_lo;\n    if (r < 0) r += 0x100000000;\n    return r;\n  }\n\n  'use strict';\n\n  var sha1 = _1;\n  var sha224 = _224;\n  var sha256 = _256;\n  var sha384 = _384;\n  var sha512 = _512;\n  var sha = {\n    sha1: sha1,\n    sha224: sha224,\n    sha256: sha256,\n    sha384: sha384,\n    sha512: sha512\n  };\n  'use strict';\n\n  var rotl32$1 = utils.rotl32;\n  var sum32$2 = utils.sum32;\n  var sum32_3$1 = utils.sum32_3;\n  var sum32_4$2 = utils.sum32_4;\n  var BlockHash$3 = common.BlockHash;\n\n  function RIPEMD160() {\n    if (!(this instanceof RIPEMD160)) return new RIPEMD160();\n    BlockHash$3.call(this);\n    this.h = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n    this.endian = 'little';\n  }\n\n  utils.inherits(RIPEMD160, BlockHash$3);\n  var ripemd160 = RIPEMD160;\n  RIPEMD160.blockSize = 512;\n  RIPEMD160.outSize = 160;\n  RIPEMD160.hmacStrength = 192;\n  RIPEMD160.padLength = 64;\n\n  RIPEMD160.prototype._update = function update(msg, start) {\n    var A = this.h[0];\n    var B = this.h[1];\n    var C = this.h[2];\n    var D = this.h[3];\n    var E = this.h[4];\n    var Ah = A;\n    var Bh = B;\n    var Ch = C;\n    var Dh = D;\n    var Eh = E;\n\n    for (var j = 0; j < 80; j++) {\n      var T = sum32$2(rotl32$1(sum32_4$2(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);\n      A = E;\n      E = D;\n      D = rotl32$1(C, 10);\n      C = B;\n      B = T;\n      T = sum32$2(rotl32$1(sum32_4$2(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);\n      Ah = Eh;\n      Eh = Dh;\n      Dh = rotl32$1(Ch, 10);\n      Ch = Bh;\n      Bh = T;\n    }\n\n    T = sum32_3$1(this.h[1], C, Dh);\n    this.h[1] = sum32_3$1(this.h[2], D, Eh);\n    this.h[2] = sum32_3$1(this.h[3], E, Ah);\n    this.h[3] = sum32_3$1(this.h[4], A, Bh);\n    this.h[4] = sum32_3$1(this.h[0], B, Ch);\n    this.h[0] = T;\n  };\n\n  RIPEMD160.prototype._digest = function digest(enc) {\n    if (enc === 'hex') return utils.toHex32(this.h, 'little');else return utils.split32(this.h, 'little');\n  };\n\n  function f(j, x, y, z) {\n    if (j <= 15) return x ^ y ^ z;else if (j <= 31) return x & y | ~x & z;else if (j <= 47) return (x | ~y) ^ z;else if (j <= 63) return x & z | y & ~z;else return x ^ (y | ~z);\n  }\n\n  function K(j) {\n    if (j <= 15) return 0x00000000;else if (j <= 31) return 0x5a827999;else if (j <= 47) return 0x6ed9eba1;else if (j <= 63) return 0x8f1bbcdc;else return 0xa953fd4e;\n  }\n\n  function Kh(j) {\n    if (j <= 15) return 0x50a28be6;else if (j <= 31) return 0x5c4dd124;else if (j <= 47) return 0x6d703ef3;else if (j <= 63) return 0x7a6d76e9;else return 0x00000000;\n  }\n\n  var r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n  var rh = [5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n  var s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n  var sh = [8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n  var ripemd = {\n    ripemd160: ripemd160\n  };\n  'use strict';\n\n  function Hmac(hash, key, enc) {\n    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);\n    this.Hash = hash;\n    this.blockSize = hash.blockSize / 8;\n    this.outSize = hash.outSize / 8;\n    this.inner = null;\n    this.outer = null;\n\n    this._init(utils.toArray(key, enc));\n  }\n\n  var hmac = Hmac;\n\n  Hmac.prototype._init = function init(key) {\n    // Shorten key, if needed\n    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();\n    minimalisticAssert(key.length <= this.blockSize); // Add padding to key\n\n    for (var i = key.length; i < this.blockSize; i++) key.push(0);\n\n    for (i = 0; i < key.length; i++) key[i] ^= 0x36;\n\n    this.inner = new this.Hash().update(key); // 0x36 ^ 0x5c = 0x6a\n\n    for (i = 0; i < key.length; i++) key[i] ^= 0x6a;\n\n    this.outer = new this.Hash().update(key);\n  };\n\n  Hmac.prototype.update = function update(msg, enc) {\n    this.inner.update(msg, enc);\n    return this;\n  };\n\n  Hmac.prototype.digest = function digest(enc) {\n    this.outer.update(this.inner.digest());\n    return this.outer.digest(enc);\n  };\n\n  var hash_1 = createCommonjsModule(function (module, exports) {\n    var hash = exports;\n    hash.utils = utils;\n    hash.common = common;\n    hash.sha = sha;\n    hash.ripemd = ripemd;\n    hash.hmac = hmac; // Proxy hash functions to the main object\n\n    hash.sha1 = hash.sha.sha1;\n    hash.sha256 = hash.sha.sha256;\n    hash.sha224 = hash.sha.sha224;\n    hash.sha384 = hash.sha.sha384;\n    hash.sha512 = hash.sha.sha512;\n    hash.ripemd160 = hash.ripemd.ripemd160;\n  });\n  var hash_2 = hash_1.hmac;\n  var hash_3 = hash_1.ripemd160;\n  var hash_4 = hash_1.sha256;\n  var hash_5 = hash_1.sha512;\n\n  var _version$o = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"sha2/5.0.3\";\n  });\n\n  var _version$p = unwrapExports(_version$o);\n\n  var _version_1$c = _version$o.version;\n  var browser = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n      result[\"default\"] = mod;\n      return result;\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var hash = __importStar(hash_1);\n\n    var logger = new lib.Logger(_version$o.version);\n    var SupportedAlgorithm;\n\n    (function (SupportedAlgorithm) {\n      SupportedAlgorithm[\"sha256\"] = \"sha256\";\n      SupportedAlgorithm[\"sha512\"] = \"sha512\";\n    })(SupportedAlgorithm = exports.SupportedAlgorithm || (exports.SupportedAlgorithm = {}));\n\n    ;\n\n    function ripemd160(data) {\n      return \"0x\" + hash.ripemd160().update(lib$1.arrayify(data)).digest(\"hex\");\n    }\n\n    exports.ripemd160 = ripemd160;\n\n    function sha256(data) {\n      return \"0x\" + hash.sha256().update(lib$1.arrayify(data)).digest(\"hex\");\n    }\n\n    exports.sha256 = sha256;\n\n    function sha512(data) {\n      return \"0x\" + hash.sha512().update(lib$1.arrayify(data)).digest(\"hex\");\n    }\n\n    exports.sha512 = sha512;\n\n    function computeHmac(algorithm, key, data) {\n      if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"hmac\",\n          algorithm: algorithm\n        });\n      }\n\n      return \"0x\" + hash.hmac(hash[algorithm], lib$1.arrayify(key)).update(lib$1.arrayify(data)).digest(\"hex\");\n    }\n\n    exports.computeHmac = computeHmac;\n  });\n  var browser$1 = unwrapExports(browser);\n  var browser_1 = browser.SupportedAlgorithm;\n  var browser_2 = browser.ripemd160;\n  var browser_3 = browser.sha256;\n  var browser_4 = browser.sha512;\n  var browser_5 = browser.computeHmac;\n  var browser$2 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function pbkdf2(password, salt, iterations, keylen, hashAlgorithm) {\n      password = lib$1.arrayify(password);\n      salt = lib$1.arrayify(salt);\n      var hLen;\n      var l = 1;\n      var DK = new Uint8Array(keylen);\n      var block1 = new Uint8Array(salt.length + 4);\n      block1.set(salt); //salt.copy(block1, 0, 0, salt.length)\n\n      var r;\n      var T;\n\n      for (var i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = i >> 24 & 0xff;\n        block1[salt.length + 1] = i >> 16 & 0xff;\n        block1[salt.length + 2] = i >> 8 & 0xff;\n        block1[salt.length + 3] = i & 0xff; //let U = createHmac(password).update(block1).digest();\n\n        var U = lib$1.arrayify(browser.computeHmac(hashAlgorithm, password, block1));\n\n        if (!hLen) {\n          hLen = U.length;\n          T = new Uint8Array(hLen);\n          l = Math.ceil(keylen / hLen);\n          r = keylen - (l - 1) * hLen;\n        } //U.copy(T, 0, 0, hLen)\n\n\n        T.set(U);\n\n        for (var j = 1; j < iterations; j++) {\n          //U = createHmac(password).update(U).digest();\n          U = lib$1.arrayify(browser.computeHmac(hashAlgorithm, password, U));\n\n          for (var k = 0; k < hLen; k++) T[k] ^= U[k];\n        }\n\n        var destPos = (i - 1) * hLen;\n        var len = i === l ? r : hLen; //T.copy(DK, destPos, 0, len)\n\n        DK.set(lib$1.arrayify(T).slice(0, len), destPos);\n      }\n\n      return lib$1.hexlify(DK);\n    }\n\n    exports.pbkdf2 = pbkdf2;\n  });\n  var browser$3 = unwrapExports(browser$2);\n  var browser_1$1 = browser$2.pbkdf2;\n  var version = \"6.5.3\";\n  var _package = {\n    version: version\n  };\n\n  var _package$1 =\n  /*#__PURE__*/\n  Object.freeze({\n    version: version,\n    'default': _package\n  });\n\n  var bn$1 = createCommonjsModule(function (module) {\n    (function (module, exports) {\n      'use strict'; // Utils\n\n      function assert(val, msg) {\n        if (!val) throw new Error(msg || 'Assertion failed');\n      } // Could use `inherits` module, but don't want to move from single file\n      // architecture yet.\n\n\n      function inherits(ctor, superCtor) {\n        ctor.super_ = superCtor;\n\n        var TempCtor = function () {};\n\n        TempCtor.prototype = superCtor.prototype;\n        ctor.prototype = new TempCtor();\n        ctor.prototype.constructor = ctor;\n      } // BN\n\n\n      function BN(number, base, endian) {\n        if (BN.isBN(number)) {\n          return number;\n        }\n\n        this.negative = 0;\n        this.words = null;\n        this.length = 0; // Reduction context\n\n        this.red = null;\n\n        if (number !== null) {\n          if (base === 'le' || base === 'be') {\n            endian = base;\n            base = 10;\n          }\n\n          this._init(number || 0, base || 10, endian || 'be');\n        }\n      }\n\n      if (typeof module === 'object') {\n        module.exports = BN;\n      } else {\n        exports.BN = BN;\n      }\n\n      BN.BN = BN;\n      BN.wordSize = 26;\n      var Buffer;\n\n      try {\n        Buffer = require$$0.Buffer;\n      } catch (e) {}\n\n      BN.isBN = function isBN(num) {\n        if (num instanceof BN) {\n          return true;\n        }\n\n        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);\n      };\n\n      BN.max = function max(left, right) {\n        if (left.cmp(right) > 0) return left;\n        return right;\n      };\n\n      BN.min = function min(left, right) {\n        if (left.cmp(right) < 0) return left;\n        return right;\n      };\n\n      BN.prototype._init = function init(number, base, endian) {\n        if (typeof number === 'number') {\n          return this._initNumber(number, base, endian);\n        }\n\n        if (typeof number === 'object') {\n          return this._initArray(number, base, endian);\n        }\n\n        if (base === 'hex') {\n          base = 16;\n        }\n\n        assert(base === (base | 0) && base >= 2 && base <= 36);\n        number = number.toString().replace(/\\s+/g, '');\n        var start = 0;\n\n        if (number[0] === '-') {\n          start++;\n        }\n\n        if (base === 16) {\n          this._parseHex(number, start);\n        } else {\n          this._parseBase(number, base, start);\n        }\n\n        if (number[0] === '-') {\n          this.negative = 1;\n        }\n\n        this.strip();\n        if (endian !== 'le') return;\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initNumber = function _initNumber(number, base, endian) {\n        if (number < 0) {\n          this.negative = 1;\n          number = -number;\n        }\n\n        if (number < 0x4000000) {\n          this.words = [number & 0x3ffffff];\n          this.length = 1;\n        } else if (number < 0x10000000000000) {\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff];\n          this.length = 2;\n        } else {\n          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)\n\n          this.words = [number & 0x3ffffff, number / 0x4000000 & 0x3ffffff, 1];\n          this.length = 3;\n        }\n\n        if (endian !== 'le') return; // Reverse the bytes\n\n        this._initArray(this.toArray(), base, endian);\n      };\n\n      BN.prototype._initArray = function _initArray(number, base, endian) {\n        // Perhaps a Uint8Array\n        assert(typeof number.length === 'number');\n\n        if (number.length <= 0) {\n          this.words = [0];\n          this.length = 1;\n          return this;\n        }\n\n        this.length = Math.ceil(number.length / 3);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w;\n        var off = 0;\n\n        if (endian === 'be') {\n          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {\n            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        } else if (endian === 'le') {\n          for (i = 0, j = 0; i < number.length; i += 3) {\n            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;\n            this.words[j] |= w << off & 0x3ffffff;\n            this.words[j + 1] = w >>> 26 - off & 0x3ffffff;\n            off += 24;\n\n            if (off >= 26) {\n              off -= 26;\n              j++;\n            }\n          }\n        }\n\n        return this.strip();\n      };\n\n      function parseHex(str, start, end) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r <<= 4; // 'a' - 'f'\n\n          if (c >= 49 && c <= 54) {\n            r |= c - 49 + 0xa; // 'A' - 'F'\n          } else if (c >= 17 && c <= 22) {\n            r |= c - 17 + 0xa; // '0' - '9'\n          } else {\n            r |= c & 0xf;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseHex = function _parseHex(number, start) {\n        // Create possibly bigger array to ensure that it fits the number\n        this.length = Math.ceil((number.length - start) / 6);\n        this.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          this.words[i] = 0;\n        }\n\n        var j, w; // Scan 24-bit chunks and add them to the number\n\n        var off = 0;\n\n        for (i = number.length - 6, j = 0; i >= start; i -= 6) {\n          w = parseHex(number, i, i + 6);\n          this.words[j] |= w << off & 0x3ffffff; // NOTE: `0x3fffff` is intentional here, 26bits max shift + 24bit hex limb\n\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n          off += 24;\n\n          if (off >= 26) {\n            off -= 26;\n            j++;\n          }\n        }\n\n        if (i + 6 !== start) {\n          w = parseHex(number, start, i + 6);\n          this.words[j] |= w << off & 0x3ffffff;\n          this.words[j + 1] |= w >>> 26 - off & 0x3fffff;\n        }\n\n        this.strip();\n      };\n\n      function parseBase(str, start, end, mul) {\n        var r = 0;\n        var len = Math.min(str.length, end);\n\n        for (var i = start; i < len; i++) {\n          var c = str.charCodeAt(i) - 48;\n          r *= mul; // 'a'\n\n          if (c >= 49) {\n            r += c - 49 + 0xa; // 'A'\n          } else if (c >= 17) {\n            r += c - 17 + 0xa; // '0' - '9'\n          } else {\n            r += c;\n          }\n        }\n\n        return r;\n      }\n\n      BN.prototype._parseBase = function _parseBase(number, base, start) {\n        // Initialize as zero\n        this.words = [0];\n        this.length = 1; // Find length of limb in base\n\n        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {\n          limbLen++;\n        }\n\n        limbLen--;\n        limbPow = limbPow / base | 0;\n        var total = number.length - start;\n        var mod = total % limbLen;\n        var end = Math.min(total, total - mod) + start;\n        var word = 0;\n\n        for (var i = start; i < end; i += limbLen) {\n          word = parseBase(number, i, i + limbLen, base);\n          this.imuln(limbPow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n\n        if (mod !== 0) {\n          var pow = 1;\n          word = parseBase(number, i, number.length, base);\n\n          for (i = 0; i < mod; i++) {\n            pow *= base;\n          }\n\n          this.imuln(pow);\n\n          if (this.words[0] + word < 0x4000000) {\n            this.words[0] += word;\n          } else {\n            this._iaddn(word);\n          }\n        }\n      };\n\n      BN.prototype.copy = function copy(dest) {\n        dest.words = new Array(this.length);\n\n        for (var i = 0; i < this.length; i++) {\n          dest.words[i] = this.words[i];\n        }\n\n        dest.length = this.length;\n        dest.negative = this.negative;\n        dest.red = this.red;\n      };\n\n      BN.prototype.clone = function clone() {\n        var r = new BN(null);\n        this.copy(r);\n        return r;\n      };\n\n      BN.prototype._expand = function _expand(size) {\n        while (this.length < size) {\n          this.words[this.length++] = 0;\n        }\n\n        return this;\n      }; // Remove leading `0` from `this`\n\n\n      BN.prototype.strip = function strip() {\n        while (this.length > 1 && this.words[this.length - 1] === 0) {\n          this.length--;\n        }\n\n        return this._normSign();\n      };\n\n      BN.prototype._normSign = function _normSign() {\n        // -0 = 0\n        if (this.length === 1 && this.words[0] === 0) {\n          this.negative = 0;\n        }\n\n        return this;\n      };\n\n      BN.prototype.inspect = function inspect() {\n        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';\n      };\n      /*\n       var zeros = [];\n      var groupSizes = [];\n      var groupBases = [];\n       var s = '';\n      var i = -1;\n      while (++i < BN.wordSize) {\n        zeros[i] = s;\n        s += '0';\n      }\n      groupSizes[0] = 0;\n      groupSizes[1] = 0;\n      groupBases[0] = 0;\n      groupBases[1] = 0;\n      var base = 2 - 1;\n      while (++base < 36 + 1) {\n        var groupSize = 0;\n        var groupBase = 1;\n        while (groupBase < (1 << BN.wordSize) / base) {\n          groupBase *= base;\n          groupSize += 1;\n        }\n        groupSizes[base] = groupSize;\n        groupBases[base] = groupBase;\n      }\n       */\n\n\n      var zeros = ['', '0', '00', '000', '0000', '00000', '000000', '0000000', '00000000', '000000000', '0000000000', '00000000000', '000000000000', '0000000000000', '00000000000000', '000000000000000', '0000000000000000', '00000000000000000', '000000000000000000', '0000000000000000000', '00000000000000000000', '000000000000000000000', '0000000000000000000000', '00000000000000000000000', '000000000000000000000000', '0000000000000000000000000'];\n      var groupSizes = [0, 0, 25, 16, 12, 11, 10, 9, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5];\n      var groupBases = [0, 0, 33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216, 43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625, 16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632, 6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149, 24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176];\n\n      BN.prototype.toString = function toString(base, padding) {\n        base = base || 10;\n        padding = padding | 0 || 1;\n        var out;\n\n        if (base === 16 || base === 'hex') {\n          out = '';\n          var off = 0;\n          var carry = 0;\n\n          for (var i = 0; i < this.length; i++) {\n            var w = this.words[i];\n            var word = ((w << off | carry) & 0xffffff).toString(16);\n            carry = w >>> 24 - off & 0xffffff;\n\n            if (carry !== 0 || i !== this.length - 1) {\n              out = zeros[6 - word.length] + word + out;\n            } else {\n              out = word + out;\n            }\n\n            off += 2;\n\n            if (off >= 26) {\n              off -= 26;\n              i--;\n            }\n          }\n\n          if (carry !== 0) {\n            out = carry.toString(16) + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        if (base === (base | 0) && base >= 2 && base <= 36) {\n          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));\n          var groupSize = groupSizes[base]; // var groupBase = Math.pow(base, groupSize);\n\n          var groupBase = groupBases[base];\n          out = '';\n          var c = this.clone();\n          c.negative = 0;\n\n          while (!c.isZero()) {\n            var r = c.modn(groupBase).toString(base);\n            c = c.idivn(groupBase);\n\n            if (!c.isZero()) {\n              out = zeros[groupSize - r.length] + r + out;\n            } else {\n              out = r + out;\n            }\n          }\n\n          if (this.isZero()) {\n            out = '0' + out;\n          }\n\n          while (out.length % padding !== 0) {\n            out = '0' + out;\n          }\n\n          if (this.negative !== 0) {\n            out = '-' + out;\n          }\n\n          return out;\n        }\n\n        assert(false, 'Base should be between 2 and 36');\n      };\n\n      BN.prototype.toNumber = function toNumber() {\n        var ret = this.words[0];\n\n        if (this.length === 2) {\n          ret += this.words[1] * 0x4000000;\n        } else if (this.length === 3 && this.words[2] === 0x01) {\n          // NOTE: at this stage it is known that the top bit is set\n          ret += 0x10000000000000 + this.words[1] * 0x4000000;\n        } else if (this.length > 2) {\n          assert(false, 'Number can only safely store up to 53 bits');\n        }\n\n        return this.negative !== 0 ? -ret : ret;\n      };\n\n      BN.prototype.toJSON = function toJSON() {\n        return this.toString(16);\n      };\n\n      BN.prototype.toBuffer = function toBuffer(endian, length) {\n        assert(typeof Buffer !== 'undefined');\n        return this.toArrayLike(Buffer, endian, length);\n      };\n\n      BN.prototype.toArray = function toArray(endian, length) {\n        return this.toArrayLike(Array, endian, length);\n      };\n\n      BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {\n        var byteLength = this.byteLength();\n        var reqLength = length || Math.max(1, byteLength);\n        assert(byteLength <= reqLength, 'byte array longer than desired length');\n        assert(reqLength > 0, 'Requested array length <= 0');\n        this.strip();\n        var littleEndian = endian === 'le';\n        var res = new ArrayType(reqLength);\n        var b, i;\n        var q = this.clone();\n\n        if (!littleEndian) {\n          // Assume big-endian\n          for (i = 0; i < reqLength - byteLength; i++) {\n            res[i] = 0;\n          }\n\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[reqLength - i - 1] = b;\n          }\n        } else {\n          for (i = 0; !q.isZero(); i++) {\n            b = q.andln(0xff);\n            q.iushrn(8);\n            res[i] = b;\n          }\n\n          for (; i < reqLength; i++) {\n            res[i] = 0;\n          }\n        }\n\n        return res;\n      };\n\n      if (Math.clz32) {\n        BN.prototype._countBits = function _countBits(w) {\n          return 32 - Math.clz32(w);\n        };\n      } else {\n        BN.prototype._countBits = function _countBits(w) {\n          var t = w;\n          var r = 0;\n\n          if (t >= 0x1000) {\n            r += 13;\n            t >>>= 13;\n          }\n\n          if (t >= 0x40) {\n            r += 7;\n            t >>>= 7;\n          }\n\n          if (t >= 0x8) {\n            r += 4;\n            t >>>= 4;\n          }\n\n          if (t >= 0x02) {\n            r += 2;\n            t >>>= 2;\n          }\n\n          return r + t;\n        };\n      }\n\n      BN.prototype._zeroBits = function _zeroBits(w) {\n        // Short-cut\n        if (w === 0) return 26;\n        var t = w;\n        var r = 0;\n\n        if ((t & 0x1fff) === 0) {\n          r += 13;\n          t >>>= 13;\n        }\n\n        if ((t & 0x7f) === 0) {\n          r += 7;\n          t >>>= 7;\n        }\n\n        if ((t & 0xf) === 0) {\n          r += 4;\n          t >>>= 4;\n        }\n\n        if ((t & 0x3) === 0) {\n          r += 2;\n          t >>>= 2;\n        }\n\n        if ((t & 0x1) === 0) {\n          r++;\n        }\n\n        return r;\n      }; // Return number of used bits in a BN\n\n\n      BN.prototype.bitLength = function bitLength() {\n        var w = this.words[this.length - 1];\n\n        var hi = this._countBits(w);\n\n        return (this.length - 1) * 26 + hi;\n      };\n\n      function toBitArray(num) {\n        var w = new Array(num.bitLength());\n\n        for (var bit = 0; bit < w.length; bit++) {\n          var off = bit / 26 | 0;\n          var wbit = bit % 26;\n          w[bit] = (num.words[off] & 1 << wbit) >>> wbit;\n        }\n\n        return w;\n      } // Number of trailing zero bits\n\n\n      BN.prototype.zeroBits = function zeroBits() {\n        if (this.isZero()) return 0;\n        var r = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var b = this._zeroBits(this.words[i]);\n\n          r += b;\n          if (b !== 26) break;\n        }\n\n        return r;\n      };\n\n      BN.prototype.byteLength = function byteLength() {\n        return Math.ceil(this.bitLength() / 8);\n      };\n\n      BN.prototype.toTwos = function toTwos(width) {\n        if (this.negative !== 0) {\n          return this.abs().inotn(width).iaddn(1);\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.fromTwos = function fromTwos(width) {\n        if (this.testn(width - 1)) {\n          return this.notn(width).iaddn(1).ineg();\n        }\n\n        return this.clone();\n      };\n\n      BN.prototype.isNeg = function isNeg() {\n        return this.negative !== 0;\n      }; // Return negative clone of `this`\n\n\n      BN.prototype.neg = function neg() {\n        return this.clone().ineg();\n      };\n\n      BN.prototype.ineg = function ineg() {\n        if (!this.isZero()) {\n          this.negative ^= 1;\n        }\n\n        return this;\n      }; // Or `num` with `this` in-place\n\n\n      BN.prototype.iuor = function iuor(num) {\n        while (this.length < num.length) {\n          this.words[this.length++] = 0;\n        }\n\n        for (var i = 0; i < num.length; i++) {\n          this.words[i] = this.words[i] | num.words[i];\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ior = function ior(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuor(num);\n      }; // Or `num` with `this`\n\n\n      BN.prototype.or = function or(num) {\n        if (this.length > num.length) return this.clone().ior(num);\n        return num.clone().ior(this);\n      };\n\n      BN.prototype.uor = function uor(num) {\n        if (this.length > num.length) return this.clone().iuor(num);\n        return num.clone().iuor(this);\n      }; // And `num` with `this` in-place\n\n\n      BN.prototype.iuand = function iuand(num) {\n        // b = min-length(num, this)\n        var b;\n\n        if (this.length > num.length) {\n          b = num;\n        } else {\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = this.words[i] & num.words[i];\n        }\n\n        this.length = b.length;\n        return this.strip();\n      };\n\n      BN.prototype.iand = function iand(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuand(num);\n      }; // And `num` with `this`\n\n\n      BN.prototype.and = function and(num) {\n        if (this.length > num.length) return this.clone().iand(num);\n        return num.clone().iand(this);\n      };\n\n      BN.prototype.uand = function uand(num) {\n        if (this.length > num.length) return this.clone().iuand(num);\n        return num.clone().iuand(this);\n      }; // Xor `num` with `this` in-place\n\n\n      BN.prototype.iuxor = function iuxor(num) {\n        // a.length > b.length\n        var a;\n        var b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        for (var i = 0; i < b.length; i++) {\n          this.words[i] = a.words[i] ^ b.words[i];\n        }\n\n        if (this !== a) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = a.length;\n        return this.strip();\n      };\n\n      BN.prototype.ixor = function ixor(num) {\n        assert((this.negative | num.negative) === 0);\n        return this.iuxor(num);\n      }; // Xor `num` with `this`\n\n\n      BN.prototype.xor = function xor(num) {\n        if (this.length > num.length) return this.clone().ixor(num);\n        return num.clone().ixor(this);\n      };\n\n      BN.prototype.uxor = function uxor(num) {\n        if (this.length > num.length) return this.clone().iuxor(num);\n        return num.clone().iuxor(this);\n      }; // Not ``this`` with ``width`` bitwidth\n\n\n      BN.prototype.inotn = function inotn(width) {\n        assert(typeof width === 'number' && width >= 0);\n        var bytesNeeded = Math.ceil(width / 26) | 0;\n        var bitsLeft = width % 26; // Extend the buffer with leading zeroes\n\n        this._expand(bytesNeeded);\n\n        if (bitsLeft > 0) {\n          bytesNeeded--;\n        } // Handle complete words\n\n\n        for (var i = 0; i < bytesNeeded; i++) {\n          this.words[i] = ~this.words[i] & 0x3ffffff;\n        } // Handle the residue\n\n\n        if (bitsLeft > 0) {\n          this.words[i] = ~this.words[i] & 0x3ffffff >> 26 - bitsLeft;\n        } // And remove leading zeroes\n\n\n        return this.strip();\n      };\n\n      BN.prototype.notn = function notn(width) {\n        return this.clone().inotn(width);\n      }; // Set `bit` of `this`\n\n\n      BN.prototype.setn = function setn(bit, val) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var off = bit / 26 | 0;\n        var wbit = bit % 26;\n\n        this._expand(off + 1);\n\n        if (val) {\n          this.words[off] = this.words[off] | 1 << wbit;\n        } else {\n          this.words[off] = this.words[off] & ~(1 << wbit);\n        }\n\n        return this.strip();\n      }; // Add `num` to `this` in-place\n\n\n      BN.prototype.iadd = function iadd(num) {\n        var r; // negative + positive\n\n        if (this.negative !== 0 && num.negative === 0) {\n          this.negative = 0;\n          r = this.isub(num);\n          this.negative ^= 1;\n          return this._normSign(); // positive + negative\n        } else if (this.negative === 0 && num.negative !== 0) {\n          num.negative = 0;\n          r = this.isub(num);\n          num.negative = 1;\n          return r._normSign();\n        } // a.length > b.length\n\n\n        var a, b;\n\n        if (this.length > num.length) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          this.words[i] = r & 0x3ffffff;\n          carry = r >>> 26;\n        }\n\n        this.length = a.length;\n\n        if (carry !== 0) {\n          this.words[this.length] = carry;\n          this.length++; // Copy the rest of the words\n        } else if (a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        return this;\n      }; // Add `num` to `this`\n\n\n      BN.prototype.add = function add(num) {\n        var res;\n\n        if (num.negative !== 0 && this.negative === 0) {\n          num.negative = 0;\n          res = this.sub(num);\n          num.negative ^= 1;\n          return res;\n        } else if (num.negative === 0 && this.negative !== 0) {\n          this.negative = 0;\n          res = num.sub(this);\n          this.negative = 1;\n          return res;\n        }\n\n        if (this.length > num.length) return this.clone().iadd(num);\n        return num.clone().iadd(this);\n      }; // Subtract `num` from `this` in-place\n\n\n      BN.prototype.isub = function isub(num) {\n        // this - (-num) = this + num\n        if (num.negative !== 0) {\n          num.negative = 0;\n          var r = this.iadd(num);\n          num.negative = 1;\n          return r._normSign(); // -this - num = -(this + num)\n        } else if (this.negative !== 0) {\n          this.negative = 0;\n          this.iadd(num);\n          this.negative = 1;\n          return this._normSign();\n        } // At this point both numbers are positive\n\n\n        var cmp = this.cmp(num); // Optimization - zeroify\n\n        if (cmp === 0) {\n          this.negative = 0;\n          this.length = 1;\n          this.words[0] = 0;\n          return this;\n        } // a > b\n\n\n        var a, b;\n\n        if (cmp > 0) {\n          a = this;\n          b = num;\n        } else {\n          a = num;\n          b = this;\n        }\n\n        var carry = 0;\n\n        for (var i = 0; i < b.length; i++) {\n          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        }\n\n        for (; carry !== 0 && i < a.length; i++) {\n          r = (a.words[i] | 0) + carry;\n          carry = r >> 26;\n          this.words[i] = r & 0x3ffffff;\n        } // Copy rest of the words\n\n\n        if (carry === 0 && i < a.length && a !== this) {\n          for (; i < a.length; i++) {\n            this.words[i] = a.words[i];\n          }\n        }\n\n        this.length = Math.max(this.length, i);\n\n        if (a !== this) {\n          this.negative = 1;\n        }\n\n        return this.strip();\n      }; // Subtract `num` from `this`\n\n\n      BN.prototype.sub = function sub(num) {\n        return this.clone().isub(num);\n      };\n\n      function smallMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        var len = self.length + num.length | 0;\n        out.length = len;\n        len = len - 1 | 0; // Peel one iteration (compiler can't do it, because of code complexity)\n\n        var a = self.words[0] | 0;\n        var b = num.words[0] | 0;\n        var r = a * b;\n        var lo = r & 0x3ffffff;\n        var carry = r / 0x4000000 | 0;\n        out.words[0] = lo;\n\n        for (var k = 1; k < len; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = carry >>> 26;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j | 0;\n            a = self.words[i] | 0;\n            b = num.words[j] | 0;\n            r = a * b + rword;\n            ncarry += r / 0x4000000 | 0;\n            rword = r & 0x3ffffff;\n          }\n\n          out.words[k] = rword | 0;\n          carry = ncarry | 0;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry | 0;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      } // TODO(indutny): it may be reasonable to omit it for users who don't need\n      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit\n      // multiplication (like elliptic secp256k1).\n\n\n      var comb10MulTo = function comb10MulTo(self, num, out) {\n        var a = self.words;\n        var b = num.words;\n        var o = out.words;\n        var c = 0;\n        var lo;\n        var mid;\n        var hi;\n        var a0 = a[0] | 0;\n        var al0 = a0 & 0x1fff;\n        var ah0 = a0 >>> 13;\n        var a1 = a[1] | 0;\n        var al1 = a1 & 0x1fff;\n        var ah1 = a1 >>> 13;\n        var a2 = a[2] | 0;\n        var al2 = a2 & 0x1fff;\n        var ah2 = a2 >>> 13;\n        var a3 = a[3] | 0;\n        var al3 = a3 & 0x1fff;\n        var ah3 = a3 >>> 13;\n        var a4 = a[4] | 0;\n        var al4 = a4 & 0x1fff;\n        var ah4 = a4 >>> 13;\n        var a5 = a[5] | 0;\n        var al5 = a5 & 0x1fff;\n        var ah5 = a5 >>> 13;\n        var a6 = a[6] | 0;\n        var al6 = a6 & 0x1fff;\n        var ah6 = a6 >>> 13;\n        var a7 = a[7] | 0;\n        var al7 = a7 & 0x1fff;\n        var ah7 = a7 >>> 13;\n        var a8 = a[8] | 0;\n        var al8 = a8 & 0x1fff;\n        var ah8 = a8 >>> 13;\n        var a9 = a[9] | 0;\n        var al9 = a9 & 0x1fff;\n        var ah9 = a9 >>> 13;\n        var b0 = b[0] | 0;\n        var bl0 = b0 & 0x1fff;\n        var bh0 = b0 >>> 13;\n        var b1 = b[1] | 0;\n        var bl1 = b1 & 0x1fff;\n        var bh1 = b1 >>> 13;\n        var b2 = b[2] | 0;\n        var bl2 = b2 & 0x1fff;\n        var bh2 = b2 >>> 13;\n        var b3 = b[3] | 0;\n        var bl3 = b3 & 0x1fff;\n        var bh3 = b3 >>> 13;\n        var b4 = b[4] | 0;\n        var bl4 = b4 & 0x1fff;\n        var bh4 = b4 >>> 13;\n        var b5 = b[5] | 0;\n        var bl5 = b5 & 0x1fff;\n        var bh5 = b5 >>> 13;\n        var b6 = b[6] | 0;\n        var bl6 = b6 & 0x1fff;\n        var bh6 = b6 >>> 13;\n        var b7 = b[7] | 0;\n        var bl7 = b7 & 0x1fff;\n        var bh7 = b7 >>> 13;\n        var b8 = b[8] | 0;\n        var bl8 = b8 & 0x1fff;\n        var bh8 = b8 >>> 13;\n        var b9 = b[9] | 0;\n        var bl9 = b9 & 0x1fff;\n        var bh9 = b9 >>> 13;\n        out.negative = self.negative ^ num.negative;\n        out.length = 19;\n        /* k = 0 */\n\n        lo = Math.imul(al0, bl0);\n        mid = Math.imul(al0, bh0);\n        mid = mid + Math.imul(ah0, bl0) | 0;\n        hi = Math.imul(ah0, bh0);\n        var w0 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;\n        w0 &= 0x3ffffff;\n        /* k = 1 */\n\n        lo = Math.imul(al1, bl0);\n        mid = Math.imul(al1, bh0);\n        mid = mid + Math.imul(ah1, bl0) | 0;\n        hi = Math.imul(ah1, bh0);\n        lo = lo + Math.imul(al0, bl1) | 0;\n        mid = mid + Math.imul(al0, bh1) | 0;\n        mid = mid + Math.imul(ah0, bl1) | 0;\n        hi = hi + Math.imul(ah0, bh1) | 0;\n        var w1 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;\n        w1 &= 0x3ffffff;\n        /* k = 2 */\n\n        lo = Math.imul(al2, bl0);\n        mid = Math.imul(al2, bh0);\n        mid = mid + Math.imul(ah2, bl0) | 0;\n        hi = Math.imul(ah2, bh0);\n        lo = lo + Math.imul(al1, bl1) | 0;\n        mid = mid + Math.imul(al1, bh1) | 0;\n        mid = mid + Math.imul(ah1, bl1) | 0;\n        hi = hi + Math.imul(ah1, bh1) | 0;\n        lo = lo + Math.imul(al0, bl2) | 0;\n        mid = mid + Math.imul(al0, bh2) | 0;\n        mid = mid + Math.imul(ah0, bl2) | 0;\n        hi = hi + Math.imul(ah0, bh2) | 0;\n        var w2 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;\n        w2 &= 0x3ffffff;\n        /* k = 3 */\n\n        lo = Math.imul(al3, bl0);\n        mid = Math.imul(al3, bh0);\n        mid = mid + Math.imul(ah3, bl0) | 0;\n        hi = Math.imul(ah3, bh0);\n        lo = lo + Math.imul(al2, bl1) | 0;\n        mid = mid + Math.imul(al2, bh1) | 0;\n        mid = mid + Math.imul(ah2, bl1) | 0;\n        hi = hi + Math.imul(ah2, bh1) | 0;\n        lo = lo + Math.imul(al1, bl2) | 0;\n        mid = mid + Math.imul(al1, bh2) | 0;\n        mid = mid + Math.imul(ah1, bl2) | 0;\n        hi = hi + Math.imul(ah1, bh2) | 0;\n        lo = lo + Math.imul(al0, bl3) | 0;\n        mid = mid + Math.imul(al0, bh3) | 0;\n        mid = mid + Math.imul(ah0, bl3) | 0;\n        hi = hi + Math.imul(ah0, bh3) | 0;\n        var w3 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;\n        w3 &= 0x3ffffff;\n        /* k = 4 */\n\n        lo = Math.imul(al4, bl0);\n        mid = Math.imul(al4, bh0);\n        mid = mid + Math.imul(ah4, bl0) | 0;\n        hi = Math.imul(ah4, bh0);\n        lo = lo + Math.imul(al3, bl1) | 0;\n        mid = mid + Math.imul(al3, bh1) | 0;\n        mid = mid + Math.imul(ah3, bl1) | 0;\n        hi = hi + Math.imul(ah3, bh1) | 0;\n        lo = lo + Math.imul(al2, bl2) | 0;\n        mid = mid + Math.imul(al2, bh2) | 0;\n        mid = mid + Math.imul(ah2, bl2) | 0;\n        hi = hi + Math.imul(ah2, bh2) | 0;\n        lo = lo + Math.imul(al1, bl3) | 0;\n        mid = mid + Math.imul(al1, bh3) | 0;\n        mid = mid + Math.imul(ah1, bl3) | 0;\n        hi = hi + Math.imul(ah1, bh3) | 0;\n        lo = lo + Math.imul(al0, bl4) | 0;\n        mid = mid + Math.imul(al0, bh4) | 0;\n        mid = mid + Math.imul(ah0, bl4) | 0;\n        hi = hi + Math.imul(ah0, bh4) | 0;\n        var w4 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;\n        w4 &= 0x3ffffff;\n        /* k = 5 */\n\n        lo = Math.imul(al5, bl0);\n        mid = Math.imul(al5, bh0);\n        mid = mid + Math.imul(ah5, bl0) | 0;\n        hi = Math.imul(ah5, bh0);\n        lo = lo + Math.imul(al4, bl1) | 0;\n        mid = mid + Math.imul(al4, bh1) | 0;\n        mid = mid + Math.imul(ah4, bl1) | 0;\n        hi = hi + Math.imul(ah4, bh1) | 0;\n        lo = lo + Math.imul(al3, bl2) | 0;\n        mid = mid + Math.imul(al3, bh2) | 0;\n        mid = mid + Math.imul(ah3, bl2) | 0;\n        hi = hi + Math.imul(ah3, bh2) | 0;\n        lo = lo + Math.imul(al2, bl3) | 0;\n        mid = mid + Math.imul(al2, bh3) | 0;\n        mid = mid + Math.imul(ah2, bl3) | 0;\n        hi = hi + Math.imul(ah2, bh3) | 0;\n        lo = lo + Math.imul(al1, bl4) | 0;\n        mid = mid + Math.imul(al1, bh4) | 0;\n        mid = mid + Math.imul(ah1, bl4) | 0;\n        hi = hi + Math.imul(ah1, bh4) | 0;\n        lo = lo + Math.imul(al0, bl5) | 0;\n        mid = mid + Math.imul(al0, bh5) | 0;\n        mid = mid + Math.imul(ah0, bl5) | 0;\n        hi = hi + Math.imul(ah0, bh5) | 0;\n        var w5 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;\n        w5 &= 0x3ffffff;\n        /* k = 6 */\n\n        lo = Math.imul(al6, bl0);\n        mid = Math.imul(al6, bh0);\n        mid = mid + Math.imul(ah6, bl0) | 0;\n        hi = Math.imul(ah6, bh0);\n        lo = lo + Math.imul(al5, bl1) | 0;\n        mid = mid + Math.imul(al5, bh1) | 0;\n        mid = mid + Math.imul(ah5, bl1) | 0;\n        hi = hi + Math.imul(ah5, bh1) | 0;\n        lo = lo + Math.imul(al4, bl2) | 0;\n        mid = mid + Math.imul(al4, bh2) | 0;\n        mid = mid + Math.imul(ah4, bl2) | 0;\n        hi = hi + Math.imul(ah4, bh2) | 0;\n        lo = lo + Math.imul(al3, bl3) | 0;\n        mid = mid + Math.imul(al3, bh3) | 0;\n        mid = mid + Math.imul(ah3, bl3) | 0;\n        hi = hi + Math.imul(ah3, bh3) | 0;\n        lo = lo + Math.imul(al2, bl4) | 0;\n        mid = mid + Math.imul(al2, bh4) | 0;\n        mid = mid + Math.imul(ah2, bl4) | 0;\n        hi = hi + Math.imul(ah2, bh4) | 0;\n        lo = lo + Math.imul(al1, bl5) | 0;\n        mid = mid + Math.imul(al1, bh5) | 0;\n        mid = mid + Math.imul(ah1, bl5) | 0;\n        hi = hi + Math.imul(ah1, bh5) | 0;\n        lo = lo + Math.imul(al0, bl6) | 0;\n        mid = mid + Math.imul(al0, bh6) | 0;\n        mid = mid + Math.imul(ah0, bl6) | 0;\n        hi = hi + Math.imul(ah0, bh6) | 0;\n        var w6 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;\n        w6 &= 0x3ffffff;\n        /* k = 7 */\n\n        lo = Math.imul(al7, bl0);\n        mid = Math.imul(al7, bh0);\n        mid = mid + Math.imul(ah7, bl0) | 0;\n        hi = Math.imul(ah7, bh0);\n        lo = lo + Math.imul(al6, bl1) | 0;\n        mid = mid + Math.imul(al6, bh1) | 0;\n        mid = mid + Math.imul(ah6, bl1) | 0;\n        hi = hi + Math.imul(ah6, bh1) | 0;\n        lo = lo + Math.imul(al5, bl2) | 0;\n        mid = mid + Math.imul(al5, bh2) | 0;\n        mid = mid + Math.imul(ah5, bl2) | 0;\n        hi = hi + Math.imul(ah5, bh2) | 0;\n        lo = lo + Math.imul(al4, bl3) | 0;\n        mid = mid + Math.imul(al4, bh3) | 0;\n        mid = mid + Math.imul(ah4, bl3) | 0;\n        hi = hi + Math.imul(ah4, bh3) | 0;\n        lo = lo + Math.imul(al3, bl4) | 0;\n        mid = mid + Math.imul(al3, bh4) | 0;\n        mid = mid + Math.imul(ah3, bl4) | 0;\n        hi = hi + Math.imul(ah3, bh4) | 0;\n        lo = lo + Math.imul(al2, bl5) | 0;\n        mid = mid + Math.imul(al2, bh5) | 0;\n        mid = mid + Math.imul(ah2, bl5) | 0;\n        hi = hi + Math.imul(ah2, bh5) | 0;\n        lo = lo + Math.imul(al1, bl6) | 0;\n        mid = mid + Math.imul(al1, bh6) | 0;\n        mid = mid + Math.imul(ah1, bl6) | 0;\n        hi = hi + Math.imul(ah1, bh6) | 0;\n        lo = lo + Math.imul(al0, bl7) | 0;\n        mid = mid + Math.imul(al0, bh7) | 0;\n        mid = mid + Math.imul(ah0, bl7) | 0;\n        hi = hi + Math.imul(ah0, bh7) | 0;\n        var w7 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;\n        w7 &= 0x3ffffff;\n        /* k = 8 */\n\n        lo = Math.imul(al8, bl0);\n        mid = Math.imul(al8, bh0);\n        mid = mid + Math.imul(ah8, bl0) | 0;\n        hi = Math.imul(ah8, bh0);\n        lo = lo + Math.imul(al7, bl1) | 0;\n        mid = mid + Math.imul(al7, bh1) | 0;\n        mid = mid + Math.imul(ah7, bl1) | 0;\n        hi = hi + Math.imul(ah7, bh1) | 0;\n        lo = lo + Math.imul(al6, bl2) | 0;\n        mid = mid + Math.imul(al6, bh2) | 0;\n        mid = mid + Math.imul(ah6, bl2) | 0;\n        hi = hi + Math.imul(ah6, bh2) | 0;\n        lo = lo + Math.imul(al5, bl3) | 0;\n        mid = mid + Math.imul(al5, bh3) | 0;\n        mid = mid + Math.imul(ah5, bl3) | 0;\n        hi = hi + Math.imul(ah5, bh3) | 0;\n        lo = lo + Math.imul(al4, bl4) | 0;\n        mid = mid + Math.imul(al4, bh4) | 0;\n        mid = mid + Math.imul(ah4, bl4) | 0;\n        hi = hi + Math.imul(ah4, bh4) | 0;\n        lo = lo + Math.imul(al3, bl5) | 0;\n        mid = mid + Math.imul(al3, bh5) | 0;\n        mid = mid + Math.imul(ah3, bl5) | 0;\n        hi = hi + Math.imul(ah3, bh5) | 0;\n        lo = lo + Math.imul(al2, bl6) | 0;\n        mid = mid + Math.imul(al2, bh6) | 0;\n        mid = mid + Math.imul(ah2, bl6) | 0;\n        hi = hi + Math.imul(ah2, bh6) | 0;\n        lo = lo + Math.imul(al1, bl7) | 0;\n        mid = mid + Math.imul(al1, bh7) | 0;\n        mid = mid + Math.imul(ah1, bl7) | 0;\n        hi = hi + Math.imul(ah1, bh7) | 0;\n        lo = lo + Math.imul(al0, bl8) | 0;\n        mid = mid + Math.imul(al0, bh8) | 0;\n        mid = mid + Math.imul(ah0, bl8) | 0;\n        hi = hi + Math.imul(ah0, bh8) | 0;\n        var w8 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;\n        w8 &= 0x3ffffff;\n        /* k = 9 */\n\n        lo = Math.imul(al9, bl0);\n        mid = Math.imul(al9, bh0);\n        mid = mid + Math.imul(ah9, bl0) | 0;\n        hi = Math.imul(ah9, bh0);\n        lo = lo + Math.imul(al8, bl1) | 0;\n        mid = mid + Math.imul(al8, bh1) | 0;\n        mid = mid + Math.imul(ah8, bl1) | 0;\n        hi = hi + Math.imul(ah8, bh1) | 0;\n        lo = lo + Math.imul(al7, bl2) | 0;\n        mid = mid + Math.imul(al7, bh2) | 0;\n        mid = mid + Math.imul(ah7, bl2) | 0;\n        hi = hi + Math.imul(ah7, bh2) | 0;\n        lo = lo + Math.imul(al6, bl3) | 0;\n        mid = mid + Math.imul(al6, bh3) | 0;\n        mid = mid + Math.imul(ah6, bl3) | 0;\n        hi = hi + Math.imul(ah6, bh3) | 0;\n        lo = lo + Math.imul(al5, bl4) | 0;\n        mid = mid + Math.imul(al5, bh4) | 0;\n        mid = mid + Math.imul(ah5, bl4) | 0;\n        hi = hi + Math.imul(ah5, bh4) | 0;\n        lo = lo + Math.imul(al4, bl5) | 0;\n        mid = mid + Math.imul(al4, bh5) | 0;\n        mid = mid + Math.imul(ah4, bl5) | 0;\n        hi = hi + Math.imul(ah4, bh5) | 0;\n        lo = lo + Math.imul(al3, bl6) | 0;\n        mid = mid + Math.imul(al3, bh6) | 0;\n        mid = mid + Math.imul(ah3, bl6) | 0;\n        hi = hi + Math.imul(ah3, bh6) | 0;\n        lo = lo + Math.imul(al2, bl7) | 0;\n        mid = mid + Math.imul(al2, bh7) | 0;\n        mid = mid + Math.imul(ah2, bl7) | 0;\n        hi = hi + Math.imul(ah2, bh7) | 0;\n        lo = lo + Math.imul(al1, bl8) | 0;\n        mid = mid + Math.imul(al1, bh8) | 0;\n        mid = mid + Math.imul(ah1, bl8) | 0;\n        hi = hi + Math.imul(ah1, bh8) | 0;\n        lo = lo + Math.imul(al0, bl9) | 0;\n        mid = mid + Math.imul(al0, bh9) | 0;\n        mid = mid + Math.imul(ah0, bl9) | 0;\n        hi = hi + Math.imul(ah0, bh9) | 0;\n        var w9 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;\n        w9 &= 0x3ffffff;\n        /* k = 10 */\n\n        lo = Math.imul(al9, bl1);\n        mid = Math.imul(al9, bh1);\n        mid = mid + Math.imul(ah9, bl1) | 0;\n        hi = Math.imul(ah9, bh1);\n        lo = lo + Math.imul(al8, bl2) | 0;\n        mid = mid + Math.imul(al8, bh2) | 0;\n        mid = mid + Math.imul(ah8, bl2) | 0;\n        hi = hi + Math.imul(ah8, bh2) | 0;\n        lo = lo + Math.imul(al7, bl3) | 0;\n        mid = mid + Math.imul(al7, bh3) | 0;\n        mid = mid + Math.imul(ah7, bl3) | 0;\n        hi = hi + Math.imul(ah7, bh3) | 0;\n        lo = lo + Math.imul(al6, bl4) | 0;\n        mid = mid + Math.imul(al6, bh4) | 0;\n        mid = mid + Math.imul(ah6, bl4) | 0;\n        hi = hi + Math.imul(ah6, bh4) | 0;\n        lo = lo + Math.imul(al5, bl5) | 0;\n        mid = mid + Math.imul(al5, bh5) | 0;\n        mid = mid + Math.imul(ah5, bl5) | 0;\n        hi = hi + Math.imul(ah5, bh5) | 0;\n        lo = lo + Math.imul(al4, bl6) | 0;\n        mid = mid + Math.imul(al4, bh6) | 0;\n        mid = mid + Math.imul(ah4, bl6) | 0;\n        hi = hi + Math.imul(ah4, bh6) | 0;\n        lo = lo + Math.imul(al3, bl7) | 0;\n        mid = mid + Math.imul(al3, bh7) | 0;\n        mid = mid + Math.imul(ah3, bl7) | 0;\n        hi = hi + Math.imul(ah3, bh7) | 0;\n        lo = lo + Math.imul(al2, bl8) | 0;\n        mid = mid + Math.imul(al2, bh8) | 0;\n        mid = mid + Math.imul(ah2, bl8) | 0;\n        hi = hi + Math.imul(ah2, bh8) | 0;\n        lo = lo + Math.imul(al1, bl9) | 0;\n        mid = mid + Math.imul(al1, bh9) | 0;\n        mid = mid + Math.imul(ah1, bl9) | 0;\n        hi = hi + Math.imul(ah1, bh9) | 0;\n        var w10 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;\n        w10 &= 0x3ffffff;\n        /* k = 11 */\n\n        lo = Math.imul(al9, bl2);\n        mid = Math.imul(al9, bh2);\n        mid = mid + Math.imul(ah9, bl2) | 0;\n        hi = Math.imul(ah9, bh2);\n        lo = lo + Math.imul(al8, bl3) | 0;\n        mid = mid + Math.imul(al8, bh3) | 0;\n        mid = mid + Math.imul(ah8, bl3) | 0;\n        hi = hi + Math.imul(ah8, bh3) | 0;\n        lo = lo + Math.imul(al7, bl4) | 0;\n        mid = mid + Math.imul(al7, bh4) | 0;\n        mid = mid + Math.imul(ah7, bl4) | 0;\n        hi = hi + Math.imul(ah7, bh4) | 0;\n        lo = lo + Math.imul(al6, bl5) | 0;\n        mid = mid + Math.imul(al6, bh5) | 0;\n        mid = mid + Math.imul(ah6, bl5) | 0;\n        hi = hi + Math.imul(ah6, bh5) | 0;\n        lo = lo + Math.imul(al5, bl6) | 0;\n        mid = mid + Math.imul(al5, bh6) | 0;\n        mid = mid + Math.imul(ah5, bl6) | 0;\n        hi = hi + Math.imul(ah5, bh6) | 0;\n        lo = lo + Math.imul(al4, bl7) | 0;\n        mid = mid + Math.imul(al4, bh7) | 0;\n        mid = mid + Math.imul(ah4, bl7) | 0;\n        hi = hi + Math.imul(ah4, bh7) | 0;\n        lo = lo + Math.imul(al3, bl8) | 0;\n        mid = mid + Math.imul(al3, bh8) | 0;\n        mid = mid + Math.imul(ah3, bl8) | 0;\n        hi = hi + Math.imul(ah3, bh8) | 0;\n        lo = lo + Math.imul(al2, bl9) | 0;\n        mid = mid + Math.imul(al2, bh9) | 0;\n        mid = mid + Math.imul(ah2, bl9) | 0;\n        hi = hi + Math.imul(ah2, bh9) | 0;\n        var w11 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;\n        w11 &= 0x3ffffff;\n        /* k = 12 */\n\n        lo = Math.imul(al9, bl3);\n        mid = Math.imul(al9, bh3);\n        mid = mid + Math.imul(ah9, bl3) | 0;\n        hi = Math.imul(ah9, bh3);\n        lo = lo + Math.imul(al8, bl4) | 0;\n        mid = mid + Math.imul(al8, bh4) | 0;\n        mid = mid + Math.imul(ah8, bl4) | 0;\n        hi = hi + Math.imul(ah8, bh4) | 0;\n        lo = lo + Math.imul(al7, bl5) | 0;\n        mid = mid + Math.imul(al7, bh5) | 0;\n        mid = mid + Math.imul(ah7, bl5) | 0;\n        hi = hi + Math.imul(ah7, bh5) | 0;\n        lo = lo + Math.imul(al6, bl6) | 0;\n        mid = mid + Math.imul(al6, bh6) | 0;\n        mid = mid + Math.imul(ah6, bl6) | 0;\n        hi = hi + Math.imul(ah6, bh6) | 0;\n        lo = lo + Math.imul(al5, bl7) | 0;\n        mid = mid + Math.imul(al5, bh7) | 0;\n        mid = mid + Math.imul(ah5, bl7) | 0;\n        hi = hi + Math.imul(ah5, bh7) | 0;\n        lo = lo + Math.imul(al4, bl8) | 0;\n        mid = mid + Math.imul(al4, bh8) | 0;\n        mid = mid + Math.imul(ah4, bl8) | 0;\n        hi = hi + Math.imul(ah4, bh8) | 0;\n        lo = lo + Math.imul(al3, bl9) | 0;\n        mid = mid + Math.imul(al3, bh9) | 0;\n        mid = mid + Math.imul(ah3, bl9) | 0;\n        hi = hi + Math.imul(ah3, bh9) | 0;\n        var w12 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;\n        w12 &= 0x3ffffff;\n        /* k = 13 */\n\n        lo = Math.imul(al9, bl4);\n        mid = Math.imul(al9, bh4);\n        mid = mid + Math.imul(ah9, bl4) | 0;\n        hi = Math.imul(ah9, bh4);\n        lo = lo + Math.imul(al8, bl5) | 0;\n        mid = mid + Math.imul(al8, bh5) | 0;\n        mid = mid + Math.imul(ah8, bl5) | 0;\n        hi = hi + Math.imul(ah8, bh5) | 0;\n        lo = lo + Math.imul(al7, bl6) | 0;\n        mid = mid + Math.imul(al7, bh6) | 0;\n        mid = mid + Math.imul(ah7, bl6) | 0;\n        hi = hi + Math.imul(ah7, bh6) | 0;\n        lo = lo + Math.imul(al6, bl7) | 0;\n        mid = mid + Math.imul(al6, bh7) | 0;\n        mid = mid + Math.imul(ah6, bl7) | 0;\n        hi = hi + Math.imul(ah6, bh7) | 0;\n        lo = lo + Math.imul(al5, bl8) | 0;\n        mid = mid + Math.imul(al5, bh8) | 0;\n        mid = mid + Math.imul(ah5, bl8) | 0;\n        hi = hi + Math.imul(ah5, bh8) | 0;\n        lo = lo + Math.imul(al4, bl9) | 0;\n        mid = mid + Math.imul(al4, bh9) | 0;\n        mid = mid + Math.imul(ah4, bl9) | 0;\n        hi = hi + Math.imul(ah4, bh9) | 0;\n        var w13 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;\n        w13 &= 0x3ffffff;\n        /* k = 14 */\n\n        lo = Math.imul(al9, bl5);\n        mid = Math.imul(al9, bh5);\n        mid = mid + Math.imul(ah9, bl5) | 0;\n        hi = Math.imul(ah9, bh5);\n        lo = lo + Math.imul(al8, bl6) | 0;\n        mid = mid + Math.imul(al8, bh6) | 0;\n        mid = mid + Math.imul(ah8, bl6) | 0;\n        hi = hi + Math.imul(ah8, bh6) | 0;\n        lo = lo + Math.imul(al7, bl7) | 0;\n        mid = mid + Math.imul(al7, bh7) | 0;\n        mid = mid + Math.imul(ah7, bl7) | 0;\n        hi = hi + Math.imul(ah7, bh7) | 0;\n        lo = lo + Math.imul(al6, bl8) | 0;\n        mid = mid + Math.imul(al6, bh8) | 0;\n        mid = mid + Math.imul(ah6, bl8) | 0;\n        hi = hi + Math.imul(ah6, bh8) | 0;\n        lo = lo + Math.imul(al5, bl9) | 0;\n        mid = mid + Math.imul(al5, bh9) | 0;\n        mid = mid + Math.imul(ah5, bl9) | 0;\n        hi = hi + Math.imul(ah5, bh9) | 0;\n        var w14 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;\n        w14 &= 0x3ffffff;\n        /* k = 15 */\n\n        lo = Math.imul(al9, bl6);\n        mid = Math.imul(al9, bh6);\n        mid = mid + Math.imul(ah9, bl6) | 0;\n        hi = Math.imul(ah9, bh6);\n        lo = lo + Math.imul(al8, bl7) | 0;\n        mid = mid + Math.imul(al8, bh7) | 0;\n        mid = mid + Math.imul(ah8, bl7) | 0;\n        hi = hi + Math.imul(ah8, bh7) | 0;\n        lo = lo + Math.imul(al7, bl8) | 0;\n        mid = mid + Math.imul(al7, bh8) | 0;\n        mid = mid + Math.imul(ah7, bl8) | 0;\n        hi = hi + Math.imul(ah7, bh8) | 0;\n        lo = lo + Math.imul(al6, bl9) | 0;\n        mid = mid + Math.imul(al6, bh9) | 0;\n        mid = mid + Math.imul(ah6, bl9) | 0;\n        hi = hi + Math.imul(ah6, bh9) | 0;\n        var w15 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;\n        w15 &= 0x3ffffff;\n        /* k = 16 */\n\n        lo = Math.imul(al9, bl7);\n        mid = Math.imul(al9, bh7);\n        mid = mid + Math.imul(ah9, bl7) | 0;\n        hi = Math.imul(ah9, bh7);\n        lo = lo + Math.imul(al8, bl8) | 0;\n        mid = mid + Math.imul(al8, bh8) | 0;\n        mid = mid + Math.imul(ah8, bl8) | 0;\n        hi = hi + Math.imul(ah8, bh8) | 0;\n        lo = lo + Math.imul(al7, bl9) | 0;\n        mid = mid + Math.imul(al7, bh9) | 0;\n        mid = mid + Math.imul(ah7, bl9) | 0;\n        hi = hi + Math.imul(ah7, bh9) | 0;\n        var w16 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;\n        w16 &= 0x3ffffff;\n        /* k = 17 */\n\n        lo = Math.imul(al9, bl8);\n        mid = Math.imul(al9, bh8);\n        mid = mid + Math.imul(ah9, bl8) | 0;\n        hi = Math.imul(ah9, bh8);\n        lo = lo + Math.imul(al8, bl9) | 0;\n        mid = mid + Math.imul(al8, bh9) | 0;\n        mid = mid + Math.imul(ah8, bl9) | 0;\n        hi = hi + Math.imul(ah8, bh9) | 0;\n        var w17 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;\n        w17 &= 0x3ffffff;\n        /* k = 18 */\n\n        lo = Math.imul(al9, bl9);\n        mid = Math.imul(al9, bh9);\n        mid = mid + Math.imul(ah9, bl9) | 0;\n        hi = Math.imul(ah9, bh9);\n        var w18 = (c + lo | 0) + ((mid & 0x1fff) << 13) | 0;\n        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;\n        w18 &= 0x3ffffff;\n        o[0] = w0;\n        o[1] = w1;\n        o[2] = w2;\n        o[3] = w3;\n        o[4] = w4;\n        o[5] = w5;\n        o[6] = w6;\n        o[7] = w7;\n        o[8] = w8;\n        o[9] = w9;\n        o[10] = w10;\n        o[11] = w11;\n        o[12] = w12;\n        o[13] = w13;\n        o[14] = w14;\n        o[15] = w15;\n        o[16] = w16;\n        o[17] = w17;\n        o[18] = w18;\n\n        if (c !== 0) {\n          o[19] = c;\n          out.length++;\n        }\n\n        return out;\n      }; // Polyfill comb\n\n\n      if (!Math.imul) {\n        comb10MulTo = smallMulTo;\n      }\n\n      function bigMulTo(self, num, out) {\n        out.negative = num.negative ^ self.negative;\n        out.length = self.length + num.length;\n        var carry = 0;\n        var hncarry = 0;\n\n        for (var k = 0; k < out.length - 1; k++) {\n          // Sum all words with the same `i + j = k` and accumulate `ncarry`,\n          // note that ncarry could be >= 0x3ffffff\n          var ncarry = hncarry;\n          hncarry = 0;\n          var rword = carry & 0x3ffffff;\n          var maxJ = Math.min(k, num.length - 1);\n\n          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {\n            var i = k - j;\n            var a = self.words[i] | 0;\n            var b = num.words[j] | 0;\n            var r = a * b;\n            var lo = r & 0x3ffffff;\n            ncarry = ncarry + (r / 0x4000000 | 0) | 0;\n            lo = lo + rword | 0;\n            rword = lo & 0x3ffffff;\n            ncarry = ncarry + (lo >>> 26) | 0;\n            hncarry += ncarry >>> 26;\n            ncarry &= 0x3ffffff;\n          }\n\n          out.words[k] = rword;\n          carry = ncarry;\n          ncarry = hncarry;\n        }\n\n        if (carry !== 0) {\n          out.words[k] = carry;\n        } else {\n          out.length--;\n        }\n\n        return out.strip();\n      }\n\n      function jumboMulTo(self, num, out) {\n        var fftm = new FFTM();\n        return fftm.mulp(self, num, out);\n      }\n\n      BN.prototype.mulTo = function mulTo(num, out) {\n        var res;\n        var len = this.length + num.length;\n\n        if (this.length === 10 && num.length === 10) {\n          res = comb10MulTo(this, num, out);\n        } else if (len < 63) {\n          res = smallMulTo(this, num, out);\n        } else if (len < 1024) {\n          res = bigMulTo(this, num, out);\n        } else {\n          res = jumboMulTo(this, num, out);\n        }\n\n        return res;\n      }; // Cooley-Tukey algorithm for FFT\n      // slightly revisited to rely on looping instead of recursion\n\n\n      function FFTM(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n\n      FFTM.prototype.makeRBT = function makeRBT(N) {\n        var t = new Array(N);\n        var l = BN.prototype._countBits(N) - 1;\n\n        for (var i = 0; i < N; i++) {\n          t[i] = this.revBin(i, l, N);\n        }\n\n        return t;\n      }; // Returns binary-reversed representation of `x`\n\n\n      FFTM.prototype.revBin = function revBin(x, l, N) {\n        if (x === 0 || x === N - 1) return x;\n        var rb = 0;\n\n        for (var i = 0; i < l; i++) {\n          rb |= (x & 1) << l - i - 1;\n          x >>= 1;\n        }\n\n        return rb;\n      }; // Performs \"tweedling\" phase, therefore 'emulating'\n      // behaviour of the recursive algorithm\n\n\n      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {\n        for (var i = 0; i < N; i++) {\n          rtws[i] = rws[rbt[i]];\n          itws[i] = iws[rbt[i]];\n        }\n      };\n\n      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {\n        this.permute(rbt, rws, iws, rtws, itws, N);\n\n        for (var s = 1; s < N; s <<= 1) {\n          var l = s << 1;\n          var rtwdf = Math.cos(2 * Math.PI / l);\n          var itwdf = Math.sin(2 * Math.PI / l);\n\n          for (var p = 0; p < N; p += l) {\n            var rtwdf_ = rtwdf;\n            var itwdf_ = itwdf;\n\n            for (var j = 0; j < s; j++) {\n              var re = rtws[p + j];\n              var ie = itws[p + j];\n              var ro = rtws[p + j + s];\n              var io = itws[p + j + s];\n              var rx = rtwdf_ * ro - itwdf_ * io;\n              io = rtwdf_ * io + itwdf_ * ro;\n              ro = rx;\n              rtws[p + j] = re + ro;\n              itws[p + j] = ie + io;\n              rtws[p + j + s] = re - ro;\n              itws[p + j + s] = ie - io;\n              /* jshint maxdepth : false */\n\n              if (j !== l) {\n                rx = rtwdf * rtwdf_ - itwdf * itwdf_;\n                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;\n                rtwdf_ = rx;\n              }\n            }\n          }\n        }\n      };\n\n      FFTM.prototype.guessLen13b = function guessLen13b(n, m) {\n        var N = Math.max(m, n) | 1;\n        var odd = N & 1;\n        var i = 0;\n\n        for (N = N / 2 | 0; N; N = N >>> 1) {\n          i++;\n        }\n\n        return 1 << i + 1 + odd;\n      };\n\n      FFTM.prototype.conjugate = function conjugate(rws, iws, N) {\n        if (N <= 1) return;\n\n        for (var i = 0; i < N / 2; i++) {\n          var t = rws[i];\n          rws[i] = rws[N - i - 1];\n          rws[N - i - 1] = t;\n          t = iws[i];\n          iws[i] = -iws[N - i - 1];\n          iws[N - i - 1] = -t;\n        }\n      };\n\n      FFTM.prototype.normalize13b = function normalize13b(ws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < N / 2; i++) {\n          var w = Math.round(ws[2 * i + 1] / N) * 0x2000 + Math.round(ws[2 * i] / N) + carry;\n          ws[i] = w & 0x3ffffff;\n\n          if (w < 0x4000000) {\n            carry = 0;\n          } else {\n            carry = w / 0x4000000 | 0;\n          }\n        }\n\n        return ws;\n      };\n\n      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {\n        var carry = 0;\n\n        for (var i = 0; i < len; i++) {\n          carry = carry + (ws[i] | 0);\n          rws[2 * i] = carry & 0x1fff;\n          carry = carry >>> 13;\n          rws[2 * i + 1] = carry & 0x1fff;\n          carry = carry >>> 13;\n        } // Pad with zeroes\n\n\n        for (i = 2 * len; i < N; ++i) {\n          rws[i] = 0;\n        }\n\n        assert(carry === 0);\n        assert((carry & ~0x1fff) === 0);\n      };\n\n      FFTM.prototype.stub = function stub(N) {\n        var ph = new Array(N);\n\n        for (var i = 0; i < N; i++) {\n          ph[i] = 0;\n        }\n\n        return ph;\n      };\n\n      FFTM.prototype.mulp = function mulp(x, y, out) {\n        var N = 2 * this.guessLen13b(x.length, y.length);\n        var rbt = this.makeRBT(N);\n\n        var _ = this.stub(N);\n\n        var rws = new Array(N);\n        var rwst = new Array(N);\n        var iwst = new Array(N);\n        var nrws = new Array(N);\n        var nrwst = new Array(N);\n        var niwst = new Array(N);\n        var rmws = out.words;\n        rmws.length = N;\n        this.convert13b(x.words, x.length, rws, N);\n        this.convert13b(y.words, y.length, nrws, N);\n        this.transform(rws, _, rwst, iwst, N, rbt);\n        this.transform(nrws, _, nrwst, niwst, N, rbt);\n\n        for (var i = 0; i < N; i++) {\n          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];\n          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];\n          rwst[i] = rx;\n        }\n\n        this.conjugate(rwst, iwst, N);\n        this.transform(rwst, iwst, rmws, _, N, rbt);\n        this.conjugate(rmws, _, N);\n        this.normalize13b(rmws, N);\n        out.negative = x.negative ^ y.negative;\n        out.length = x.length + y.length;\n        return out.strip();\n      }; // Multiply `this` by `num`\n\n\n      BN.prototype.mul = function mul(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return this.mulTo(num, out);\n      }; // Multiply employing FFT\n\n\n      BN.prototype.mulf = function mulf(num) {\n        var out = new BN(null);\n        out.words = new Array(this.length + num.length);\n        return jumboMulTo(this, num, out);\n      }; // In-place Multiplication\n\n\n      BN.prototype.imul = function imul(num) {\n        return this.clone().mulTo(num, this);\n      };\n\n      BN.prototype.imuln = function imuln(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000); // Carry\n\n        var carry = 0;\n\n        for (var i = 0; i < this.length; i++) {\n          var w = (this.words[i] | 0) * num;\n          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);\n          carry >>= 26;\n          carry += w / 0x4000000 | 0; // NOTE: lo is 27bit maximum\n\n          carry += lo >>> 26;\n          this.words[i] = lo & 0x3ffffff;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.muln = function muln(num) {\n        return this.clone().imuln(num);\n      }; // `this` * `this`\n\n\n      BN.prototype.sqr = function sqr() {\n        return this.mul(this);\n      }; // `this` * `this` in-place\n\n\n      BN.prototype.isqr = function isqr() {\n        return this.imul(this.clone());\n      }; // Math.pow(`this`, `num`)\n\n\n      BN.prototype.pow = function pow(num) {\n        var w = toBitArray(num);\n        if (w.length === 0) return new BN(1); // Skip leading zeroes\n\n        var res = this;\n\n        for (var i = 0; i < w.length; i++, res = res.sqr()) {\n          if (w[i] !== 0) break;\n        }\n\n        if (++i < w.length) {\n          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {\n            if (w[i] === 0) continue;\n            res = res.mul(q);\n          }\n        }\n\n        return res;\n      }; // Shift-left in-place\n\n\n      BN.prototype.iushln = function iushln(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        var carryMask = 0x3ffffff >>> 26 - r << 26 - r;\n        var i;\n\n        if (r !== 0) {\n          var carry = 0;\n\n          for (i = 0; i < this.length; i++) {\n            var newCarry = this.words[i] & carryMask;\n            var c = (this.words[i] | 0) - newCarry << r;\n            this.words[i] = c | carry;\n            carry = newCarry >>> 26 - r;\n          }\n\n          if (carry) {\n            this.words[i] = carry;\n            this.length++;\n          }\n        }\n\n        if (s !== 0) {\n          for (i = this.length - 1; i >= 0; i--) {\n            this.words[i + s] = this.words[i];\n          }\n\n          for (i = 0; i < s; i++) {\n            this.words[i] = 0;\n          }\n\n          this.length += s;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishln = function ishln(bits) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushln(bits);\n      }; // Shift-right in-place\n      // NOTE: `hint` is a lowest bit before trailing zeroes\n      // NOTE: if `extended` is present - it will be filled with destroyed bits\n\n\n      BN.prototype.iushrn = function iushrn(bits, hint, extended) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var h;\n\n        if (hint) {\n          h = (hint - hint % 26) / 26;\n        } else {\n          h = 0;\n        }\n\n        var r = bits % 26;\n        var s = Math.min((bits - r) / 26, this.length);\n        var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n        var maskedWords = extended;\n        h -= s;\n        h = Math.max(0, h); // Extended mode, copy masked part\n\n        if (maskedWords) {\n          for (var i = 0; i < s; i++) {\n            maskedWords.words[i] = this.words[i];\n          }\n\n          maskedWords.length = s;\n        }\n\n        if (s === 0) {// No-op, we should not move anything at all\n        } else if (this.length > s) {\n          this.length -= s;\n\n          for (i = 0; i < this.length; i++) {\n            this.words[i] = this.words[i + s];\n          }\n        } else {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n\n        var carry = 0;\n\n        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {\n          var word = this.words[i] | 0;\n          this.words[i] = carry << 26 - r | word >>> r;\n          carry = word & mask;\n        } // Push carried bits as a mask\n\n\n        if (maskedWords && carry !== 0) {\n          maskedWords.words[maskedWords.length++] = carry;\n        }\n\n        if (this.length === 0) {\n          this.words[0] = 0;\n          this.length = 1;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.ishrn = function ishrn(bits, hint, extended) {\n        // TODO(indutny): implement me\n        assert(this.negative === 0);\n        return this.iushrn(bits, hint, extended);\n      }; // Shift-left\n\n\n      BN.prototype.shln = function shln(bits) {\n        return this.clone().ishln(bits);\n      };\n\n      BN.prototype.ushln = function ushln(bits) {\n        return this.clone().iushln(bits);\n      }; // Shift-right\n\n\n      BN.prototype.shrn = function shrn(bits) {\n        return this.clone().ishrn(bits);\n      };\n\n      BN.prototype.ushrn = function ushrn(bits) {\n        return this.clone().iushrn(bits);\n      }; // Test if n bit is set\n\n\n      BN.prototype.testn = function testn(bit) {\n        assert(typeof bit === 'number' && bit >= 0);\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) return false; // Check bit and return\n\n        var w = this.words[s];\n        return !!(w & q);\n      }; // Return only lowers bits of number (in-place)\n\n\n      BN.prototype.imaskn = function imaskn(bits) {\n        assert(typeof bits === 'number' && bits >= 0);\n        var r = bits % 26;\n        var s = (bits - r) / 26;\n        assert(this.negative === 0, 'imaskn works only with positive numbers');\n\n        if (this.length <= s) {\n          return this;\n        }\n\n        if (r !== 0) {\n          s++;\n        }\n\n        this.length = Math.min(s, this.length);\n\n        if (r !== 0) {\n          var mask = 0x3ffffff ^ 0x3ffffff >>> r << r;\n          this.words[this.length - 1] &= mask;\n        }\n\n        return this.strip();\n      }; // Return only lowers bits of number\n\n\n      BN.prototype.maskn = function maskn(bits) {\n        return this.clone().imaskn(bits);\n      }; // Add plain number `num` to `this`\n\n\n      BN.prototype.iaddn = function iaddn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.isubn(-num); // Possible sign change\n\n        if (this.negative !== 0) {\n          if (this.length === 1 && (this.words[0] | 0) < num) {\n            this.words[0] = num - (this.words[0] | 0);\n            this.negative = 0;\n            return this;\n          }\n\n          this.negative = 0;\n          this.isubn(num);\n          this.negative = 1;\n          return this;\n        } // Add without checks\n\n\n        return this._iaddn(num);\n      };\n\n      BN.prototype._iaddn = function _iaddn(num) {\n        this.words[0] += num; // Carry\n\n        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {\n          this.words[i] -= 0x4000000;\n\n          if (i === this.length - 1) {\n            this.words[i + 1] = 1;\n          } else {\n            this.words[i + 1]++;\n          }\n        }\n\n        this.length = Math.max(this.length, i + 1);\n        return this;\n      }; // Subtract plain number `num` from `this`\n\n\n      BN.prototype.isubn = function isubn(num) {\n        assert(typeof num === 'number');\n        assert(num < 0x4000000);\n        if (num < 0) return this.iaddn(-num);\n\n        if (this.negative !== 0) {\n          this.negative = 0;\n          this.iaddn(num);\n          this.negative = 1;\n          return this;\n        }\n\n        this.words[0] -= num;\n\n        if (this.length === 1 && this.words[0] < 0) {\n          this.words[0] = -this.words[0];\n          this.negative = 1;\n        } else {\n          // Carry\n          for (var i = 0; i < this.length && this.words[i] < 0; i++) {\n            this.words[i] += 0x4000000;\n            this.words[i + 1] -= 1;\n          }\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.addn = function addn(num) {\n        return this.clone().iaddn(num);\n      };\n\n      BN.prototype.subn = function subn(num) {\n        return this.clone().isubn(num);\n      };\n\n      BN.prototype.iabs = function iabs() {\n        this.negative = 0;\n        return this;\n      };\n\n      BN.prototype.abs = function abs() {\n        return this.clone().iabs();\n      };\n\n      BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {\n        var len = num.length + shift;\n        var i;\n\n        this._expand(len);\n\n        var w;\n        var carry = 0;\n\n        for (i = 0; i < num.length; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          var right = (num.words[i] | 0) * mul;\n          w -= right & 0x3ffffff;\n          carry = (w >> 26) - (right / 0x4000000 | 0);\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        for (; i < this.length - shift; i++) {\n          w = (this.words[i + shift] | 0) + carry;\n          carry = w >> 26;\n          this.words[i + shift] = w & 0x3ffffff;\n        }\n\n        if (carry === 0) return this.strip(); // Subtraction overflow\n\n        assert(carry === -1);\n        carry = 0;\n\n        for (i = 0; i < this.length; i++) {\n          w = -(this.words[i] | 0) + carry;\n          carry = w >> 26;\n          this.words[i] = w & 0x3ffffff;\n        }\n\n        this.negative = 1;\n        return this.strip();\n      };\n\n      BN.prototype._wordDiv = function _wordDiv(num, mode) {\n        var shift = this.length - num.length;\n        var a = this.clone();\n        var b = num; // Normalize\n\n        var bhi = b.words[b.length - 1] | 0;\n\n        var bhiBits = this._countBits(bhi);\n\n        shift = 26 - bhiBits;\n\n        if (shift !== 0) {\n          b = b.ushln(shift);\n          a.iushln(shift);\n          bhi = b.words[b.length - 1] | 0;\n        } // Initialize quotient\n\n\n        var m = a.length - b.length;\n        var q;\n\n        if (mode !== 'mod') {\n          q = new BN(null);\n          q.length = m + 1;\n          q.words = new Array(q.length);\n\n          for (var i = 0; i < q.length; i++) {\n            q.words[i] = 0;\n          }\n        }\n\n        var diff = a.clone()._ishlnsubmul(b, 1, m);\n\n        if (diff.negative === 0) {\n          a = diff;\n\n          if (q) {\n            q.words[m] = 1;\n          }\n        }\n\n        for (var j = m - 1; j >= 0; j--) {\n          var qj = (a.words[b.length + j] | 0) * 0x4000000 + (a.words[b.length + j - 1] | 0); // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max\n          // (0x7ffffff)\n\n          qj = Math.min(qj / bhi | 0, 0x3ffffff);\n\n          a._ishlnsubmul(b, qj, j);\n\n          while (a.negative !== 0) {\n            qj--;\n            a.negative = 0;\n\n            a._ishlnsubmul(b, 1, j);\n\n            if (!a.isZero()) {\n              a.negative ^= 1;\n            }\n          }\n\n          if (q) {\n            q.words[j] = qj;\n          }\n        }\n\n        if (q) {\n          q.strip();\n        }\n\n        a.strip(); // Denormalize\n\n        if (mode !== 'div' && shift !== 0) {\n          a.iushrn(shift);\n        }\n\n        return {\n          div: q || null,\n          mod: a\n        };\n      }; // NOTE: 1) `mode` can be set to `mod` to request mod only,\n      //       to `div` to request div only, or be absent to\n      //       request both div & mod\n      //       2) `positive` is true if unsigned mod is requested\n\n\n      BN.prototype.divmod = function divmod(num, mode, positive) {\n        assert(!num.isZero());\n\n        if (this.isZero()) {\n          return {\n            div: new BN(0),\n            mod: new BN(0)\n          };\n        }\n\n        var div, mod, res;\n\n        if (this.negative !== 0 && num.negative === 0) {\n          res = this.neg().divmod(num, mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.iadd(num);\n            }\n          }\n\n          return {\n            div: div,\n            mod: mod\n          };\n        }\n\n        if (this.negative === 0 && num.negative !== 0) {\n          res = this.divmod(num.neg(), mode);\n\n          if (mode !== 'mod') {\n            div = res.div.neg();\n          }\n\n          return {\n            div: div,\n            mod: res.mod\n          };\n        }\n\n        if ((this.negative & num.negative) !== 0) {\n          res = this.neg().divmod(num.neg(), mode);\n\n          if (mode !== 'div') {\n            mod = res.mod.neg();\n\n            if (positive && mod.negative !== 0) {\n              mod.isub(num);\n            }\n          }\n\n          return {\n            div: res.div,\n            mod: mod\n          };\n        } // Both numbers are positive at this point\n        // Strip both numbers to approximate shift value\n\n\n        if (num.length > this.length || this.cmp(num) < 0) {\n          return {\n            div: new BN(0),\n            mod: this\n          };\n        } // Very short reduction\n\n\n        if (num.length === 1) {\n          if (mode === 'div') {\n            return {\n              div: this.divn(num.words[0]),\n              mod: null\n            };\n          }\n\n          if (mode === 'mod') {\n            return {\n              div: null,\n              mod: new BN(this.modn(num.words[0]))\n            };\n          }\n\n          return {\n            div: this.divn(num.words[0]),\n            mod: new BN(this.modn(num.words[0]))\n          };\n        }\n\n        return this._wordDiv(num, mode);\n      }; // Find `this` / `num`\n\n\n      BN.prototype.div = function div(num) {\n        return this.divmod(num, 'div', false).div;\n      }; // Find `this` % `num`\n\n\n      BN.prototype.mod = function mod(num) {\n        return this.divmod(num, 'mod', false).mod;\n      };\n\n      BN.prototype.umod = function umod(num) {\n        return this.divmod(num, 'mod', true).mod;\n      }; // Find Round(`this` / `num`)\n\n\n      BN.prototype.divRound = function divRound(num) {\n        var dm = this.divmod(num); // Fast case - exact division\n\n        if (dm.mod.isZero()) return dm.div;\n        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;\n        var half = num.ushrn(1);\n        var r2 = num.andln(1);\n        var cmp = mod.cmp(half); // Round down\n\n        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div; // Round up\n\n        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);\n      };\n\n      BN.prototype.modn = function modn(num) {\n        assert(num <= 0x3ffffff);\n        var p = (1 << 26) % num;\n        var acc = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          acc = (p * acc + (this.words[i] | 0)) % num;\n        }\n\n        return acc;\n      }; // In-place division by number\n\n\n      BN.prototype.idivn = function idivn(num) {\n        assert(num <= 0x3ffffff);\n        var carry = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var w = (this.words[i] | 0) + carry * 0x4000000;\n          this.words[i] = w / num | 0;\n          carry = w % num;\n        }\n\n        return this.strip();\n      };\n\n      BN.prototype.divn = function divn(num) {\n        return this.clone().idivn(num);\n      };\n\n      BN.prototype.egcd = function egcd(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var x = this;\n        var y = p.clone();\n\n        if (x.negative !== 0) {\n          x = x.umod(p);\n        } else {\n          x = x.clone();\n        } // A * x + B * y = x\n\n\n        var A = new BN(1);\n        var B = new BN(0); // C * x + D * y = y\n\n        var C = new BN(0);\n        var D = new BN(1);\n        var g = 0;\n\n        while (x.isEven() && y.isEven()) {\n          x.iushrn(1);\n          y.iushrn(1);\n          ++g;\n        }\n\n        var yp = y.clone();\n        var xp = x.clone();\n\n        while (!x.isZero()) {\n          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            x.iushrn(i);\n\n            while (i-- > 0) {\n              if (A.isOdd() || B.isOdd()) {\n                A.iadd(yp);\n                B.isub(xp);\n              }\n\n              A.iushrn(1);\n              B.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            y.iushrn(j);\n\n            while (j-- > 0) {\n              if (C.isOdd() || D.isOdd()) {\n                C.iadd(yp);\n                D.isub(xp);\n              }\n\n              C.iushrn(1);\n              D.iushrn(1);\n            }\n          }\n\n          if (x.cmp(y) >= 0) {\n            x.isub(y);\n            A.isub(C);\n            B.isub(D);\n          } else {\n            y.isub(x);\n            C.isub(A);\n            D.isub(B);\n          }\n        }\n\n        return {\n          a: C,\n          b: D,\n          gcd: y.iushln(g)\n        };\n      }; // This is reduced incarnation of the binary EEA\n      // above, designated to invert members of the\n      // _prime_ fields F(p) at a maximal speed\n\n\n      BN.prototype._invmp = function _invmp(p) {\n        assert(p.negative === 0);\n        assert(!p.isZero());\n        var a = this;\n        var b = p.clone();\n\n        if (a.negative !== 0) {\n          a = a.umod(p);\n        } else {\n          a = a.clone();\n        }\n\n        var x1 = new BN(1);\n        var x2 = new BN(0);\n        var delta = b.clone();\n\n        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {\n          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);\n\n          if (i > 0) {\n            a.iushrn(i);\n\n            while (i-- > 0) {\n              if (x1.isOdd()) {\n                x1.iadd(delta);\n              }\n\n              x1.iushrn(1);\n            }\n          }\n\n          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);\n\n          if (j > 0) {\n            b.iushrn(j);\n\n            while (j-- > 0) {\n              if (x2.isOdd()) {\n                x2.iadd(delta);\n              }\n\n              x2.iushrn(1);\n            }\n          }\n\n          if (a.cmp(b) >= 0) {\n            a.isub(b);\n            x1.isub(x2);\n          } else {\n            b.isub(a);\n            x2.isub(x1);\n          }\n        }\n\n        var res;\n\n        if (a.cmpn(1) === 0) {\n          res = x1;\n        } else {\n          res = x2;\n        }\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(p);\n        }\n\n        return res;\n      };\n\n      BN.prototype.gcd = function gcd(num) {\n        if (this.isZero()) return num.abs();\n        if (num.isZero()) return this.abs();\n        var a = this.clone();\n        var b = num.clone();\n        a.negative = 0;\n        b.negative = 0; // Remove common factor of two\n\n        for (var shift = 0; a.isEven() && b.isEven(); shift++) {\n          a.iushrn(1);\n          b.iushrn(1);\n        }\n\n        do {\n          while (a.isEven()) {\n            a.iushrn(1);\n          }\n\n          while (b.isEven()) {\n            b.iushrn(1);\n          }\n\n          var r = a.cmp(b);\n\n          if (r < 0) {\n            // Swap `a` and `b` to make `a` always bigger than `b`\n            var t = a;\n            a = b;\n            b = t;\n          } else if (r === 0 || b.cmpn(1) === 0) {\n            break;\n          }\n\n          a.isub(b);\n        } while (true);\n\n        return b.iushln(shift);\n      }; // Invert number in the field F(num)\n\n\n      BN.prototype.invm = function invm(num) {\n        return this.egcd(num).a.umod(num);\n      };\n\n      BN.prototype.isEven = function isEven() {\n        return (this.words[0] & 1) === 0;\n      };\n\n      BN.prototype.isOdd = function isOdd() {\n        return (this.words[0] & 1) === 1;\n      }; // And first word and num\n\n\n      BN.prototype.andln = function andln(num) {\n        return this.words[0] & num;\n      }; // Increment at the bit position in-line\n\n\n      BN.prototype.bincn = function bincn(bit) {\n        assert(typeof bit === 'number');\n        var r = bit % 26;\n        var s = (bit - r) / 26;\n        var q = 1 << r; // Fast case: bit is much higher than all existing words\n\n        if (this.length <= s) {\n          this._expand(s + 1);\n\n          this.words[s] |= q;\n          return this;\n        } // Add bit and propagate, if needed\n\n\n        var carry = q;\n\n        for (var i = s; carry !== 0 && i < this.length; i++) {\n          var w = this.words[i] | 0;\n          w += carry;\n          carry = w >>> 26;\n          w &= 0x3ffffff;\n          this.words[i] = w;\n        }\n\n        if (carry !== 0) {\n          this.words[i] = carry;\n          this.length++;\n        }\n\n        return this;\n      };\n\n      BN.prototype.isZero = function isZero() {\n        return this.length === 1 && this.words[0] === 0;\n      };\n\n      BN.prototype.cmpn = function cmpn(num) {\n        var negative = num < 0;\n        if (this.negative !== 0 && !negative) return -1;\n        if (this.negative === 0 && negative) return 1;\n        this.strip();\n        var res;\n\n        if (this.length > 1) {\n          res = 1;\n        } else {\n          if (negative) {\n            num = -num;\n          }\n\n          assert(num <= 0x3ffffff, 'Number is too big');\n          var w = this.words[0] | 0;\n          res = w === num ? 0 : w < num ? -1 : 1;\n        }\n\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Compare two numbers and return:\n      // 1 - if `this` > `num`\n      // 0 - if `this` == `num`\n      // -1 - if `this` < `num`\n\n\n      BN.prototype.cmp = function cmp(num) {\n        if (this.negative !== 0 && num.negative === 0) return -1;\n        if (this.negative === 0 && num.negative !== 0) return 1;\n        var res = this.ucmp(num);\n        if (this.negative !== 0) return -res | 0;\n        return res;\n      }; // Unsigned comparison\n\n\n      BN.prototype.ucmp = function ucmp(num) {\n        // At this point both numbers have the same sign\n        if (this.length > num.length) return 1;\n        if (this.length < num.length) return -1;\n        var res = 0;\n\n        for (var i = this.length - 1; i >= 0; i--) {\n          var a = this.words[i] | 0;\n          var b = num.words[i] | 0;\n          if (a === b) continue;\n\n          if (a < b) {\n            res = -1;\n          } else if (a > b) {\n            res = 1;\n          }\n\n          break;\n        }\n\n        return res;\n      };\n\n      BN.prototype.gtn = function gtn(num) {\n        return this.cmpn(num) === 1;\n      };\n\n      BN.prototype.gt = function gt(num) {\n        return this.cmp(num) === 1;\n      };\n\n      BN.prototype.gten = function gten(num) {\n        return this.cmpn(num) >= 0;\n      };\n\n      BN.prototype.gte = function gte(num) {\n        return this.cmp(num) >= 0;\n      };\n\n      BN.prototype.ltn = function ltn(num) {\n        return this.cmpn(num) === -1;\n      };\n\n      BN.prototype.lt = function lt(num) {\n        return this.cmp(num) === -1;\n      };\n\n      BN.prototype.lten = function lten(num) {\n        return this.cmpn(num) <= 0;\n      };\n\n      BN.prototype.lte = function lte(num) {\n        return this.cmp(num) <= 0;\n      };\n\n      BN.prototype.eqn = function eqn(num) {\n        return this.cmpn(num) === 0;\n      };\n\n      BN.prototype.eq = function eq(num) {\n        return this.cmp(num) === 0;\n      }; //\n      // A reduce context, could be using montgomery or something better, depending\n      // on the `m` itself.\n      //\n\n\n      BN.red = function red(num) {\n        return new Red(num);\n      };\n\n      BN.prototype.toRed = function toRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        assert(this.negative === 0, 'red works only with positives');\n        return ctx.convertTo(this)._forceRed(ctx);\n      };\n\n      BN.prototype.fromRed = function fromRed() {\n        assert(this.red, 'fromRed works only with numbers in reduction context');\n        return this.red.convertFrom(this);\n      };\n\n      BN.prototype._forceRed = function _forceRed(ctx) {\n        this.red = ctx;\n        return this;\n      };\n\n      BN.prototype.forceRed = function forceRed(ctx) {\n        assert(!this.red, 'Already a number in reduction context');\n        return this._forceRed(ctx);\n      };\n\n      BN.prototype.redAdd = function redAdd(num) {\n        assert(this.red, 'redAdd works only with red numbers');\n        return this.red.add(this, num);\n      };\n\n      BN.prototype.redIAdd = function redIAdd(num) {\n        assert(this.red, 'redIAdd works only with red numbers');\n        return this.red.iadd(this, num);\n      };\n\n      BN.prototype.redSub = function redSub(num) {\n        assert(this.red, 'redSub works only with red numbers');\n        return this.red.sub(this, num);\n      };\n\n      BN.prototype.redISub = function redISub(num) {\n        assert(this.red, 'redISub works only with red numbers');\n        return this.red.isub(this, num);\n      };\n\n      BN.prototype.redShl = function redShl(num) {\n        assert(this.red, 'redShl works only with red numbers');\n        return this.red.shl(this, num);\n      };\n\n      BN.prototype.redMul = function redMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.mul(this, num);\n      };\n\n      BN.prototype.redIMul = function redIMul(num) {\n        assert(this.red, 'redMul works only with red numbers');\n\n        this.red._verify2(this, num);\n\n        return this.red.imul(this, num);\n      };\n\n      BN.prototype.redSqr = function redSqr() {\n        assert(this.red, 'redSqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqr(this);\n      };\n\n      BN.prototype.redISqr = function redISqr() {\n        assert(this.red, 'redISqr works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.isqr(this);\n      }; // Square root over p\n\n\n      BN.prototype.redSqrt = function redSqrt() {\n        assert(this.red, 'redSqrt works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.sqrt(this);\n      };\n\n      BN.prototype.redInvm = function redInvm() {\n        assert(this.red, 'redInvm works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.invm(this);\n      }; // Return negative clone of `this` % `red modulo`\n\n\n      BN.prototype.redNeg = function redNeg() {\n        assert(this.red, 'redNeg works only with red numbers');\n\n        this.red._verify1(this);\n\n        return this.red.neg(this);\n      };\n\n      BN.prototype.redPow = function redPow(num) {\n        assert(this.red && !num.red, 'redPow(normalNum)');\n\n        this.red._verify1(this);\n\n        return this.red.pow(this, num);\n      }; // Prime numbers with efficient reduction\n\n\n      var primes = {\n        k256: null,\n        p224: null,\n        p192: null,\n        p25519: null\n      }; // Pseudo-Mersenne prime\n\n      function MPrime(name, p) {\n        // P = 2 ^ N - K\n        this.name = name;\n        this.p = new BN(p, 16);\n        this.n = this.p.bitLength();\n        this.k = new BN(1).iushln(this.n).isub(this.p);\n        this.tmp = this._tmp();\n      }\n\n      MPrime.prototype._tmp = function _tmp() {\n        var tmp = new BN(null);\n        tmp.words = new Array(Math.ceil(this.n / 13));\n        return tmp;\n      };\n\n      MPrime.prototype.ireduce = function ireduce(num) {\n        // Assumes that `num` is less than `P^2`\n        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)\n        var r = num;\n        var rlen;\n\n        do {\n          this.split(r, this.tmp);\n          r = this.imulK(r);\n          r = r.iadd(this.tmp);\n          rlen = r.bitLength();\n        } while (rlen > this.n);\n\n        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);\n\n        if (cmp === 0) {\n          r.words[0] = 0;\n          r.length = 1;\n        } else if (cmp > 0) {\n          r.isub(this.p);\n        } else {\n          if (r.strip !== undefined) {\n            // r is BN v4 instance\n            r.strip();\n          } else {\n            // r is BN v5 instance\n            r._strip();\n          }\n        }\n\n        return r;\n      };\n\n      MPrime.prototype.split = function split(input, out) {\n        input.iushrn(this.n, 0, out);\n      };\n\n      MPrime.prototype.imulK = function imulK(num) {\n        return num.imul(this.k);\n      };\n\n      function K256() {\n        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');\n      }\n\n      inherits(K256, MPrime);\n\n      K256.prototype.split = function split(input, output) {\n        // 256 = 9 * 26 + 22\n        var mask = 0x3fffff;\n        var outLen = Math.min(input.length, 9);\n\n        for (var i = 0; i < outLen; i++) {\n          output.words[i] = input.words[i];\n        }\n\n        output.length = outLen;\n\n        if (input.length <= 9) {\n          input.words[0] = 0;\n          input.length = 1;\n          return;\n        } // Shift by 9 limbs\n\n\n        var prev = input.words[9];\n        output.words[output.length++] = prev & mask;\n\n        for (i = 10; i < input.length; i++) {\n          var next = input.words[i] | 0;\n          input.words[i - 10] = (next & mask) << 4 | prev >>> 22;\n          prev = next;\n        }\n\n        prev >>>= 22;\n        input.words[i - 10] = prev;\n\n        if (prev === 0 && input.length > 10) {\n          input.length -= 10;\n        } else {\n          input.length -= 9;\n        }\n      };\n\n      K256.prototype.imulK = function imulK(num) {\n        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]\n        num.words[num.length] = 0;\n        num.words[num.length + 1] = 0;\n        num.length += 2; // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390\n\n        var lo = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var w = num.words[i] | 0;\n          lo += w * 0x3d1;\n          num.words[i] = lo & 0x3ffffff;\n          lo = w * 0x40 + (lo / 0x4000000 | 0);\n        } // Fast length reduction\n\n\n        if (num.words[num.length - 1] === 0) {\n          num.length--;\n\n          if (num.words[num.length - 1] === 0) {\n            num.length--;\n          }\n        }\n\n        return num;\n      };\n\n      function P224() {\n        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');\n      }\n\n      inherits(P224, MPrime);\n\n      function P192() {\n        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');\n      }\n\n      inherits(P192, MPrime);\n\n      function P25519() {\n        // 2 ^ 255 - 19\n        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');\n      }\n\n      inherits(P25519, MPrime);\n\n      P25519.prototype.imulK = function imulK(num) {\n        // K = 0x13\n        var carry = 0;\n\n        for (var i = 0; i < num.length; i++) {\n          var hi = (num.words[i] | 0) * 0x13 + carry;\n          var lo = hi & 0x3ffffff;\n          hi >>>= 26;\n          num.words[i] = lo;\n          carry = hi;\n        }\n\n        if (carry !== 0) {\n          num.words[num.length++] = carry;\n        }\n\n        return num;\n      }; // Exported mostly for testing purposes, use plain name instead\n\n\n      BN._prime = function prime(name) {\n        // Cached version of prime\n        if (primes[name]) return primes[name];\n        var prime;\n\n        if (name === 'k256') {\n          prime = new K256();\n        } else if (name === 'p224') {\n          prime = new P224();\n        } else if (name === 'p192') {\n          prime = new P192();\n        } else if (name === 'p25519') {\n          prime = new P25519();\n        } else {\n          throw new Error('Unknown prime ' + name);\n        }\n\n        primes[name] = prime;\n        return prime;\n      }; //\n      // Base reduction engine\n      //\n\n\n      function Red(m) {\n        if (typeof m === 'string') {\n          var prime = BN._prime(m);\n\n          this.m = prime.p;\n          this.prime = prime;\n        } else {\n          assert(m.gtn(1), 'modulus must be greater than 1');\n          this.m = m;\n          this.prime = null;\n        }\n      }\n\n      Red.prototype._verify1 = function _verify1(a) {\n        assert(a.negative === 0, 'red works only with positives');\n        assert(a.red, 'red works only with red numbers');\n      };\n\n      Red.prototype._verify2 = function _verify2(a, b) {\n        assert((a.negative | b.negative) === 0, 'red works only with positives');\n        assert(a.red && a.red === b.red, 'red works only with red numbers');\n      };\n\n      Red.prototype.imod = function imod(a) {\n        if (this.prime) return this.prime.ireduce(a)._forceRed(this);\n        return a.umod(this.m)._forceRed(this);\n      };\n\n      Red.prototype.neg = function neg(a) {\n        if (a.isZero()) {\n          return a.clone();\n        }\n\n        return this.m.sub(a)._forceRed(this);\n      };\n\n      Red.prototype.add = function add(a, b) {\n        this._verify2(a, b);\n\n        var res = a.add(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.iadd = function iadd(a, b) {\n        this._verify2(a, b);\n\n        var res = a.iadd(b);\n\n        if (res.cmp(this.m) >= 0) {\n          res.isub(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.sub = function sub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.sub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Red.prototype.isub = function isub(a, b) {\n        this._verify2(a, b);\n\n        var res = a.isub(b);\n\n        if (res.cmpn(0) < 0) {\n          res.iadd(this.m);\n        }\n\n        return res;\n      };\n\n      Red.prototype.shl = function shl(a, num) {\n        this._verify1(a);\n\n        return this.imod(a.ushln(num));\n      };\n\n      Red.prototype.imul = function imul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.imul(b));\n      };\n\n      Red.prototype.mul = function mul(a, b) {\n        this._verify2(a, b);\n\n        return this.imod(a.mul(b));\n      };\n\n      Red.prototype.isqr = function isqr(a) {\n        return this.imul(a, a.clone());\n      };\n\n      Red.prototype.sqr = function sqr(a) {\n        return this.mul(a, a);\n      };\n\n      Red.prototype.sqrt = function sqrt(a) {\n        if (a.isZero()) return a.clone();\n        var mod3 = this.m.andln(3);\n        assert(mod3 % 2 === 1); // Fast case\n\n        if (mod3 === 3) {\n          var pow = this.m.add(new BN(1)).iushrn(2);\n          return this.pow(a, pow);\n        } // Tonelli-Shanks algorithm (Totally unoptimized and slow)\n        //\n        // Find Q and S, that Q * 2 ^ S = (P - 1)\n\n\n        var q = this.m.subn(1);\n        var s = 0;\n\n        while (!q.isZero() && q.andln(1) === 0) {\n          s++;\n          q.iushrn(1);\n        }\n\n        assert(!q.isZero());\n        var one = new BN(1).toRed(this);\n        var nOne = one.redNeg(); // Find quadratic non-residue\n        // NOTE: Max is such because of generalized Riemann hypothesis.\n\n        var lpow = this.m.subn(1).iushrn(1);\n        var z = this.m.bitLength();\n        z = new BN(2 * z * z).toRed(this);\n\n        while (this.pow(z, lpow).cmp(nOne) !== 0) {\n          z.redIAdd(nOne);\n        }\n\n        var c = this.pow(z, q);\n        var r = this.pow(a, q.addn(1).iushrn(1));\n        var t = this.pow(a, q);\n        var m = s;\n\n        while (t.cmp(one) !== 0) {\n          var tmp = t;\n\n          for (var i = 0; tmp.cmp(one) !== 0; i++) {\n            tmp = tmp.redSqr();\n          }\n\n          assert(i < m);\n          var b = this.pow(c, new BN(1).iushln(m - i - 1));\n          r = r.redMul(b);\n          c = b.redSqr();\n          t = t.redMul(c);\n          m = i;\n        }\n\n        return r;\n      };\n\n      Red.prototype.invm = function invm(a) {\n        var inv = a._invmp(this.m);\n\n        if (inv.negative !== 0) {\n          inv.negative = 0;\n          return this.imod(inv).redNeg();\n        } else {\n          return this.imod(inv);\n        }\n      };\n\n      Red.prototype.pow = function pow(a, num) {\n        if (num.isZero()) return new BN(1).toRed(this);\n        if (num.cmpn(1) === 0) return a.clone();\n        var windowSize = 4;\n        var wnd = new Array(1 << windowSize);\n        wnd[0] = new BN(1).toRed(this);\n        wnd[1] = a;\n\n        for (var i = 2; i < wnd.length; i++) {\n          wnd[i] = this.mul(wnd[i - 1], a);\n        }\n\n        var res = wnd[0];\n        var current = 0;\n        var currentLen = 0;\n        var start = num.bitLength() % 26;\n\n        if (start === 0) {\n          start = 26;\n        }\n\n        for (i = num.length - 1; i >= 0; i--) {\n          var word = num.words[i];\n\n          for (var j = start - 1; j >= 0; j--) {\n            var bit = word >> j & 1;\n\n            if (res !== wnd[0]) {\n              res = this.sqr(res);\n            }\n\n            if (bit === 0 && current === 0) {\n              currentLen = 0;\n              continue;\n            }\n\n            current <<= 1;\n            current |= bit;\n            currentLen++;\n            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;\n            res = this.mul(res, wnd[current]);\n            currentLen = 0;\n            current = 0;\n          }\n\n          start = 26;\n        }\n\n        return res;\n      };\n\n      Red.prototype.convertTo = function convertTo(num) {\n        var r = num.umod(this.m);\n        return r === num ? r.clone() : r;\n      };\n\n      Red.prototype.convertFrom = function convertFrom(num) {\n        var res = num.clone();\n        res.red = null;\n        return res;\n      }; //\n      // Montgomery method engine\n      //\n\n\n      BN.mont = function mont(num) {\n        return new Mont(num);\n      };\n\n      function Mont(m) {\n        Red.call(this, m);\n        this.shift = this.m.bitLength();\n\n        if (this.shift % 26 !== 0) {\n          this.shift += 26 - this.shift % 26;\n        }\n\n        this.r = new BN(1).iushln(this.shift);\n        this.r2 = this.imod(this.r.sqr());\n        this.rinv = this.r._invmp(this.m);\n        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);\n        this.minv = this.minv.umod(this.r);\n        this.minv = this.r.sub(this.minv);\n      }\n\n      inherits(Mont, Red);\n\n      Mont.prototype.convertTo = function convertTo(num) {\n        return this.imod(num.ushln(this.shift));\n      };\n\n      Mont.prototype.convertFrom = function convertFrom(num) {\n        var r = this.imod(num.mul(this.rinv));\n        r.red = null;\n        return r;\n      };\n\n      Mont.prototype.imul = function imul(a, b) {\n        if (a.isZero() || b.isZero()) {\n          a.words[0] = 0;\n          a.length = 1;\n          return a;\n        }\n\n        var t = a.imul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.mul = function mul(a, b) {\n        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);\n        var t = a.mul(b);\n        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);\n        var u = t.isub(c).iushrn(this.shift);\n        var res = u;\n\n        if (u.cmp(this.m) >= 0) {\n          res = u.isub(this.m);\n        } else if (u.cmpn(0) < 0) {\n          res = u.iadd(this.m);\n        }\n\n        return res._forceRed(this);\n      };\n\n      Mont.prototype.invm = function invm(a) {\n        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R\n        var res = this.imod(a._invmp(this.m).mul(this.r2));\n        return res._forceRed(this);\n      };\n    })('object' === 'undefined' || module, commonjsGlobal);\n  });\n  var utils_1 = createCommonjsModule(function (module, exports) {\n    'use strict';\n\n    var utils = exports;\n\n    function toArray(msg, enc) {\n      if (Array.isArray(msg)) return msg.slice();\n      if (!msg) return [];\n      var res = [];\n\n      if (typeof msg !== 'string') {\n        for (var i = 0; i < msg.length; i++) res[i] = msg[i] | 0;\n\n        return res;\n      }\n\n      if (enc === 'hex') {\n        msg = msg.replace(/[^a-z0-9]+/ig, '');\n        if (msg.length % 2 !== 0) msg = '0' + msg;\n\n        for (var i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));\n      } else {\n        for (var i = 0; i < msg.length; i++) {\n          var c = msg.charCodeAt(i);\n          var hi = c >> 8;\n          var lo = c & 0xff;\n          if (hi) res.push(hi, lo);else res.push(lo);\n        }\n      }\n\n      return res;\n    }\n\n    utils.toArray = toArray;\n\n    function zero2(word) {\n      if (word.length === 1) return '0' + word;else return word;\n    }\n\n    utils.zero2 = zero2;\n\n    function toHex(msg) {\n      var res = '';\n\n      for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));\n\n      return res;\n    }\n\n    utils.toHex = toHex;\n\n    utils.encode = function encode(arr, enc) {\n      if (enc === 'hex') return toHex(arr);else return arr;\n    };\n  });\n  var utils_1$1 = createCommonjsModule(function (module, exports) {\n    'use strict';\n\n    var utils = exports;\n    utils.assert = minimalisticAssert;\n    utils.toArray = utils_1.toArray;\n    utils.zero2 = utils_1.zero2;\n    utils.toHex = utils_1.toHex;\n    utils.encode = utils_1.encode; // Represent num in a w-NAF form\n\n    function getNAF(num, w, bits) {\n      var naf = new Array(Math.max(num.bitLength(), bits) + 1);\n      naf.fill(0);\n      var ws = 1 << w + 1;\n      var k = num.clone();\n\n      for (var i = 0; i < naf.length; i++) {\n        var z;\n        var mod = k.andln(ws - 1);\n\n        if (k.isOdd()) {\n          if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;else z = mod;\n          k.isubn(z);\n        } else {\n          z = 0;\n        }\n\n        naf[i] = z;\n        k.iushrn(1);\n      }\n\n      return naf;\n    }\n\n    utils.getNAF = getNAF; // Represent k1, k2 in a Joint Sparse Form\n\n    function getJSF(k1, k2) {\n      var jsf = [[], []];\n      k1 = k1.clone();\n      k2 = k2.clone();\n      var d1 = 0;\n      var d2 = 0;\n\n      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {\n        // First phase\n        var m14 = k1.andln(3) + d1 & 3;\n        var m24 = k2.andln(3) + d2 & 3;\n        if (m14 === 3) m14 = -1;\n        if (m24 === 3) m24 = -1;\n        var u1;\n\n        if ((m14 & 1) === 0) {\n          u1 = 0;\n        } else {\n          var m8 = k1.andln(7) + d1 & 7;\n          if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;else u1 = m14;\n        }\n\n        jsf[0].push(u1);\n        var u2;\n\n        if ((m24 & 1) === 0) {\n          u2 = 0;\n        } else {\n          var m8 = k2.andln(7) + d2 & 7;\n          if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;else u2 = m24;\n        }\n\n        jsf[1].push(u2); // Second phase\n\n        if (2 * d1 === u1 + 1) d1 = 1 - d1;\n        if (2 * d2 === u2 + 1) d2 = 1 - d2;\n        k1.iushrn(1);\n        k2.iushrn(1);\n      }\n\n      return jsf;\n    }\n\n    utils.getJSF = getJSF;\n\n    function cachedProperty(obj, name, computer) {\n      var key = '_' + name;\n\n      obj.prototype[name] = function cachedProperty() {\n        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);\n      };\n    }\n\n    utils.cachedProperty = cachedProperty;\n\n    function parseBytes(bytes) {\n      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;\n    }\n\n    utils.parseBytes = parseBytes;\n\n    function intFromLE(bytes) {\n      return new bn$1(bytes, 'hex', 'le');\n    }\n\n    utils.intFromLE = intFromLE;\n  });\n\n  var brorand = function (length) {\n    var result = new Uint8Array(length);\n    (commonjsGlobal.crypto || commonjsGlobal.msCrypto).getRandomValues(result);\n    return result;\n  };\n\n  'use strict';\n\n  var getNAF = utils_1$1.getNAF;\n  var getJSF = utils_1$1.getJSF;\n  var assert$1 = utils_1$1.assert;\n\n  function BaseCurve(type, conf) {\n    this.type = type;\n    this.p = new bn$1(conf.p, 16); // Use Montgomery, when there is no fast reduction for the prime\n\n    this.red = conf.prime ? bn$1.red(conf.prime) : bn$1.mont(this.p); // Useful for many curves\n\n    this.zero = new bn$1(0).toRed(this.red);\n    this.one = new bn$1(1).toRed(this.red);\n    this.two = new bn$1(2).toRed(this.red); // Curve configuration, optional\n\n    this.n = conf.n && new bn$1(conf.n, 16);\n    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed); // Temporary arrays\n\n    this._wnafT1 = new Array(4);\n    this._wnafT2 = new Array(4);\n    this._wnafT3 = new Array(4);\n    this._wnafT4 = new Array(4);\n    this._bitLength = this.n ? this.n.bitLength() : 0; // Generalized Greg Maxwell's trick\n\n    var adjustCount = this.n && this.p.div(this.n);\n\n    if (!adjustCount || adjustCount.cmpn(100) > 0) {\n      this.redN = null;\n    } else {\n      this._maxwellTrick = true;\n      this.redN = this.n.toRed(this.red);\n    }\n  }\n\n  var base = BaseCurve;\n\n  BaseCurve.prototype.point = function point() {\n    throw new Error('Not implemented');\n  };\n\n  BaseCurve.prototype.validate = function validate() {\n    throw new Error('Not implemented');\n  };\n\n  BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {\n    assert$1(p.precomputed);\n\n    var doubles = p._getDoubles();\n\n    var naf = getNAF(k, 1, this._bitLength);\n    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);\n    I /= 3; // Translate into more windowed form\n\n    var repr = [];\n\n    for (var j = 0; j < naf.length; j += doubles.step) {\n      var nafW = 0;\n\n      for (var k = j + doubles.step - 1; k >= j; k--) nafW = (nafW << 1) + naf[k];\n\n      repr.push(nafW);\n    }\n\n    var a = this.jpoint(null, null, null);\n    var b = this.jpoint(null, null, null);\n\n    for (var i = I; i > 0; i--) {\n      for (var j = 0; j < repr.length; j++) {\n        var nafW = repr[j];\n        if (nafW === i) b = b.mixedAdd(doubles.points[j]);else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());\n      }\n\n      a = a.add(b);\n    }\n\n    return a.toP();\n  };\n\n  BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {\n    var w = 4; // Precompute window\n\n    var nafPoints = p._getNAFPoints(w);\n\n    w = nafPoints.wnd;\n    var wnd = nafPoints.points; // Get NAF form\n\n    var naf = getNAF(k, w, this._bitLength); // Add `this`*(N+1) for every w-NAF index\n\n    var acc = this.jpoint(null, null, null);\n\n    for (var i = naf.length - 1; i >= 0; i--) {\n      // Count zeroes\n      for (var k = 0; i >= 0 && naf[i] === 0; i--) k++;\n\n      if (i >= 0) k++;\n      acc = acc.dblp(k);\n      if (i < 0) break;\n      var z = naf[i];\n      assert$1(z !== 0);\n\n      if (p.type === 'affine') {\n        // J +- P\n        if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());\n      } else {\n        // J +- J\n        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);else acc = acc.add(wnd[-z - 1 >> 1].neg());\n      }\n    }\n\n    return p.type === 'affine' ? acc.toP() : acc;\n  };\n\n  BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {\n    var wndWidth = this._wnafT1;\n    var wnd = this._wnafT2;\n    var naf = this._wnafT3; // Fill all arrays\n\n    var max = 0;\n\n    for (var i = 0; i < len; i++) {\n      var p = points[i];\n\n      var nafPoints = p._getNAFPoints(defW);\n\n      wndWidth[i] = nafPoints.wnd;\n      wnd[i] = nafPoints.points;\n    } // Comb small window NAFs\n\n\n    for (var i = len - 1; i >= 1; i -= 2) {\n      var a = i - 1;\n      var b = i;\n\n      if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {\n        naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);\n        naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);\n        max = Math.max(naf[a].length, max);\n        max = Math.max(naf[b].length, max);\n        continue;\n      }\n\n      var comb = [points[a],\n      /* 1 */\n      null,\n      /* 3 */\n      null,\n      /* 5 */\n      points[b]\n      /* 7 */\n      ]; // Try to avoid Projective points, if possible\n\n      if (points[a].y.cmp(points[b].y) === 0) {\n        comb[1] = points[a].add(points[b]);\n        comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n      } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {\n        comb[1] = points[a].toJ().mixedAdd(points[b]);\n        comb[2] = points[a].add(points[b].neg());\n      } else {\n        comb[1] = points[a].toJ().mixedAdd(points[b]);\n        comb[2] = points[a].toJ().mixedAdd(points[b].neg());\n      }\n\n      var index = [-3,\n      /* -1 -1 */\n      -1,\n      /* -1 0 */\n      -5,\n      /* -1 1 */\n      -7,\n      /* 0 -1 */\n      0,\n      /* 0 0 */\n      7,\n      /* 0 1 */\n      5,\n      /* 1 -1 */\n      1,\n      /* 1 0 */\n      3\n      /* 1 1 */\n      ];\n      var jsf = getJSF(coeffs[a], coeffs[b]);\n      max = Math.max(jsf[0].length, max);\n      naf[a] = new Array(max);\n      naf[b] = new Array(max);\n\n      for (var j = 0; j < max; j++) {\n        var ja = jsf[0][j] | 0;\n        var jb = jsf[1][j] | 0;\n        naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];\n        naf[b][j] = 0;\n        wnd[a] = comb;\n      }\n    }\n\n    var acc = this.jpoint(null, null, null);\n    var tmp = this._wnafT4;\n\n    for (var i = max; i >= 0; i--) {\n      var k = 0;\n\n      while (i >= 0) {\n        var zero = true;\n\n        for (var j = 0; j < len; j++) {\n          tmp[j] = naf[j][i] | 0;\n          if (tmp[j] !== 0) zero = false;\n        }\n\n        if (!zero) break;\n        k++;\n        i--;\n      }\n\n      if (i >= 0) k++;\n      acc = acc.dblp(k);\n      if (i < 0) break;\n\n      for (var j = 0; j < len; j++) {\n        var z = tmp[j];\n        var p;\n        if (z === 0) continue;else if (z > 0) p = wnd[j][z - 1 >> 1];else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();\n        if (p.type === 'affine') acc = acc.mixedAdd(p);else acc = acc.add(p);\n      }\n    } // Zeroify references\n\n\n    for (var i = 0; i < len; i++) wnd[i] = null;\n\n    if (jacobianResult) return acc;else return acc.toP();\n  };\n\n  function BasePoint(curve, type) {\n    this.curve = curve;\n    this.type = type;\n    this.precomputed = null;\n  }\n\n  BaseCurve.BasePoint = BasePoint;\n\n  BasePoint.prototype.eq = function eq()\n  /*other*/\n  {\n    throw new Error('Not implemented');\n  };\n\n  BasePoint.prototype.validate = function validate() {\n    return this.curve.validate(this);\n  };\n\n  BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {\n    bytes = utils_1$1.toArray(bytes, enc);\n    var len = this.p.byteLength(); // uncompressed, hybrid-odd, hybrid-even\n\n    if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) && bytes.length - 1 === 2 * len) {\n      if (bytes[0] === 0x06) assert$1(bytes[bytes.length - 1] % 2 === 0);else if (bytes[0] === 0x07) assert$1(bytes[bytes.length - 1] % 2 === 1);\n      var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));\n      return res;\n    } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) && bytes.length - 1 === len) {\n      return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);\n    }\n\n    throw new Error('Unknown point format');\n  };\n\n  BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {\n    return this.encode(enc, true);\n  };\n\n  BasePoint.prototype._encode = function _encode(compact) {\n    var len = this.curve.p.byteLength();\n    var x = this.getX().toArray('be', len);\n    if (compact) return [this.getY().isEven() ? 0x02 : 0x03].concat(x);\n    return [0x04].concat(x, this.getY().toArray('be', len));\n  };\n\n  BasePoint.prototype.encode = function encode(enc, compact) {\n    return utils_1$1.encode(this._encode(compact), enc);\n  };\n\n  BasePoint.prototype.precompute = function precompute(power) {\n    if (this.precomputed) return this;\n    var precomputed = {\n      doubles: null,\n      naf: null,\n      beta: null\n    };\n    precomputed.naf = this._getNAFPoints(8);\n    precomputed.doubles = this._getDoubles(4, power);\n    precomputed.beta = this._getBeta();\n    this.precomputed = precomputed;\n    return this;\n  };\n\n  BasePoint.prototype._hasDoubles = function _hasDoubles(k) {\n    if (!this.precomputed) return false;\n    var doubles = this.precomputed.doubles;\n    if (!doubles) return false;\n    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);\n  };\n\n  BasePoint.prototype._getDoubles = function _getDoubles(step, power) {\n    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;\n    var doubles = [this];\n    var acc = this;\n\n    for (var i = 0; i < power; i += step) {\n      for (var j = 0; j < step; j++) acc = acc.dbl();\n\n      doubles.push(acc);\n    }\n\n    return {\n      step: step,\n      points: doubles\n    };\n  };\n\n  BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {\n    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;\n    var res = [this];\n    var max = (1 << wnd) - 1;\n    var dbl = max === 1 ? null : this.dbl();\n\n    for (var i = 1; i < max; i++) res[i] = res[i - 1].add(dbl);\n\n    return {\n      wnd: wnd,\n      points: res\n    };\n  };\n\n  BasePoint.prototype._getBeta = function _getBeta() {\n    return null;\n  };\n\n  BasePoint.prototype.dblp = function dblp(k) {\n    var r = this;\n\n    for (var i = 0; i < k; i++) r = r.dbl();\n\n    return r;\n  };\n\n  'use strict';\n\n  var assert$2 = utils_1$1.assert;\n\n  function ShortCurve(conf) {\n    base.call(this, 'short', conf);\n    this.a = new bn$1(conf.a, 16).toRed(this.red);\n    this.b = new bn$1(conf.b, 16).toRed(this.red);\n    this.tinv = this.two.redInvm();\n    this.zeroA = this.a.fromRed().cmpn(0) === 0;\n    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0; // If the curve is endomorphic, precalculate beta and lambda\n\n    this.endo = this._getEndomorphism(conf);\n    this._endoWnafT1 = new Array(4);\n    this._endoWnafT2 = new Array(4);\n  }\n\n  inherits_browser(ShortCurve, base);\n  var short_1 = ShortCurve;\n\n  ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {\n    // No efficient endomorphism\n    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return; // Compute beta and lambda, that lambda * P = (beta * Px; Py)\n\n    var beta;\n    var lambda;\n\n    if (conf.beta) {\n      beta = new bn$1(conf.beta, 16).toRed(this.red);\n    } else {\n      var betas = this._getEndoRoots(this.p); // Choose the smallest beta\n\n\n      beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];\n      beta = beta.toRed(this.red);\n    }\n\n    if (conf.lambda) {\n      lambda = new bn$1(conf.lambda, 16);\n    } else {\n      // Choose the lambda that is matching selected beta\n      var lambdas = this._getEndoRoots(this.n);\n\n      if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {\n        lambda = lambdas[0];\n      } else {\n        lambda = lambdas[1];\n        assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);\n      }\n    } // Get basis vectors, used for balanced length-two representation\n\n\n    var basis;\n\n    if (conf.basis) {\n      basis = conf.basis.map(function (vec) {\n        return {\n          a: new bn$1(vec.a, 16),\n          b: new bn$1(vec.b, 16)\n        };\n      });\n    } else {\n      basis = this._getEndoBasis(lambda);\n    }\n\n    return {\n      beta: beta,\n      lambda: lambda,\n      basis: basis\n    };\n  };\n\n  ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {\n    // Find roots of for x^2 + x + 1 in F\n    // Root = (-1 +- Sqrt(-3)) / 2\n    //\n    var red = num === this.p ? this.red : bn$1.mont(num);\n    var tinv = new bn$1(2).toRed(red).redInvm();\n    var ntinv = tinv.redNeg();\n    var s = new bn$1(3).toRed(red).redNeg().redSqrt().redMul(tinv);\n    var l1 = ntinv.redAdd(s).fromRed();\n    var l2 = ntinv.redSub(s).fromRed();\n    return [l1, l2];\n  };\n\n  ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {\n    // aprxSqrt >= sqrt(this.n)\n    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2)); // 3.74\n    // Run EGCD, until r(L + 1) < aprxSqrt\n\n    var u = lambda;\n    var v = this.n.clone();\n    var x1 = new bn$1(1);\n    var y1 = new bn$1(0);\n    var x2 = new bn$1(0);\n    var y2 = new bn$1(1); // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)\n\n    var a0;\n    var b0; // First vector\n\n    var a1;\n    var b1; // Second vector\n\n    var a2;\n    var b2;\n    var prevR;\n    var i = 0;\n    var r;\n    var x;\n\n    while (u.cmpn(0) !== 0) {\n      var q = v.div(u);\n      r = v.sub(q.mul(u));\n      x = x2.sub(q.mul(x1));\n      var y = y2.sub(q.mul(y1));\n\n      if (!a1 && r.cmp(aprxSqrt) < 0) {\n        a0 = prevR.neg();\n        b0 = x1;\n        a1 = r.neg();\n        b1 = x;\n      } else if (a1 && ++i === 2) {\n        break;\n      }\n\n      prevR = r;\n      v = u;\n      u = r;\n      x2 = x1;\n      x1 = x;\n      y2 = y1;\n      y1 = y;\n    }\n\n    a2 = r.neg();\n    b2 = x;\n    var len1 = a1.sqr().add(b1.sqr());\n    var len2 = a2.sqr().add(b2.sqr());\n\n    if (len2.cmp(len1) >= 0) {\n      a2 = a0;\n      b2 = b0;\n    } // Normalize signs\n\n\n    if (a1.negative) {\n      a1 = a1.neg();\n      b1 = b1.neg();\n    }\n\n    if (a2.negative) {\n      a2 = a2.neg();\n      b2 = b2.neg();\n    }\n\n    return [{\n      a: a1,\n      b: b1\n    }, {\n      a: a2,\n      b: b2\n    }];\n  };\n\n  ShortCurve.prototype._endoSplit = function _endoSplit(k) {\n    var basis = this.endo.basis;\n    var v1 = basis[0];\n    var v2 = basis[1];\n    var c1 = v2.b.mul(k).divRound(this.n);\n    var c2 = v1.b.neg().mul(k).divRound(this.n);\n    var p1 = c1.mul(v1.a);\n    var p2 = c2.mul(v2.a);\n    var q1 = c1.mul(v1.b);\n    var q2 = c2.mul(v2.b); // Calculate answer\n\n    var k1 = k.sub(p1).sub(p2);\n    var k2 = q1.add(q2).neg();\n    return {\n      k1: k1,\n      k2: k2\n    };\n  };\n\n  ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {\n    x = new bn$1(x, 16);\n    if (!x.red) x = x.toRed(this.red);\n    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);\n    var y = y2.redSqrt();\n    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point'); // XXX Is there any way to tell if the number is odd without converting it\n    // to non-red form?\n\n    var isOdd = y.fromRed().isOdd();\n    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();\n    return this.point(x, y);\n  };\n\n  ShortCurve.prototype.validate = function validate(point) {\n    if (point.inf) return true;\n    var x = point.x;\n    var y = point.y;\n    var ax = this.a.redMul(x);\n    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);\n    return y.redSqr().redISub(rhs).cmpn(0) === 0;\n  };\n\n  ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {\n    var npoints = this._endoWnafT1;\n    var ncoeffs = this._endoWnafT2;\n\n    for (var i = 0; i < points.length; i++) {\n      var split = this._endoSplit(coeffs[i]);\n\n      var p = points[i];\n\n      var beta = p._getBeta();\n\n      if (split.k1.negative) {\n        split.k1.ineg();\n        p = p.neg(true);\n      }\n\n      if (split.k2.negative) {\n        split.k2.ineg();\n        beta = beta.neg(true);\n      }\n\n      npoints[i * 2] = p;\n      npoints[i * 2 + 1] = beta;\n      ncoeffs[i * 2] = split.k1;\n      ncoeffs[i * 2 + 1] = split.k2;\n    }\n\n    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult); // Clean-up references to points and coefficients\n\n\n    for (var j = 0; j < i * 2; j++) {\n      npoints[j] = null;\n      ncoeffs[j] = null;\n    }\n\n    return res;\n  };\n\n  function Point(curve, x, y, isRed) {\n    base.BasePoint.call(this, curve, 'affine');\n\n    if (x === null && y === null) {\n      this.x = null;\n      this.y = null;\n      this.inf = true;\n    } else {\n      this.x = new bn$1(x, 16);\n      this.y = new bn$1(y, 16); // Force redgomery representation when loading from JSON\n\n      if (isRed) {\n        this.x.forceRed(this.curve.red);\n        this.y.forceRed(this.curve.red);\n      }\n\n      if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n      if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n      this.inf = false;\n    }\n  }\n\n  inherits_browser(Point, base.BasePoint);\n\n  ShortCurve.prototype.point = function point(x, y, isRed) {\n    return new Point(this, x, y, isRed);\n  };\n\n  ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {\n    return Point.fromJSON(this, obj, red);\n  };\n\n  Point.prototype._getBeta = function _getBeta() {\n    if (!this.curve.endo) return;\n    var pre = this.precomputed;\n    if (pre && pre.beta) return pre.beta;\n    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);\n\n    if (pre) {\n      var curve = this.curve;\n\n      var endoMul = function (p) {\n        return curve.point(p.x.redMul(curve.endo.beta), p.y);\n      };\n\n      pre.beta = beta;\n      beta.precomputed = {\n        beta: null,\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: pre.naf.points.map(endoMul)\n        },\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: pre.doubles.points.map(endoMul)\n        }\n      };\n    }\n\n    return beta;\n  };\n\n  Point.prototype.toJSON = function toJSON() {\n    if (!this.precomputed) return [this.x, this.y];\n    return [this.x, this.y, this.precomputed && {\n      doubles: this.precomputed.doubles && {\n        step: this.precomputed.doubles.step,\n        points: this.precomputed.doubles.points.slice(1)\n      },\n      naf: this.precomputed.naf && {\n        wnd: this.precomputed.naf.wnd,\n        points: this.precomputed.naf.points.slice(1)\n      }\n    }];\n  };\n\n  Point.fromJSON = function fromJSON(curve, obj, red) {\n    if (typeof obj === 'string') obj = JSON.parse(obj);\n    var res = curve.point(obj[0], obj[1], red);\n    if (!obj[2]) return res;\n\n    function obj2point(obj) {\n      return curve.point(obj[0], obj[1], red);\n    }\n\n    var pre = obj[2];\n    res.precomputed = {\n      beta: null,\n      doubles: pre.doubles && {\n        step: pre.doubles.step,\n        points: [res].concat(pre.doubles.points.map(obj2point))\n      },\n      naf: pre.naf && {\n        wnd: pre.naf.wnd,\n        points: [res].concat(pre.naf.points.map(obj2point))\n      }\n    };\n    return res;\n  };\n\n  Point.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC Point Infinity>';\n    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';\n  };\n\n  Point.prototype.isInfinity = function isInfinity() {\n    return this.inf;\n  };\n\n  Point.prototype.add = function add(p) {\n    // O + P = P\n    if (this.inf) return p; // P + O = P\n\n    if (p.inf) return this; // P + P = 2P\n\n    if (this.eq(p)) return this.dbl(); // P + (-P) = O\n\n    if (this.neg().eq(p)) return this.curve.point(null, null); // P + Q = O\n\n    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);\n    var c = this.y.redSub(p.y);\n    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());\n    var nx = c.redSqr().redISub(this.x).redISub(p.x);\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  };\n\n  Point.prototype.dbl = function dbl() {\n    if (this.inf) return this; // 2P = O\n\n    var ys1 = this.y.redAdd(this.y);\n    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);\n    var a = this.curve.a;\n    var x2 = this.x.redSqr();\n    var dyinv = ys1.redInvm();\n    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);\n    var nx = c.redSqr().redISub(this.x.redAdd(this.x));\n    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);\n    return this.curve.point(nx, ny);\n  };\n\n  Point.prototype.getX = function getX() {\n    return this.x.fromRed();\n  };\n\n  Point.prototype.getY = function getY() {\n    return this.y.fromRed();\n  };\n\n  Point.prototype.mul = function mul(k) {\n    k = new bn$1(k, 16);\n    if (this.isInfinity()) return this;else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);else if (this.curve.endo) return this.curve._endoWnafMulAdd([this], [k]);else return this.curve._wnafMul(this, k);\n  };\n\n  Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {\n    var points = [this, p2];\n    var coeffs = [k1, k2];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);else return this.curve._wnafMulAdd(1, points, coeffs, 2);\n  };\n\n  Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {\n    var points = [this, p2];\n    var coeffs = [k1, k2];\n    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);\n  };\n\n  Point.prototype.eq = function eq(p) {\n    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);\n  };\n\n  Point.prototype.neg = function neg(_precompute) {\n    if (this.inf) return this;\n    var res = this.curve.point(this.x, this.y.redNeg());\n\n    if (_precompute && this.precomputed) {\n      var pre = this.precomputed;\n\n      var negate = function (p) {\n        return p.neg();\n      };\n\n      res.precomputed = {\n        naf: pre.naf && {\n          wnd: pre.naf.wnd,\n          points: pre.naf.points.map(negate)\n        },\n        doubles: pre.doubles && {\n          step: pre.doubles.step,\n          points: pre.doubles.points.map(negate)\n        }\n      };\n    }\n\n    return res;\n  };\n\n  Point.prototype.toJ = function toJ() {\n    if (this.inf) return this.curve.jpoint(null, null, null);\n    var res = this.curve.jpoint(this.x, this.y, this.curve.one);\n    return res;\n  };\n\n  function JPoint(curve, x, y, z) {\n    base.BasePoint.call(this, curve, 'jacobian');\n\n    if (x === null && y === null && z === null) {\n      this.x = this.curve.one;\n      this.y = this.curve.one;\n      this.z = new bn$1(0);\n    } else {\n      this.x = new bn$1(x, 16);\n      this.y = new bn$1(y, 16);\n      this.z = new bn$1(z, 16);\n    }\n\n    if (!this.x.red) this.x = this.x.toRed(this.curve.red);\n    if (!this.y.red) this.y = this.y.toRed(this.curve.red);\n    if (!this.z.red) this.z = this.z.toRed(this.curve.red);\n    this.zOne = this.z === this.curve.one;\n  }\n\n  inherits_browser(JPoint, base.BasePoint);\n\n  ShortCurve.prototype.jpoint = function jpoint(x, y, z) {\n    return new JPoint(this, x, y, z);\n  };\n\n  JPoint.prototype.toP = function toP() {\n    if (this.isInfinity()) return this.curve.point(null, null);\n    var zinv = this.z.redInvm();\n    var zinv2 = zinv.redSqr();\n    var ax = this.x.redMul(zinv2);\n    var ay = this.y.redMul(zinv2).redMul(zinv);\n    return this.curve.point(ax, ay);\n  };\n\n  JPoint.prototype.neg = function neg() {\n    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);\n  };\n\n  JPoint.prototype.add = function add(p) {\n    // O + P = P\n    if (this.isInfinity()) return p; // P + O = P\n\n    if (p.isInfinity()) return this; // 12M + 4S + 7A\n\n    var pz2 = p.z.redSqr();\n    var z2 = this.z.redSqr();\n    var u1 = this.x.redMul(pz2);\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y.redMul(pz2.redMul(p.z));\n    var s2 = p.y.redMul(z2.redMul(this.z));\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n\n    if (h.cmpn(0) === 0) {\n      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n    }\n\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(p.z).redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.mixedAdd = function mixedAdd(p) {\n    // O + P = P\n    if (this.isInfinity()) return p.toJ(); // P + O = P\n\n    if (p.isInfinity()) return this; // 8M + 3S + 7A\n\n    var z2 = this.z.redSqr();\n    var u1 = this.x;\n    var u2 = p.x.redMul(z2);\n    var s1 = this.y;\n    var s2 = p.y.redMul(z2).redMul(this.z);\n    var h = u1.redSub(u2);\n    var r = s1.redSub(s2);\n\n    if (h.cmpn(0) === 0) {\n      if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);else return this.dbl();\n    }\n\n    var h2 = h.redSqr();\n    var h3 = h2.redMul(h);\n    var v = u1.redMul(h2);\n    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);\n    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));\n    var nz = this.z.redMul(h);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.dblp = function dblp(pow) {\n    if (pow === 0) return this;\n    if (this.isInfinity()) return this;\n    if (!pow) return this.dbl();\n\n    if (this.curve.zeroA || this.curve.threeA) {\n      var r = this;\n\n      for (var i = 0; i < pow; i++) r = r.dbl();\n\n      return r;\n    } // 1M + 2S + 1A + N * (4S + 5M + 8A)\n    // N = 1 => 6M + 6S + 9A\n\n\n    var a = this.curve.a;\n    var tinv = this.curve.tinv;\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr(); // Reuse results\n\n    var jyd = jy.redAdd(jy);\n\n    for (var i = 0; i < pow; i++) {\n      var jx2 = jx.redSqr();\n      var jyd2 = jyd.redSqr();\n      var jyd4 = jyd2.redSqr();\n      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n      var t1 = jx.redMul(jyd2);\n      var nx = c.redSqr().redISub(t1.redAdd(t1));\n      var t2 = t1.redISub(nx);\n      var dny = c.redMul(t2);\n      dny = dny.redIAdd(dny).redISub(jyd4);\n      var nz = jyd.redMul(jz);\n      if (i + 1 < pow) jz4 = jz4.redMul(jyd4);\n      jx = nx;\n      jz = nz;\n      jyd = dny;\n    }\n\n    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);\n  };\n\n  JPoint.prototype.dbl = function dbl() {\n    if (this.isInfinity()) return this;\n    if (this.curve.zeroA) return this._zeroDbl();else if (this.curve.threeA) return this._threeDbl();else return this._dbl();\n  };\n\n  JPoint.prototype._zeroDbl = function _zeroDbl() {\n    var nx;\n    var ny;\n    var nz; // Z = 1\n\n    if (this.zOne) {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n      //     #doubling-mdbl-2007-bl\n      // 1M + 5S + 14A\n      // XX = X1^2\n      var xx = this.x.redSqr(); // YY = Y1^2\n\n      var yy = this.y.redSqr(); // YYYY = YY^2\n\n      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      s = s.redIAdd(s); // M = 3 * XX + a; a = 0\n\n      var m = xx.redAdd(xx).redIAdd(xx); // T = M ^ 2 - 2*S\n\n      var t = m.redSqr().redISub(s).redISub(s); // 8 * YYYY\n\n      var yyyy8 = yyyy.redIAdd(yyyy);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      yyyy8 = yyyy8.redIAdd(yyyy8); // X3 = T\n\n      nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2*Y1\n\n      nz = this.y.redAdd(this.y);\n    } else {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html\n      //     #doubling-dbl-2009-l\n      // 2M + 5S + 13A\n      // A = X1^2\n      var a = this.x.redSqr(); // B = Y1^2\n\n      var b = this.y.redSqr(); // C = B^2\n\n      var c = b.redSqr(); // D = 2 * ((X1 + B)^2 - A - C)\n\n      var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);\n      d = d.redIAdd(d); // E = 3 * A\n\n      var e = a.redAdd(a).redIAdd(a); // F = E^2\n\n      var f = e.redSqr(); // 8 * C\n\n      var c8 = c.redIAdd(c);\n      c8 = c8.redIAdd(c8);\n      c8 = c8.redIAdd(c8); // X3 = F - 2 * D\n\n      nx = f.redISub(d).redISub(d); // Y3 = E * (D - X3) - 8 * C\n\n      ny = e.redMul(d.redISub(nx)).redISub(c8); // Z3 = 2 * Y1 * Z1\n\n      nz = this.y.redMul(this.z);\n      nz = nz.redIAdd(nz);\n    }\n\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype._threeDbl = function _threeDbl() {\n    var nx;\n    var ny;\n    var nz; // Z = 1\n\n    if (this.zOne) {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html\n      //     #doubling-mdbl-2007-bl\n      // 1M + 5S + 15A\n      // XX = X1^2\n      var xx = this.x.redSqr(); // YY = Y1^2\n\n      var yy = this.y.redSqr(); // YYYY = YY^2\n\n      var yyyy = yy.redSqr(); // S = 2 * ((X1 + YY)^2 - XX - YYYY)\n\n      var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n      s = s.redIAdd(s); // M = 3 * XX + a\n\n      var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a); // T = M^2 - 2 * S\n\n      var t = m.redSqr().redISub(s).redISub(s); // X3 = T\n\n      nx = t; // Y3 = M * (S - T) - 8 * YYYY\n\n      var yyyy8 = yyyy.redIAdd(yyyy);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      yyyy8 = yyyy8.redIAdd(yyyy8);\n      ny = m.redMul(s.redISub(t)).redISub(yyyy8); // Z3 = 2 * Y1\n\n      nz = this.y.redAdd(this.y);\n    } else {\n      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b\n      // 3M + 5S\n      // delta = Z1^2\n      var delta = this.z.redSqr(); // gamma = Y1^2\n\n      var gamma = this.y.redSqr(); // beta = X1 * gamma\n\n      var beta = this.x.redMul(gamma); // alpha = 3 * (X1 - delta) * (X1 + delta)\n\n      var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));\n      alpha = alpha.redAdd(alpha).redIAdd(alpha); // X3 = alpha^2 - 8 * beta\n\n      var beta4 = beta.redIAdd(beta);\n      beta4 = beta4.redIAdd(beta4);\n      var beta8 = beta4.redAdd(beta4);\n      nx = alpha.redSqr().redISub(beta8); // Z3 = (Y1 + Z1)^2 - gamma - delta\n\n      nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta); // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2\n\n      var ggamma8 = gamma.redSqr();\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ggamma8 = ggamma8.redIAdd(ggamma8);\n      ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);\n    }\n\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype._dbl = function _dbl() {\n    var a = this.curve.a; // 4M + 6S + 10A\n\n    var jx = this.x;\n    var jy = this.y;\n    var jz = this.z;\n    var jz4 = jz.redSqr().redSqr();\n    var jx2 = jx.redSqr();\n    var jy2 = jy.redSqr();\n    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));\n    var jxd4 = jx.redAdd(jx);\n    jxd4 = jxd4.redIAdd(jxd4);\n    var t1 = jxd4.redMul(jy2);\n    var nx = c.redSqr().redISub(t1.redAdd(t1));\n    var t2 = t1.redISub(nx);\n    var jyd8 = jy2.redSqr();\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    jyd8 = jyd8.redIAdd(jyd8);\n    var ny = c.redMul(t2).redISub(jyd8);\n    var nz = jy.redAdd(jy).redMul(jz);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.trpl = function trpl() {\n    if (!this.curve.zeroA) return this.dbl().add(this); // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl\n    // 5M + 10S + ...\n    // XX = X1^2\n\n    var xx = this.x.redSqr(); // YY = Y1^2\n\n    var yy = this.y.redSqr(); // ZZ = Z1^2\n\n    var zz = this.z.redSqr(); // YYYY = YY^2\n\n    var yyyy = yy.redSqr(); // M = 3 * XX + a * ZZ2; a = 0\n\n    var m = xx.redAdd(xx).redIAdd(xx); // MM = M^2\n\n    var mm = m.redSqr(); // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM\n\n    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);\n    e = e.redIAdd(e);\n    e = e.redAdd(e).redIAdd(e);\n    e = e.redISub(mm); // EE = E^2\n\n    var ee = e.redSqr(); // T = 16*YYYY\n\n    var t = yyyy.redIAdd(yyyy);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t);\n    t = t.redIAdd(t); // U = (M + E)^2 - MM - EE - T\n\n    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t); // X3 = 4 * (X1 * EE - 4 * YY * U)\n\n    var yyu4 = yy.redMul(u);\n    yyu4 = yyu4.redIAdd(yyu4);\n    yyu4 = yyu4.redIAdd(yyu4);\n    var nx = this.x.redMul(ee).redISub(yyu4);\n    nx = nx.redIAdd(nx);\n    nx = nx.redIAdd(nx); // Y3 = 8 * Y1 * (U * (T - U) - E * EE)\n\n    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny);\n    ny = ny.redIAdd(ny); // Z3 = (Z1 + E)^2 - ZZ - EE\n\n    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);\n    return this.curve.jpoint(nx, ny, nz);\n  };\n\n  JPoint.prototype.mul = function mul(k, kbase) {\n    k = new bn$1(k, kbase);\n    return this.curve._wnafMul(this, k);\n  };\n\n  JPoint.prototype.eq = function eq(p) {\n    if (p.type === 'affine') return this.eq(p.toJ());\n    if (this === p) return true; // x1 * z2^2 == x2 * z1^2\n\n    var z2 = this.z.redSqr();\n    var pz2 = p.z.redSqr();\n    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false; // y1 * z2^3 == y2 * z1^3\n\n    var z3 = z2.redMul(this.z);\n    var pz3 = pz2.redMul(p.z);\n    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;\n  };\n\n  JPoint.prototype.eqXToP = function eqXToP(x) {\n    var zs = this.z.redSqr();\n    var rx = x.toRed(this.curve.red).redMul(zs);\n    if (this.x.cmp(rx) === 0) return true;\n    var xc = x.clone();\n    var t = this.curve.redN.redMul(zs);\n\n    for (;;) {\n      xc.iadd(this.curve.n);\n      if (xc.cmp(this.curve.p) >= 0) return false;\n      rx.redIAdd(t);\n      if (this.x.cmp(rx) === 0) return true;\n    }\n  };\n\n  JPoint.prototype.inspect = function inspect() {\n    if (this.isInfinity()) return '<EC JPoint Infinity>';\n    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';\n  };\n\n  JPoint.prototype.isInfinity = function isInfinity() {\n    // XXX This code assumes that zero is always zero in red\n    return this.z.cmpn(0) === 0;\n  };\n\n  var mont = {};\n  var edwards = {};\n  var curve_1 = createCommonjsModule(function (module, exports) {\n    'use strict';\n\n    var curve = exports;\n    curve.base = base;\n    curve.short = short_1;\n    curve.mont = mont;\n    curve.edwards = edwards;\n  });\n  var secp256k1 = undefined;\n  var curves_1 = createCommonjsModule(function (module, exports) {\n    'use strict';\n\n    var curves = exports;\n    var assert = utils_1$1.assert;\n\n    function PresetCurve(options) {\n      if (options.type === 'short') this.curve = new curve_1.short(options);else if (options.type === 'edwards') this.curve = new curve_1.edwards(options);else this.curve = new curve_1.mont(options);\n      this.g = this.curve.g;\n      this.n = this.curve.n;\n      this.hash = options.hash;\n      assert(this.g.validate(), 'Invalid curve');\n      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n    }\n\n    curves.PresetCurve = PresetCurve;\n\n    function defineCurve(name, options) {\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        get: function () {\n          var curve = new PresetCurve(options);\n          Object.defineProperty(curves, name, {\n            configurable: true,\n            enumerable: true,\n            value: curve\n          });\n          return curve;\n        }\n      });\n    }\n\n    defineCurve('p192', {\n      type: 'short',\n      prime: 'p192',\n      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012', '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811']\n    });\n    defineCurve('p224', {\n      type: 'short',\n      prime: 'p224',\n      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21', 'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34']\n    });\n    defineCurve('p256', {\n      type: 'short',\n      prime: null,\n      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296', '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5']\n    });\n    defineCurve('p384', {\n      type: 'short',\n      prime: null,\n      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 ffffffff',\n      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'fffffffe ffffffff 00000000 00000000 fffffffc',\n      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' + '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' + 'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n      hash: hash_1.sha384,\n      gRed: false,\n      g: ['aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' + '5502f25d bf55296c 3a545e38 72760ab7', '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' + '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f']\n    });\n    defineCurve('p521', {\n      type: 'short',\n      prime: null,\n      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff',\n      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff ffffffff ffffffff fffffffc',\n      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' + '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' + '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' + 'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' + 'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n      hash: hash_1.sha512,\n      gRed: false,\n      g: ['000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' + '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' + 'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66', '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' + '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' + '3fad0761 353c7086 a272c240 88be9476 9fd16650']\n    });\n    defineCurve('curve25519', {\n      type: 'mont',\n      prime: 'p25519',\n      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n      a: '76d06',\n      b: '1',\n      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['9']\n    });\n    defineCurve('ed25519', {\n      type: 'edwards',\n      prime: 'p25519',\n      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n      a: '-1',\n      c: '1',\n      // -121665 * (121666^(-1)) (mod P)\n      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n      hash: hash_1.sha256,\n      gRed: false,\n      g: ['216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a', // 4/5\n      '6666666666666666666666666666666666666666666666666666666666666658']\n    });\n    var pre;\n\n    try {\n      pre = secp256k1;\n    } catch (e) {\n      pre = undefined;\n    }\n\n    defineCurve('secp256k1', {\n      type: 'short',\n      prime: 'k256',\n      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n      a: '0',\n      b: '7',\n      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n      h: '1',\n      hash: hash_1.sha256,\n      // Precomputed endomorphism\n      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n      basis: [{\n        a: '3086d221a7d46bcde86c90e49284eb15',\n        b: '-e4437ed6010e88286f547fa90abfe4c3'\n      }, {\n        a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n        b: '3086d221a7d46bcde86c90e49284eb15'\n      }],\n      gRed: false,\n      g: ['79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798', '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8', pre]\n    });\n  });\n  'use strict';\n\n  function HmacDRBG(options) {\n    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);\n    this.hash = options.hash;\n    this.predResist = !!options.predResist;\n    this.outLen = this.hash.outSize;\n    this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n    this._reseed = null;\n    this.reseedInterval = null;\n    this.K = null;\n    this.V = null;\n    var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');\n    var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');\n    var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n    this._init(entropy, nonce, pers);\n  }\n\n  var hmacDrbg = HmacDRBG;\n\n  HmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n    var seed = entropy.concat(nonce).concat(pers);\n    this.K = new Array(this.outLen / 8);\n    this.V = new Array(this.outLen / 8);\n\n    for (var i = 0; i < this.V.length; i++) {\n      this.K[i] = 0x00;\n      this.V[i] = 0x01;\n    }\n\n    this._update(seed);\n\n    this._reseed = 1;\n    this.reseedInterval = 0x1000000000000; // 2^48\n  };\n\n  HmacDRBG.prototype._hmac = function hmac() {\n    return new hash_1.hmac(this.hash, this.K);\n  };\n\n  HmacDRBG.prototype._update = function update(seed) {\n    var kmac = this._hmac().update(this.V).update([0x00]);\n\n    if (seed) kmac = kmac.update(seed);\n    this.K = kmac.digest();\n    this.V = this._hmac().update(this.V).digest();\n    if (!seed) return;\n    this.K = this._hmac().update(this.V).update([0x01]).update(seed).digest();\n    this.V = this._hmac().update(this.V).digest();\n  };\n\n  HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n    // Optional entropy enc\n    if (typeof entropyEnc !== 'string') {\n      addEnc = add;\n      add = entropyEnc;\n      entropyEnc = null;\n    }\n\n    entropy = utils_1.toArray(entropy, entropyEnc);\n    add = utils_1.toArray(add, addEnc);\n    minimalisticAssert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n    this._update(entropy.concat(add || []));\n\n    this._reseed = 1;\n  };\n\n  HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required'); // Optional encoding\n\n    if (typeof enc !== 'string') {\n      addEnc = add;\n      add = enc;\n      enc = null;\n    } // Optional additional data\n\n\n    if (add) {\n      add = utils_1.toArray(add, addEnc || 'hex');\n\n      this._update(add);\n    }\n\n    var temp = [];\n\n    while (temp.length < len) {\n      this.V = this._hmac().update(this.V).digest();\n      temp = temp.concat(this.V);\n    }\n\n    var res = temp.slice(0, len);\n\n    this._update(add);\n\n    this._reseed++;\n    return utils_1.encode(res, enc);\n  };\n\n  'use strict';\n\n  var assert$3 = utils_1$1.assert;\n\n  function KeyPair(ec, options) {\n    this.ec = ec;\n    this.priv = null;\n    this.pub = null; // KeyPair(ec, { priv: ..., pub: ... })\n\n    if (options.priv) this._importPrivate(options.priv, options.privEnc);\n    if (options.pub) this._importPublic(options.pub, options.pubEnc);\n  }\n\n  var key = KeyPair;\n\n  KeyPair.fromPublic = function fromPublic(ec, pub, enc) {\n    if (pub instanceof KeyPair) return pub;\n    return new KeyPair(ec, {\n      pub: pub,\n      pubEnc: enc\n    });\n  };\n\n  KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {\n    if (priv instanceof KeyPair) return priv;\n    return new KeyPair(ec, {\n      priv: priv,\n      privEnc: enc\n    });\n  };\n\n  KeyPair.prototype.validate = function validate() {\n    var pub = this.getPublic();\n    if (pub.isInfinity()) return {\n      result: false,\n      reason: 'Invalid public key'\n    };\n    if (!pub.validate()) return {\n      result: false,\n      reason: 'Public key is not a point'\n    };\n    if (!pub.mul(this.ec.curve.n).isInfinity()) return {\n      result: false,\n      reason: 'Public key * N != O'\n    };\n    return {\n      result: true,\n      reason: null\n    };\n  };\n\n  KeyPair.prototype.getPublic = function getPublic(compact, enc) {\n    // compact is optional argument\n    if (typeof compact === 'string') {\n      enc = compact;\n      compact = null;\n    }\n\n    if (!this.pub) this.pub = this.ec.g.mul(this.priv);\n    if (!enc) return this.pub;\n    return this.pub.encode(enc, compact);\n  };\n\n  KeyPair.prototype.getPrivate = function getPrivate(enc) {\n    if (enc === 'hex') return this.priv.toString(16, 2);else return this.priv;\n  };\n\n  KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {\n    this.priv = new bn$1(key, enc || 16); // Ensure that the priv won't be bigger than n, otherwise we may fail\n    // in fixed multiplication method\n\n    this.priv = this.priv.umod(this.ec.curve.n);\n  };\n\n  KeyPair.prototype._importPublic = function _importPublic(key, enc) {\n    if (key.x || key.y) {\n      // Montgomery points only have an `x` coordinate.\n      // Weierstrass/Edwards points on the other hand have both `x` and\n      // `y` coordinates.\n      if (this.ec.curve.type === 'mont') {\n        assert$3(key.x, 'Need x coordinate');\n      } else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') {\n        assert$3(key.x && key.y, 'Need both x and y coordinate');\n      }\n\n      this.pub = this.ec.curve.point(key.x, key.y);\n      return;\n    }\n\n    this.pub = this.ec.curve.decodePoint(key, enc);\n  }; // ECDH\n\n\n  KeyPair.prototype.derive = function derive(pub) {\n    return pub.mul(this.priv).getX();\n  }; // ECDSA\n\n\n  KeyPair.prototype.sign = function sign(msg, enc, options) {\n    return this.ec.sign(msg, this, enc, options);\n  };\n\n  KeyPair.prototype.verify = function verify(msg, signature) {\n    return this.ec.verify(msg, signature, this);\n  };\n\n  KeyPair.prototype.inspect = function inspect() {\n    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';\n  };\n\n  'use strict';\n\n  var assert$4 = utils_1$1.assert;\n\n  function Signature(options, enc) {\n    if (options instanceof Signature) return options;\n    if (this._importDER(options, enc)) return;\n    assert$4(options.r && options.s, 'Signature without r or s');\n    this.r = new bn$1(options.r, 16);\n    this.s = new bn$1(options.s, 16);\n    if (options.recoveryParam === undefined) this.recoveryParam = null;else this.recoveryParam = options.recoveryParam;\n  }\n\n  var signature = Signature;\n\n  function Position() {\n    this.place = 0;\n  }\n\n  function getLength(buf, p) {\n    var initial = buf[p.place++];\n\n    if (!(initial & 0x80)) {\n      return initial;\n    }\n\n    var octetLen = initial & 0xf; // Indefinite length or overflow\n\n    if (octetLen === 0 || octetLen > 4) {\n      return false;\n    }\n\n    var val = 0;\n\n    for (var i = 0, off = p.place; i < octetLen; i++, off++) {\n      val <<= 8;\n      val |= buf[off];\n      val >>>= 0;\n    } // Leading zeroes\n\n\n    if (val <= 0x7f) {\n      return false;\n    }\n\n    p.place = off;\n    return val;\n  }\n\n  function rmPadding(buf) {\n    var i = 0;\n    var len = buf.length - 1;\n\n    while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {\n      i++;\n    }\n\n    if (i === 0) {\n      return buf;\n    }\n\n    return buf.slice(i);\n  }\n\n  Signature.prototype._importDER = function _importDER(data, enc) {\n    data = utils_1$1.toArray(data, enc);\n    var p = new Position();\n\n    if (data[p.place++] !== 0x30) {\n      return false;\n    }\n\n    var len = getLength(data, p);\n\n    if (len === false) {\n      return false;\n    }\n\n    if (len + p.place !== data.length) {\n      return false;\n    }\n\n    if (data[p.place++] !== 0x02) {\n      return false;\n    }\n\n    var rlen = getLength(data, p);\n\n    if (rlen === false) {\n      return false;\n    }\n\n    var r = data.slice(p.place, rlen + p.place);\n    p.place += rlen;\n\n    if (data[p.place++] !== 0x02) {\n      return false;\n    }\n\n    var slen = getLength(data, p);\n\n    if (slen === false) {\n      return false;\n    }\n\n    if (data.length !== slen + p.place) {\n      return false;\n    }\n\n    var s = data.slice(p.place, slen + p.place);\n\n    if (r[0] === 0) {\n      if (r[1] & 0x80) {\n        r = r.slice(1);\n      } else {\n        // Leading zeroes\n        return false;\n      }\n    }\n\n    if (s[0] === 0) {\n      if (s[1] & 0x80) {\n        s = s.slice(1);\n      } else {\n        // Leading zeroes\n        return false;\n      }\n    }\n\n    this.r = new bn$1(r);\n    this.s = new bn$1(s);\n    this.recoveryParam = null;\n    return true;\n  };\n\n  function constructLength(arr, len) {\n    if (len < 0x80) {\n      arr.push(len);\n      return;\n    }\n\n    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);\n    arr.push(octets | 0x80);\n\n    while (--octets) {\n      arr.push(len >>> (octets << 3) & 0xff);\n    }\n\n    arr.push(len);\n  }\n\n  Signature.prototype.toDER = function toDER(enc) {\n    var r = this.r.toArray();\n    var s = this.s.toArray(); // Pad values\n\n    if (r[0] & 0x80) r = [0].concat(r); // Pad values\n\n    if (s[0] & 0x80) s = [0].concat(s);\n    r = rmPadding(r);\n    s = rmPadding(s);\n\n    while (!s[0] && !(s[1] & 0x80)) {\n      s = s.slice(1);\n    }\n\n    var arr = [0x02];\n    constructLength(arr, r.length);\n    arr = arr.concat(r);\n    arr.push(0x02);\n    constructLength(arr, s.length);\n    var backHalf = arr.concat(s);\n    var res = [0x30];\n    constructLength(res, backHalf.length);\n    res = res.concat(backHalf);\n    return utils_1$1.encode(res, enc);\n  };\n\n  'use strict';\n\n  var assert$5 = utils_1$1.assert;\n\n  function EC(options) {\n    if (!(this instanceof EC)) return new EC(options); // Shortcut `elliptic.ec(curve-name)`\n\n    if (typeof options === 'string') {\n      assert$5(curves_1.hasOwnProperty(options), 'Unknown curve ' + options);\n      options = curves_1[options];\n    } // Shortcut for `elliptic.ec(elliptic.curves.curveName)`\n\n\n    if (options instanceof curves_1.PresetCurve) options = {\n      curve: options\n    };\n    this.curve = options.curve.curve;\n    this.n = this.curve.n;\n    this.nh = this.n.ushrn(1);\n    this.g = this.curve.g; // Point on curve\n\n    this.g = options.curve.g;\n    this.g.precompute(options.curve.n.bitLength() + 1); // Hash for function for DRBG\n\n    this.hash = options.hash || options.curve.hash;\n  }\n\n  var ec = EC;\n\n  EC.prototype.keyPair = function keyPair(options) {\n    return new key(this, options);\n  };\n\n  EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {\n    return key.fromPrivate(this, priv, enc);\n  };\n\n  EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {\n    return key.fromPublic(this, pub, enc);\n  };\n\n  EC.prototype.genKeyPair = function genKeyPair(options) {\n    if (!options) options = {}; // Instantiate Hmac_DRBG\n\n    var drbg = new hmacDrbg({\n      hash: this.hash,\n      pers: options.pers,\n      persEnc: options.persEnc || 'utf8',\n      entropy: options.entropy || brorand(this.hash.hmacStrength),\n      entropyEnc: options.entropy && options.entropyEnc || 'utf8',\n      nonce: this.n.toArray()\n    });\n    var bytes = this.n.byteLength();\n    var ns2 = this.n.sub(new bn$1(2));\n\n    do {\n      var priv = new bn$1(drbg.generate(bytes));\n      if (priv.cmp(ns2) > 0) continue;\n      priv.iaddn(1);\n      return this.keyFromPrivate(priv);\n    } while (true);\n  };\n\n  EC.prototype._truncateToN = function truncateToN(msg, truncOnly) {\n    var delta = msg.byteLength() * 8 - this.n.bitLength();\n    if (delta > 0) msg = msg.ushrn(delta);\n    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);else return msg;\n  };\n\n  EC.prototype.sign = function sign(msg, key, enc, options) {\n    if (typeof enc === 'object') {\n      options = enc;\n      enc = null;\n    }\n\n    if (!options) options = {};\n    key = this.keyFromPrivate(key, enc);\n    msg = this._truncateToN(new bn$1(msg, 16)); // Zero-extend key to provide enough entropy\n\n    var bytes = this.n.byteLength();\n    var bkey = key.getPrivate().toArray('be', bytes); // Zero-extend nonce to have the same byte size as N\n\n    var nonce = msg.toArray('be', bytes); // Instantiate Hmac_DRBG\n\n    var drbg = new hmacDrbg({\n      hash: this.hash,\n      entropy: bkey,\n      nonce: nonce,\n      pers: options.pers,\n      persEnc: options.persEnc || 'utf8'\n    }); // Number of bytes to generate\n\n    var ns1 = this.n.sub(new bn$1(1));\n\n    for (var iter = 0; true; iter++) {\n      var k = options.k ? options.k(iter) : new bn$1(drbg.generate(this.n.byteLength()));\n      k = this._truncateToN(k, true);\n      if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;\n      var kp = this.g.mul(k);\n      if (kp.isInfinity()) continue;\n      var kpX = kp.getX();\n      var r = kpX.umod(this.n);\n      if (r.cmpn(0) === 0) continue;\n      var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));\n      s = s.umod(this.n);\n      if (s.cmpn(0) === 0) continue;\n      var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0); // Use complement of `s`, if it is > `n / 2`\n\n      if (options.canonical && s.cmp(this.nh) > 0) {\n        s = this.n.sub(s);\n        recoveryParam ^= 1;\n      }\n\n      return new signature({\n        r: r,\n        s: s,\n        recoveryParam: recoveryParam\n      });\n    }\n  };\n\n  EC.prototype.verify = function verify(msg, signature$1, key, enc) {\n    msg = this._truncateToN(new bn$1(msg, 16));\n    key = this.keyFromPublic(key, enc);\n    signature$1 = new signature(signature$1, 'hex'); // Perform primitive values validation\n\n    var r = signature$1.r;\n    var s = signature$1.s;\n    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;\n    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false; // Validate signature\n\n    var sinv = s.invm(this.n);\n    var u1 = sinv.mul(msg).umod(this.n);\n    var u2 = sinv.mul(r).umod(this.n);\n\n    if (!this.curve._maxwellTrick) {\n      var p = this.g.mulAdd(u1, key.getPublic(), u2);\n      if (p.isInfinity()) return false;\n      return p.getX().umod(this.n).cmp(r) === 0;\n    } // NOTE: Greg Maxwell's trick, inspired by:\n    // https://git.io/vad3K\n\n\n    var p = this.g.jmulAdd(u1, key.getPublic(), u2);\n    if (p.isInfinity()) return false; // Compare `p.x` of Jacobian point with `r`,\n    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the\n    // inverse of `p.z^2`\n\n    return p.eqXToP(r);\n  };\n\n  EC.prototype.recoverPubKey = function (msg, signature$1, j, enc) {\n    assert$5((3 & j) === j, 'The recovery param is more than two bits');\n    signature$1 = new signature(signature$1, enc);\n    var n = this.n;\n    var e = new bn$1(msg);\n    var r = signature$1.r;\n    var s = signature$1.s; // A set LSB signifies that the y-coordinate is odd\n\n    var isYOdd = j & 1;\n    var isSecondKey = j >> 1;\n    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate'); // 1.1. Let x = r + jn.\n\n    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);else r = this.curve.pointFromX(r, isYOdd);\n    var rInv = signature$1.r.invm(n);\n    var s1 = n.sub(e).mul(rInv).umod(n);\n    var s2 = s.mul(rInv).umod(n); // 1.6.1 Compute Q = r^-1 (sR -  eG)\n    //               Q = r^-1 (sR + -eG)\n\n    return this.g.mulAdd(s1, r, s2);\n  };\n\n  EC.prototype.getKeyRecoveryParam = function (e, signature$1, Q, enc) {\n    signature$1 = new signature(signature$1, enc);\n    if (signature$1.recoveryParam !== null) return signature$1.recoveryParam;\n\n    for (var i = 0; i < 4; i++) {\n      var Qprime;\n\n      try {\n        Qprime = this.recoverPubKey(e, signature$1, i);\n      } catch (e) {\n        continue;\n      }\n\n      if (Qprime.eq(Q)) return i;\n    }\n\n    throw new Error('Unable to find valid recovery factor');\n  };\n\n  var eddsa = {};\n  var require$$0$1 = getCjsExportFromNamespace(_package$1);\n  var elliptic_1 = createCommonjsModule(function (module, exports) {\n    'use strict';\n\n    var elliptic = exports;\n    elliptic.version = require$$0$1.version;\n    elliptic.utils = utils_1$1;\n    elliptic.rand = brorand;\n    elliptic.curve = curve_1;\n    elliptic.curves = curves_1; // Protocols\n\n    elliptic.ec = ec;\n    elliptic.eddsa = eddsa;\n  });\n  var elliptic_2 = elliptic_1.ec;\n\n  var _version$q = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"signing-key/5.0.4\";\n  });\n\n  var _version$r = unwrapExports(_version$q);\n\n  var _version_1$d = _version$q.version;\n  var lib$f = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$q.version);\n    var _curve = null;\n\n    function getCurve() {\n      if (!_curve) {\n        _curve = new elliptic_1.ec(\"secp256k1\");\n      }\n\n      return _curve;\n    }\n\n    var SigningKey =\n    /** @class */\n    function () {\n      function SigningKey(privateKey) {\n        lib$3.defineReadOnly(this, \"curve\", \"secp256k1\");\n        lib$3.defineReadOnly(this, \"privateKey\", lib$1.hexlify(privateKey));\n        var keyPair = getCurve().keyFromPrivate(lib$1.arrayify(this.privateKey));\n        lib$3.defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        lib$3.defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n        lib$3.defineReadOnly(this, \"_isSigningKey\", true);\n      }\n\n      SigningKey.prototype._addPoint = function (other) {\n        var p0 = getCurve().keyFromPublic(lib$1.arrayify(this.publicKey));\n        var p1 = getCurve().keyFromPublic(lib$1.arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n      };\n\n      SigningKey.prototype.signDigest = function (digest) {\n        var keyPair = getCurve().keyFromPrivate(lib$1.arrayify(this.privateKey));\n        var signature = keyPair.sign(lib$1.arrayify(digest), {\n          canonical: true\n        });\n        return lib$1.splitSignature({\n          recoveryParam: signature.recoveryParam,\n          r: lib$1.hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n          s: lib$1.hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n        });\n      };\n\n      SigningKey.prototype.computeSharedSecret = function (otherKey) {\n        var keyPair = getCurve().keyFromPrivate(lib$1.arrayify(this.privateKey));\n        var otherKeyPair = getCurve().keyFromPublic(lib$1.arrayify(computePublicKey(otherKey)));\n        return lib$1.hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n      };\n\n      SigningKey.isSigningKey = function (value) {\n        return !!(value && value._isSigningKey);\n      };\n\n      return SigningKey;\n    }();\n\n    exports.SigningKey = SigningKey;\n\n    function recoverPublicKey(digest, signature) {\n      var sig = lib$1.splitSignature(signature);\n      var rs = {\n        r: lib$1.arrayify(sig.r),\n        s: lib$1.arrayify(sig.s)\n      };\n      return \"0x\" + getCurve().recoverPubKey(lib$1.arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n    }\n\n    exports.recoverPublicKey = recoverPublicKey;\n\n    function computePublicKey(key, compressed) {\n      var bytes = lib$1.arrayify(key);\n\n      if (bytes.length === 32) {\n        var signingKey = new SigningKey(bytes);\n\n        if (compressed) {\n          return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n\n        return signingKey.publicKey;\n      } else if (bytes.length === 33) {\n        if (compressed) {\n          return lib$1.hexlify(bytes);\n        }\n\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n      } else if (bytes.length === 65) {\n        if (!compressed) {\n          return lib$1.hexlify(bytes);\n        }\n\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n      }\n\n      return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n    }\n\n    exports.computePublicKey = computePublicKey;\n  });\n  var index$f = unwrapExports(lib$f);\n  var lib_1$f = lib$f.SigningKey;\n  var lib_2$e = lib$f.recoverPublicKey;\n  var lib_3$b = lib$f.computePublicKey;\n\n  var _version$s = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"transactions/5.0.3\";\n  });\n\n  var _version$t = unwrapExports(_version$s);\n\n  var _version_1$e = _version$s.version;\n  var lib$g = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n      result[\"default\"] = mod;\n      return result;\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var RLP = __importStar(lib$5);\n\n    var logger = new lib.Logger(_version$s.version); ///////////////////////////////\n\n    function handleAddress(value) {\n      if (value === \"0x\") {\n        return null;\n      }\n\n      return lib$6.getAddress(value);\n    }\n\n    function handleNumber(value) {\n      if (value === \"0x\") {\n        return lib$7.Zero;\n      }\n\n      return lib$2.BigNumber.from(value);\n    }\n\n    var transactionFields = [{\n      name: \"nonce\",\n      maxLength: 32,\n      numeric: true\n    }, {\n      name: \"gasPrice\",\n      maxLength: 32,\n      numeric: true\n    }, {\n      name: \"gasLimit\",\n      maxLength: 32,\n      numeric: true\n    }, {\n      name: \"to\",\n      length: 20\n    }, {\n      name: \"value\",\n      maxLength: 32,\n      numeric: true\n    }, {\n      name: \"data\"\n    }];\n    var allowedTransactionKeys = {\n      chainId: true,\n      data: true,\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      to: true,\n      value: true\n    };\n\n    function computeAddress(key) {\n      var publicKey = lib$f.computePublicKey(key);\n      return lib$6.getAddress(lib$1.hexDataSlice(lib$4.keccak256(lib$1.hexDataSlice(publicKey, 1)), 12));\n    }\n\n    exports.computeAddress = computeAddress;\n\n    function recoverAddress(digest, signature) {\n      return computeAddress(lib$f.recoverPublicKey(lib$1.arrayify(digest), signature));\n    }\n\n    exports.recoverAddress = recoverAddress;\n\n    function serialize(transaction, signature) {\n      lib$3.checkProperties(transaction, allowedTransactionKeys);\n      var raw = [];\n      transactionFields.forEach(function (fieldInfo) {\n        var value = transaction[fieldInfo.name] || [];\n        var options = {};\n\n        if (fieldInfo.numeric) {\n          options.hexPad = \"left\";\n        }\n\n        value = lib$1.arrayify(lib$1.hexlify(value, options)); // Fixed-width field\n\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n          logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n        } // Variable-width (with a maximum)\n\n\n        if (fieldInfo.maxLength) {\n          value = lib$1.stripZeros(value);\n\n          if (value.length > fieldInfo.maxLength) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n          }\n        }\n\n        raw.push(lib$1.hexlify(value));\n      });\n      var chainId = 0;\n\n      if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n\n        if (typeof chainId !== \"number\") {\n          logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n      } else if (signature && !lib$1.isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n      } // We have an EIP-155 transaction (chainId was specified and non-zero)\n\n\n      if (chainId !== 0) {\n        raw.push(lib$1.hexlify(chainId));\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n      } // Requesting an unsigned transation\n\n\n      if (!signature) {\n        return RLP.encode(raw);\n      } // The splitSignature will ensure the transaction has a recoveryParam in the\n      // case that the signTransaction function only adds a v.\n\n\n      var sig = lib$1.splitSignature(signature); // We pushed a chainId and null r, s on for hashing only; remove those\n\n      var v = 27 + sig.recoveryParam;\n\n      if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8; // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n\n        if (sig.v > 28 && sig.v !== v) {\n          logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n      } else if (sig.v !== v) {\n        logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n      }\n\n      raw.push(lib$1.hexlify(v));\n      raw.push(lib$1.stripZeros(lib$1.arrayify(sig.r)));\n      raw.push(lib$1.stripZeros(lib$1.arrayify(sig.s)));\n      return RLP.encode(raw);\n    }\n\n    exports.serialize = serialize;\n\n    function parse(rawTransaction) {\n      var transaction = RLP.decode(rawTransaction);\n\n      if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n      }\n\n      var tx = {\n        nonce: handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to: handleAddress(transaction[3]),\n        value: handleNumber(transaction[4]),\n        data: transaction[5],\n        chainId: 0\n      }; // Legacy unsigned transaction\n\n      if (transaction.length === 6) {\n        return tx;\n      }\n\n      try {\n        tx.v = lib$2.BigNumber.from(transaction[6]).toNumber();\n      } catch (error) {\n        console.log(error);\n        return tx;\n      }\n\n      tx.r = lib$1.hexZeroPad(transaction[7], 32);\n      tx.s = lib$1.hexZeroPad(transaction[8], 32);\n\n      if (lib$2.BigNumber.from(tx.r).isZero() && lib$2.BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n      } else {\n        // Signed Tranasaction\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n\n        if (tx.chainId < 0) {\n          tx.chainId = 0;\n        }\n\n        var recoveryParam = tx.v - 27;\n        var raw = transaction.slice(0, 6);\n\n        if (tx.chainId !== 0) {\n          raw.push(lib$1.hexlify(tx.chainId));\n          raw.push(\"0x\");\n          raw.push(\"0x\");\n          recoveryParam -= tx.chainId * 2 + 8;\n        }\n\n        var digest = lib$4.keccak256(RLP.encode(raw));\n\n        try {\n          tx.from = recoverAddress(digest, {\n            r: lib$1.hexlify(tx.r),\n            s: lib$1.hexlify(tx.s),\n            recoveryParam: recoveryParam\n          });\n        } catch (error) {\n          console.log(error);\n        }\n\n        tx.hash = lib$4.keccak256(rawTransaction);\n      }\n\n      return tx;\n    }\n\n    exports.parse = parse;\n  });\n  var index$g = unwrapExports(lib$g);\n  var lib_1$g = lib$g.computeAddress;\n  var lib_2$f = lib$g.recoverAddress;\n  var lib_3$c = lib$g.serialize;\n  var lib_4$9 = lib$g.parse;\n\n  var _version$u = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"wordlists/5.0.3\";\n  });\n\n  var _version$v = unwrapExports(_version$u);\n\n  var _version_1$f = _version$u.version;\n  var wordlist = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // This gets overridden by rollup\n\n    var exportWordlist = false;\n    exports.logger = new lib.Logger(_version$u.version);\n\n    var Wordlist =\n    /** @class */\n    function () {\n      function Wordlist(locale) {\n        var _newTarget = this.constructor;\n        exports.logger.checkAbstract(_newTarget, Wordlist);\n        lib$3.defineReadOnly(this, \"locale\", locale);\n      } // Subclasses may override this\n\n\n      Wordlist.prototype.split = function (mnemonic) {\n        return mnemonic.toLowerCase().split(/ +/g);\n      }; // Subclasses may override this\n\n\n      Wordlist.prototype.join = function (words) {\n        return words.join(\" \");\n      };\n\n      Wordlist.check = function (wordlist) {\n        var words = [];\n\n        for (var i = 0; i < 2048; i++) {\n          var word = wordlist.getWord(i);\n          /* istanbul ignore if */\n\n          if (i !== wordlist.getWordIndex(word)) {\n            return \"0x\";\n          }\n\n          words.push(word);\n        }\n\n        return lib$9.id(words.join(\"\\n\") + \"\\n\");\n      };\n\n      Wordlist.register = function (lang, name) {\n        if (!name) {\n          name = lang.locale;\n        }\n        /* istanbul ignore if */\n\n\n        if (exportWordlist) {\n          try {\n            var anyGlobal = window;\n\n            if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n              if (!anyGlobal._ethers.wordlists[name]) {\n                lib$3.defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n              }\n            }\n          } catch (error) {}\n        }\n      };\n\n      return Wordlist;\n    }();\n\n    exports.Wordlist = Wordlist;\n  });\n  var wordlist$1 = unwrapExports(wordlist);\n  var wordlist_1 = wordlist.logger;\n  var wordlist_2 = wordlist.Wordlist;\n  var langEn_1 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\n    var wordlist$1 = null;\n\n    function loadWords(lang) {\n      if (wordlist$1 != null) {\n        return;\n      }\n\n      wordlist$1 = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \"); // Verify the computed list matches the official list\n\n      /* istanbul ignore if */\n\n      if (wordlist.Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist$1 = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n      }\n    }\n\n    var LangEn =\n    /** @class */\n    function (_super) {\n      __extends(LangEn, _super);\n\n      function LangEn() {\n        return _super.call(this, \"en\") || this;\n      }\n\n      LangEn.prototype.getWord = function (index) {\n        loadWords(this);\n        return wordlist$1[index];\n      };\n\n      LangEn.prototype.getWordIndex = function (word) {\n        loadWords(this);\n        return wordlist$1.indexOf(word);\n      };\n\n      return LangEn;\n    }(wordlist.Wordlist);\n\n    var langEn = new LangEn();\n    exports.langEn = langEn;\n    wordlist.Wordlist.register(langEn);\n  });\n  var langEn = unwrapExports(langEn_1);\n  var langEn_2 = langEn_1.langEn;\n  var browser$4 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // Wordlists\n    // See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md\n\n    exports.Wordlist = wordlist.Wordlist;\n    var wordlists = {\n      en: langEn_1.langEn\n    };\n    exports.wordlists = wordlists;\n  });\n  var browser$5 = unwrapExports(browser$4);\n  var browser_1$2 = browser$4.Wordlist;\n  var browser_2$1 = browser$4.wordlists;\n\n  var _version$w = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"hdnode/5.0.3\";\n  });\n\n  var _version$x = unwrapExports(_version$w);\n\n  var _version_1$g = _version$w.version;\n  var lib$h = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$w.version);\n    var N = lib$2.BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"); // \"Bitcoin seed\"\n\n    var MasterSecret = lib$8.toUtf8Bytes(\"Bitcoin seed\");\n    var HardenedBit = 0x80000000; // Returns a byte with the MSB bits set\n\n    function getUpperMask(bits) {\n      return (1 << bits) - 1 << 8 - bits;\n    } // Returns a byte with the LSB bits set\n\n\n    function getLowerMask(bits) {\n      return (1 << bits) - 1;\n    }\n\n    function bytes32(value) {\n      return lib$1.hexZeroPad(lib$1.hexlify(value), 32);\n    }\n\n    function base58check(data) {\n      return lib$e.Base58.encode(lib$1.concat([data, lib$1.hexDataSlice(browser.sha256(browser.sha256(data)), 0, 4)]));\n    }\n\n    function getWordlist(wordlist) {\n      if (wordlist == null) {\n        return browser$4.wordlists[\"en\"];\n      }\n\n      if (typeof wordlist === \"string\") {\n        var words = browser$4.wordlists[wordlist];\n\n        if (words == null) {\n          logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n\n        return words;\n      }\n\n      return wordlist;\n    }\n\n    var _constructorGuard = {};\n    exports.defaultPath = \"m/44'/60'/0'/0/0\";\n    ;\n\n    var HDNode =\n    /** @class */\n    function () {\n      /**\n       *  This constructor should not be called directly.\n       *\n       *  Please use:\n       *   - fromMnemonic\n       *   - fromSeed\n       */\n      function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n        var _newTarget = this.constructor;\n        logger.checkNew(_newTarget, HDNode);\n        /* istanbul ignore if */\n\n        if (constructorGuard !== _constructorGuard) {\n          throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n\n        if (privateKey) {\n          var signingKey = new lib$f.SigningKey(privateKey);\n          lib$3.defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n          lib$3.defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        } else {\n          lib$3.defineReadOnly(this, \"privateKey\", null);\n          lib$3.defineReadOnly(this, \"publicKey\", lib$1.hexlify(publicKey));\n        }\n\n        lib$3.defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        lib$3.defineReadOnly(this, \"fingerprint\", lib$1.hexDataSlice(browser.ripemd160(browser.sha256(this.publicKey)), 0, 4));\n        lib$3.defineReadOnly(this, \"address\", lib$g.computeAddress(this.publicKey));\n        lib$3.defineReadOnly(this, \"chainCode\", chainCode);\n        lib$3.defineReadOnly(this, \"index\", index);\n        lib$3.defineReadOnly(this, \"depth\", depth);\n\n        if (mnemonicOrPath == null) {\n          // From a source that does not preserve the path (e.g. extended keys)\n          lib$3.defineReadOnly(this, \"mnemonic\", null);\n          lib$3.defineReadOnly(this, \"path\", null);\n        } else if (typeof mnemonicOrPath === \"string\") {\n          // From a source that does not preserve the mnemonic (e.g. neutered)\n          lib$3.defineReadOnly(this, \"mnemonic\", null);\n          lib$3.defineReadOnly(this, \"path\", mnemonicOrPath);\n        } else {\n          // From a fully qualified source\n          lib$3.defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n          lib$3.defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n      }\n\n      Object.defineProperty(HDNode.prototype, \"extendedKey\", {\n        get: function () {\n          // We only support the mainnet values for now, but if anyone needs\n          // testnet values, let me know. I believe current senitment is that\n          // we should always use mainnet, and use BIP-44 to derive the network\n          //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n          //   - Testnet: public=0x043587CF, private=0x04358394\n          if (this.depth >= 256) {\n            throw new Error(\"Depth too large!\");\n          }\n\n          return base58check(lib$1.concat([this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\", lib$1.hexlify(this.depth), this.parentFingerprint, lib$1.hexZeroPad(lib$1.hexlify(this.index), 4), this.chainCode, this.privateKey != null ? lib$1.concat([\"0x00\", this.privateKey]) : this.publicKey]));\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      HDNode.prototype.neuter = function () {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n      };\n\n      HDNode.prototype._derive = function (index) {\n        if (index > 0xffffffff) {\n          throw new Error(\"invalid index - \" + String(index));\n        } // Base path\n\n\n        var path = this.path;\n\n        if (path) {\n          path += \"/\" + (index & ~HardenedBit);\n        }\n\n        var data = new Uint8Array(37);\n\n        if (index & HardenedBit) {\n          if (!this.privateKey) {\n            throw new Error(\"cannot derive child of neutered node\");\n          } // Data = 0x00 || ser_256(k_par)\n\n\n          data.set(lib$1.arrayify(this.privateKey), 1); // Hardened path\n\n          if (path) {\n            path += \"'\";\n          }\n        } else {\n          // Data = ser_p(point(k_par))\n          data.set(lib$1.arrayify(this.publicKey));\n        } // Data += ser_32(i)\n\n\n        for (var i = 24; i >= 0; i -= 8) {\n          data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n        }\n\n        var I = lib$1.arrayify(browser.computeHmac(browser.SupportedAlgorithm.sha512, this.chainCode, data));\n        var IL = I.slice(0, 32);\n        var IR = I.slice(32); // The private key\n\n        var ki = null; // The public key\n\n        var Ki = null;\n\n        if (this.privateKey) {\n          ki = bytes32(lib$2.BigNumber.from(IL).add(this.privateKey).mod(N));\n        } else {\n          var ek = new lib$f.SigningKey(lib$1.hexlify(IL));\n          Ki = ek._addPoint(this.publicKey);\n        }\n\n        var mnemonicOrPath = path;\n        var srcMnemonic = this.mnemonic;\n\n        if (srcMnemonic) {\n          mnemonicOrPath = Object.freeze({\n            phrase: srcMnemonic.phrase,\n            path: path,\n            locale: srcMnemonic.locale || \"en\"\n          });\n        }\n\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n      };\n\n      HDNode.prototype.derivePath = function (path) {\n        var components = path.split(\"/\");\n\n        if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n          throw new Error(\"invalid path - \" + path);\n        }\n\n        if (components[0] === \"m\") {\n          components.shift();\n        }\n\n        var result = this;\n\n        for (var i = 0; i < components.length; i++) {\n          var component = components[i];\n\n          if (component.match(/^[0-9]+'$/)) {\n            var index = parseInt(component.substring(0, component.length - 1));\n\n            if (index >= HardenedBit) {\n              throw new Error(\"invalid path index - \" + component);\n            }\n\n            result = result._derive(HardenedBit + index);\n          } else if (component.match(/^[0-9]+$/)) {\n            var index = parseInt(component);\n\n            if (index >= HardenedBit) {\n              throw new Error(\"invalid path index - \" + component);\n            }\n\n            result = result._derive(index);\n          } else {\n            throw new Error(\"invalid path component - \" + component);\n          }\n        }\n\n        return result;\n      };\n\n      HDNode._fromSeed = function (seed, mnemonic) {\n        var seedArray = lib$1.arrayify(seed);\n\n        if (seedArray.length < 16 || seedArray.length > 64) {\n          throw new Error(\"invalid seed\");\n        }\n\n        var I = lib$1.arrayify(browser.computeHmac(browser.SupportedAlgorithm.sha512, MasterSecret, seedArray));\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n      };\n\n      HDNode.fromMnemonic = function (mnemonic, password, wordlist) {\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist); // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n          phrase: mnemonic,\n          path: \"m\",\n          locale: wordlist.locale\n        });\n      };\n\n      HDNode.fromSeed = function (seed) {\n        return HDNode._fromSeed(seed, null);\n      };\n\n      HDNode.fromExtendedKey = function (extendedKey) {\n        var bytes = lib$e.Base58.decode(extendedKey);\n\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n          logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n\n        var depth = bytes[4];\n        var parentFingerprint = lib$1.hexlify(bytes.slice(5, 9));\n        var index = parseInt(lib$1.hexlify(bytes.slice(9, 13)).substring(2), 16);\n        var chainCode = lib$1.hexlify(bytes.slice(13, 45));\n        var key = bytes.slice(45, 78);\n\n        switch (lib$1.hexlify(bytes.slice(0, 4))) {\n          // Public Key\n          case \"0x0488b21e\":\n          case \"0x043587cf\":\n            return new HDNode(_constructorGuard, null, lib$1.hexlify(key), parentFingerprint, chainCode, index, depth, null);\n          // Private Key\n\n          case \"0x0488ade4\":\n          case \"0x04358394 \":\n            if (key[0] !== 0) {\n              break;\n            }\n\n            return new HDNode(_constructorGuard, lib$1.hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n      };\n\n      return HDNode;\n    }();\n\n    exports.HDNode = HDNode;\n\n    function mnemonicToSeed(mnemonic, password) {\n      if (!password) {\n        password = \"\";\n      }\n\n      var salt = lib$8.toUtf8Bytes(\"mnemonic\" + password, lib$8.UnicodeNormalizationForm.NFKD);\n      return browser$2.pbkdf2(lib$8.toUtf8Bytes(mnemonic, lib$8.UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n    }\n\n    exports.mnemonicToSeed = mnemonicToSeed;\n\n    function mnemonicToEntropy(mnemonic, wordlist) {\n      wordlist = getWordlist(wordlist);\n      logger.checkNormalize();\n      var words = wordlist.split(mnemonic);\n\n      if (words.length % 3 !== 0) {\n        throw new Error(\"invalid mnemonic\");\n      }\n\n      var entropy = lib$1.arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n      var offset = 0;\n\n      for (var i = 0; i < words.length; i++) {\n        var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n\n        if (index === -1) {\n          throw new Error(\"invalid mnemonic\");\n        }\n\n        for (var bit = 0; bit < 11; bit++) {\n          if (index & 1 << 10 - bit) {\n            entropy[offset >> 3] |= 1 << 7 - offset % 8;\n          }\n\n          offset++;\n        }\n      }\n\n      var entropyBits = 32 * words.length / 3;\n      var checksumBits = words.length / 3;\n      var checksumMask = getUpperMask(checksumBits);\n      var checksum = lib$1.arrayify(browser.sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n      if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n      }\n\n      return lib$1.hexlify(entropy.slice(0, entropyBits / 8));\n    }\n\n    exports.mnemonicToEntropy = mnemonicToEntropy;\n\n    function entropyToMnemonic(entropy, wordlist) {\n      wordlist = getWordlist(wordlist);\n      entropy = lib$1.arrayify(entropy);\n\n      if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n      }\n\n      var indices = [0];\n      var remainingBits = 11;\n\n      for (var i = 0; i < entropy.length; i++) {\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n          indices[indices.length - 1] <<= 8;\n          indices[indices.length - 1] |= entropy[i];\n          remainingBits -= 8; // This byte will complete an 11-bit index\n        } else {\n          indices[indices.length - 1] <<= remainingBits;\n          indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits; // Start the next word\n\n          indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n          remainingBits += 3;\n        }\n      } // Compute the checksum bits\n\n\n      var checksumBits = entropy.length / 4;\n      var checksum = lib$1.arrayify(browser.sha256(entropy))[0] & getUpperMask(checksumBits); // Shift the checksum into the word indices\n\n      indices[indices.length - 1] <<= checksumBits;\n      indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n      return wordlist.join(indices.map(function (index) {\n        return wordlist.getWord(index);\n      }));\n    }\n\n    exports.entropyToMnemonic = entropyToMnemonic;\n\n    function isValidMnemonic(mnemonic, wordlist) {\n      try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n      } catch (error) {}\n\n      return false;\n    }\n\n    exports.isValidMnemonic = isValidMnemonic;\n  });\n  var index$h = unwrapExports(lib$h);\n  var lib_1$h = lib$h.defaultPath;\n  var lib_2$g = lib$h.HDNode;\n  var lib_3$d = lib$h.mnemonicToSeed;\n  var lib_4$a = lib$h.mnemonicToEntropy;\n  var lib_5$9 = lib$h.entropyToMnemonic;\n  var lib_6$5 = lib$h.isValidMnemonic;\n\n  var _version$y = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"random/5.0.3\";\n  });\n\n  var _version$z = unwrapExports(_version$y);\n\n  var _version_1$h = _version$y.version;\n  var shuffle = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function shuffled(array) {\n      array = array.slice();\n\n      for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n      }\n\n      return array;\n    }\n\n    exports.shuffled = shuffled;\n  });\n  var shuffle$1 = unwrapExports(shuffle);\n  var shuffle_1 = shuffle.shuffled;\n  var browser$6 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$y.version);\n    exports.shuffled = shuffle.shuffled;\n    var anyGlobal = null;\n\n    try {\n      anyGlobal = window;\n\n      if (anyGlobal == null) {\n        throw new Error(\"try next\");\n      }\n    } catch (error) {\n      try {\n        anyGlobal = commonjsGlobal;\n\n        if (anyGlobal == null) {\n          throw new Error(\"try next\");\n        }\n      } catch (error) {\n        anyGlobal = {};\n      }\n    }\n\n    var crypto = anyGlobal.crypto || anyGlobal.msCrypto;\n\n    if (!crypto || !crypto.getRandomValues) {\n      logger.warn(\"WARNING: Missing strong random number source\");\n      crypto = {\n        getRandomValues: function (buffer) {\n          return logger.throwError(\"no secure random source avaialble\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"crypto.getRandomValues\"\n          });\n        }\n      };\n    }\n\n    function randomBytes(length) {\n      if (length <= 0 || length > 1024 || length % 1) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n      }\n\n      var result = new Uint8Array(length);\n      crypto.getRandomValues(result);\n      return lib$1.arrayify(result);\n    }\n\n    exports.randomBytes = randomBytes;\n    ;\n  });\n  var browser$7 = unwrapExports(browser$6);\n  var browser_1$3 = browser$6.shuffled;\n  var browser_2$2 = browser$6.randomBytes;\n  var aesJs = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    (function (root) {\n      function checkInt(value) {\n        return parseInt(value) === value;\n      }\n\n      function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) {\n          return false;\n        }\n\n        for (var i = 0; i < arrayish.length; i++) {\n          if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function coerceArray(arg, copy) {\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n          if (copy) {\n            if (arg.slice) {\n              arg = arg.slice();\n            } else {\n              arg = Array.prototype.slice.call(arg);\n            }\n          }\n\n          return arg;\n        } // It's an array; check it is a valid representation of a byte\n\n\n        if (Array.isArray(arg)) {\n          if (!checkInts(arg)) {\n            throw new Error('Array contains invalid value: ' + arg);\n          }\n\n          return new Uint8Array(arg);\n        } // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n\n\n        if (checkInt(arg.length) && checkInts(arg)) {\n          return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n      }\n\n      function createArray(length) {\n        return new Uint8Array(length);\n      }\n\n      function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n          if (sourceArray.slice) {\n            sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n          } else {\n            sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n          }\n        }\n\n        targetArray.set(sourceArray, targetStart);\n      }\n\n      var convertUtf8 = function () {\n        function toBytes(text) {\n          var result = [],\n              i = 0;\n          text = encodeURI(text);\n\n          while (i < text.length) {\n            var c = text.charCodeAt(i++); // if it is a % sign, encode the following 2 bytes as a hex value\n\n            if (c === 37) {\n              result.push(parseInt(text.substr(i, 2), 16));\n              i += 2; // otherwise, just the actual byte\n            } else {\n              result.push(c);\n            }\n          }\n\n          return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n          var result = [],\n              i = 0;\n\n          while (i < bytes.length) {\n            var c = bytes[i];\n\n            if (c < 128) {\n              result.push(String.fromCharCode(c));\n              i++;\n            } else if (c > 191 && c < 224) {\n              result.push(String.fromCharCode((c & 0x1f) << 6 | bytes[i + 1] & 0x3f));\n              i += 2;\n            } else {\n              result.push(String.fromCharCode((c & 0x0f) << 12 | (bytes[i + 1] & 0x3f) << 6 | bytes[i + 2] & 0x3f));\n              i += 3;\n            }\n          }\n\n          return result.join('');\n        }\n\n        return {\n          toBytes: toBytes,\n          fromBytes: fromBytes\n        };\n      }();\n\n      var convertHex = function () {\n        function toBytes(text) {\n          var result = [];\n\n          for (var i = 0; i < text.length; i += 2) {\n            result.push(parseInt(text.substr(i, 2), 16));\n          }\n\n          return result;\n        } // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n\n\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n          var result = [];\n\n          for (var i = 0; i < bytes.length; i++) {\n            var v = bytes[i];\n            result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n          }\n\n          return result.join('');\n        }\n\n        return {\n          toBytes: toBytes,\n          fromBytes: fromBytes\n        };\n      }(); // Number of rounds by keysize\n\n\n      var numberOfRounds = {\n        16: 10,\n        24: 12,\n        32: 14\n      }; // Round constant words\n\n      var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91]; // S-box and Inverse S-box (S is for Substitution)\n\n      var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n      var Si = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d]; // Transformations for encryption\n\n      var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n      var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n      var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n      var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c]; // Transformations for decryption\n\n      var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n      var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n      var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n      var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0]; // Transformations for decryption key expansion\n\n      var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n      var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n      var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n      var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n      function convertToInt32(bytes) {\n        var result = [];\n\n        for (var i = 0; i < bytes.length; i += 4) {\n          result.push(bytes[i] << 24 | bytes[i + 1] << 16 | bytes[i + 2] << 8 | bytes[i + 3]);\n        }\n\n        return result;\n      }\n\n      var AES = function (key) {\n        if (!(this instanceof AES)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n          value: coerceArray(key, true)\n        });\n\n        this._prepare();\n      };\n\n      AES.prototype._prepare = function () {\n        var rounds = numberOfRounds[this.key.length];\n\n        if (rounds == null) {\n          throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        } // encryption round keys\n\n\n        this._Ke = []; // decryption round keys\n\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n          this._Ke.push([0, 0, 0, 0]);\n\n          this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4; // convert the key into ints\n\n        var tk = convertToInt32(this.key); // copy values into round key arrays\n\n        var index;\n\n        for (var i = 0; i < KC; i++) {\n          index = i >> 2;\n          this._Ke[index][i % 4] = tk[i];\n          this._Kd[rounds - index][i % 4] = tk[i];\n        } // key expansion (fips-197 section 5.2)\n\n\n        var rconpointer = 0;\n        var t = KC,\n            tt;\n\n        while (t < roundKeyCount) {\n          tt = tk[KC - 1];\n          tk[0] ^= S[tt >> 16 & 0xFF] << 24 ^ S[tt >> 8 & 0xFF] << 16 ^ S[tt & 0xFF] << 8 ^ S[tt >> 24 & 0xFF] ^ rcon[rconpointer] << 24;\n          rconpointer += 1; // key expansion (for non-256 bit)\n\n          if (KC != 8) {\n            for (var i = 1; i < KC; i++) {\n              tk[i] ^= tk[i - 1];\n            } // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n\n          } else {\n            for (var i = 1; i < KC / 2; i++) {\n              tk[i] ^= tk[i - 1];\n            }\n\n            tt = tk[KC / 2 - 1];\n            tk[KC / 2] ^= S[tt & 0xFF] ^ S[tt >> 8 & 0xFF] << 8 ^ S[tt >> 16 & 0xFF] << 16 ^ S[tt >> 24 & 0xFF] << 24;\n\n            for (var i = KC / 2 + 1; i < KC; i++) {\n              tk[i] ^= tk[i - 1];\n            }\n          } // copy values into round key arrays\n\n\n          var i = 0,\n              r,\n              c;\n\n          while (i < KC && t < roundKeyCount) {\n            r = t >> 2;\n            c = t % 4;\n            this._Ke[r][c] = tk[i];\n            this._Kd[rounds - r][c] = tk[i++];\n            t++;\n          }\n        } // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n\n\n        for (var r = 1; r < rounds; r++) {\n          for (var c = 0; c < 4; c++) {\n            tt = this._Kd[r][c];\n            this._Kd[r][c] = U1[tt >> 24 & 0xFF] ^ U2[tt >> 16 & 0xFF] ^ U3[tt >> 8 & 0xFF] ^ U4[tt & 0xFF];\n          }\n        }\n      };\n\n      AES.prototype.encrypt = function (plaintext) {\n        if (plaintext.length != 16) {\n          throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0]; // convert plaintext to (ints ^ key)\n\n        var t = convertToInt32(plaintext);\n\n        for (var i = 0; i < 4; i++) {\n          t[i] ^= this._Ke[0][i];\n        } // apply round transforms\n\n\n        for (var r = 1; r < rounds; r++) {\n          for (var i = 0; i < 4; i++) {\n            a[i] = T1[t[i] >> 24 & 0xff] ^ T2[t[(i + 1) % 4] >> 16 & 0xff] ^ T3[t[(i + 2) % 4] >> 8 & 0xff] ^ T4[t[(i + 3) % 4] & 0xff] ^ this._Ke[r][i];\n          }\n\n          t = a.slice();\n        } // the last round is special\n\n\n        var result = createArray(16),\n            tt;\n\n        for (var i = 0; i < 4; i++) {\n          tt = this._Ke[rounds][i];\n          result[4 * i] = (S[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n          result[4 * i + 3] = (S[t[(i + 3) % 4] & 0xff] ^ tt) & 0xff;\n        }\n\n        return result;\n      };\n\n      AES.prototype.decrypt = function (ciphertext) {\n        if (ciphertext.length != 16) {\n          throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0]; // convert plaintext to (ints ^ key)\n\n        var t = convertToInt32(ciphertext);\n\n        for (var i = 0; i < 4; i++) {\n          t[i] ^= this._Kd[0][i];\n        } // apply round transforms\n\n\n        for (var r = 1; r < rounds; r++) {\n          for (var i = 0; i < 4; i++) {\n            a[i] = T5[t[i] >> 24 & 0xff] ^ T6[t[(i + 3) % 4] >> 16 & 0xff] ^ T7[t[(i + 2) % 4] >> 8 & 0xff] ^ T8[t[(i + 1) % 4] & 0xff] ^ this._Kd[r][i];\n          }\n\n          t = a.slice();\n        } // the last round is special\n\n\n        var result = createArray(16),\n            tt;\n\n        for (var i = 0; i < 4; i++) {\n          tt = this._Kd[rounds][i];\n          result[4 * i] = (Si[t[i] >> 24 & 0xff] ^ tt >> 24) & 0xff;\n          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 0xff] ^ tt >> 16) & 0xff;\n          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 0xff] ^ tt >> 8) & 0xff;\n          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 0xff] ^ tt) & 0xff;\n        }\n\n        return result;\n      };\n      /**\n       *  Mode Of Operation - Electonic Codebook (ECB)\n       */\n\n\n      var ModeOfOperationECB = function (key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationECB.prototype.encrypt = function (plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if (plaintext.length % 16 !== 0) {\n          throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n          copyArray(plaintext, block, 0, i, i + 16);\n          block = this._aes.encrypt(block);\n          copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n      };\n\n      ModeOfOperationECB.prototype.decrypt = function (ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if (ciphertext.length % 16 !== 0) {\n          throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n          copyArray(ciphertext, block, 0, i, i + 16);\n          block = this._aes.decrypt(block);\n          copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n      };\n      /**\n       *  Mode Of Operation - Cipher Block Chaining (CBC)\n       */\n\n\n      var ModeOfOperationCBC = function (key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n          iv = createArray(16);\n        } else if (iv.length != 16) {\n          throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationCBC.prototype.encrypt = function (plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if (plaintext.length % 16 !== 0) {\n          throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n          copyArray(plaintext, block, 0, i, i + 16);\n\n          for (var j = 0; j < 16; j++) {\n            block[j] ^= this._lastCipherblock[j];\n          }\n\n          this._lastCipherblock = this._aes.encrypt(block);\n          copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n      };\n\n      ModeOfOperationCBC.prototype.decrypt = function (ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if (ciphertext.length % 16 !== 0) {\n          throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n          copyArray(ciphertext, block, 0, i, i + 16);\n          block = this._aes.decrypt(block);\n\n          for (var j = 0; j < 16; j++) {\n            plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n          }\n\n          copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n      };\n      /**\n       *  Mode Of Operation - Cipher Feedback (CFB)\n       */\n\n\n      var ModeOfOperationCFB = function (key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n          iv = createArray(16);\n        } else if (iv.length != 16) {\n          throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) {\n          segmentSize = 1;\n        }\n\n        this.segmentSize = segmentSize;\n        this._shiftRegister = coerceArray(iv, true);\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationCFB.prototype.encrypt = function (plaintext) {\n        if (plaintext.length % this.segmentSize != 0) {\n          throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n        var xorSegment;\n\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n          xorSegment = this._aes.encrypt(this._shiftRegister);\n\n          for (var j = 0; j < this.segmentSize; j++) {\n            encrypted[i + j] ^= xorSegment[j];\n          } // Shift the register\n\n\n          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n          copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n      };\n\n      ModeOfOperationCFB.prototype.decrypt = function (ciphertext) {\n        if (ciphertext.length % this.segmentSize != 0) {\n          throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n        var xorSegment;\n\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n          xorSegment = this._aes.encrypt(this._shiftRegister);\n\n          for (var j = 0; j < this.segmentSize; j++) {\n            plaintext[i + j] ^= xorSegment[j];\n          } // Shift the register\n\n\n          copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n          copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n      };\n      /**\n       *  Mode Of Operation - Output Feedback (OFB)\n       */\n\n\n      var ModeOfOperationOFB = function (key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n          iv = createArray(16);\n        } else if (iv.length != 16) {\n          throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationOFB.prototype.encrypt = function (plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n          if (this._lastPrecipherIndex === 16) {\n            this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n            this._lastPrecipherIndex = 0;\n          }\n\n          encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n      }; // Decryption is symetric\n\n\n      ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n      /**\n       *  Counter object for CTR common mode of operation\n       */\n\n      var Counter = function (initialValue) {\n        if (!(this instanceof Counter)) {\n          throw Error('Counter must be instanitated with `new`');\n        } // We allow 0, but anything false-ish uses the default 1\n\n\n        if (initialValue !== 0 && !initialValue) {\n          initialValue = 1;\n        }\n\n        if (typeof initialValue === 'number') {\n          this._counter = createArray(16);\n          this.setValue(initialValue);\n        } else {\n          this.setBytes(initialValue);\n        }\n      };\n\n      Counter.prototype.setValue = function (value) {\n        if (typeof value !== 'number' || parseInt(value) != value) {\n          throw new Error('invalid counter value (must be an integer)');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n          this._counter[index] = value % 256;\n          value = value >> 8;\n        }\n      };\n\n      Counter.prototype.setBytes = function (bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n          throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n      };\n\n      Counter.prototype.increment = function () {\n        for (var i = 15; i >= 0; i--) {\n          if (this._counter[i] === 255) {\n            this._counter[i] = 0;\n          } else {\n            this._counter[i]++;\n            break;\n          }\n        }\n      };\n      /**\n       *  Mode Of Operation - Counter (CTR)\n       */\n\n\n      var ModeOfOperationCTR = function (key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n          throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n          counter = new Counter(counter);\n        }\n\n        this._counter = counter;\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n        this._aes = new AES(key);\n      };\n\n      ModeOfOperationCTR.prototype.encrypt = function (plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n          if (this._remainingCounterIndex === 16) {\n            this._remainingCounter = this._aes.encrypt(this._counter._counter);\n            this._remainingCounterIndex = 0;\n\n            this._counter.increment();\n          }\n\n          encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n      }; // Decryption is symetric\n\n\n      ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt; ///////////////////////\n      // Padding\n      // See:https://tools.ietf.org/html/rfc2315\n\n      function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - data.length % 16;\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n\n        for (var i = data.length; i < result.length; i++) {\n          result[i] = padder;\n        }\n\n        return result;\n      }\n\n      function pkcs7strip(data) {\n        data = coerceArray(data, true);\n\n        if (data.length < 16) {\n          throw new Error('PKCS#7 invalid length');\n        }\n\n        var padder = data[data.length - 1];\n\n        if (padder > 16) {\n          throw new Error('PKCS#7 padding byte out of range');\n        }\n\n        var length = data.length - padder;\n\n        for (var i = 0; i < padder; i++) {\n          if (data[length + i] !== padder) {\n            throw new Error('PKCS#7 invalid padding byte');\n          }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n      } ///////////////////////\n      // Exporting\n      // The block cipher\n\n\n      var aesjs = {\n        AES: AES,\n        Counter: Counter,\n        ModeOfOperation: {\n          ecb: ModeOfOperationECB,\n          cbc: ModeOfOperationCBC,\n          cfb: ModeOfOperationCFB,\n          ofb: ModeOfOperationOFB,\n          ctr: ModeOfOperationCTR\n        },\n        utils: {\n          hex: convertHex,\n          utf8: convertUtf8\n        },\n        padding: {\n          pkcs7: {\n            pad: pkcs7pad,\n            strip: pkcs7strip\n          }\n        },\n        _arrayTest: {\n          coerceArray: coerceArray,\n          createArray: createArray,\n          copyArray: copyArray\n        }\n      }; // node.js\n\n      if ('object' !== 'undefined') {\n        module.exports = aesjs; // RequireJS/AMD\n        // http://www.requirejs.org/docs/api.html\n        // https://github.com/amdjs/amdjs-api/wiki/AMD\n      } else if (typeof undefined === 'function' && undefined.amd) {\n        undefined(aesjs); // Web Browsers\n      } else {\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n          aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n      }\n    })(commonjsGlobal);\n  });\n\n  var _version$A = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"json-wallets/5.0.5\";\n  });\n\n  var _version$B = unwrapExports(_version$A);\n\n  var _version_1$i = _version$A.version;\n  var utils$1 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function looseArrayify(hexString) {\n      if (typeof hexString === 'string' && hexString.substring(0, 2) !== '0x') {\n        hexString = '0x' + hexString;\n      }\n\n      return lib$1.arrayify(hexString);\n    }\n\n    exports.looseArrayify = looseArrayify;\n\n    function zpad(value, length) {\n      value = String(value);\n\n      while (value.length < length) {\n        value = '0' + value;\n      }\n\n      return value;\n    }\n\n    exports.zpad = zpad;\n\n    function getPassword(password) {\n      if (typeof password === 'string') {\n        return lib$8.toUtf8Bytes(password, lib$8.UnicodeNormalizationForm.NFKC);\n      }\n\n      return lib$1.arrayify(password);\n    }\n\n    exports.getPassword = getPassword;\n\n    function searchPath(object, path) {\n      var currentChild = object;\n      var comps = path.toLowerCase().split('/');\n\n      for (var i = 0; i < comps.length; i++) {\n        // Search for a child object with a case-insensitive matching key\n        var matchingChild = null;\n\n        for (var key in currentChild) {\n          if (key.toLowerCase() === comps[i]) {\n            matchingChild = currentChild[key];\n            break;\n          }\n        } // Didn't find one. :'(\n\n\n        if (matchingChild === null) {\n          return null;\n        } // Now check this child...\n\n\n        currentChild = matchingChild;\n      }\n\n      return currentChild;\n    }\n\n    exports.searchPath = searchPath; // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\n\n    function uuidV4(randomBytes) {\n      var bytes = lib$1.arrayify(randomBytes); // Section: 4.1.3:\n      // - time_hi_and_version[12:16] = 0b0100\n\n      bytes[6] = bytes[6] & 0x0f | 0x40; // Section 4.4\n      // - clock_seq_hi_and_reserved[6] = 0b0\n      // - clock_seq_hi_and_reserved[7] = 0b1\n\n      bytes[8] = bytes[8] & 0x3f | 0x80;\n      var value = lib$1.hexlify(bytes);\n      return [value.substring(2, 10), value.substring(10, 14), value.substring(14, 18), value.substring(18, 22), value.substring(22, 34)].join(\"-\");\n    }\n\n    exports.uuidV4 = uuidV4;\n  });\n  var utils$2 = unwrapExports(utils$1);\n  var utils_1$2 = utils$1.looseArrayify;\n  var utils_2 = utils$1.zpad;\n  var utils_3 = utils$1.getPassword;\n  var utils_4 = utils$1.searchPath;\n  var utils_5 = utils$1.uuidV4;\n  var crowdsale = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n      return mod && mod.__esModule ? mod : {\n        \"default\": mod\n      };\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var aes_js_1 = __importDefault(aesJs);\n\n    var logger = new lib.Logger(_version$A.version);\n\n    var CrowdsaleAccount =\n    /** @class */\n    function (_super) {\n      __extends(CrowdsaleAccount, _super);\n\n      function CrowdsaleAccount() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      CrowdsaleAccount.prototype.isCrowdsaleAccount = function (value) {\n        return !!(value && value._isCrowdsaleAccount);\n      };\n\n      return CrowdsaleAccount;\n    }(lib$3.Description);\n\n    exports.CrowdsaleAccount = CrowdsaleAccount; // See: https://github.com/ethereum/pyethsaletool\n\n    function decrypt(json, password) {\n      var data = JSON.parse(json);\n      password = utils$1.getPassword(password); // Ethereum Address\n\n      var ethaddr = lib$6.getAddress(utils$1.searchPath(data, \"ethaddr\")); // Encrypted Seed\n\n      var encseed = utils$1.looseArrayify(utils$1.searchPath(data, \"encseed\"));\n\n      if (!encseed || encseed.length % 16 !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n      }\n\n      var key = lib$1.arrayify(browser$2.pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n      var iv = encseed.slice(0, 16);\n      var encryptedSeed = encseed.slice(16); // Decrypt the seed\n\n      var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n      var seed = aes_js_1.default.padding.pkcs7.strip(lib$1.arrayify(aesCbc.decrypt(encryptedSeed))); // This wallet format is weird... Convert the binary encoded hex to a string.\n\n      var seedHex = \"\";\n\n      for (var i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n      }\n\n      var seedHexBytes = lib$8.toUtf8Bytes(seedHex);\n      var privateKey = lib$4.keccak256(seedHexBytes);\n      return new CrowdsaleAccount({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n      });\n    }\n\n    exports.decrypt = decrypt;\n  });\n  var crowdsale$1 = unwrapExports(crowdsale);\n  var crowdsale_1 = crowdsale.CrowdsaleAccount;\n  var crowdsale_2 = crowdsale.decrypt;\n  var inspect = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function isCrowdsaleWallet(json) {\n      var data = null;\n\n      try {\n        data = JSON.parse(json);\n      } catch (error) {\n        return false;\n      }\n\n      return data.encseed && data.ethaddr;\n    }\n\n    exports.isCrowdsaleWallet = isCrowdsaleWallet;\n\n    function isKeystoreWallet(json) {\n      var data = null;\n\n      try {\n        data = JSON.parse(json);\n      } catch (error) {\n        return false;\n      }\n\n      if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n      } // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n\n\n      return true;\n    }\n\n    exports.isKeystoreWallet = isKeystoreWallet; //export function isJsonWallet(json: string): boolean {\n    //    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n    //}\n\n    function getJsonWalletAddress(json) {\n      if (isCrowdsaleWallet(json)) {\n        try {\n          return lib$6.getAddress(JSON.parse(json).ethaddr);\n        } catch (error) {\n          return null;\n        }\n      }\n\n      if (isKeystoreWallet(json)) {\n        try {\n          return lib$6.getAddress(JSON.parse(json).address);\n        } catch (error) {\n          return null;\n        }\n      }\n\n      return null;\n    }\n\n    exports.getJsonWalletAddress = getJsonWalletAddress;\n  });\n  var inspect$1 = unwrapExports(inspect);\n  var inspect_1 = inspect.isCrowdsaleWallet;\n  var inspect_2 = inspect.isKeystoreWallet;\n  var inspect_3 = inspect.getJsonWalletAddress;\n  var scrypt = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    (function (root) {\n      const MAX_VALUE = 0x7fffffff; // The SHA256 and PBKDF2 implementation are from scrypt-async-js:\n      // See: https://github.com/dchest/scrypt-async-js\n\n      function SHA256(m) {\n        const K = new Uint32Array([0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2]);\n        let h0 = 0x6a09e667,\n            h1 = 0xbb67ae85,\n            h2 = 0x3c6ef372,\n            h3 = 0xa54ff53a;\n        let h4 = 0x510e527f,\n            h5 = 0x9b05688c,\n            h6 = 0x1f83d9ab,\n            h7 = 0x5be0cd19;\n        const w = new Uint32Array(64);\n\n        function blocks(p) {\n          let off = 0,\n              len = p.length;\n\n          while (len >= 64) {\n            let a = h0,\n                b = h1,\n                c = h2,\n                d = h3,\n                e = h4,\n                f = h5,\n                g = h6,\n                h = h7,\n                u,\n                i,\n                j,\n                t1,\n                t2;\n\n            for (i = 0; i < 16; i++) {\n              j = off + i * 4;\n              w[i] = (p[j] & 0xff) << 24 | (p[j + 1] & 0xff) << 16 | (p[j + 2] & 0xff) << 8 | p[j + 3] & 0xff;\n            }\n\n            for (i = 16; i < 64; i++) {\n              u = w[i - 2];\n              t1 = (u >>> 17 | u << 32 - 17) ^ (u >>> 19 | u << 32 - 19) ^ u >>> 10;\n              u = w[i - 15];\n              t2 = (u >>> 7 | u << 32 - 7) ^ (u >>> 18 | u << 32 - 18) ^ u >>> 3;\n              w[i] = (t1 + w[i - 7] | 0) + (t2 + w[i - 16] | 0) | 0;\n            }\n\n            for (i = 0; i < 64; i++) {\n              t1 = (((e >>> 6 | e << 32 - 6) ^ (e >>> 11 | e << 32 - 11) ^ (e >>> 25 | e << 32 - 25)) + (e & f ^ ~e & g) | 0) + (h + (K[i] + w[i] | 0) | 0) | 0;\n              t2 = ((a >>> 2 | a << 32 - 2) ^ (a >>> 13 | a << 32 - 13) ^ (a >>> 22 | a << 32 - 22)) + (a & b ^ a & c ^ b & c) | 0;\n              h = g;\n              g = f;\n              f = e;\n              e = d + t1 | 0;\n              d = c;\n              c = b;\n              b = a;\n              a = t1 + t2 | 0;\n            }\n\n            h0 = h0 + a | 0;\n            h1 = h1 + b | 0;\n            h2 = h2 + c | 0;\n            h3 = h3 + d | 0;\n            h4 = h4 + e | 0;\n            h5 = h5 + f | 0;\n            h6 = h6 + g | 0;\n            h7 = h7 + h | 0;\n            off += 64;\n            len -= 64;\n          }\n        }\n\n        blocks(m);\n        let i,\n            bytesLeft = m.length % 64,\n            bitLenHi = m.length / 0x20000000 | 0,\n            bitLenLo = m.length << 3,\n            numZeros = bytesLeft < 56 ? 56 : 120,\n            p = m.slice(m.length - bytesLeft, m.length);\n        p.push(0x80);\n\n        for (i = bytesLeft + 1; i < numZeros; i++) {\n          p.push(0);\n        }\n\n        p.push(bitLenHi >>> 24 & 0xff);\n        p.push(bitLenHi >>> 16 & 0xff);\n        p.push(bitLenHi >>> 8 & 0xff);\n        p.push(bitLenHi >>> 0 & 0xff);\n        p.push(bitLenLo >>> 24 & 0xff);\n        p.push(bitLenLo >>> 16 & 0xff);\n        p.push(bitLenLo >>> 8 & 0xff);\n        p.push(bitLenLo >>> 0 & 0xff);\n        blocks(p);\n        return [h0 >>> 24 & 0xff, h0 >>> 16 & 0xff, h0 >>> 8 & 0xff, h0 >>> 0 & 0xff, h1 >>> 24 & 0xff, h1 >>> 16 & 0xff, h1 >>> 8 & 0xff, h1 >>> 0 & 0xff, h2 >>> 24 & 0xff, h2 >>> 16 & 0xff, h2 >>> 8 & 0xff, h2 >>> 0 & 0xff, h3 >>> 24 & 0xff, h3 >>> 16 & 0xff, h3 >>> 8 & 0xff, h3 >>> 0 & 0xff, h4 >>> 24 & 0xff, h4 >>> 16 & 0xff, h4 >>> 8 & 0xff, h4 >>> 0 & 0xff, h5 >>> 24 & 0xff, h5 >>> 16 & 0xff, h5 >>> 8 & 0xff, h5 >>> 0 & 0xff, h6 >>> 24 & 0xff, h6 >>> 16 & 0xff, h6 >>> 8 & 0xff, h6 >>> 0 & 0xff, h7 >>> 24 & 0xff, h7 >>> 16 & 0xff, h7 >>> 8 & 0xff, h7 >>> 0 & 0xff];\n      }\n\n      function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {\n        // compress password if it's longer than hash block length\n        password = password.length <= 64 ? password : SHA256(password);\n        const innerLen = 64 + salt.length + 4;\n        const inner = new Array(innerLen);\n        const outerKey = new Array(64);\n        let i;\n        let dk = []; // inner = (password ^ ipad) || salt || counter\n\n        for (i = 0; i < 64; i++) {\n          inner[i] = 0x36;\n        }\n\n        for (i = 0; i < password.length; i++) {\n          inner[i] ^= password[i];\n        }\n\n        for (i = 0; i < salt.length; i++) {\n          inner[64 + i] = salt[i];\n        }\n\n        for (i = innerLen - 4; i < innerLen; i++) {\n          inner[i] = 0;\n        } // outerKey = password ^ opad\n\n\n        for (i = 0; i < 64; i++) outerKey[i] = 0x5c;\n\n        for (i = 0; i < password.length; i++) outerKey[i] ^= password[i]; // increments counter inside inner\n\n\n        function incrementCounter() {\n          for (let i = innerLen - 1; i >= innerLen - 4; i--) {\n            inner[i]++;\n            if (inner[i] <= 0xff) return;\n            inner[i] = 0;\n          }\n        } // output blocks = SHA256(outerKey || SHA256(inner)) ...\n\n\n        while (dkLen >= 32) {\n          incrementCounter();\n          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));\n          dkLen -= 32;\n        }\n\n        if (dkLen > 0) {\n          incrementCounter();\n          dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));\n        }\n\n        return dk;\n      } // The following is an adaptation of scryptsy\n      // See: https://www.npmjs.com/package/scryptsy\n\n\n      function blockmix_salsa8(BY, Yi, r, x, _X) {\n        let i;\n        arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);\n\n        for (i = 0; i < 2 * r; i++) {\n          blockxor(BY, i * 16, _X, 16);\n          salsa20_8(_X, x);\n          arraycopy(_X, 0, BY, Yi + i * 16, 16);\n        }\n\n        for (i = 0; i < r; i++) {\n          arraycopy(BY, Yi + i * 2 * 16, BY, i * 16, 16);\n        }\n\n        for (i = 0; i < r; i++) {\n          arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);\n        }\n      }\n\n      function R(a, b) {\n        return a << b | a >>> 32 - b;\n      }\n\n      function salsa20_8(B, x) {\n        arraycopy(B, 0, x, 0, 16);\n\n        for (let i = 8; i > 0; i -= 2) {\n          x[4] ^= R(x[0] + x[12], 7);\n          x[8] ^= R(x[4] + x[0], 9);\n          x[12] ^= R(x[8] + x[4], 13);\n          x[0] ^= R(x[12] + x[8], 18);\n          x[9] ^= R(x[5] + x[1], 7);\n          x[13] ^= R(x[9] + x[5], 9);\n          x[1] ^= R(x[13] + x[9], 13);\n          x[5] ^= R(x[1] + x[13], 18);\n          x[14] ^= R(x[10] + x[6], 7);\n          x[2] ^= R(x[14] + x[10], 9);\n          x[6] ^= R(x[2] + x[14], 13);\n          x[10] ^= R(x[6] + x[2], 18);\n          x[3] ^= R(x[15] + x[11], 7);\n          x[7] ^= R(x[3] + x[15], 9);\n          x[11] ^= R(x[7] + x[3], 13);\n          x[15] ^= R(x[11] + x[7], 18);\n          x[1] ^= R(x[0] + x[3], 7);\n          x[2] ^= R(x[1] + x[0], 9);\n          x[3] ^= R(x[2] + x[1], 13);\n          x[0] ^= R(x[3] + x[2], 18);\n          x[6] ^= R(x[5] + x[4], 7);\n          x[7] ^= R(x[6] + x[5], 9);\n          x[4] ^= R(x[7] + x[6], 13);\n          x[5] ^= R(x[4] + x[7], 18);\n          x[11] ^= R(x[10] + x[9], 7);\n          x[8] ^= R(x[11] + x[10], 9);\n          x[9] ^= R(x[8] + x[11], 13);\n          x[10] ^= R(x[9] + x[8], 18);\n          x[12] ^= R(x[15] + x[14], 7);\n          x[13] ^= R(x[12] + x[15], 9);\n          x[14] ^= R(x[13] + x[12], 13);\n          x[15] ^= R(x[14] + x[13], 18);\n        }\n\n        for (let i = 0; i < 16; ++i) {\n          B[i] += x[i];\n        }\n      } // naive approach... going back to loop unrolling may yield additional performance\n\n\n      function blockxor(S, Si, D, len) {\n        for (let i = 0; i < len; i++) {\n          D[i] ^= S[Si + i];\n        }\n      }\n\n      function arraycopy(src, srcPos, dest, destPos, length) {\n        while (length--) {\n          dest[destPos++] = src[srcPos++];\n        }\n      }\n\n      function checkBufferish(o) {\n        if (!o || typeof o.length !== 'number') {\n          return false;\n        }\n\n        for (let i = 0; i < o.length; i++) {\n          const v = o[i];\n\n          if (typeof v !== 'number' || v % 1 || v < 0 || v >= 256) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function ensureInteger(value, name) {\n        if (typeof value !== \"number\" || value % 1) {\n          throw new Error('invalid ' + name);\n        }\n\n        return value;\n      } // N = Cpu cost, r = Memory cost, p = parallelization cost\n      // callback(error, progress, key)\n\n\n      function _scrypt(password, salt, N, r, p, dkLen, callback) {\n        N = ensureInteger(N, 'N');\n        r = ensureInteger(r, 'r');\n        p = ensureInteger(p, 'p');\n        dkLen = ensureInteger(dkLen, 'dkLen');\n\n        if (N === 0 || (N & N - 1) !== 0) {\n          throw new Error('N must be power of 2');\n        }\n\n        if (N > MAX_VALUE / 128 / r) {\n          throw new Error('N too large');\n        }\n\n        if (r > MAX_VALUE / 128 / p) {\n          throw new Error('r too large');\n        }\n\n        if (!checkBufferish(password)) {\n          throw new Error('password must be an array or buffer');\n        }\n\n        password = Array.prototype.slice.call(password);\n\n        if (!checkBufferish(salt)) {\n          throw new Error('salt must be an array or buffer');\n        }\n\n        salt = Array.prototype.slice.call(salt);\n        let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);\n        const B = new Uint32Array(p * 32 * r);\n\n        for (let i = 0; i < B.length; i++) {\n          const j = i * 4;\n          B[i] = (b[j + 3] & 0xff) << 24 | (b[j + 2] & 0xff) << 16 | (b[j + 1] & 0xff) << 8 | (b[j + 0] & 0xff) << 0;\n        }\n\n        const XY = new Uint32Array(64 * r);\n        const V = new Uint32Array(32 * r * N);\n        const Yi = 32 * r; // scratch space\n\n        const x = new Uint32Array(16); // salsa20_8\n\n        const _X = new Uint32Array(16); // blockmix_salsa8\n\n\n        const totalOps = p * N * 2;\n        let currentOp = 0;\n        let lastPercent10 = null; // Set this to true to abandon the scrypt on the next step\n\n        let stop = false; // State information\n\n        let state = 0;\n        let i0 = 0,\n            i1;\n        let Bi; // How many blockmix_salsa8 can we do per step?\n\n        const limit = callback ? parseInt(1000 / r) : 0xffffffff; // Trick from scrypt-async; if there is a setImmediate shim in place, use it\n\n        const nextTick = typeof setImmediate !== 'undefined' ? setImmediate : setTimeout; // This is really all I changed; making scryptsy a state machine so we occasionally\n        // stop and give other evnts on the evnt loop a chance to run. ~RicMoo\n\n        const incrementalSMix = function () {\n          if (stop) {\n            return callback(new Error('cancelled'), currentOp / totalOps);\n          }\n\n          let steps;\n\n          switch (state) {\n            case 0:\n              // for (var i = 0; i < p; i++)...\n              Bi = i0 * 32 * r;\n              arraycopy(B, Bi, XY, 0, Yi); // ROMix - 1\n\n              state = 1; // Move to ROMix 2\n\n              i1 = 0;\n            // Fall through\n\n            case 1:\n              // Run up to 1000 steps of the first inner smix loop\n              steps = N - i1;\n\n              if (steps > limit) {\n                steps = limit;\n              }\n\n              for (let i = 0; i < steps; i++) {\n                // ROMix - 2\n                arraycopy(XY, 0, V, (i1 + i) * Yi, Yi); // ROMix - 3\n\n                blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 4\n              } // for (var i = 0; i < N; i++)\n\n\n              i1 += steps;\n              currentOp += steps;\n\n              if (callback) {\n                // Call the callback with the progress (optionally stopping us)\n                const percent10 = parseInt(1000 * currentOp / totalOps);\n\n                if (percent10 !== lastPercent10) {\n                  stop = callback(null, currentOp / totalOps);\n\n                  if (stop) {\n                    break;\n                  }\n\n                  lastPercent10 = percent10;\n                }\n              }\n\n              if (i1 < N) {\n                break;\n              }\n\n              i1 = 0; // Move to ROMix 6\n\n              state = 2;\n            // Fall through\n\n            case 2:\n              // Run up to 1000 steps of the second inner smix loop\n              steps = N - i1;\n\n              if (steps > limit) {\n                steps = limit;\n              }\n\n              for (let i = 0; i < steps; i++) {\n                // ROMix - 6\n                const offset = (2 * r - 1) * 16; // ROMix - 7\n\n                const j = XY[offset] & N - 1;\n                blockxor(V, j * Yi, XY, Yi); // ROMix - 8 (inner)\n\n                blockmix_salsa8(XY, Yi, r, x, _X); // ROMix - 9 (outer)\n              } // for (var i = 0; i < N; i++)...\n\n\n              i1 += steps;\n              currentOp += steps; // Call the callback with the progress (optionally stopping us)\n\n              if (callback) {\n                const percent10 = parseInt(1000 * currentOp / totalOps);\n\n                if (percent10 !== lastPercent10) {\n                  stop = callback(null, currentOp / totalOps);\n\n                  if (stop) {\n                    break;\n                  }\n\n                  lastPercent10 = percent10;\n                }\n              }\n\n              if (i1 < N) {\n                break;\n              }\n\n              arraycopy(XY, 0, B, Bi, Yi); // ROMix - 10\n              // for (var i = 0; i < p; i++)...\n\n              i0++;\n\n              if (i0 < p) {\n                state = 0;\n                break;\n              }\n\n              b = [];\n\n              for (let i = 0; i < B.length; i++) {\n                b.push(B[i] >> 0 & 0xff);\n                b.push(B[i] >> 8 & 0xff);\n                b.push(B[i] >> 16 & 0xff);\n                b.push(B[i] >> 24 & 0xff);\n              }\n\n              const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen); // Send the result to the callback\n\n              if (callback) {\n                callback(null, 1.0, derivedKey);\n              } // Done; don't break (which would reschedule)\n\n\n              return derivedKey;\n          } // Schedule the next steps\n\n\n          if (callback) {\n            nextTick(incrementalSMix);\n          }\n        }; // Run the smix state machine until completion\n\n\n        if (!callback) {\n          while (true) {\n            const derivedKey = incrementalSMix();\n\n            if (derivedKey != undefined) {\n              return derivedKey;\n            }\n          }\n        } // Bootstrap the async incremental smix\n\n\n        incrementalSMix();\n      }\n\n      const lib = {\n        scrypt: function (password, salt, N, r, p, dkLen, progressCallback) {\n          return new Promise(function (resolve, reject) {\n            let lastProgress = 0;\n\n            if (progressCallback) {\n              progressCallback(0);\n            }\n\n            _scrypt(password, salt, N, r, p, dkLen, function (error, progress, key) {\n              if (error) {\n                reject(error);\n              } else if (key) {\n                if (progressCallback && lastProgress !== 1) {\n                  progressCallback(1);\n                }\n\n                resolve(new Uint8Array(key));\n              } else if (progressCallback && progress !== lastProgress) {\n                lastProgress = progress;\n                return progressCallback(progress);\n              }\n            });\n          });\n        },\n        syncScrypt: function (password, salt, N, r, p, dkLen) {\n          return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));\n        }\n      }; // node.js\n\n      if ('object' !== 'undefined') {\n        module.exports = lib; // RequireJS/AMD\n        // http://www.requirejs.org/docs/api.html\n        // https://github.com/amdjs/amdjs-api/wiki/AMD\n      } else if (typeof undefined === 'function' && undefined.amd) {\n        undefined(lib); // Web Browsers\n      } else if (root) {\n        // If there was an existing library \"scrypt\", make sure it is still available\n        if (root.scrypt) {\n          root._scrypt = root.scrypt;\n        }\n\n        root.scrypt = lib;\n      }\n    })(commonjsGlobal);\n  });\n  var scrypt_1 = scrypt.scrypt;\n  var scrypt_2 = scrypt.syncScrypt;\n  var keystore = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n      return mod && mod.__esModule ? mod : {\n        \"default\": mod\n      };\n    };\n\n    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n      result[\"default\"] = mod;\n      return result;\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var aes_js_1 = __importDefault(aesJs);\n\n    var scrypt$1 = __importStar(scrypt);\n\n    var logger = new lib.Logger(_version$A.version); // Exported Types\n\n    function hasMnemonic(value) {\n      return value != null && value.mnemonic && value.mnemonic.phrase;\n    }\n\n    var KeystoreAccount =\n    /** @class */\n    function (_super) {\n      __extends(KeystoreAccount, _super);\n\n      function KeystoreAccount() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      KeystoreAccount.prototype.isKeystoreAccount = function (value) {\n        return !!(value && value._isKeystoreAccount);\n      };\n\n      return KeystoreAccount;\n    }(lib$3.Description);\n\n    exports.KeystoreAccount = KeystoreAccount;\n\n    function _decrypt(data, key, ciphertext) {\n      var cipher = utils$1.searchPath(data, \"crypto/cipher\");\n\n      if (cipher === \"aes-128-ctr\") {\n        var iv = utils$1.looseArrayify(utils$1.searchPath(data, \"crypto/cipherparams/iv\"));\n        var counter = new aes_js_1.default.Counter(iv);\n        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(key, counter);\n        return lib$1.arrayify(aesCtr.decrypt(ciphertext));\n      }\n\n      return null;\n    }\n\n    function _getAccount(data, key) {\n      var ciphertext = utils$1.looseArrayify(utils$1.searchPath(data, \"crypto/ciphertext\"));\n      var computedMAC = lib$1.hexlify(lib$4.keccak256(lib$1.concat([key.slice(16, 32), ciphertext]))).substring(2);\n\n      if (computedMAC !== utils$1.searchPath(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n      }\n\n      var privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n\n      if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"decrypt\"\n        });\n      }\n\n      var mnemonicKey = key.slice(32, 64);\n      var address = lib$g.computeAddress(privateKey);\n\n      if (data.address) {\n        var check = data.address.toLowerCase();\n\n        if (check.substring(0, 2) !== \"0x\") {\n          check = \"0x\" + check;\n        }\n\n        if (lib$6.getAddress(check) !== address) {\n          throw new Error(\"address mismatch\");\n        }\n      }\n\n      var account = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: lib$1.hexlify(privateKey)\n      }; // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n\n      if (utils$1.searchPath(data, \"x-ethers/version\") === \"0.1\") {\n        var mnemonicCiphertext = utils$1.looseArrayify(utils$1.searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n        var mnemonicIv = utils$1.looseArrayify(utils$1.searchPath(data, \"x-ethers/mnemonicCounter\"));\n        var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n        var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n        var path = utils$1.searchPath(data, \"x-ethers/path\") || lib$h.defaultPath;\n        var locale = utils$1.searchPath(data, \"x-ethers/locale\") || \"en\";\n        var entropy = lib$1.arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n\n        try {\n          var mnemonic = lib$h.entropyToMnemonic(entropy, locale);\n          var node = lib$h.HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n\n          if (node.privateKey != account.privateKey) {\n            throw new Error(\"mnemonic mismatch\");\n          }\n\n          account.mnemonic = node.mnemonic;\n        } catch (error) {\n          // If we don't have the locale wordlist installed to\n          // read this mnemonic, just bail and don't set the\n          // mnemonic\n          if (error.code !== lib.Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n            throw error;\n          }\n        }\n      }\n\n      return new KeystoreAccount(account);\n    }\n\n    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {\n      return lib$1.arrayify(browser$2.pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n    }\n\n    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {\n      return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n    }\n\n    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {\n      var passwordBytes = utils$1.getPassword(password);\n      var kdf = utils$1.searchPath(data, \"crypto/kdf\");\n\n      if (kdf && typeof kdf === \"string\") {\n        var throwError = function (name, value) {\n          return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        };\n\n        if (kdf.toLowerCase() === \"scrypt\") {\n          var salt = utils$1.looseArrayify(utils$1.searchPath(data, \"crypto/kdfparams/salt\"));\n          var N = parseInt(utils$1.searchPath(data, \"crypto/kdfparams/n\"));\n          var r = parseInt(utils$1.searchPath(data, \"crypto/kdfparams/r\"));\n          var p = parseInt(utils$1.searchPath(data, \"crypto/kdfparams/p\")); // Check for all required parameters\n\n          if (!N || !r || !p) {\n            throwError(\"kdf\", kdf);\n          } // Make sure N is a power of 2\n\n\n          if ((N & N - 1) !== 0) {\n            throwError(\"N\", N);\n          }\n\n          var dkLen = parseInt(utils$1.searchPath(data, \"crypto/kdfparams/dklen\"));\n\n          if (dkLen !== 32) {\n            throwError(\"dklen\", dkLen);\n          }\n\n          return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n          var salt = utils$1.looseArrayify(utils$1.searchPath(data, \"crypto/kdfparams/salt\"));\n          var prfFunc = null;\n          var prf = utils$1.searchPath(data, \"crypto/kdfparams/prf\");\n\n          if (prf === \"hmac-sha256\") {\n            prfFunc = \"sha256\";\n          } else if (prf === \"hmac-sha512\") {\n            prfFunc = \"sha512\";\n          } else {\n            throwError(\"prf\", prf);\n          }\n\n          var count = parseInt(utils$1.searchPath(data, \"crypto/kdfparams/c\"));\n          var dkLen = parseInt(utils$1.searchPath(data, \"crypto/kdfparams/dklen\"));\n\n          if (dkLen !== 32) {\n            throwError(\"dklen\", dkLen);\n          }\n\n          return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n      }\n\n      return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n    }\n\n    function decryptSync(json, password) {\n      var data = JSON.parse(json);\n\n      var key = _computeKdfKey(data, password, pbkdf2Sync, scrypt$1.syncScrypt);\n\n      return _getAccount(data, key);\n    }\n\n    exports.decryptSync = decryptSync;\n\n    function decrypt(json, password, progressCallback) {\n      return __awaiter(this, void 0, void 0, function () {\n        var data, key;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              data = JSON.parse(json);\n              return [4\n              /*yield*/\n              , _computeKdfKey(data, password, pbkdf2, scrypt$1.scrypt, progressCallback)];\n\n            case 1:\n              key = _a.sent();\n              return [2\n              /*return*/\n              , _getAccount(data, key)];\n          }\n        });\n      });\n    }\n\n    exports.decrypt = decrypt;\n\n    function encrypt(account, password, options, progressCallback) {\n      try {\n        // Check the address matches the private key\n        if (lib$6.getAddress(account.address) !== lib$g.computeAddress(account.privateKey)) {\n          throw new Error(\"address/privateKey mismatch\");\n        } // Check the mnemonic (if any) matches the private key\n\n\n        if (hasMnemonic(account)) {\n          var mnemonic = account.mnemonic;\n          var node = lib$h.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || lib$h.defaultPath);\n\n          if (node.privateKey != account.privateKey) {\n            throw new Error(\"mnemonic mismatch\");\n          }\n        }\n      } catch (e) {\n        return Promise.reject(e);\n      } // The options are optional, so adjust the call as needed\n\n\n      if (typeof options === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n      }\n\n      if (!options) {\n        options = {};\n      }\n\n      var privateKey = lib$1.arrayify(account.privateKey);\n      var passwordBytes = utils$1.getPassword(password);\n      var entropy = null;\n      var path = null;\n      var locale = null;\n\n      if (hasMnemonic(account)) {\n        var srcMnemonic = account.mnemonic;\n        entropy = lib$1.arrayify(lib$h.mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || lib$h.defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n      }\n\n      var client = options.client;\n\n      if (!client) {\n        client = \"ethers.js\";\n      } // Check/generate the salt\n\n\n      var salt = null;\n\n      if (options.salt) {\n        salt = lib$1.arrayify(options.salt);\n      } else {\n        salt = browser$6.randomBytes(32);\n        ;\n      } // Override initialization vector\n\n\n      var iv = null;\n\n      if (options.iv) {\n        iv = lib$1.arrayify(options.iv);\n\n        if (iv.length !== 16) {\n          throw new Error(\"invalid iv\");\n        }\n      } else {\n        iv = browser$6.randomBytes(16);\n      } // Override the uuid\n\n\n      var uuidRandom = null;\n\n      if (options.uuid) {\n        uuidRandom = lib$1.arrayify(options.uuid);\n\n        if (uuidRandom.length !== 16) {\n          throw new Error(\"invalid uuid\");\n        }\n      } else {\n        uuidRandom = browser$6.randomBytes(16);\n      } // Override the scrypt password-based key derivation function parameters\n\n\n      var N = 1 << 17,\n          r = 8,\n          p = 1;\n\n      if (options.scrypt) {\n        if (options.scrypt.N) {\n          N = options.scrypt.N;\n        }\n\n        if (options.scrypt.r) {\n          r = options.scrypt.r;\n        }\n\n        if (options.scrypt.p) {\n          p = options.scrypt.p;\n        }\n      } // We take 64 bytes:\n      //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n      //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n\n\n      return scrypt$1.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then(function (key) {\n        key = lib$1.arrayify(key); // This will be used to encrypt the wallet (as per Web3 secret storage)\n\n        var derivedKey = key.slice(0, 16);\n        var macPrefix = key.slice(16, 32); // This will be used to encrypt the mnemonic phrase (if any)\n\n        var mnemonicKey = key.slice(32, 64); // Encrypt the private key\n\n        var counter = new aes_js_1.default.Counter(iv);\n        var aesCtr = new aes_js_1.default.ModeOfOperation.ctr(derivedKey, counter);\n        var ciphertext = lib$1.arrayify(aesCtr.encrypt(privateKey)); // Compute the message authentication code, used to check the password\n\n        var mac = lib$4.keccak256(lib$1.concat([macPrefix, ciphertext])); // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n\n        var data = {\n          address: account.address.substring(2).toLowerCase(),\n          id: utils$1.uuidV4(uuidRandom),\n          version: 3,\n          Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n              iv: lib$1.hexlify(iv).substring(2)\n            },\n            ciphertext: lib$1.hexlify(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n              salt: lib$1.hexlify(salt).substring(2),\n              n: N,\n              dklen: 32,\n              p: p,\n              r: r\n            },\n            mac: mac.substring(2)\n          }\n        }; // If we have a mnemonic, encrypt it into the JSON wallet\n\n        if (entropy) {\n          var mnemonicIv = browser$6.randomBytes(16);\n          var mnemonicCounter = new aes_js_1.default.Counter(mnemonicIv);\n          var mnemonicAesCtr = new aes_js_1.default.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n          var mnemonicCiphertext = lib$1.arrayify(mnemonicAesCtr.encrypt(entropy));\n          var now = new Date();\n          var timestamp = now.getUTCFullYear() + \"-\" + utils$1.zpad(now.getUTCMonth() + 1, 2) + \"-\" + utils$1.zpad(now.getUTCDate(), 2) + \"T\" + utils$1.zpad(now.getUTCHours(), 2) + \"-\" + utils$1.zpad(now.getUTCMinutes(), 2) + \"-\" + utils$1.zpad(now.getUTCSeconds(), 2) + \".0Z\";\n          data[\"x-ethers\"] = {\n            client: client,\n            gethFilename: \"UTC--\" + timestamp + \"--\" + data.address,\n            mnemonicCounter: lib$1.hexlify(mnemonicIv).substring(2),\n            mnemonicCiphertext: lib$1.hexlify(mnemonicCiphertext).substring(2),\n            path: path,\n            locale: locale,\n            version: \"0.1\"\n          };\n        }\n\n        return JSON.stringify(data);\n      });\n    }\n\n    exports.encrypt = encrypt;\n  });\n  var keystore$1 = unwrapExports(keystore);\n  var keystore_1 = keystore.KeystoreAccount;\n  var keystore_2 = keystore.decryptSync;\n  var keystore_3 = keystore.decrypt;\n  var keystore_4 = keystore.encrypt;\n  var lib$i = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.decryptCrowdsale = crowdsale.decrypt;\n    exports.getJsonWalletAddress = inspect.getJsonWalletAddress;\n    exports.isCrowdsaleWallet = inspect.isCrowdsaleWallet;\n    exports.isKeystoreWallet = inspect.isKeystoreWallet;\n    exports.decryptKeystore = keystore.decrypt;\n    exports.decryptKeystoreSync = keystore.decryptSync;\n    exports.encryptKeystore = keystore.encrypt;\n\n    function decryptJsonWallet(json, password, progressCallback) {\n      if (inspect.isCrowdsaleWallet(json)) {\n        if (progressCallback) {\n          progressCallback(0);\n        }\n\n        var account = crowdsale.decrypt(json, password);\n\n        if (progressCallback) {\n          progressCallback(1);\n        }\n\n        return Promise.resolve(account);\n      }\n\n      if (inspect.isKeystoreWallet(json)) {\n        return keystore.decrypt(json, password, progressCallback);\n      }\n\n      return Promise.reject(new Error(\"invalid JSON wallet\"));\n    }\n\n    exports.decryptJsonWallet = decryptJsonWallet;\n\n    function decryptJsonWalletSync(json, password) {\n      if (inspect.isCrowdsaleWallet(json)) {\n        return crowdsale.decrypt(json, password);\n      }\n\n      if (inspect.isKeystoreWallet(json)) {\n        return keystore.decryptSync(json, password);\n      }\n\n      throw new Error(\"invalid JSON wallet\");\n    }\n\n    exports.decryptJsonWalletSync = decryptJsonWalletSync;\n  });\n  var index$i = unwrapExports(lib$i);\n  var lib_1$i = lib$i.decryptCrowdsale;\n  var lib_2$h = lib$i.getJsonWalletAddress;\n  var lib_3$e = lib$i.isCrowdsaleWallet;\n  var lib_4$b = lib$i.isKeystoreWallet;\n  var lib_5$a = lib$i.decryptKeystore;\n  var lib_6$6 = lib$i.decryptKeystoreSync;\n  var lib_7$5 = lib$i.encryptKeystore;\n  var lib_8$4 = lib$i.decryptJsonWallet;\n  var lib_9$4 = lib$i.decryptJsonWalletSync;\n\n  var _version$C = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"wallet/5.0.3\";\n  });\n\n  var _version$D = unwrapExports(_version$C);\n\n  var _version_1$j = _version$C.version;\n  var lib$j = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$C.version);\n\n    function isAccount(value) {\n      return value != null && lib$1.isHexString(value.privateKey, 32) && value.address != null;\n    }\n\n    function hasMnemonic(value) {\n      var mnemonic = value.mnemonic;\n      return mnemonic && mnemonic.phrase;\n    }\n\n    var Wallet =\n    /** @class */\n    function (_super) {\n      __extends(Wallet, _super);\n\n      function Wallet(privateKey, provider) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, Wallet);\n        _this = _super.call(this) || this;\n\n        if (isAccount(privateKey)) {\n          var signingKey_1 = new lib$f.SigningKey(privateKey.privateKey);\n          lib$3.defineReadOnly(_this, \"_signingKey\", function () {\n            return signingKey_1;\n          });\n          lib$3.defineReadOnly(_this, \"address\", lib$g.computeAddress(_this.publicKey));\n\n          if (_this.address !== lib$6.getAddress(privateKey.address)) {\n            logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n          }\n\n          if (hasMnemonic(privateKey)) {\n            var srcMnemonic_1 = privateKey.mnemonic;\n            lib$3.defineReadOnly(_this, \"_mnemonic\", function () {\n              return {\n                phrase: srcMnemonic_1.phrase,\n                path: srcMnemonic_1.path || lib$h.defaultPath,\n                locale: srcMnemonic_1.locale || \"en\"\n              };\n            });\n            var mnemonic = _this.mnemonic;\n            var node = lib$h.HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n\n            if (lib$g.computeAddress(node.privateKey) !== _this.address) {\n              logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n          } else {\n            lib$3.defineReadOnly(_this, \"_mnemonic\", function () {\n              return null;\n            });\n          }\n        } else {\n          if (lib$f.SigningKey.isSigningKey(privateKey)) {\n            /* istanbul ignore if */\n            if (privateKey.curve !== \"secp256k1\") {\n              logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n            }\n\n            lib$3.defineReadOnly(_this, \"_signingKey\", function () {\n              return privateKey;\n            });\n          } else {\n            var signingKey_2 = new lib$f.SigningKey(privateKey);\n            lib$3.defineReadOnly(_this, \"_signingKey\", function () {\n              return signingKey_2;\n            });\n          }\n\n          lib$3.defineReadOnly(_this, \"_mnemonic\", function () {\n            return null;\n          });\n          lib$3.defineReadOnly(_this, \"address\", lib$g.computeAddress(_this.publicKey));\n        }\n        /* istanbul ignore if */\n\n\n        if (provider && !lib$b.Provider.isProvider(provider)) {\n          logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n\n        lib$3.defineReadOnly(_this, \"provider\", provider || null);\n        return _this;\n      }\n\n      Object.defineProperty(Wallet.prototype, \"mnemonic\", {\n        get: function () {\n          return this._mnemonic();\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(Wallet.prototype, \"privateKey\", {\n        get: function () {\n          return this._signingKey().privateKey;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(Wallet.prototype, \"publicKey\", {\n        get: function () {\n          return this._signingKey().publicKey;\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      Wallet.prototype.getAddress = function () {\n        return Promise.resolve(this.address);\n      };\n\n      Wallet.prototype.connect = function (provider) {\n        return new Wallet(this, provider);\n      };\n\n      Wallet.prototype.signTransaction = function (transaction) {\n        var _this = this;\n\n        return lib$3.resolveProperties(transaction).then(function (tx) {\n          if (tx.from != null) {\n            if (lib$6.getAddress(tx.from) !== _this.address) {\n              logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n            }\n\n            delete tx.from;\n          }\n\n          var signature = _this._signingKey().signDigest(lib$4.keccak256(lib$g.serialize(tx)));\n\n          return lib$g.serialize(tx, signature);\n        });\n      };\n\n      Wallet.prototype.signMessage = function (message) {\n        return Promise.resolve(lib$1.joinSignature(this._signingKey().signDigest(lib$9.hashMessage(message))));\n      };\n\n      Wallet.prototype.encrypt = function (password, options, progressCallback) {\n        if (typeof options === \"function\" && !progressCallback) {\n          progressCallback = options;\n          options = {};\n        }\n\n        if (progressCallback && typeof progressCallback !== \"function\") {\n          throw new Error(\"invalid callback\");\n        }\n\n        if (!options) {\n          options = {};\n        }\n\n        return lib$i.encryptKeystore(this, password, options, progressCallback);\n      };\n      /**\n       *  Static methods to create Wallet instances.\n       */\n\n\n      Wallet.createRandom = function (options) {\n        var entropy = browser$6.randomBytes(16);\n\n        if (!options) {\n          options = {};\n        }\n\n        if (options.extraEntropy) {\n          entropy = lib$1.arrayify(lib$1.hexDataSlice(lib$4.keccak256(lib$1.concat([entropy, options.extraEntropy])), 0, 16));\n        }\n\n        var mnemonic = lib$h.entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n      };\n\n      Wallet.fromEncryptedJson = function (json, password, progressCallback) {\n        return lib$i.decryptJsonWallet(json, password, progressCallback).then(function (account) {\n          return new Wallet(account);\n        });\n      };\n\n      Wallet.fromEncryptedJsonSync = function (json, password) {\n        return new Wallet(lib$i.decryptJsonWalletSync(json, password));\n      };\n\n      Wallet.fromMnemonic = function (mnemonic, path, wordlist) {\n        if (!path) {\n          path = lib$h.defaultPath;\n        }\n\n        return new Wallet(lib$h.HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n      };\n\n      return Wallet;\n    }(lib$c.Signer);\n\n    exports.Wallet = Wallet;\n\n    function verifyMessage(message, signature) {\n      return lib$g.recoverAddress(lib$9.hashMessage(message), signature);\n    }\n\n    exports.verifyMessage = verifyMessage;\n  });\n  var index$j = unwrapExports(lib$j);\n  var lib_1$j = lib$j.Wallet;\n  var lib_2$i = lib$j.verifyMessage;\n\n  var _version$E = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"networks/5.0.3\";\n  });\n\n  var _version$F = unwrapExports(_version$E);\n\n  var _version_1$k = _version$E.version;\n  var lib$k = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$E.version);\n    ;\n\n    function isRenetworkable(value) {\n      return value && typeof value.renetwork === \"function\";\n    }\n\n    function ethDefaultProvider(network) {\n      var func = function (providers, options) {\n        if (options == null) {\n          options = {};\n        }\n\n        var providerList = [];\n\n        if (providers.InfuraProvider) {\n          try {\n            providerList.push(new providers.InfuraProvider(network, options.infura));\n          } catch (error) {}\n        }\n\n        if (providers.EtherscanProvider) {\n          try {\n            providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n          } catch (error) {}\n        }\n\n        if (providers.AlchemyProvider) {\n          try {\n            providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n          } catch (error) {}\n        }\n\n        if (providers.CloudflareProvider) {\n          try {\n            providerList.push(new providers.CloudflareProvider(network));\n          } catch (error) {}\n        }\n\n        if (providerList.length === 0) {\n          return null;\n        }\n\n        if (providers.FallbackProvider) {\n          var quorum = 1;\n\n          if (options.quorum != null) {\n            quorum = options.quorum;\n          } else if (network === \"homestead\") {\n            quorum = 2;\n          }\n\n          return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n      };\n\n      func.renetwork = function (network) {\n        return ethDefaultProvider(network);\n      };\n\n      return func;\n    }\n\n    function etcDefaultProvider(url, network) {\n      var func = function (providers, options) {\n        if (providers.JsonRpcProvider) {\n          return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n      };\n\n      func.renetwork = function (network) {\n        return etcDefaultProvider(url, network);\n      };\n\n      return func;\n    }\n\n    var homestead = {\n      chainId: 1,\n      ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n      name: \"homestead\",\n      _defaultProvider: ethDefaultProvider(\"homestead\")\n    };\n    var ropsten = {\n      chainId: 3,\n      ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n      name: \"ropsten\",\n      _defaultProvider: ethDefaultProvider(\"ropsten\")\n    };\n    var classicMordor = {\n      chainId: 63,\n      name: \"classicMordor\",\n      _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n    };\n    var networks = {\n      unspecified: {\n        chainId: 0,\n        name: \"unspecified\"\n      },\n      homestead: homestead,\n      mainnet: homestead,\n      morden: {\n        chainId: 2,\n        name: \"morden\"\n      },\n      ropsten: ropsten,\n      testnet: ropsten,\n      rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n      },\n      kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n      },\n      goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n      },\n      // ETC (See: #351)\n      classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/etc\", \"classic\")\n      },\n      classicMorden: {\n        chainId: 62,\n        name: \"classicMorden\"\n      },\n      classicMordor: classicMordor,\n      classicTestnet: classicMordor,\n      classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/kotti\", \"classicKotti\")\n      }\n    };\n    /**\n     *  getNetwork\n     *\n     *  Converts a named common networks or chain ID (network ID) to a Network\n     *  and verifies a network is a valid Network..\n     */\n\n    function getNetwork(network) {\n      // No network (null)\n      if (network == null) {\n        return null;\n      }\n\n      if (typeof network === \"number\") {\n        for (var name_1 in networks) {\n          var standard_1 = networks[name_1];\n\n          if (standard_1.chainId === network) {\n            return {\n              name: standard_1.name,\n              chainId: standard_1.chainId,\n              ensAddress: standard_1.ensAddress || null,\n              _defaultProvider: standard_1._defaultProvider || null\n            };\n          }\n        }\n\n        return {\n          chainId: network,\n          name: \"unknown\"\n        };\n      }\n\n      if (typeof network === \"string\") {\n        var standard_2 = networks[network];\n\n        if (standard_2 == null) {\n          return null;\n        }\n\n        return {\n          name: standard_2.name,\n          chainId: standard_2.chainId,\n          ensAddress: standard_2.ensAddress,\n          _defaultProvider: standard_2._defaultProvider || null\n        };\n      }\n\n      var standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n      if (!standard) {\n        if (typeof network.chainId !== \"number\") {\n          logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n\n        return network;\n      } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n      if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n      } // @TODO: In the next major version add an attach function to a defaultProvider\n      // class and move the _defaultProvider internal to this file (extend Network)\n\n\n      var defaultProvider = network._defaultProvider || null;\n\n      if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n          defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n          defaultProvider = standard._defaultProvider;\n        }\n      } // Standard Network (allow overriding the ENS address)\n\n\n      return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: network.ensAddress || standard.ensAddress || null,\n        _defaultProvider: defaultProvider\n      };\n    }\n\n    exports.getNetwork = getNetwork;\n  });\n  var index$k = unwrapExports(lib$k);\n  var lib_1$k = lib$k.getNetwork;\n  var browser$8 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function decode(textData) {\n      textData = atob(textData);\n      var data = [];\n\n      for (var i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n      }\n\n      return lib$1.arrayify(data);\n    }\n\n    exports.decode = decode;\n\n    function encode(data) {\n      data = lib$1.arrayify(data);\n      var textData = \"\";\n\n      for (var i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n      }\n\n      return btoa(textData);\n    }\n\n    exports.encode = encode;\n  });\n  var browser$9 = unwrapExports(browser$8);\n  var browser_1$4 = browser$8.decode;\n  var browser_2$3 = browser$8.encode;\n\n  var _version$G = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"web/5.0.4\";\n  });\n\n  var _version$H = unwrapExports(_version$G);\n\n  var _version_1$l = _version$G.version;\n  var browserGeturl = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    function getUrl(href, options) {\n      return __awaiter(this, void 0, void 0, function () {\n        var request, response, body, headers;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (options == null) {\n                options = {};\n              }\n\n              request = {\n                method: options.method || \"GET\",\n                headers: options.headers || {},\n                body: options.body || undefined,\n                mode: \"cors\",\n                cache: \"no-cache\",\n                credentials: \"same-origin\",\n                redirect: \"follow\",\n                referrer: \"client\"\n              };\n              return [4\n              /*yield*/\n              , fetch(href, request)];\n\n            case 1:\n              response = _a.sent();\n              return [4\n              /*yield*/\n              , response.arrayBuffer()];\n\n            case 2:\n              body = _a.sent();\n              headers = {};\n\n              if (response.headers.forEach) {\n                response.headers.forEach(function (value, key) {\n                  headers[key.toLowerCase()] = value;\n                });\n              } else {\n                response.headers.keys().forEach(function (key) {\n                  headers[key.toLowerCase()] = response.headers.get(key);\n                });\n              }\n\n              return [2\n              /*return*/\n              , {\n                headers: headers,\n                statusCode: response.status,\n                statusMessage: response.statusText,\n                body: lib$1.arrayify(new Uint8Array(body))\n              }];\n          }\n        });\n      });\n    }\n\n    exports.getUrl = getUrl;\n  });\n  var browserGeturl$1 = unwrapExports(browserGeturl);\n  var browserGeturl_1 = browserGeturl.getUrl;\n  var lib$l = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$G.version);\n\n    function staller(duration) {\n      return new Promise(function (resolve) {\n        setTimeout(resolve, duration);\n      });\n    } // This API is still a work in progress; the future changes will likely be:\n    // - ConnectionInfo => FetchDataRequest<T = any>\n    // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n    //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n    // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n    // For this reason, it should be considered internal until the API is finalized\n\n\n    function _fetchData(connection, body, processFunc) {\n      // How many times to retry in the event of a throttle\n      var attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n      logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n      var throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n      var throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n      logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n      var headers = {};\n      var url = null; // @TODO: Allow ConnectionInfo to override some of these values\n\n      var options = {\n        method: \"GET\"\n      };\n      var allow304 = false;\n      var timeout = 2 * 60 * 1000;\n\n      if (typeof connection === \"string\") {\n        url = connection;\n      } else if (typeof connection === \"object\") {\n        if (connection == null || connection.url == null) {\n          logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n          timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n          for (var key in connection.headers) {\n            headers[key.toLowerCase()] = {\n              key: key,\n              value: String(connection.headers[key])\n            };\n\n            if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n              allow304 = true;\n            }\n          }\n        }\n\n        if (connection.user != null && connection.password != null) {\n          if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n            logger.throwError(\"basic authentication requires a secure https url\", lib.Logger.errors.INVALID_ARGUMENT, {\n              argument: \"url\",\n              url: url,\n              user: connection.user,\n              password: \"[REDACTED]\"\n            });\n          }\n\n          var authorization = connection.user + \":\" + connection.password;\n          headers[\"authorization\"] = {\n            key: \"Authorization\",\n            value: \"Basic \" + browser$8.encode(lib$8.toUtf8Bytes(authorization))\n          };\n        }\n      }\n\n      if (body) {\n        options.method = \"POST\";\n        options.body = body;\n\n        if (headers[\"content-type\"] == null) {\n          headers[\"content-type\"] = {\n            key: \"Content-Type\",\n            value: \"application/octet-stream\"\n          };\n        }\n      }\n\n      var flatHeaders = {};\n      Object.keys(headers).forEach(function (key) {\n        var header = headers[key];\n        flatHeaders[header.key] = header.value;\n      });\n      options.headers = flatHeaders;\n\n      var runningTimeout = function () {\n        var timer = null;\n        var promise = new Promise(function (resolve, reject) {\n          if (timeout) {\n            timer = setTimeout(function () {\n              if (timer == null) {\n                return;\n              }\n\n              timer = null;\n              reject(logger.makeError(\"timeout\", lib.Logger.errors.TIMEOUT, {\n                requestBody: options.body || null,\n                requestMethod: options.method,\n                timeout: timeout,\n                url: url\n              }));\n            }, timeout);\n          }\n        });\n\n        var cancel = function () {\n          if (timer == null) {\n            return;\n          }\n\n          clearTimeout(timer);\n          timer = null;\n        };\n\n        return {\n          promise: promise,\n          cancel: cancel\n        };\n      }();\n\n      var runningFetch = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var attempt, response, tryAgain, stall, retryAfter, error_1, body_1, result, error_2, tryAgain, timeout_1;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                attempt = 0;\n                _a.label = 1;\n\n              case 1:\n                if (!(attempt < attemptLimit)) return [3\n                /*break*/\n                , 19];\n                response = null;\n                _a.label = 2;\n\n              case 2:\n                _a.trys.push([2, 8,, 9]);\n\n                return [4\n                /*yield*/\n                , browserGeturl.getUrl(url, options)];\n\n              case 3:\n                response = _a.sent();\n                if (!(response.statusCode === 429 && attempt < attemptLimit)) return [3\n                /*break*/\n                , 7];\n                tryAgain = true;\n                if (!throttleCallback) return [3\n                /*break*/\n                , 5];\n                return [4\n                /*yield*/\n                , throttleCallback(attempt, url)];\n\n              case 4:\n                tryAgain = _a.sent();\n                _a.label = 5;\n\n              case 5:\n                if (!tryAgain) return [3\n                /*break*/\n                , 7];\n                stall = 0;\n                retryAfter = response.headers[\"retry-after\"];\n\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                  stall = parseInt(retryAfter) * 1000;\n                } else {\n                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                } //console.log(\"Stalling 429\");\n\n\n                return [4\n                /*yield*/\n                , staller(stall)];\n\n              case 6:\n                //console.log(\"Stalling 429\");\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 18];\n\n              case 7:\n                return [3\n                /*break*/\n                , 9];\n\n              case 8:\n                error_1 = _a.sent();\n                response = error_1.response;\n\n                if (response == null) {\n                  runningTimeout.cancel();\n                  logger.throwError(\"missing response\", lib.Logger.errors.SERVER_ERROR, {\n                    requestBody: options.body || null,\n                    requestMethod: options.method,\n                    serverError: error_1,\n                    url: url\n                  });\n                }\n\n                return [3\n                /*break*/\n                , 9];\n\n              case 9:\n                body_1 = response.body;\n\n                if (allow304 && response.statusCode === 304) {\n                  body_1 = null;\n                } else if (response.statusCode < 200 || response.statusCode >= 300) {\n                  runningTimeout.cancel();\n                  logger.throwError(\"bad response\", lib.Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: body_1,\n                    requestBody: options.body || null,\n                    requestMethod: options.method,\n                    url: url\n                  });\n                }\n\n                if (!processFunc) return [3\n                /*break*/\n                , 17];\n                _a.label = 10;\n\n              case 10:\n                _a.trys.push([10, 12,, 17]);\n\n                return [4\n                /*yield*/\n                , processFunc(body_1, response)];\n\n              case 11:\n                result = _a.sent();\n                runningTimeout.cancel();\n                return [2\n                /*return*/\n                , result];\n\n              case 12:\n                error_2 = _a.sent();\n                if (!(error_2.throttleRetry && attempt < attemptLimit)) return [3\n                /*break*/\n                , 16];\n                tryAgain = true;\n                if (!throttleCallback) return [3\n                /*break*/\n                , 14];\n                return [4\n                /*yield*/\n                , throttleCallback(attempt, url)];\n\n              case 13:\n                tryAgain = _a.sent();\n                _a.label = 14;\n\n              case 14:\n                if (!tryAgain) return [3\n                /*break*/\n                , 16];\n                timeout_1 = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n\n                return [4\n                /*yield*/\n                , staller(timeout_1)];\n\n              case 15:\n                //console.log(\"Stalling callback\");\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 18];\n\n              case 16:\n                runningTimeout.cancel();\n                logger.throwError(\"processing response error\", lib.Logger.errors.SERVER_ERROR, {\n                  body: body_1,\n                  error: error_2,\n                  requestBody: options.body || null,\n                  requestMethod: options.method,\n                  url: url\n                });\n                return [3\n                /*break*/\n                , 17];\n\n              case 17:\n                runningTimeout.cancel(); // If we had a processFunc, it eitehr returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n\n                return [2\n                /*return*/\n                , body_1];\n\n              case 18:\n                attempt++;\n                return [3\n                /*break*/\n                , 1];\n\n              case 19:\n                return [2\n                /*return*/\n                , logger.throwError(\"failed response\", lib.Logger.errors.SERVER_ERROR, {\n                  requestBody: options.body || null,\n                  requestMethod: options.method,\n                  url: url\n                })];\n            }\n          });\n        });\n      }();\n\n      return Promise.race([runningTimeout.promise, runningFetch]);\n    }\n\n    exports._fetchData = _fetchData;\n\n    function fetchJson(connection, json, processFunc) {\n      var processJsonFunc = function (value, response) {\n        var result = null;\n\n        if (value != null) {\n          try {\n            result = JSON.parse(lib$8.toUtf8String(value));\n          } catch (error) {\n            logger.throwError(\"invalid JSON\", lib.Logger.errors.SERVER_ERROR, {\n              body: value,\n              error: error\n            });\n          }\n        }\n\n        if (processFunc) {\n          result = processFunc(result, response);\n        }\n\n        return result;\n      }; // If we have json to send, we must\n      // - add content-type of application/json (unless already overridden)\n      // - convert the json to bytes\n\n\n      var body = null;\n\n      if (json != null) {\n        body = lib$8.toUtf8Bytes(json); // Create a connection with the content-type set for JSON\n\n        var updated = typeof connection === \"string\" ? {\n          url: connection\n        } : lib$3.shallowCopy(connection);\n\n        if (updated.headers) {\n          var hasContentType = Object.keys(updated.headers).filter(function (k) {\n            return k.toLowerCase() === \"content-type\";\n          }).length !== 0;\n\n          if (!hasContentType) {\n            updated.headers = lib$3.shallowCopy(updated.headers);\n            updated.headers[\"content-type\"] = \"application/json\";\n          }\n        } else {\n          updated.headers = {\n            \"content-type\": \"application/json\"\n          };\n        }\n\n        connection = updated;\n      }\n\n      return _fetchData(connection, body, processJsonFunc);\n    }\n\n    exports.fetchJson = fetchJson;\n\n    function poll(func, options) {\n      if (!options) {\n        options = {};\n      }\n\n      options = lib$3.shallowCopy(options);\n\n      if (options.floor == null) {\n        options.floor = 0;\n      }\n\n      if (options.ceiling == null) {\n        options.ceiling = 10000;\n      }\n\n      if (options.interval == null) {\n        options.interval = 250;\n      }\n\n      return new Promise(function (resolve, reject) {\n        var timer = null;\n        var done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\n        var cancel = function () {\n          if (done) {\n            return false;\n          }\n\n          done = true;\n\n          if (timer) {\n            clearTimeout(timer);\n          }\n\n          return true;\n        };\n\n        if (options.timeout) {\n          timer = setTimeout(function () {\n            if (cancel()) {\n              reject(new Error(\"timeout\"));\n            }\n          }, options.timeout);\n        }\n\n        var retryLimit = options.retryLimit;\n        var attempt = 0;\n\n        function check() {\n          return func().then(function (result) {\n            // If we have a result, or are allowed null then we're done\n            if (result !== undefined) {\n              if (cancel()) {\n                resolve(result);\n              }\n            } else if (options.oncePoll) {\n              options.oncePoll.once(\"poll\", check);\n            } else if (options.onceBlock) {\n              options.onceBlock.once(\"block\", check); // Otherwise, exponential back-off (up to 10s) our next request\n            } else if (!done) {\n              attempt++;\n\n              if (attempt > retryLimit) {\n                if (cancel()) {\n                  reject(new Error(\"retry limit reached\"));\n                }\n\n                return;\n              }\n\n              var timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\n              if (timeout < options.floor) {\n                timeout = options.floor;\n              }\n\n              if (timeout > options.ceiling) {\n                timeout = options.ceiling;\n              }\n\n              setTimeout(check, timeout);\n            }\n\n            return null;\n          }, function (error) {\n            if (cancel()) {\n              reject(error);\n            }\n          });\n        }\n\n        check();\n      });\n    }\n\n    exports.poll = poll;\n  });\n  var index$l = unwrapExports(lib$l);\n  var lib_1$l = lib$l._fetchData;\n  var lib_2$j = lib$l.fetchJson;\n  var lib_3$f = lib$l.poll;\n\n  var _version$I = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"providers/5.0.6\";\n  });\n\n  var _version$J = unwrapExports(_version$I);\n\n  var _version_1$m = _version$I.version;\n  var formatter = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version);\n\n    var Formatter =\n    /** @class */\n    function () {\n      function Formatter() {\n        var _newTarget = this.constructor;\n        logger.checkNew(_newTarget, Formatter);\n        this.formats = this.getDefaultFormats();\n      }\n\n      Formatter.prototype.getDefaultFormats = function () {\n        var _this = this;\n\n        var formats = {};\n        var address = this.address.bind(this);\n        var bigNumber = this.bigNumber.bind(this);\n        var blockTag = this.blockTag.bind(this);\n        var data = this.data.bind(this);\n        var hash = this.hash.bind(this);\n        var hex = this.hex.bind(this);\n        var number = this.number.bind(this);\n\n        var strictData = function (v) {\n          return _this.data(v, true);\n        };\n\n        formats.transaction = {\n          hash: hash,\n          blockHash: Formatter.allowNull(hash, null),\n          blockNumber: Formatter.allowNull(number, null),\n          transactionIndex: Formatter.allowNull(number, null),\n          confirmations: Formatter.allowNull(number, null),\n          from: address,\n          gasPrice: bigNumber,\n          gasLimit: bigNumber,\n          to: Formatter.allowNull(address, null),\n          value: bigNumber,\n          nonce: number,\n          data: data,\n          r: Formatter.allowNull(this.uint256),\n          s: Formatter.allowNull(this.uint256),\n          v: Formatter.allowNull(number),\n          creates: Formatter.allowNull(address, null),\n          raw: Formatter.allowNull(data)\n        };\n        formats.transactionRequest = {\n          from: Formatter.allowNull(address),\n          nonce: Formatter.allowNull(number),\n          gasLimit: Formatter.allowNull(bigNumber),\n          gasPrice: Formatter.allowNull(bigNumber),\n          to: Formatter.allowNull(address),\n          value: Formatter.allowNull(bigNumber),\n          data: Formatter.allowNull(strictData)\n        };\n        formats.receiptLog = {\n          transactionIndex: number,\n          blockNumber: number,\n          transactionHash: hash,\n          address: address,\n          topics: Formatter.arrayOf(hash),\n          data: data,\n          logIndex: number,\n          blockHash: hash\n        };\n        formats.receipt = {\n          to: Formatter.allowNull(this.address, null),\n          from: Formatter.allowNull(this.address, null),\n          contractAddress: Formatter.allowNull(address, null),\n          transactionIndex: number,\n          root: Formatter.allowNull(hash),\n          gasUsed: bigNumber,\n          logsBloom: Formatter.allowNull(data),\n          blockHash: hash,\n          transactionHash: hash,\n          logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n          blockNumber: number,\n          confirmations: Formatter.allowNull(number, null),\n          cumulativeGasUsed: bigNumber,\n          status: Formatter.allowNull(number)\n        };\n        formats.block = {\n          hash: hash,\n          parentHash: hash,\n          number: number,\n          timestamp: number,\n          nonce: Formatter.allowNull(hex),\n          difficulty: this.difficulty.bind(this),\n          gasLimit: bigNumber,\n          gasUsed: bigNumber,\n          miner: address,\n          extraData: data,\n          transactions: Formatter.allowNull(Formatter.arrayOf(hash))\n        };\n        formats.blockWithTransactions = lib$3.shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n          fromBlock: Formatter.allowNull(blockTag, undefined),\n          toBlock: Formatter.allowNull(blockTag, undefined),\n          blockHash: Formatter.allowNull(hash, undefined),\n          address: Formatter.allowNull(address, undefined),\n          topics: Formatter.allowNull(this.topics.bind(this), undefined)\n        };\n        formats.filterLog = {\n          blockNumber: Formatter.allowNull(number),\n          blockHash: Formatter.allowNull(hash),\n          transactionIndex: number,\n          removed: Formatter.allowNull(this.boolean.bind(this)),\n          address: address,\n          data: Formatter.allowFalsish(data, \"0x\"),\n          topics: Formatter.arrayOf(hash),\n          transactionHash: hash,\n          logIndex: number\n        };\n        return formats;\n      }; // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n      // Strict! Used on input.\n\n\n      Formatter.prototype.number = function (number) {\n        return lib$2.BigNumber.from(number).toNumber();\n      }; // Strict! Used on input.\n\n\n      Formatter.prototype.bigNumber = function (value) {\n        return lib$2.BigNumber.from(value);\n      }; // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n\n      Formatter.prototype.boolean = function (value) {\n        if (typeof value === \"boolean\") {\n          return value;\n        }\n\n        if (typeof value === \"string\") {\n          value = value.toLowerCase();\n\n          if (value === \"true\") {\n            return true;\n          }\n\n          if (value === \"false\") {\n            return false;\n          }\n        }\n\n        throw new Error(\"invalid boolean - \" + value);\n      };\n\n      Formatter.prototype.hex = function (value, strict) {\n        if (typeof value === \"string\") {\n          if (!strict && value.substring(0, 2) !== \"0x\") {\n            value = \"0x\" + value;\n          }\n\n          if (lib$1.isHexString(value)) {\n            return value.toLowerCase();\n          }\n        }\n\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n      };\n\n      Formatter.prototype.data = function (value, strict) {\n        var result = this.hex(value, strict);\n\n        if (result.length % 2 !== 0) {\n          throw new Error(\"invalid data; odd-length - \" + value);\n        }\n\n        return result;\n      }; // Requires an address\n      // Strict! Used on input.\n\n\n      Formatter.prototype.address = function (value) {\n        return lib$6.getAddress(value);\n      };\n\n      Formatter.prototype.callAddress = function (value) {\n        if (!lib$1.isHexString(value, 32)) {\n          return null;\n        }\n\n        var address = lib$6.getAddress(lib$1.hexDataSlice(value, 12));\n        return address === lib$7.AddressZero ? null : address;\n      };\n\n      Formatter.prototype.contractAddress = function (value) {\n        return lib$6.getContractAddress(value);\n      }; // Strict! Used on input.\n\n\n      Formatter.prototype.blockTag = function (blockTag) {\n        if (blockTag == null) {\n          return \"latest\";\n        }\n\n        if (blockTag === \"earliest\") {\n          return \"0x0\";\n        }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n          return blockTag;\n        }\n\n        if (typeof blockTag === \"number\" || lib$1.isHexString(blockTag)) {\n          return lib$1.hexValue(blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n      }; // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n\n      Formatter.prototype.hash = function (value, strict) {\n        var result = this.hex(value, strict);\n\n        if (lib$1.hexDataLength(result) !== 32) {\n          return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n\n        return result;\n      }; // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n\n      Formatter.prototype.difficulty = function (value) {\n        if (value == null) {\n          return null;\n        }\n\n        var v = lib$2.BigNumber.from(value);\n\n        try {\n          return v.toNumber();\n        } catch (error) {}\n\n        return null;\n      };\n\n      Formatter.prototype.uint256 = function (value) {\n        if (!lib$1.isHexString(value)) {\n          throw new Error(\"invalid uint256\");\n        }\n\n        return lib$1.hexZeroPad(value, 32);\n      };\n\n      Formatter.prototype._block = function (value, format) {\n        if (value.author != null && value.miner == null) {\n          value.miner = value.author;\n        }\n\n        return Formatter.check(format, value);\n      };\n\n      Formatter.prototype.block = function (value) {\n        return this._block(value, this.formats.block);\n      };\n\n      Formatter.prototype.blockWithTransactions = function (value) {\n        return this._block(value, this.formats.blockWithTransactions);\n      }; // Strict! Used on input.\n\n\n      Formatter.prototype.transactionRequest = function (value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n      };\n\n      Formatter.prototype.transactionResponse = function (transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n          transaction.gasLimit = transaction.gas;\n        } // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n\n\n        if (transaction.to && lib$2.BigNumber.from(transaction.to).isZero()) {\n          transaction.to = \"0x0000000000000000000000000000000000000000\";\n        } // Rename input to data\n\n\n        if (transaction.input != null && transaction.data == null) {\n          transaction.data = transaction.input;\n        } // If to and creates are empty, populate the creates from the transaction\n\n\n        if (transaction.to == null && transaction.creates == null) {\n          transaction.creates = this.contractAddress(transaction);\n        } // @TODO: use transaction.serialize? Have to add support for including v, r, and s...\n\n        /*\n        if (!transaction.raw) {\n                // Very loose providers (e.g. TestRPC) do not provide a signature or raw\n             if (transaction.v && transaction.r && transaction.s) {\n                 let raw = [\n                     stripZeros(hexlify(transaction.nonce)),\n                     stripZeros(hexlify(transaction.gasPrice)),\n                     stripZeros(hexlify(transaction.gasLimit)),\n                     (transaction.to || \"0x\"),\n                     stripZeros(hexlify(transaction.value || \"0x\")),\n                     hexlify(transaction.data || \"0x\"),\n                     stripZeros(hexlify(transaction.v || \"0x\")),\n                     stripZeros(hexlify(transaction.r)),\n                     stripZeros(hexlify(transaction.s)),\n                 ];\n                    transaction.raw = rlpEncode(raw);\n             }\n         }\n         */\n\n\n        var result = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n          var chainId = transaction.chainId;\n\n          if (lib$1.isHexString(chainId)) {\n            chainId = lib$2.BigNumber.from(chainId).toNumber();\n          }\n\n          result.chainId = chainId;\n        } else {\n          var chainId = transaction.networkId; // geth-etc returns chainId\n\n          if (chainId == null && result.v == null) {\n            chainId = transaction.chainId;\n          }\n\n          if (lib$1.isHexString(chainId)) {\n            chainId = lib$2.BigNumber.from(chainId).toNumber();\n          }\n\n          if (typeof chainId !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n\n            if (chainId < 0) {\n              chainId = 0;\n            }\n\n            chainId = parseInt(chainId);\n          }\n\n          if (typeof chainId !== \"number\") {\n            chainId = 0;\n          }\n\n          result.chainId = chainId;\n        } // 0x0000... should actually be null\n\n\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n          result.blockHash = null;\n        }\n\n        return result;\n      };\n\n      Formatter.prototype.transaction = function (value) {\n        return lib$g.parse(value);\n      };\n\n      Formatter.prototype.receiptLog = function (value) {\n        return Formatter.check(this.formats.receiptLog, value);\n      };\n\n      Formatter.prototype.receipt = function (value) {\n        var result = Formatter.check(this.formats.receipt, value);\n\n        if (value.status != null) {\n          result.byzantium = true;\n        }\n\n        return result;\n      };\n\n      Formatter.prototype.topics = function (value) {\n        var _this = this;\n\n        if (Array.isArray(value)) {\n          return value.map(function (v) {\n            return _this.topics(v);\n          });\n        } else if (value != null) {\n          return this.hash(value, true);\n        }\n\n        return null;\n      };\n\n      Formatter.prototype.filter = function (value) {\n        return Formatter.check(this.formats.filter, value);\n      };\n\n      Formatter.prototype.filterLog = function (value) {\n        return Formatter.check(this.formats.filterLog, value);\n      };\n\n      Formatter.check = function (format, object) {\n        var result = {};\n\n        for (var key in format) {\n          try {\n            var value = format[key](object[key]);\n\n            if (value !== undefined) {\n              result[key] = value;\n            }\n          } catch (error) {\n            error.checkKey = key;\n            error.checkValue = object[key];\n            throw error;\n          }\n        }\n\n        return result;\n      }; // if value is null-ish, nullValue is returned\n\n\n      Formatter.allowNull = function (format, nullValue) {\n        return function (value) {\n          if (value == null) {\n            return nullValue;\n          }\n\n          return format(value);\n        };\n      }; // If value is false-ish, replaceValue is returned\n\n\n      Formatter.allowFalsish = function (format, replaceValue) {\n        return function (value) {\n          if (!value) {\n            return replaceValue;\n          }\n\n          return format(value);\n        };\n      }; // Requires an Array satisfying check\n\n\n      Formatter.arrayOf = function (format) {\n        return function (array) {\n          if (!Array.isArray(array)) {\n            throw new Error(\"not an array\");\n          }\n\n          var result = [];\n          array.forEach(function (value) {\n            result.push(format(value));\n          });\n          return result;\n        };\n      };\n\n      return Formatter;\n    }();\n\n    exports.Formatter = Formatter; // Show the throttle message only once\n\n    var throttleMessage = false;\n\n    function showThrottleMessage() {\n      if (throttleMessage) {\n        return;\n      }\n\n      throttleMessage = true;\n      console.log(\"========= NOTICE =========\");\n      console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n      console.log(\"\");\n      console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n      console.log(\"community resource for low-traffic projects and early prototyping.\");\n      console.log(\"\");\n      console.log(\"While your application will continue to function, we highly recommended\");\n      console.log(\"signing up for your own API keys to improve performance, increase your\");\n      console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n      console.log(\"\");\n      console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n      console.log(\"==========================\");\n    }\n\n    exports.showThrottleMessage = showThrottleMessage;\n  });\n  var formatter$1 = unwrapExports(formatter);\n  var formatter_1 = formatter.Formatter;\n  var formatter_2 = formatter.showThrottleMessage;\n  var baseProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version); //////////////////////////////\n    // Event Serializeing\n\n    function checkTopic(topic) {\n      if (topic == null) {\n        return \"null\";\n      }\n\n      if (lib$1.hexDataLength(topic) !== 32) {\n        logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n      }\n\n      return topic.toLowerCase();\n    }\n\n    function serializeTopics(topics) {\n      // Remove trailing null AND-topics; they are redundant\n      topics = topics.slice();\n\n      while (topics.length > 0 && topics[topics.length - 1] == null) {\n        topics.pop();\n      }\n\n      return topics.map(function (topic) {\n        if (Array.isArray(topic)) {\n          // Only track unique OR-topics\n          var unique_1 = {};\n          topic.forEach(function (topic) {\n            unique_1[checkTopic(topic)] = true;\n          }); // The order of OR-topics does not matter\n\n          var sorted = Object.keys(unique_1);\n          sorted.sort();\n          return sorted.join(\"|\");\n        } else {\n          return checkTopic(topic);\n        }\n      }).join(\"&\");\n    }\n\n    function deserializeTopics(data) {\n      if (data === \"\") {\n        return [];\n      }\n\n      return data.split(/&/g).map(function (topic) {\n        if (topic === \"\") {\n          return [];\n        }\n\n        var comps = topic.split(\"|\").map(function (topic) {\n          return topic === \"null\" ? null : topic;\n        });\n        return comps.length === 1 ? comps[0] : comps;\n      });\n    }\n\n    function getEventTag(eventName) {\n      if (typeof eventName === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (lib$1.hexDataLength(eventName) === 32) {\n          return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n          return eventName;\n        }\n      } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n      } else if (lib$b.ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n      } else if (eventName && typeof eventName === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n      }\n\n      throw new Error(\"invalid event - \" + eventName);\n    } //////////////////////////////\n    // Helper Object\n\n\n    function getTime() {\n      return new Date().getTime();\n    }\n\n    function stall(duration) {\n      return new Promise(function (resolve) {\n        setTimeout(resolve, duration);\n      });\n    } //////////////////////////////\n    // Provider Object\n\n    /**\n     *  EventType\n     *   - \"block\"\n     *   - \"poll\"\n     *   - \"didPoll\"\n     *   - \"pending\"\n     *   - \"error\"\n     *   - \"network\"\n     *   - filter\n     *   - topics array\n     *   - transaction hash\n     */\n\n\n    var PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\n\n    var Event =\n    /** @class */\n    function () {\n      function Event(tag, listener, once) {\n        lib$3.defineReadOnly(this, \"tag\", tag);\n        lib$3.defineReadOnly(this, \"listener\", listener);\n        lib$3.defineReadOnly(this, \"once\", once);\n      }\n\n      Object.defineProperty(Event.prototype, \"event\", {\n        get: function () {\n          switch (this.type) {\n            case \"tx\":\n              return this.hash;\n\n            case \"filter\":\n              return this.filter;\n          }\n\n          return this.tag;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(Event.prototype, \"type\", {\n        get: function () {\n          return this.tag.split(\":\")[0];\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(Event.prototype, \"hash\", {\n        get: function () {\n          var comps = this.tag.split(\":\");\n\n          if (comps[0] !== \"tx\") {\n            return null;\n          }\n\n          return comps[1];\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(Event.prototype, \"filter\", {\n        get: function () {\n          var comps = this.tag.split(\":\");\n\n          if (comps[0] !== \"filter\") {\n            return null;\n          }\n\n          var address = comps[1];\n          var topics = deserializeTopics(comps[2]);\n          var filter = {};\n\n          if (topics.length > 0) {\n            filter.topics = topics;\n          }\n\n          if (address && address !== \"*\") {\n            filter.address = address;\n          }\n\n          return filter;\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      Event.prototype.pollable = function () {\n        return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n      };\n\n      return Event;\n    }();\n\n    exports.Event = Event;\n    var defaultFormatter = null;\n    var nextPollId = 1;\n\n    var BaseProvider =\n    /** @class */\n    function (_super) {\n      __extends(BaseProvider, _super);\n      /**\n       *  ready\n       *\n       *  A Promise<Network> that resolves only once the provider is ready.\n       *\n       *  Sub-classes that call the super with a network without a chainId\n       *  MUST set this. Standard named networks have a known chainId.\n       *\n       */\n\n\n      function BaseProvider(network) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, lib$b.Provider);\n        _this = _super.call(this) || this; // Events being listened to\n\n        _this._events = [];\n        _this._emitted = {\n          block: -2\n        };\n        _this.formatter = _newTarget.getFormatter(); // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n\n        lib$3.defineReadOnly(_this, \"anyNetwork\", network === \"any\");\n\n        if (_this.anyNetwork) {\n          network = _this.detectNetwork();\n        }\n\n        if (network instanceof Promise) {\n          _this._networkPromise = network; // Squash any \"unhandled promise\" errors; that do not need to be handled\n\n          network.catch(function (error) {}); // Trigger initial network setting (async)\n\n          _this._ready().catch(function (error) {});\n        } else {\n          var knownNetwork = lib$3.getStatic(_newTarget, \"getNetwork\")(network);\n\n          if (knownNetwork) {\n            lib$3.defineReadOnly(_this, \"_network\", knownNetwork);\n\n            _this.emit(\"network\", knownNetwork, null);\n          } else {\n            logger.throwArgumentError(\"invalid network\", \"network\", network);\n          }\n        }\n\n        _this._maxInternalBlockNumber = -1024;\n        _this._lastBlockNumber = -2;\n        _this._pollingInterval = 4000;\n        _this._fastQueryDate = 0;\n        return _this;\n      }\n\n      BaseProvider.prototype._ready = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var network, error_1;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!(this._network == null)) return [3\n                /*break*/\n                , 7];\n                network = null;\n                if (!this._networkPromise) return [3\n                /*break*/\n                , 4];\n                _a.label = 1;\n\n              case 1:\n                _a.trys.push([1, 3,, 4]);\n\n                return [4\n                /*yield*/\n                , this._networkPromise];\n\n              case 2:\n                network = _a.sent();\n                return [3\n                /*break*/\n                , 4];\n\n              case 3:\n                error_1 = _a.sent();\n                return [3\n                /*break*/\n                , 4];\n\n              case 4:\n                if (!(network == null)) return [3\n                /*break*/\n                , 6];\n                return [4\n                /*yield*/\n                , this.detectNetwork()];\n\n              case 5:\n                network = _a.sent();\n                _a.label = 6;\n\n              case 6:\n                // This should never happen; every Provider sub-class should have\n                // suggested a network by here (or have thrown).\n                if (!network) {\n                  logger.throwError(\"no network detected\", lib.Logger.errors.UNKNOWN_ERROR, {});\n                } // Possible this call stacked so do not call defineReadOnly again\n\n\n                if (this._network == null) {\n                  if (this.anyNetwork) {\n                    this._network = network;\n                  } else {\n                    lib$3.defineReadOnly(this, \"_network\", network);\n                  }\n\n                  this.emit(\"network\", network, null);\n                }\n\n                _a.label = 7;\n\n              case 7:\n                return [2\n                /*return*/\n                , this._network];\n            }\n          });\n        });\n      };\n\n      Object.defineProperty(BaseProvider.prototype, \"ready\", {\n        // This will always return the most recently established network.\n        // For \"any\", this can change (a \"network\" event is emitted before\n        // any change is refelcted); otherwise this cannot change\n        get: function () {\n          var _this = this;\n\n          return lib$l.poll(function () {\n            return _this._ready().then(function (network) {\n              return network;\n            }, function (error) {\n              // If the network isn't running yet, we will wait\n              if (error.code === lib.Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                return undefined;\n              }\n\n              throw error;\n            });\n          });\n        },\n        enumerable: true,\n        configurable: true\n      }); // @TODO: Remove this and just create a singleton formatter\n\n      BaseProvider.getFormatter = function () {\n        if (defaultFormatter == null) {\n          defaultFormatter = new formatter.Formatter();\n        }\n\n        return defaultFormatter;\n      }; // @TODO: Remove this and just use getNetwork\n\n\n      BaseProvider.getNetwork = function (network) {\n        return lib$k.getNetwork(network == null ? \"homestead\" : network);\n      }; // Fetches the blockNumber, but will reuse any result that is less\n      // than maxAge old or has been requested since the last request\n\n\n      BaseProvider.prototype._getInternalBlockNumber = function (maxAge) {\n        return __awaiter(this, void 0, void 0, function () {\n          var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this._ready()];\n\n              case 1:\n                _a.sent();\n\n                internalBlockNumber = this._internalBlockNumber;\n                if (!(maxAge > 0 && this._internalBlockNumber)) return [3\n                /*break*/\n                , 3];\n                return [4\n                /*yield*/\n                , internalBlockNumber];\n\n              case 2:\n                result = _a.sent();\n\n                if (getTime() - result.respTime <= maxAge) {\n                  return [2\n                  /*return*/\n                  , result.blockNumber];\n                }\n\n                _a.label = 3;\n\n              case 3:\n                reqTime = getTime();\n                checkInternalBlockNumber = lib$3.resolveProperties({\n                  blockNumber: this.perform(\"getBlockNumber\", {}),\n                  networkError: this.getNetwork().then(function (network) {\n                    return null;\n                  }, function (error) {\n                    return error;\n                  })\n                }).then(function (_a) {\n                  var blockNumber = _a.blockNumber,\n                      networkError = _a.networkError;\n\n                  if (networkError) {\n                    // Unremember this bad internal block number\n                    if (_this._internalBlockNumber === checkInternalBlockNumber) {\n                      _this._internalBlockNumber = null;\n                    }\n\n                    throw networkError;\n                  }\n\n                  var respTime = getTime();\n                  blockNumber = lib$2.BigNumber.from(blockNumber).toNumber();\n\n                  if (blockNumber < _this._maxInternalBlockNumber) {\n                    blockNumber = _this._maxInternalBlockNumber;\n                  }\n\n                  _this._maxInternalBlockNumber = blockNumber;\n\n                  _this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n\n\n                  return {\n                    blockNumber: blockNumber,\n                    reqTime: reqTime,\n                    respTime: respTime\n                  };\n                });\n                this._internalBlockNumber = checkInternalBlockNumber;\n                return [4\n                /*yield*/\n                , checkInternalBlockNumber];\n\n              case 4:\n                return [2\n                /*return*/\n                , _a.sent().blockNumber];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.poll = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var pollId, runners, blockNumber, i;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                pollId = nextPollId++;\n                runners = [];\n                return [4\n                /*yield*/\n                , this._getInternalBlockNumber(100 + this.pollingInterval / 2)];\n\n              case 1:\n                blockNumber = _a.sent();\n\n                this._setFastBlockNumber(blockNumber); // Emit a poll event after we have the latest (fast) block number\n\n\n                this.emit(\"poll\", pollId, blockNumber); // If the block has not changed, meh.\n\n                if (blockNumber === this._lastBlockNumber) {\n                  this.emit(\"didPoll\", pollId);\n                  return [2\n                  /*return*/\n                  ];\n                } // First polling cycle, trigger a \"block\" events\n\n\n                if (this._emitted.block === -2) {\n                  this._emitted.block = blockNumber - 1;\n                }\n\n                if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                  logger.warn(\"network block skew detected; skipping block events\");\n                  this.emit(\"error\", logger.makeError(\"network block skew detected\", lib.Logger.errors.NETWORK_ERROR, {\n                    blockNumber: blockNumber,\n                    event: \"blockSkew\",\n                    previousBlockNumber: this._emitted.block\n                  }));\n                  this.emit(\"block\", blockNumber);\n                } else {\n                  // Notify all listener for each block that has passed\n                  for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                    this.emit(\"block\", i);\n                  }\n                } // The emitted block was updated, check for obsolete events\n\n\n                if (this._emitted.block !== blockNumber) {\n                  this._emitted.block = blockNumber;\n                  Object.keys(this._emitted).forEach(function (key) {\n                    // The block event does not expire\n                    if (key === \"block\") {\n                      return;\n                    } // The block we were at when we emitted this event\n\n\n                    var eventBlockNumber = _this._emitted[key]; // We cannot garbage collect pending transactions or blocks here\n                    // They should be garbage collected by the Provider when setting\n                    // \"pending\" events\n\n                    if (eventBlockNumber === \"pending\") {\n                      return;\n                    } // Evict any transaction hashes or block hashes over 12 blocks\n                    // old, since they should not return null anyways\n\n\n                    if (blockNumber - eventBlockNumber > 12) {\n                      delete _this._emitted[key];\n                    }\n                  });\n                } // First polling cycle\n\n\n                if (this._lastBlockNumber === -2) {\n                  this._lastBlockNumber = blockNumber - 1;\n                } // Find all transaction hashes we are waiting on\n\n\n                this._events.forEach(function (event) {\n                  switch (event.type) {\n                    case \"tx\":\n                      {\n                        var hash_2 = event.hash;\n\n                        var runner = _this.getTransactionReceipt(hash_2).then(function (receipt) {\n                          if (!receipt || receipt.blockNumber == null) {\n                            return null;\n                          }\n\n                          _this._emitted[\"t:\" + hash_2] = receipt.blockNumber;\n\n                          _this.emit(hash_2, receipt);\n\n                          return null;\n                        }).catch(function (error) {\n                          _this.emit(\"error\", error);\n                        });\n\n                        runners.push(runner);\n                        break;\n                      }\n\n                    case \"filter\":\n                      {\n                        var filter_1 = event.filter;\n                        filter_1.fromBlock = _this._lastBlockNumber + 1;\n                        filter_1.toBlock = blockNumber;\n\n                        var runner = _this.getLogs(filter_1).then(function (logs) {\n                          if (logs.length === 0) {\n                            return;\n                          }\n\n                          logs.forEach(function (log) {\n                            _this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            _this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n\n                            _this.emit(filter_1, log);\n                          });\n                        }).catch(function (error) {\n                          _this.emit(\"error\", error);\n                        });\n\n                        runners.push(runner);\n                        break;\n                      }\n                  }\n                });\n\n                this._lastBlockNumber = blockNumber; // Once all events for this loop have been processed, emit \"didPoll\"\n\n                Promise.all(runners).then(function () {\n                  _this.emit(\"didPoll\", pollId);\n                });\n                return [2\n                /*return*/\n                , null];\n            }\n          });\n        });\n      }; // Deprecated; do not use this\n\n\n      BaseProvider.prototype.resetEventsBlock = function (blockNumber) {\n        this._lastBlockNumber = blockNumber - 1;\n\n        if (this.polling) {\n          this.poll();\n        }\n      };\n\n      Object.defineProperty(BaseProvider.prototype, \"network\", {\n        get: function () {\n          return this._network;\n        },\n        enumerable: true,\n        configurable: true\n      }); // This method should query the network if the underlying network\n      // can change, such as when connected to a JSON-RPC backend\n\n      BaseProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , logger.throwError(\"provider does not support network detection\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"provider.detectNetwork\"\n            })];\n          });\n        });\n      };\n\n      BaseProvider.prototype.getNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var network, currentNetwork, error;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this._ready()];\n\n              case 1:\n                network = _a.sent();\n                return [4\n                /*yield*/\n                , this.detectNetwork()];\n\n              case 2:\n                currentNetwork = _a.sent();\n                if (!(network.chainId !== currentNetwork.chainId)) return [3\n                /*break*/\n                , 5];\n                if (!this.anyNetwork) return [3\n                /*break*/\n                , 4];\n                this._network = currentNetwork; // Reset all internal block number guards and caches\n\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null; // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n\n                this.emit(\"network\", currentNetwork, network);\n                return [4\n                /*yield*/\n                , stall(0)];\n\n              case 3:\n                _a.sent();\n\n                return [2\n                /*return*/\n                , this._network];\n\n              case 4:\n                error = logger.makeError(\"underlying network changed\", lib.Logger.errors.NETWORK_ERROR, {\n                  event: \"changed\",\n                  network: network,\n                  detectedNetwork: currentNetwork\n                });\n                this.emit(\"error\", error);\n                throw error;\n\n              case 5:\n                return [2\n                /*return*/\n                , network];\n            }\n          });\n        });\n      };\n\n      Object.defineProperty(BaseProvider.prototype, \"blockNumber\", {\n        get: function () {\n          var _this = this;\n\n          this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n            _this._setFastBlockNumber(blockNumber);\n          });\n\n          return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(BaseProvider.prototype, \"polling\", {\n        get: function () {\n          return this._poller != null;\n        },\n        set: function (value) {\n          var _this = this;\n\n          if (value && !this._poller) {\n            this._poller = setInterval(this.poll.bind(this), this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n              this._bootstrapPoll = setTimeout(function () {\n                _this.poll(); // We block additional polls until the polling interval\n                // is done, to prevent overwhelming the poll function\n\n\n                _this._bootstrapPoll = setTimeout(function () {\n                  // If polling was disabled, something may require a poke\n                  // since starting the bootstrap poll and it was disabled\n                  if (!_this._poller) {\n                    _this.poll();\n                  } // Clear out the bootstrap so we can do another\n\n\n                  _this._bootstrapPoll = null;\n                }, _this.pollingInterval);\n              }, 0);\n            }\n          } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n          }\n        },\n        enumerable: true,\n        configurable: true\n      });\n      Object.defineProperty(BaseProvider.prototype, \"pollingInterval\", {\n        get: function () {\n          return this._pollingInterval;\n        },\n        set: function (value) {\n          var _this = this;\n\n          if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n          }\n\n          this._pollingInterval = value;\n\n          if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(function () {\n              _this.poll();\n            }, this._pollingInterval);\n          }\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      BaseProvider.prototype._getFastBlockNumber = function () {\n        var _this = this;\n\n        var now = getTime(); // Stale block number, request a newer value\n\n        if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n          this._fastQueryDate = now;\n          this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n            if (_this._fastBlockNumber == null || blockNumber > _this._fastBlockNumber) {\n              _this._fastBlockNumber = blockNumber;\n            }\n\n            return _this._fastBlockNumber;\n          });\n        }\n\n        return this._fastBlockNumberPromise;\n      };\n\n      BaseProvider.prototype._setFastBlockNumber = function (blockNumber) {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n          return;\n        } // Update the time we updated the blocknumber\n\n\n        this._fastQueryDate = getTime(); // Newer block number, use  it\n\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n          this._fastBlockNumber = blockNumber;\n          this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n      };\n\n      BaseProvider.prototype.waitForTransaction = function (transactionHash, confirmations, timeout) {\n        return __awaiter(this, void 0, void 0, function () {\n          var receipt;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (confirmations == null) {\n                  confirmations = 1;\n                }\n\n                return [4\n                /*yield*/\n                , this.getTransactionReceipt(transactionHash)];\n\n              case 1:\n                receipt = _a.sent(); // Receipt is already good\n\n                if ((receipt ? receipt.confirmations : 0) >= confirmations) {\n                  return [2\n                  /*return*/\n                  , receipt];\n                } // Poll until the receipt is good...\n\n\n                return [2\n                /*return*/\n                , new Promise(function (resolve, reject) {\n                  var timer = null;\n                  var done = false;\n\n                  var handler = function (receipt) {\n                    if (receipt.confirmations < confirmations) {\n                      return;\n                    }\n\n                    if (timer) {\n                      clearTimeout(timer);\n                    }\n\n                    if (done) {\n                      return;\n                    }\n\n                    done = true;\n\n                    _this.removeListener(transactionHash, handler);\n\n                    resolve(receipt);\n                  };\n\n                  _this.on(transactionHash, handler);\n\n                  if (typeof timeout === \"number\" && timeout > 0) {\n                    timer = setTimeout(function () {\n                      if (done) {\n                        return;\n                      }\n\n                      timer = null;\n                      done = true;\n\n                      _this.removeListener(transactionHash, handler);\n\n                      reject(logger.makeError(\"timeout exceeded\", lib.Logger.errors.TIMEOUT, {\n                        timeout: timeout\n                      }));\n                    }, timeout);\n\n                    if (timer.unref) {\n                      timer.unref();\n                    }\n                  }\n                })];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getBlockNumber = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , this._getInternalBlockNumber(0)];\n          });\n        });\n      };\n\n      BaseProvider.prototype.getGasPrice = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _c.sent();\n\n                _b = (_a = lib$2.BigNumber).from;\n                return [4\n                /*yield*/\n                , this.perform(\"getGasPrice\", {})];\n\n              case 2:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getBalance = function (addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params, _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _c.sent();\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                })];\n\n              case 2:\n                params = _c.sent();\n                _b = (_a = lib$2.BigNumber).from;\n                return [4\n                /*yield*/\n                , this.perform(\"getBalance\", params)];\n\n              case 3:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getTransactionCount = function (addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params, _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _c.sent();\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                })];\n\n              case 2:\n                params = _c.sent();\n                _b = (_a = lib$2.BigNumber).from;\n                return [4\n                /*yield*/\n                , this.perform(\"getTransactionCount\", params)];\n\n              case 3:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()]).toNumber()];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getCode = function (addressOrName, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params, _a;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _b.sent();\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag)\n                })];\n\n              case 2:\n                params = _b.sent();\n                _a = lib$1.hexlify;\n                return [4\n                /*yield*/\n                , this.perform(\"getCode\", params)];\n\n              case 3:\n                return [2\n                /*return*/\n                , _a.apply(void 0, [_b.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getStorageAt = function (addressOrName, position, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params, _a;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _b.sent();\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties({\n                  address: this._getAddress(addressOrName),\n                  blockTag: this._getBlockTag(blockTag),\n                  position: Promise.resolve(position).then(function (p) {\n                    return lib$1.hexValue(p);\n                  })\n                })];\n\n              case 2:\n                params = _b.sent();\n                _a = lib$1.hexlify;\n                return [4\n                /*yield*/\n                , this.perform(\"getStorageAt\", params)];\n\n              case 3:\n                return [2\n                /*return*/\n                , _a.apply(void 0, [_b.sent()])];\n            }\n          });\n        });\n      }; // This should be called by any subclass wrapping a TransactionResponse\n\n\n      BaseProvider.prototype._wrapTransaction = function (tx, hash) {\n        var _this = this;\n\n        if (hash != null && lib$1.hexDataLength(hash) !== 32) {\n          throw new Error(\"invalid response - sendTransaction\");\n        }\n\n        var result = tx; // Check the hash we expect is the same as the hash the server reported\n\n        if (hash != null && tx.hash !== hash) {\n          logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", lib.Logger.errors.UNKNOWN_ERROR, {\n            expectedHash: tx.hash,\n            returnedHash: hash\n          });\n        } // @TODO: (confirmations? number, timeout? number)\n\n\n        result.wait = function (confirmations) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var receipt;\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  // We know this transaction *must* exist (whether it gets mined is\n                  // another story), so setting an emitted value forces us to\n                  // wait even if the node returns null for the receipt\n                  if (confirmations !== 0) {\n                    this._emitted[\"t:\" + tx.hash] = \"pending\";\n                  }\n\n                  return [4\n                  /*yield*/\n                  , this.waitForTransaction(tx.hash, confirmations)];\n\n                case 1:\n                  receipt = _a.sent();\n\n                  if (receipt == null && confirmations === 0) {\n                    return [2\n                    /*return*/\n                    , null];\n                  } // No longer pending, allow the polling loop to garbage collect this\n\n\n                  this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n                  if (receipt.status === 0) {\n                    logger.throwError(\"transaction failed\", lib.Logger.errors.CALL_EXCEPTION, {\n                      transactionHash: tx.hash,\n                      transaction: tx,\n                      receipt: receipt\n                    });\n                  }\n\n                  return [2\n                  /*return*/\n                  , receipt];\n              }\n            });\n          });\n        };\n\n        return result;\n      };\n\n      BaseProvider.prototype.sendTransaction = function (signedTransaction) {\n        return __awaiter(this, void 0, void 0, function () {\n          var hexTx, tx, hash, error_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , Promise.resolve(signedTransaction).then(function (t) {\n                  return lib$1.hexlify(t);\n                })];\n\n              case 2:\n                hexTx = _a.sent();\n                tx = this.formatter.transaction(signedTransaction);\n                _a.label = 3;\n\n              case 3:\n                _a.trys.push([3, 5,, 6]);\n\n                return [4\n                /*yield*/\n                , this.perform(\"sendTransaction\", {\n                  signedTransaction: hexTx\n                })];\n\n              case 4:\n                hash = _a.sent();\n                return [2\n                /*return*/\n                , this._wrapTransaction(tx, hash)];\n\n              case 5:\n                error_2 = _a.sent();\n                error_2.transaction = tx;\n                error_2.transactionHash = tx.hash;\n                throw error_2;\n\n              case 6:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype._getTransactionRequest = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n          var values, tx, _a, _b;\n\n          var _this = this;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , transaction];\n\n              case 1:\n                values = _c.sent();\n                tx = {};\n                [\"from\", \"to\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? _this._getAddress(v) : null;\n                  });\n                });\n                [\"gasLimit\", \"gasPrice\", \"value\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? lib$2.BigNumber.from(v) : null;\n                  });\n                });\n                [\"data\"].forEach(function (key) {\n                  if (values[key] == null) {\n                    return;\n                  }\n\n                  tx[key] = Promise.resolve(values[key]).then(function (v) {\n                    return v ? lib$1.hexlify(v) : null;\n                  });\n                });\n                _b = (_a = this.formatter).transactionRequest;\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties(tx)];\n\n              case 2:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype._getFilter = function (filter) {\n        return __awaiter(this, void 0, void 0, function () {\n          var result, _a, _b;\n\n          var _this = this;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , filter];\n\n              case 1:\n                filter = _c.sent();\n                result = {};\n\n                if (filter.address != null) {\n                  result.address = this._getAddress(filter.address);\n                }\n\n                [\"blockHash\", \"topics\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = filter[key];\n                });\n                [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                  if (filter[key] == null) {\n                    return;\n                  }\n\n                  result[key] = _this._getBlockTag(filter[key]);\n                });\n                _b = (_a = this.formatter).filter;\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties(result)];\n\n              case 2:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.call = function (transaction, blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params, _a;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _b.sent();\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties({\n                  transaction: this._getTransactionRequest(transaction),\n                  blockTag: this._getBlockTag(blockTag)\n                })];\n\n              case 2:\n                params = _b.sent();\n                _a = lib$1.hexlify;\n                return [4\n                /*yield*/\n                , this.perform(\"call\", params)];\n\n              case 3:\n                return [2\n                /*return*/\n                , _a.apply(void 0, [_b.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.estimateGas = function (transaction) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params, _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _c.sent();\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties({\n                  transaction: this._getTransactionRequest(transaction)\n                })];\n\n              case 2:\n                params = _c.sent();\n                _b = (_a = lib$2.BigNumber).from;\n                return [4\n                /*yield*/\n                , this.perform(\"estimateGas\", params)];\n\n              case 3:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype._getAddress = function (addressOrName) {\n        return __awaiter(this, void 0, void 0, function () {\n          var address;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.resolveName(addressOrName)];\n\n              case 1:\n                address = _a.sent();\n\n                if (address == null) {\n                  logger.throwError(\"ENS name not configured\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName(\" + JSON.stringify(addressOrName) + \")\"\n                  });\n                }\n\n                return [2\n                /*return*/\n                , address];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype._getBlock = function (blockHashOrBlockTag, includeTransactions) {\n        return __awaiter(this, void 0, void 0, function () {\n          var blockNumber, params, _a, _b, _c, error_3;\n\n          var _this = this;\n\n          return __generator(this, function (_d) {\n            switch (_d.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _d.sent();\n\n                return [4\n                /*yield*/\n                , blockHashOrBlockTag];\n\n              case 2:\n                blockHashOrBlockTag = _d.sent();\n                blockNumber = -128;\n                params = {\n                  includeTransactions: !!includeTransactions\n                };\n                if (!lib$1.isHexString(blockHashOrBlockTag, 32)) return [3\n                /*break*/\n                , 3];\n                params.blockHash = blockHashOrBlockTag;\n                return [3\n                /*break*/\n                , 6];\n\n              case 3:\n                _d.trys.push([3, 5,, 6]);\n\n                _a = params;\n                _c = (_b = this.formatter).blockTag;\n                return [4\n                /*yield*/\n                , this._getBlockTag(blockHashOrBlockTag)];\n\n              case 4:\n                _a.blockTag = _c.apply(_b, [_d.sent()]);\n\n                if (lib$1.isHexString(params.blockTag)) {\n                  blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                error_3 = _d.sent();\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n                return [3\n                /*break*/\n                , 6];\n\n              case 6:\n                return [2\n                /*return*/\n                , lib$l.poll(function () {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var block, blockNumber_1, i, tx, confirmations;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , this.perform(\"getBlock\", params)];\n\n                        case 1:\n                          block = _a.sent(); // Block was not found\n\n                          if (block == null) {\n                            // For blockhashes, if we didn't say it existed, that blockhash may\n                            // not exist. If we did see it though, perhaps from a log, we know\n                            // it exists, and this node is just not caught up yet.\n                            if (params.blockHash != null) {\n                              if (this._emitted[\"b:\" + params.blockHash] == null) {\n                                return [2\n                                /*return*/\n                                , null];\n                              }\n                            } // For block tags, if we are asking for a future block, we return null\n\n\n                            if (params.blockTag != null) {\n                              if (blockNumber > this._emitted.block) {\n                                return [2\n                                /*return*/\n                                , null];\n                              }\n                            } // Retry on the next block\n\n\n                            return [2\n                            /*return*/\n                            , undefined];\n                          }\n\n                          if (!includeTransactions) return [3\n                          /*break*/\n                          , 8];\n                          blockNumber_1 = null;\n                          i = 0;\n                          _a.label = 2;\n\n                        case 2:\n                          if (!(i < block.transactions.length)) return [3\n                          /*break*/\n                          , 7];\n                          tx = block.transactions[i];\n                          if (!(tx.blockNumber == null)) return [3\n                          /*break*/\n                          , 3];\n                          tx.confirmations = 0;\n                          return [3\n                          /*break*/\n                          , 6];\n\n                        case 3:\n                          if (!(tx.confirmations == null)) return [3\n                          /*break*/\n                          , 6];\n                          if (!(blockNumber_1 == null)) return [3\n                          /*break*/\n                          , 5];\n                          return [4\n                          /*yield*/\n                          , this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\n                        case 4:\n                          blockNumber_1 = _a.sent();\n                          _a.label = 5;\n\n                        case 5:\n                          confirmations = blockNumber_1 - tx.blockNumber + 1;\n\n                          if (confirmations <= 0) {\n                            confirmations = 1;\n                          }\n\n                          tx.confirmations = confirmations;\n                          _a.label = 6;\n\n                        case 6:\n                          i++;\n                          return [3\n                          /*break*/\n                          , 2];\n\n                        case 7:\n                          return [2\n                          /*return*/\n                          , this.formatter.blockWithTransactions(block)];\n\n                        case 8:\n                          return [2\n                          /*return*/\n                          , this.formatter.block(block)];\n                      }\n                    });\n                  });\n                }, {\n                  oncePoll: this\n                })];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getBlock = function (blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, false);\n      };\n\n      BaseProvider.prototype.getBlockWithTransactions = function (blockHashOrBlockTag) {\n        return this._getBlock(blockHashOrBlockTag, true);\n      };\n\n      BaseProvider.prototype.getTransaction = function (transactionHash) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , transactionHash];\n\n              case 2:\n                transactionHash = _a.sent();\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return [2\n                /*return*/\n                , lib$l.poll(function () {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var result, tx, blockNumber, confirmations;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , this.perform(\"getTransaction\", params)];\n\n                        case 1:\n                          result = _a.sent();\n\n                          if (result == null) {\n                            if (this._emitted[\"t:\" + transactionHash] == null) {\n                              return [2\n                              /*return*/\n                              , null];\n                            }\n\n                            return [2\n                            /*return*/\n                            , undefined];\n                          }\n\n                          tx = this.formatter.transactionResponse(result);\n                          if (!(tx.blockNumber == null)) return [3\n                          /*break*/\n                          , 2];\n                          tx.confirmations = 0;\n                          return [3\n                          /*break*/\n                          , 4];\n\n                        case 2:\n                          if (!(tx.confirmations == null)) return [3\n                          /*break*/\n                          , 4];\n                          return [4\n                          /*yield*/\n                          , this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\n                        case 3:\n                          blockNumber = _a.sent();\n                          confirmations = blockNumber - tx.blockNumber + 1;\n\n                          if (confirmations <= 0) {\n                            confirmations = 1;\n                          }\n\n                          tx.confirmations = confirmations;\n                          _a.label = 4;\n\n                        case 4:\n                          return [2\n                          /*return*/\n                          , this._wrapTransaction(tx)];\n                      }\n                    });\n                  });\n                }, {\n                  oncePoll: this\n                })];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getTransactionReceipt = function (transactionHash) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , transactionHash];\n\n              case 2:\n                transactionHash = _a.sent();\n                params = {\n                  transactionHash: this.formatter.hash(transactionHash, true)\n                };\n                return [2\n                /*return*/\n                , lib$l.poll(function () {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var result, receipt, blockNumber, confirmations;\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          return [4\n                          /*yield*/\n                          , this.perform(\"getTransactionReceipt\", params)];\n\n                        case 1:\n                          result = _a.sent();\n\n                          if (result == null) {\n                            if (this._emitted[\"t:\" + transactionHash] == null) {\n                              return [2\n                              /*return*/\n                              , null];\n                            }\n\n                            return [2\n                            /*return*/\n                            , undefined];\n                          } // \"geth-etc\" returns receipts before they are ready\n\n\n                          if (result.blockHash == null) {\n                            return [2\n                            /*return*/\n                            , undefined];\n                          }\n\n                          receipt = this.formatter.receipt(result);\n                          if (!(receipt.blockNumber == null)) return [3\n                          /*break*/\n                          , 2];\n                          receipt.confirmations = 0;\n                          return [3\n                          /*break*/\n                          , 4];\n\n                        case 2:\n                          if (!(receipt.confirmations == null)) return [3\n                          /*break*/\n                          , 4];\n                          return [4\n                          /*yield*/\n                          , this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\n                        case 3:\n                          blockNumber = _a.sent();\n                          confirmations = blockNumber - receipt.blockNumber + 1;\n\n                          if (confirmations <= 0) {\n                            confirmations = 1;\n                          }\n\n                          receipt.confirmations = confirmations;\n                          _a.label = 4;\n\n                        case 4:\n                          return [2\n                          /*return*/\n                          , receipt];\n                      }\n                    });\n                  });\n                }, {\n                  oncePoll: this\n                })];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getLogs = function (filter) {\n        return __awaiter(this, void 0, void 0, function () {\n          var params, logs;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _a.sent();\n\n                return [4\n                /*yield*/\n                , lib$3.resolveProperties({\n                  filter: this._getFilter(filter)\n                })];\n\n              case 2:\n                params = _a.sent();\n                return [4\n                /*yield*/\n                , this.perform(\"getLogs\", params)];\n\n              case 3:\n                logs = _a.sent();\n                logs.forEach(function (log) {\n                  if (log.removed == null) {\n                    log.removed = false;\n                  }\n                });\n                return [2\n                /*return*/\n                , formatter.Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs)];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.getEtherPrice = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                _a.sent();\n\n                return [2\n                /*return*/\n                , this.perform(\"getEtherPrice\", {})];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype._getBlockTag = function (blockTag) {\n        return __awaiter(this, void 0, void 0, function () {\n          var blockNumber;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , blockTag];\n\n              case 1:\n                blockTag = _a.sent();\n                if (!(typeof blockTag === \"number\" && blockTag < 0)) return [3\n                /*break*/\n                , 3];\n\n                if (blockTag % 1) {\n                  logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n                }\n\n                return [4\n                /*yield*/\n                , this._getInternalBlockNumber(100 + 2 * this.pollingInterval)];\n\n              case 2:\n                blockNumber = _a.sent();\n                blockNumber += blockTag;\n\n                if (blockNumber < 0) {\n                  blockNumber = 0;\n                }\n\n                return [2\n                /*return*/\n                , this.formatter.blockTag(blockNumber)];\n\n              case 3:\n                return [2\n                /*return*/\n                , this.formatter.blockTag(blockTag)];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype._getResolver = function (name) {\n        return __awaiter(this, void 0, void 0, function () {\n          var network, transaction, _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.getNetwork()];\n\n              case 1:\n                network = _c.sent(); // No ENS...\n\n                if (!network.ensAddress) {\n                  logger.throwError(\"network does not support ENS\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"ENS\",\n                    network: network.name\n                  });\n                }\n\n                transaction = {\n                  to: network.ensAddress,\n                  data: \"0x0178b8bf\" + lib$9.namehash(name).substring(2)\n                };\n                _b = (_a = this.formatter).callAddress;\n                return [4\n                /*yield*/\n                , this.call(transaction)];\n\n              case 2:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.resolveName = function (name) {\n        return __awaiter(this, void 0, void 0, function () {\n          var resolverAddress, transaction, _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , name];\n\n              case 1:\n                name = _c.sent(); // If it is already an address, nothing to resolve\n\n                try {\n                  return [2\n                  /*return*/\n                  , Promise.resolve(this.formatter.address(name))];\n                } catch (error) {\n                  // If is is a hexstring, the address is bad (See #694)\n                  if (lib$1.isHexString(name)) {\n                    throw error;\n                  }\n                }\n\n                if (typeof name !== \"string\") {\n                  logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n                }\n\n                return [4\n                /*yield*/\n                , this._getResolver(name)];\n\n              case 2:\n                resolverAddress = _c.sent();\n\n                if (!resolverAddress) {\n                  return [2\n                  /*return*/\n                  , null];\n                }\n\n                transaction = {\n                  to: resolverAddress,\n                  data: \"0x3b3b57de\" + lib$9.namehash(name).substring(2)\n                };\n                _b = (_a = this.formatter).callAddress;\n                return [4\n                /*yield*/\n                , this.call(transaction)];\n\n              case 3:\n                return [2\n                /*return*/\n                , _b.apply(_a, [_c.sent()])];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.lookupAddress = function (address) {\n        return __awaiter(this, void 0, void 0, function () {\n          var reverseName, resolverAddress, bytes, _a, length, name, addr;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , address];\n\n              case 1:\n                address = _b.sent();\n                address = this.formatter.address(address);\n                reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n                return [4\n                /*yield*/\n                , this._getResolver(reverseName)];\n\n              case 2:\n                resolverAddress = _b.sent();\n\n                if (!resolverAddress) {\n                  return [2\n                  /*return*/\n                  , null];\n                }\n\n                _a = lib$1.arrayify;\n                return [4\n                /*yield*/\n                , this.call({\n                  to: resolverAddress,\n                  data: \"0x691f3431\" + lib$9.namehash(reverseName).substring(2)\n                })];\n\n              case 3:\n                bytes = _a.apply(void 0, [_b.sent()]); // Strip off the dynamic string pointer (0x20)\n\n                if (bytes.length < 32 || !lib$2.BigNumber.from(bytes.slice(0, 32)).eq(32)) {\n                  return [2\n                  /*return*/\n                  , null];\n                }\n\n                bytes = bytes.slice(32); // Not a length-prefixed string\n\n                if (bytes.length < 32) {\n                  return [2\n                  /*return*/\n                  , null];\n                }\n\n                length = lib$2.BigNumber.from(bytes.slice(0, 32)).toNumber();\n                bytes = bytes.slice(32); // Length longer than available data\n\n                if (length > bytes.length) {\n                  return [2\n                  /*return*/\n                  , null];\n                }\n\n                name = lib$8.toUtf8String(bytes.slice(0, length));\n                return [4\n                /*yield*/\n                , this.resolveName(name)];\n\n              case 4:\n                addr = _b.sent();\n\n                if (addr != address) {\n                  return [2\n                  /*return*/\n                  , null];\n                }\n\n                return [2\n                /*return*/\n                , name];\n            }\n          });\n        });\n      };\n\n      BaseProvider.prototype.perform = function (method, params) {\n        return logger.throwError(method + \" not implemented\", lib.Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      };\n\n      BaseProvider.prototype._startEvent = function (event) {\n        this.polling = this._events.filter(function (e) {\n          return e.pollable();\n        }).length > 0;\n      };\n\n      BaseProvider.prototype._stopEvent = function (event) {\n        this.polling = this._events.filter(function (e) {\n          return e.pollable();\n        }).length > 0;\n      };\n\n      BaseProvider.prototype._addEventListener = function (eventName, listener, once) {\n        var event = new Event(getEventTag(eventName), listener, once);\n\n        this._events.push(event);\n\n        this._startEvent(event);\n\n        return this;\n      };\n\n      BaseProvider.prototype.on = function (eventName, listener) {\n        return this._addEventListener(eventName, listener, false);\n      };\n\n      BaseProvider.prototype.once = function (eventName, listener) {\n        return this._addEventListener(eventName, listener, true);\n      };\n\n      BaseProvider.prototype.emit = function (eventName) {\n        var _this = this;\n\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        var result = false;\n        var stopped = [];\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n\n          setTimeout(function () {\n            event.listener.apply(_this, args);\n          }, 0);\n          result = true;\n\n          if (event.once) {\n            stopped.push(event);\n            return false;\n          }\n\n          return true;\n        });\n        stopped.forEach(function (event) {\n          _this._stopEvent(event);\n        });\n        return result;\n      };\n\n      BaseProvider.prototype.listenerCount = function (eventName) {\n        if (!eventName) {\n          return this._events.length;\n        }\n\n        var eventTag = getEventTag(eventName);\n        return this._events.filter(function (event) {\n          return event.tag === eventTag;\n        }).length;\n      };\n\n      BaseProvider.prototype.listeners = function (eventName) {\n        if (eventName == null) {\n          return this._events.map(function (event) {\n            return event.listener;\n          });\n        }\n\n        var eventTag = getEventTag(eventName);\n        return this._events.filter(function (event) {\n          return event.tag === eventTag;\n        }).map(function (event) {\n          return event.listener;\n        });\n      };\n\n      BaseProvider.prototype.off = function (eventName, listener) {\n        var _this = this;\n\n        if (listener == null) {\n          return this.removeAllListeners(eventName);\n        }\n\n        var stopped = [];\n        var found = false;\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag || event.listener != listener) {\n            return true;\n          }\n\n          if (found) {\n            return true;\n          }\n\n          found = true;\n          stopped.push(event);\n          return false;\n        });\n        stopped.forEach(function (event) {\n          _this._stopEvent(event);\n        });\n        return this;\n      };\n\n      BaseProvider.prototype.removeAllListeners = function (eventName) {\n        var _this = this;\n\n        var stopped = [];\n\n        if (eventName == null) {\n          stopped = this._events;\n          this._events = [];\n        } else {\n          var eventTag_1 = getEventTag(eventName);\n          this._events = this._events.filter(function (event) {\n            if (event.tag !== eventTag_1) {\n              return true;\n            }\n\n            stopped.push(event);\n            return false;\n          });\n        }\n\n        stopped.forEach(function (event) {\n          _this._stopEvent(event);\n        });\n        return this;\n      };\n\n      return BaseProvider;\n    }(lib$b.Provider);\n\n    exports.BaseProvider = BaseProvider;\n  });\n  var baseProvider$1 = unwrapExports(baseProvider);\n  var baseProvider_1 = baseProvider.Event;\n  var baseProvider_2 = baseProvider.BaseProvider;\n  var browserWs = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var WS = null;\n\n    try {\n      WS = WebSocket;\n\n      if (WS == null) {\n        throw new Error(\"inject please\");\n      }\n    } catch (error) {\n      var logger_2 = new lib.Logger(_version$I.version);\n\n      WS = function () {\n        logger_2.throwError(\"WebSockets not supported in this environment\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"new WebSocket()\"\n        });\n      };\n    }\n\n    module.exports = WS;\n  });\n  var browserWs$1 = unwrapExports(browserWs);\n  var jsonRpcProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version);\n\n    function timer(timeout) {\n      return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n      });\n    }\n\n    function getResult(payload) {\n      if (payload.error) {\n        // @TODO: not any\n        var error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n      }\n\n      return payload.result;\n    }\n\n    function getLowerCase(value) {\n      if (value) {\n        return value.toLowerCase();\n      }\n\n      return value;\n    }\n\n    var _constructorGuard = {};\n\n    var JsonRpcSigner =\n    /** @class */\n    function (_super) {\n      __extends(JsonRpcSigner, _super);\n\n      function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, JsonRpcSigner);\n        _this = _super.call(this) || this;\n\n        if (constructorGuard !== _constructorGuard) {\n          throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        lib$3.defineReadOnly(_this, \"provider\", provider);\n\n        if (addressOrIndex == null) {\n          addressOrIndex = 0;\n        }\n\n        if (typeof addressOrIndex === \"string\") {\n          lib$3.defineReadOnly(_this, \"_address\", _this.provider.formatter.address(addressOrIndex));\n          lib$3.defineReadOnly(_this, \"_index\", null);\n        } else if (typeof addressOrIndex === \"number\") {\n          lib$3.defineReadOnly(_this, \"_index\", addressOrIndex);\n          lib$3.defineReadOnly(_this, \"_address\", null);\n        } else {\n          logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n\n        return _this;\n      }\n\n      JsonRpcSigner.prototype.connect = function (provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"connect\"\n        });\n      };\n\n      JsonRpcSigner.prototype.connectUnchecked = function () {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n      };\n\n      JsonRpcSigner.prototype.getAddress = function () {\n        var _this = this;\n\n        if (this._address) {\n          return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then(function (accounts) {\n          if (accounts.length <= _this._index) {\n            logger.throwError(\"unknown account #\" + _this._index, lib.Logger.errors.UNSUPPORTED_OPERATION, {\n              operation: \"getAddress\"\n            });\n          }\n\n          return _this.provider.formatter.address(accounts[_this._index]);\n        });\n      };\n\n      JsonRpcSigner.prototype.sendUncheckedTransaction = function (transaction) {\n        var _this = this;\n\n        transaction = lib$3.shallowCopy(transaction);\n        var fromAddress = this.getAddress().then(function (address) {\n          if (address) {\n            address = address.toLowerCase();\n          }\n\n          return address;\n        }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n\n        if (transaction.gasLimit == null) {\n          var estimate = lib$3.shallowCopy(transaction);\n          estimate.from = fromAddress;\n          transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        return lib$3.resolveProperties({\n          tx: lib$3.resolveProperties(transaction),\n          sender: fromAddress\n        }).then(function (_a) {\n          var tx = _a.tx,\n              sender = _a.sender;\n\n          if (tx.from != null) {\n            if (tx.from.toLowerCase() !== sender) {\n              logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n            }\n          } else {\n            tx.from = sender;\n          }\n\n          var hexTx = _this.provider.constructor.hexlifyTransaction(tx, {\n            from: true\n          });\n\n          return _this.provider.send(\"eth_sendTransaction\", [hexTx]).then(function (hash) {\n            return hash;\n          }, function (error) {\n            if (error.responseText) {\n              // See: JsonRpcProvider.sendTransaction (@TODO: Expose a ._throwError??)\n              if (error.responseText.indexOf(\"insufficient funds\") >= 0) {\n                logger.throwError(\"insufficient funds\", lib.Logger.errors.INSUFFICIENT_FUNDS, {\n                  transaction: tx\n                });\n              }\n\n              if (error.responseText.indexOf(\"nonce too low\") >= 0) {\n                logger.throwError(\"nonce has already been used\", lib.Logger.errors.NONCE_EXPIRED, {\n                  transaction: tx\n                });\n              }\n\n              if (error.responseText.indexOf(\"replacement transaction underpriced\") >= 0) {\n                logger.throwError(\"replacement fee too low\", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {\n                  transaction: tx\n                });\n              }\n            }\n\n            throw error;\n          });\n        });\n      };\n\n      JsonRpcSigner.prototype.signTransaction = function (transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"signTransaction\"\n        });\n      };\n\n      JsonRpcSigner.prototype.sendTransaction = function (transaction) {\n        var _this = this;\n\n        return this.sendUncheckedTransaction(transaction).then(function (hash) {\n          return lib$l.poll(function () {\n            return _this.provider.getTransaction(hash).then(function (tx) {\n              if (tx === null) {\n                return undefined;\n              }\n\n              return _this.provider._wrapTransaction(tx, hash);\n            });\n          }, {\n            onceBlock: _this.provider\n          }).catch(function (error) {\n            error.transactionHash = hash;\n            throw error;\n          });\n        });\n      };\n\n      JsonRpcSigner.prototype.signMessage = function (message) {\n        var _this = this;\n\n        var data = typeof message === \"string\" ? lib$8.toUtf8Bytes(message) : message;\n        return this.getAddress().then(function (address) {\n          // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n          return _this.provider.send(\"eth_sign\", [address.toLowerCase(), lib$1.hexlify(data)]);\n        });\n      };\n\n      JsonRpcSigner.prototype.unlock = function (password) {\n        var provider = this.provider;\n        return this.getAddress().then(function (address) {\n          return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n      };\n\n      return JsonRpcSigner;\n    }(lib$c.Signer);\n\n    exports.JsonRpcSigner = JsonRpcSigner;\n\n    var UncheckedJsonRpcSigner =\n    /** @class */\n    function (_super) {\n      __extends(UncheckedJsonRpcSigner, _super);\n\n      function UncheckedJsonRpcSigner() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      UncheckedJsonRpcSigner.prototype.sendTransaction = function (transaction) {\n        var _this = this;\n\n        return this.sendUncheckedTransaction(transaction).then(function (hash) {\n          return {\n            hash: hash,\n            nonce: null,\n            gasLimit: null,\n            gasPrice: null,\n            data: null,\n            value: null,\n            chainId: null,\n            confirmations: 0,\n            from: null,\n            wait: function (confirmations) {\n              return _this.provider.waitForTransaction(hash, confirmations);\n            }\n          };\n        });\n      };\n\n      return UncheckedJsonRpcSigner;\n    }(JsonRpcSigner);\n\n    var allowedTransactionKeys = {\n      chainId: true,\n      data: true,\n      gasLimit: true,\n      gasPrice: true,\n      nonce: true,\n      to: true,\n      value: true\n    };\n\n    var JsonRpcProvider =\n    /** @class */\n    function (_super) {\n      __extends(JsonRpcProvider, _super);\n\n      function JsonRpcProvider(url, network) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, JsonRpcProvider);\n        var networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n        if (networkOrReady == null) {\n          networkOrReady = new Promise(function (resolve, reject) {\n            setTimeout(function () {\n              _this.detectNetwork().then(function (network) {\n                resolve(network);\n              }, function (error) {\n                reject(error);\n              });\n            }, 0);\n          });\n        }\n\n        _this = _super.call(this, networkOrReady) || this; // Default URL\n\n        if (!url) {\n          url = lib$3.getStatic(_this.constructor, \"defaultUrl\")();\n        }\n\n        if (typeof url === \"string\") {\n          lib$3.defineReadOnly(_this, \"connection\", Object.freeze({\n            url: url\n          }));\n        } else {\n          lib$3.defineReadOnly(_this, \"connection\", Object.freeze(lib$3.shallowCopy(url)));\n        }\n\n        _this._nextId = 42;\n        return _this;\n      }\n\n      JsonRpcProvider.defaultUrl = function () {\n        return \"http:/\\/localhost:8545\";\n      };\n\n      JsonRpcProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var chainId, error_1, error_2, getNetwork;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , timer(0)];\n\n              case 1:\n                _a.sent();\n\n                chainId = null;\n                _a.label = 2;\n\n              case 2:\n                _a.trys.push([2, 4,, 9]);\n\n                return [4\n                /*yield*/\n                , this.send(\"eth_chainId\", [])];\n\n              case 3:\n                chainId = _a.sent();\n                return [3\n                /*break*/\n                , 9];\n\n              case 4:\n                error_1 = _a.sent();\n                _a.label = 5;\n\n              case 5:\n                _a.trys.push([5, 7,, 8]);\n\n                return [4\n                /*yield*/\n                , this.send(\"net_version\", [])];\n\n              case 6:\n                chainId = _a.sent();\n                return [3\n                /*break*/\n                , 8];\n\n              case 7:\n                error_2 = _a.sent();\n                return [3\n                /*break*/\n                , 8];\n\n              case 8:\n                return [3\n                /*break*/\n                , 9];\n\n              case 9:\n                if (chainId != null) {\n                  getNetwork = lib$3.getStatic(this.constructor, \"getNetwork\");\n\n                  try {\n                    return [2\n                    /*return*/\n                    , getNetwork(lib$2.BigNumber.from(chainId).toNumber())];\n                  } catch (error) {\n                    return [2\n                    /*return*/\n                    , logger.throwError(\"could not detect network\", lib.Logger.errors.NETWORK_ERROR, {\n                      chainId: chainId,\n                      event: \"invalidNetwork\",\n                      serverError: error\n                    })];\n                  }\n                }\n\n                return [2\n                /*return*/\n                , logger.throwError(\"could not detect network\", lib.Logger.errors.NETWORK_ERROR, {\n                  event: \"noNetwork\"\n                })];\n            }\n          });\n        });\n      };\n\n      JsonRpcProvider.prototype.getSigner = function (addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n      };\n\n      JsonRpcProvider.prototype.getUncheckedSigner = function (addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n      };\n\n      JsonRpcProvider.prototype.listAccounts = function () {\n        var _this = this;\n\n        return this.send(\"eth_accounts\", []).then(function (accounts) {\n          return accounts.map(function (a) {\n            return _this.formatter.address(a);\n          });\n        });\n      };\n\n      JsonRpcProvider.prototype.send = function (method, params) {\n        var _this = this;\n\n        var request = {\n          method: method,\n          params: params,\n          id: this._nextId++,\n          jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n          action: \"request\",\n          request: lib$3.deepCopy(request),\n          provider: this\n        });\n        return lib$l.fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {\n          _this.emit(\"debug\", {\n            action: \"response\",\n            request: request,\n            response: result,\n            provider: _this\n          });\n\n          return result;\n        }, function (error) {\n          _this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: request,\n            provider: _this\n          });\n\n          throw error;\n        });\n      };\n\n      JsonRpcProvider.prototype.prepareRequest = function (method, params) {\n        switch (method) {\n          case \"getBlockNumber\":\n            return [\"eth_blockNumber\", []];\n\n          case \"getGasPrice\":\n            return [\"eth_gasPrice\", []];\n\n          case \"getBalance\":\n            return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n          case \"getTransactionCount\":\n            return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n          case \"getCode\":\n            return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n          case \"getStorageAt\":\n            return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n\n          case \"sendTransaction\":\n            return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n          case \"getBlock\":\n            if (params.blockTag) {\n              return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n            } else if (params.blockHash) {\n              return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n            }\n\n            return null;\n\n          case \"getTransaction\":\n            return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n          case \"getTransactionReceipt\":\n            return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n          case \"call\":\n            {\n              var hexlifyTransaction = lib$3.getStatic(this.constructor, \"hexlifyTransaction\");\n              return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n                from: true\n              }), params.blockTag]];\n            }\n\n          case \"estimateGas\":\n            {\n              var hexlifyTransaction = lib$3.getStatic(this.constructor, \"hexlifyTransaction\");\n              return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n                from: true\n              })]];\n            }\n\n          case \"getLogs\":\n            if (params.filter && params.filter.address != null) {\n              params.filter.address = getLowerCase(params.filter.address);\n            }\n\n            return [\"eth_getLogs\", [params.filter]];\n\n          default:\n            break;\n        }\n\n        return null;\n      };\n\n      JsonRpcProvider.prototype.perform = function (method, params) {\n        var args = this.prepareRequest(method, params);\n\n        if (args == null) {\n          logger.throwError(method + \" not implemented\", lib.Logger.errors.NOT_IMPLEMENTED, {\n            operation: method\n          });\n        } // We need a little extra logic to process errors from sendTransaction\n\n\n        if (method === \"sendTransaction\") {\n          return this.send(args[0], args[1]).catch(function (error) {\n            if (error.responseText) {\n              // \"insufficient funds for gas * price + value\"\n              if (error.responseText.indexOf(\"insufficient funds\") > 0) {\n                logger.throwError(\"insufficient funds\", lib.Logger.errors.INSUFFICIENT_FUNDS, {});\n              } // \"nonce too low\"\n\n\n              if (error.responseText.indexOf(\"nonce too low\") > 0) {\n                logger.throwError(\"nonce has already been used\", lib.Logger.errors.NONCE_EXPIRED, {});\n              } // \"replacement transaction underpriced\"\n\n\n              if (error.responseText.indexOf(\"replacement transaction underpriced\") > 0) {\n                logger.throwError(\"replacement fee too low\", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {});\n              }\n            }\n\n            throw error;\n          });\n        }\n\n        return this.send(args[0], args[1]);\n      };\n\n      JsonRpcProvider.prototype._startEvent = function (event) {\n        if (event.tag === \"pending\") {\n          this._startPending();\n        }\n\n        _super.prototype._startEvent.call(this, event);\n      };\n\n      JsonRpcProvider.prototype._startPending = function () {\n        if (this._pendingFilter != null) {\n          return;\n        }\n\n        var self = this;\n        var pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n          function poll() {\n            self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n              if (self._pendingFilter != pendingFilter) {\n                return null;\n              }\n\n              var seq = Promise.resolve();\n              hashes.forEach(function (hash) {\n                // @TODO: This should be garbage collected at some point... How? When?\n                self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                seq = seq.then(function () {\n                  return self.getTransaction(hash).then(function (tx) {\n                    self.emit(\"pending\", tx);\n                    return null;\n                  });\n                });\n              });\n              return seq.then(function () {\n                return timer(1000);\n              });\n            }).then(function () {\n              if (self._pendingFilter != pendingFilter) {\n                self.send(\"eth_uninstallFilter\", [filterId]);\n                return;\n              }\n\n              setTimeout(function () {\n                poll();\n              }, 0);\n              return null;\n            }).catch(function (error) {});\n          }\n\n          poll();\n          return filterId;\n        }).catch(function (error) {});\n      };\n\n      JsonRpcProvider.prototype._stopEvent = function (event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n          this._pendingFilter = null;\n        }\n\n        _super.prototype._stopEvent.call(this, event);\n      }; // Convert an ethers.js transaction into a JSON-RPC transaction\n      //  - gasLimit => gas\n      //  - All values hexlified\n      //  - All numeric values zero-striped\n      //  - All addresses are lowercased\n      // NOTE: This allows a TransactionRequest, but all values should be resolved\n      //       before this is called\n      // @TODO: This will likely be removed in future versions and prepareRequest\n      //        will be the preferred method for this.\n\n\n      JsonRpcProvider.hexlifyTransaction = function (transaction, allowExtra) {\n        // Check only allowed properties are given\n        var allowed = lib$3.shallowCopy(allowedTransactionKeys);\n\n        if (allowExtra) {\n          for (var key in allowExtra) {\n            if (allowExtra[key]) {\n              allowed[key] = true;\n            }\n          }\n        }\n\n        lib$3.checkProperties(transaction, allowed);\n        var result = {}; // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n\n        [\"gasLimit\", \"gasPrice\", \"nonce\", \"value\"].forEach(function (key) {\n          if (transaction[key] == null) {\n            return;\n          }\n\n          var value = lib$1.hexValue(transaction[key]);\n\n          if (key === \"gasLimit\") {\n            key = \"gas\";\n          }\n\n          result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n          if (transaction[key] == null) {\n            return;\n          }\n\n          result[key] = lib$1.hexlify(transaction[key]);\n        });\n        return result;\n      };\n\n      return JsonRpcProvider;\n    }(baseProvider.BaseProvider);\n\n    exports.JsonRpcProvider = JsonRpcProvider;\n  });\n  var jsonRpcProvider$1 = unwrapExports(jsonRpcProvider);\n  var jsonRpcProvider_1 = jsonRpcProvider.JsonRpcSigner;\n  var jsonRpcProvider_2 = jsonRpcProvider.JsonRpcProvider;\n  var websocketProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n      return mod && mod.__esModule ? mod : {\n        \"default\": mod\n      };\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n\n    var ws_1 = __importDefault(browserWs);\n\n    var logger = new lib.Logger(_version$I.version);\n    /**\n     *  Notes:\n     *\n     *  This provider differs a bit from the polling providers. One main\n     *  difference is how it handles consistency. The polling providers\n     *  will stall responses to ensure a consistent state, while this\n     *  WebSocket provider assumes the connected backend will manage this.\n     *\n     *  For example, if a polling provider emits an event which indicats\n     *  the event occurred in blockhash XXX, a call to fetch that block by\n     *  its hash XXX, if not present will retry until it is present. This\n     *  can occur when querying a pool of nodes that are mildly out of sync\n     *  with each other.\n     */\n\n    var NextId = 1; // For more info about the Real-time Event API see:\n    //   https://geth.ethereum.org/docs/rpc/pubsub\n\n    var WebSocketProvider =\n    /** @class */\n    function (_super) {\n      __extends(WebSocketProvider, _super);\n\n      function WebSocketProvider(url, network) {\n        var _this = this; // This will be added in the future; please open an issue to expedite\n\n\n        if (network === \"any\") {\n          logger.throwError(\"WebSocketProvider does not support 'any' network yet\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"network:any\"\n          });\n        }\n\n        _this = _super.call(this, url, network) || this;\n        _this._pollingInterval = -1;\n        lib$3.defineReadOnly(_this, \"_websocket\", new ws_1.default(_this.connection.url));\n        lib$3.defineReadOnly(_this, \"_requests\", {});\n        lib$3.defineReadOnly(_this, \"_subs\", {});\n        lib$3.defineReadOnly(_this, \"_subIds\", {}); // Stall sending requests until the socket is open...\n\n        _this._wsReady = false;\n\n        _this._websocket.onopen = function () {\n          _this._wsReady = true;\n          Object.keys(_this._requests).forEach(function (id) {\n            _this._websocket.send(_this._requests[id].payload);\n          });\n        };\n\n        _this._websocket.onmessage = function (messageEvent) {\n          var data = messageEvent.data;\n          var result = JSON.parse(data);\n\n          if (result.id != null) {\n            var id = String(result.id);\n            var request = _this._requests[id];\n            delete _this._requests[id];\n\n            if (result.result !== undefined) {\n              request.callback(null, result.result);\n            } else {\n              if (result.error) {\n                var error = new Error(result.error.message || \"unknown error\");\n                lib$3.defineReadOnly(error, \"code\", result.error.code || null);\n                lib$3.defineReadOnly(error, \"response\", data);\n                request.callback(error, undefined);\n              } else {\n                request.callback(new Error(\"unknown error\"), undefined);\n              }\n            }\n          } else if (result.method === \"eth_subscription\") {\n            // Subscription...\n            var sub = _this._subs[result.params.subscription];\n\n            if (sub) {\n              //this.emit.apply(this,                  );\n              sub.processFunc(result.params.result);\n            }\n          } else {\n            console.warn(\"this should not happen\");\n          }\n        }; // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n\n\n        var fauxPoll = setInterval(function () {\n          _this.emit(\"poll\");\n        }, 1000);\n\n        if (fauxPoll.unref) {\n          fauxPoll.unref();\n        }\n\n        return _this;\n      }\n\n      Object.defineProperty(WebSocketProvider.prototype, \"pollingInterval\", {\n        get: function () {\n          return 0;\n        },\n        set: function (value) {\n          logger.throwError(\"cannot set polling interval on WebSocketProvider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n          });\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      WebSocketProvider.prototype.resetEventsBlock = function (blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"resetEventBlock\"\n        });\n      };\n\n      WebSocketProvider.prototype.poll = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , null];\n          });\n        });\n      };\n\n      Object.defineProperty(WebSocketProvider.prototype, \"polling\", {\n        set: function (value) {\n          if (!value) {\n            return;\n          }\n\n          logger.throwError(\"cannot set polling on WebSocketProvider\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n          });\n        },\n        enumerable: true,\n        configurable: true\n      });\n\n      WebSocketProvider.prototype.send = function (method, params) {\n        var _this = this;\n\n        var rid = NextId++;\n        return new Promise(function (resolve, reject) {\n          function callback(error, result) {\n            if (error) {\n              return reject(error);\n            }\n\n            return resolve(result);\n          }\n\n          var payload = JSON.stringify({\n            method: method,\n            params: params,\n            id: rid,\n            jsonrpc: \"2.0\"\n          });\n          _this._requests[String(rid)] = {\n            callback: callback,\n            payload: payload\n          };\n\n          if (_this._wsReady) {\n            _this._websocket.send(payload);\n          }\n        });\n      };\n\n      WebSocketProvider.defaultUrl = function () {\n        return \"ws:/\\/localhost:8546\";\n      };\n\n      WebSocketProvider.prototype._subscribe = function (tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function () {\n          var subIdPromise, subId;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                subIdPromise = this._subIds[tag];\n\n                if (subIdPromise == null) {\n                  subIdPromise = Promise.all(param).then(function (param) {\n                    return _this.send(\"eth_subscribe\", param);\n                  });\n                  this._subIds[tag] = subIdPromise;\n                }\n\n                return [4\n                /*yield*/\n                , subIdPromise];\n\n              case 1:\n                subId = _a.sent();\n                this._subs[subId] = {\n                  tag: tag,\n                  processFunc: processFunc\n                };\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      };\n\n      WebSocketProvider.prototype._startEvent = function (event) {\n        var _this = this;\n\n        switch (event.type) {\n          case \"block\":\n            this._subscribe(\"block\", [\"newHeads\"], function (result) {\n              var blockNumber = lib$2.BigNumber.from(result.number).toNumber();\n              _this._emitted.block = blockNumber;\n\n              _this.emit(\"block\", blockNumber);\n            });\n\n            break;\n\n          case \"pending\":\n            this._subscribe(\"pending\", [\"newPendingTransactions\"], function (result) {\n              _this.emit(\"pending\", result);\n            });\n\n            break;\n\n          case \"filter\":\n            this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], function (result) {\n              if (result.removed == null) {\n                result.removed = false;\n              }\n\n              _this.emit(event.filter, _this.formatter.filterLog(result));\n            });\n\n            break;\n\n          case \"tx\":\n            {\n              var emitReceipt_1 = function (event) {\n                var hash = event.hash;\n\n                _this.getTransactionReceipt(hash).then(function (receipt) {\n                  if (!receipt) {\n                    return;\n                  }\n\n                  _this.emit(hash, receipt);\n                });\n              }; // In case it is already mined\n\n\n              emitReceipt_1(event); // To keep things simple, we start up a single newHeads subscription\n              // to keep an eye out for transactions we are watching for.\n              // Starting a subscription for an event (i.e. \"tx\") that is already\n              // running is (basically) a nop.\n\n              this._subscribe(\"tx\", [\"newHeads\"], function (result) {\n                _this._events.filter(function (e) {\n                  return e.type === \"tx\";\n                }).forEach(emitReceipt_1);\n              });\n\n              break;\n            }\n          // Nothing is needed\n\n          case \"debug\":\n          case \"poll\":\n          case \"willPoll\":\n          case \"didPoll\":\n          case \"error\":\n            break;\n\n          default:\n            console.log(\"unhandled:\", event);\n            break;\n        }\n      };\n\n      WebSocketProvider.prototype._stopEvent = function (event) {\n        var _this = this;\n\n        var tag = event.tag;\n\n        if (event.type === \"tx\") {\n          // There are remaining transaction event listeners\n          if (this._events.filter(function (e) {\n            return e.type === \"tx\";\n          }).length) {\n            return;\n          }\n\n          tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n          // There are remaining event listeners\n          return;\n        }\n\n        var subId = this._subIds[tag];\n\n        if (!subId) {\n          return;\n        }\n\n        delete this._subIds[tag];\n        subId.then(function (subId) {\n          if (!_this._subs[subId]) {\n            return;\n          }\n\n          delete _this._subs[subId];\n\n          _this.send(\"eth_unsubscribe\", [subId]);\n        });\n      };\n\n      WebSocketProvider.prototype.destroy = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!(this._websocket.readyState === ws_1.default.CONNECTING)) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , new Promise(function (resolve) {\n                  _this._websocket.onopen = function () {\n                    resolve(true);\n                  };\n\n                  _this._websocket.onerror = function () {\n                    resolve(false);\n                  };\n                })];\n\n              case 1:\n                _a.sent();\n\n                _a.label = 2;\n\n              case 2:\n                // Hangup\n                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n                this._websocket.close(1000);\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      };\n\n      return WebSocketProvider;\n    }(jsonRpcProvider.JsonRpcProvider);\n\n    exports.WebSocketProvider = WebSocketProvider;\n  });\n  var websocketProvider$1 = unwrapExports(websocketProvider);\n  var websocketProvider_1 = websocketProvider.WebSocketProvider;\n  var urlJsonRpcProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version); // A StaticJsonRpcProvider is useful when you *know* for certain that\n    // the backend will never change, as it never calls eth_chainId to\n    // verify its backend. However, if the backend does change, the effects\n    // are undefined and may include:\n    // - inconsistent results\n    // - locking up the UI\n    // - block skew warnings\n    // - wrong results\n    // If the network is not explicit (i.e. auto-detection is expected), the\n    // node MUST be running and available to respond to requests BEFORE this\n    // is instantiated.\n\n    var StaticJsonRpcProvider =\n    /** @class */\n    function (_super) {\n      __extends(StaticJsonRpcProvider, _super);\n\n      function StaticJsonRpcProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      StaticJsonRpcProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var network;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                network = this.network;\n                if (!(network == null)) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , _super.prototype.detectNetwork.call(this)];\n\n              case 1:\n                network = _a.sent();\n\n                if (!network) {\n                  logger.throwError(\"no network detected\", lib.Logger.errors.UNKNOWN_ERROR, {});\n                } // If still not set, set it\n\n\n                if (this._network == null) {\n                  // A static network does not support \"any\"\n                  lib$3.defineReadOnly(this, \"_network\", network);\n                  this.emit(\"network\", network, null);\n                }\n\n                _a.label = 2;\n\n              case 2:\n                return [2\n                /*return*/\n                , network];\n            }\n          });\n        });\n      };\n\n      return StaticJsonRpcProvider;\n    }(jsonRpcProvider.JsonRpcProvider);\n\n    exports.StaticJsonRpcProvider = StaticJsonRpcProvider;\n\n    var UrlJsonRpcProvider =\n    /** @class */\n    function (_super) {\n      __extends(UrlJsonRpcProvider, _super);\n\n      function UrlJsonRpcProvider(network, apiKey) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkAbstract(_newTarget, UrlJsonRpcProvider); // Normalize the Network and API Key\n\n        network = lib$3.getStatic(_newTarget, \"getNetwork\")(network);\n        apiKey = lib$3.getStatic(_newTarget, \"getApiKey\")(apiKey);\n        var connection = lib$3.getStatic(_newTarget, \"getUrl\")(network, apiKey);\n        _this = _super.call(this, connection, network) || this;\n\n        if (typeof apiKey === \"string\") {\n          lib$3.defineReadOnly(_this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n          Object.keys(apiKey).forEach(function (key) {\n            lib$3.defineReadOnly(_this, key, apiKey[key]);\n          });\n        }\n\n        return _this;\n      }\n\n      UrlJsonRpcProvider.prototype._startPending = function () {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n      };\n\n      UrlJsonRpcProvider.prototype.getSigner = function (address) {\n        return logger.throwError(\"API provider does not support signing\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getSigner\"\n        });\n      };\n\n      UrlJsonRpcProvider.prototype.listAccounts = function () {\n        return Promise.resolve([]);\n      }; // Return a defaultApiKey if null, otherwise validate the API key\n\n\n      UrlJsonRpcProvider.getApiKey = function (apiKey) {\n        return apiKey;\n      }; // Returns the url or connection for the given network and API key. The\n      // API key will have been sanitized by the getApiKey first, so any validation\n      // or transformations can be done there.\n\n\n      UrlJsonRpcProvider.getUrl = function (network, apiKey) {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", lib.Logger.errors.NOT_IMPLEMENTED, {\n          operation: \"getUrl\"\n        });\n      };\n\n      return UrlJsonRpcProvider;\n    }(StaticJsonRpcProvider);\n\n    exports.UrlJsonRpcProvider = UrlJsonRpcProvider;\n  });\n  var urlJsonRpcProvider$1 = unwrapExports(urlJsonRpcProvider);\n  var urlJsonRpcProvider_1 = urlJsonRpcProvider.StaticJsonRpcProvider;\n  var urlJsonRpcProvider_2 = urlJsonRpcProvider.UrlJsonRpcProvider;\n  var alchemyProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version); // This key was provided to ethers.js by Alchemy to be used by the\n    // default provider, but it is recommended that for your own\n    // production environments, that you acquire your own API key at:\n    //   https://dashboard.alchemyapi.io\n\n    var defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\n\n    var AlchemyProvider =\n    /** @class */\n    function (_super) {\n      __extends(AlchemyProvider, _super);\n\n      function AlchemyProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      AlchemyProvider.getWebSocketProvider = function (network, apiKey) {\n        var provider = new AlchemyProvider(network, apiKey);\n        var url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n        return new websocketProvider.WebSocketProvider(url, provider.network);\n      };\n\n      AlchemyProvider.getApiKey = function (apiKey) {\n        if (apiKey == null) {\n          return defaultApiKey;\n        }\n\n        if (apiKey && typeof apiKey !== \"string\") {\n          logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKey;\n      };\n\n      AlchemyProvider.getUrl = function (network, apiKey) {\n        var host = null;\n\n        switch (network.name) {\n          case \"homestead\":\n            host = \"eth-mainnet.alchemyapi.io/v2/\";\n            break;\n\n          case \"ropsten\":\n            host = \"eth-ropsten.alchemyapi.io/v2/\";\n            break;\n\n          case \"rinkeby\":\n            host = \"eth-rinkeby.alchemyapi.io/v2/\";\n            break;\n\n          case \"goerli\":\n            host = \"eth-goerli.alchemyapi.io/v2/\";\n            break;\n\n          case \"kovan\":\n            host = \"eth-kovan.alchemyapi.io/v2/\";\n            break;\n\n          default:\n            logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n          url: \"https:/\" + \"/\" + host + apiKey,\n          throttleCallback: function (attempt, url) {\n            if (apiKey === defaultApiKey) {\n              formatter.showThrottleMessage();\n            }\n\n            return Promise.resolve(true);\n          }\n        };\n      };\n\n      return AlchemyProvider;\n    }(urlJsonRpcProvider.UrlJsonRpcProvider);\n\n    exports.AlchemyProvider = AlchemyProvider;\n  });\n  var alchemyProvider$1 = unwrapExports(alchemyProvider);\n  var alchemyProvider_1 = alchemyProvider.AlchemyProvider;\n  var cloudflareProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version);\n\n    var CloudflareProvider =\n    /** @class */\n    function (_super) {\n      __extends(CloudflareProvider, _super);\n\n      function CloudflareProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      CloudflareProvider.getApiKey = function (apiKey) {\n        if (apiKey != null) {\n          logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n\n        return null;\n      };\n\n      CloudflareProvider.getUrl = function (network, apiKey) {\n        var host = null;\n\n        switch (network.name) {\n          case \"homestead\":\n            host = \"https://cloudflare-eth.com/\";\n            break;\n\n          default:\n            logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n      };\n\n      CloudflareProvider.prototype.perform = function (method, params) {\n        return __awaiter(this, void 0, void 0, function () {\n          var block;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!(method === \"getBlockNumber\")) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , _super.prototype.perform.call(this, \"getBlock\", {\n                  blockTag: \"latest\"\n                })];\n\n              case 1:\n                block = _a.sent();\n                return [2\n                /*return*/\n                , block.number];\n\n              case 2:\n                return [2\n                /*return*/\n                , _super.prototype.perform.call(this, method, params)];\n            }\n          });\n        });\n      };\n\n      return CloudflareProvider;\n    }(urlJsonRpcProvider.UrlJsonRpcProvider);\n\n    exports.CloudflareProvider = CloudflareProvider;\n  });\n  var cloudflareProvider$1 = unwrapExports(cloudflareProvider);\n  var cloudflareProvider_1 = cloudflareProvider.CloudflareProvider;\n  var etherscanProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version); // The transaction has already been sanitized by the calls in Provider\n\n    function getTransactionString(transaction) {\n      var result = [];\n\n      for (var key in transaction) {\n        if (transaction[key] == null) {\n          continue;\n        }\n\n        var value = lib$1.hexlify(transaction[key]);\n\n        if ({\n          gasLimit: true,\n          gasPrice: true,\n          nonce: true,\n          value: true\n        }[key]) {\n          value = lib$1.hexValue(value);\n        }\n\n        result.push(key + \"=\" + value);\n      }\n\n      return result.join(\"&\");\n    }\n\n    function getResult(result) {\n      // getLogs, getHistory have weird success responses\n      if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n      }\n\n      if (result.status != 1 || result.message != \"OK\") {\n        var error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n          error.throttleRetry = true;\n        }\n\n        throw error;\n      }\n\n      return result.result;\n    }\n\n    function getJsonResult(result) {\n      // This response indicates we are being throttled\n      if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        var error = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n      }\n\n      if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        var error = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n      }\n\n      if (result.error) {\n        // @TODO: not any\n        var error = new Error(result.error.message || \"unknown error\");\n\n        if (result.error.code) {\n          error.code = result.error.code;\n        }\n\n        if (result.error.data) {\n          error.data = result.error.data;\n        }\n\n        throw error;\n      }\n\n      return result.result;\n    } // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\n    function checkLogTag(blockTag) {\n      if (blockTag === \"pending\") {\n        throw new Error(\"pending not supported\");\n      }\n\n      if (blockTag === \"latest\") {\n        return blockTag;\n      }\n\n      return parseInt(blockTag.substring(2), 16);\n    }\n\n    var defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\n    var EtherscanProvider =\n    /** @class */\n    function (_super) {\n      __extends(EtherscanProvider, _super);\n\n      function EtherscanProvider(network, apiKey) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, EtherscanProvider);\n        _this = _super.call(this, network) || this;\n        var name = \"invalid\";\n\n        if (_this.network) {\n          name = _this.network.name;\n        }\n\n        var baseUrl = null;\n\n        switch (name) {\n          case \"homestead\":\n            baseUrl = \"https://api.etherscan.io\";\n            break;\n\n          case \"ropsten\":\n            baseUrl = \"https://api-ropsten.etherscan.io\";\n            break;\n\n          case \"rinkeby\":\n            baseUrl = \"https://api-rinkeby.etherscan.io\";\n            break;\n\n          case \"kovan\":\n            baseUrl = \"https://api-kovan.etherscan.io\";\n            break;\n\n          case \"goerli\":\n            baseUrl = \"https://api-goerli.etherscan.io\";\n            break;\n\n          default:\n            throw new Error(\"unsupported network\");\n        }\n\n        lib$3.defineReadOnly(_this, \"baseUrl\", baseUrl);\n        lib$3.defineReadOnly(_this, \"apiKey\", apiKey || defaultApiKey);\n        return _this;\n      }\n\n      EtherscanProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            return [2\n            /*return*/\n            , this.network];\n          });\n        });\n      };\n\n      EtherscanProvider.prototype.perform = function (method, params) {\n        return __awaiter(this, void 0, void 0, function () {\n          var url, apiKey, get, _a, transaction, transaction, topic0, logs, txs, i, log, tx, _b;\n\n          var _this = this;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                url = this.baseUrl;\n                apiKey = \"\";\n\n                if (this.apiKey) {\n                  apiKey += \"&apikey=\" + this.apiKey;\n                }\n\n                get = function (url, procFunc) {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var connection, result;\n\n                    var _this = this;\n\n                    return __generator(this, function (_a) {\n                      switch (_a.label) {\n                        case 0:\n                          this.emit(\"debug\", {\n                            action: \"request\",\n                            request: url,\n                            provider: this\n                          });\n                          connection = {\n                            url: url,\n                            throttleSlotInterval: 1000,\n                            throttleCallback: function (attempt, url) {\n                              if (_this.apiKey === defaultApiKey) {\n                                formatter.showThrottleMessage();\n                              }\n\n                              return Promise.resolve(true);\n                            }\n                          };\n                          return [4\n                          /*yield*/\n                          , lib$l.fetchJson(connection, null, procFunc || getJsonResult)];\n\n                        case 1:\n                          result = _a.sent();\n                          this.emit(\"debug\", {\n                            action: \"response\",\n                            request: url,\n                            response: lib$3.deepCopy(result),\n                            provider: this\n                          });\n                          return [2\n                          /*return*/\n                          , result];\n                      }\n                    });\n                  });\n                };\n\n                _a = method;\n\n                switch (_a) {\n                  case \"getBlockNumber\":\n                    return [3\n                    /*break*/\n                    , 1];\n\n                  case \"getGasPrice\":\n                    return [3\n                    /*break*/\n                    , 2];\n\n                  case \"getBalance\":\n                    return [3\n                    /*break*/\n                    , 3];\n\n                  case \"getTransactionCount\":\n                    return [3\n                    /*break*/\n                    , 4];\n\n                  case \"getCode\":\n                    return [3\n                    /*break*/\n                    , 5];\n\n                  case \"getStorageAt\":\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case \"sendTransaction\":\n                    return [3\n                    /*break*/\n                    , 7];\n\n                  case \"getBlock\":\n                    return [3\n                    /*break*/\n                    , 8];\n\n                  case \"getTransaction\":\n                    return [3\n                    /*break*/\n                    , 9];\n\n                  case \"getTransactionReceipt\":\n                    return [3\n                    /*break*/\n                    , 10];\n\n                  case \"call\":\n                    return [3\n                    /*break*/\n                    , 11];\n\n                  case \"estimateGas\":\n                    return [3\n                    /*break*/\n                    , 12];\n\n                  case \"getLogs\":\n                    return [3\n                    /*break*/\n                    , 13];\n\n                  case \"getEtherPrice\":\n                    return [3\n                    /*break*/\n                    , 20];\n                }\n\n                return [3\n                /*break*/\n                , 22];\n\n              case 1:\n                url += \"/api?module=proxy&action=eth_blockNumber\" + apiKey;\n                return [2\n                /*return*/\n                , get(url)];\n\n              case 2:\n                url += \"/api?module=proxy&action=eth_gasPrice\" + apiKey;\n                return [2\n                /*return*/\n                , get(url)];\n\n              case 3:\n                // Returns base-10 result\n                url += \"/api?module=account&action=balance&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return [2\n                /*return*/\n                , get(url, getResult)];\n\n              case 4:\n                url += \"/api?module=proxy&action=eth_getTransactionCount&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return [2\n                /*return*/\n                , get(url)];\n\n              case 5:\n                url += \"/api?module=proxy&action=eth_getCode&address=\" + params.address;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return [2\n                /*return*/\n                , get(url)];\n\n              case 6:\n                url += \"/api?module=proxy&action=eth_getStorageAt&address=\" + params.address;\n                url += \"&position=\" + params.position;\n                url += \"&tag=\" + params.blockTag + apiKey;\n                return [2\n                /*return*/\n                , get(url)];\n\n              case 7:\n                url += \"/api?module=proxy&action=eth_sendRawTransaction&hex=\" + params.signedTransaction;\n                url += apiKey;\n                return [2\n                /*return*/\n                , get(url).catch(function (error) {\n                  if (error.responseText) {\n                    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n                    if (error.responseText.toLowerCase().indexOf(\"insufficient funds\") >= 0) {\n                      logger.throwError(\"insufficient funds\", lib.Logger.errors.INSUFFICIENT_FUNDS, {});\n                    } // \"Transaction with the same hash was already imported.\"\n\n\n                    if (error.responseText.indexOf(\"same hash was already imported\") >= 0) {\n                      logger.throwError(\"nonce has already been used\", lib.Logger.errors.NONCE_EXPIRED, {});\n                    } // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\n\n                    if (error.responseText.indexOf(\"another transaction with same nonce\") >= 0) {\n                      logger.throwError(\"replacement fee too low\", lib.Logger.errors.REPLACEMENT_UNDERPRICED, {});\n                    }\n                  }\n\n                  throw error;\n                })];\n\n              case 8:\n                if (params.blockTag) {\n                  url += \"/api?module=proxy&action=eth_getBlockByNumber&tag=\" + params.blockTag;\n\n                  if (params.includeTransactions) {\n                    url += \"&boolean=true\";\n                  } else {\n                    url += \"&boolean=false\";\n                  }\n\n                  url += apiKey;\n                  return [2\n                  /*return*/\n                  , get(url)];\n                }\n\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n              case 9:\n                url += \"/api?module=proxy&action=eth_getTransactionByHash&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return [2\n                /*return*/\n                , get(url)];\n\n              case 10:\n                url += \"/api?module=proxy&action=eth_getTransactionReceipt&txhash=\" + params.transactionHash;\n                url += apiKey;\n                return [2\n                /*return*/\n                , get(url)];\n\n              case 11:\n                {\n                  transaction = getTransactionString(params.transaction);\n\n                  if (transaction) {\n                    transaction = \"&\" + transaction;\n                  }\n\n                  url += \"/api?module=proxy&action=eth_call\" + transaction; //url += \"&tag=\" + params.blockTag + apiKey;\n\n                  if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                  }\n\n                  url += apiKey;\n                  return [2\n                  /*return*/\n                  , get(url)];\n                }\n                _c.label = 12;\n\n              case 12:\n                {\n                  transaction = getTransactionString(params.transaction);\n\n                  if (transaction) {\n                    transaction = \"&\" + transaction;\n                  }\n\n                  url += \"/api?module=proxy&action=eth_estimateGas&\" + transaction;\n                  url += apiKey;\n                  return [2\n                  /*return*/\n                  , get(url)];\n                }\n                _c.label = 13;\n\n              case 13:\n                url += \"/api?module=logs&action=getLogs\";\n\n                if (params.filter.fromBlock) {\n                  url += \"&fromBlock=\" + checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                  url += \"&toBlock=\" + checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                  url += \"&address=\" + params.filter.address;\n                } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                  if (params.filter.topics.length > 1) {\n                    logger.throwError(\"unsupported topic count\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                      topics: params.filter.topics\n                    });\n                  }\n\n                  if (params.filter.topics.length === 1) {\n                    topic0 = params.filter.topics[0];\n\n                    if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                      logger.throwError(\"unsupported topic format\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n                        topic0: topic0\n                      });\n                    }\n\n                    url += \"&topic0=\" + topic0;\n                  }\n                }\n\n                url += apiKey;\n                return [4\n                /*yield*/\n                , get(url, getResult)];\n\n              case 14:\n                logs = _c.sent();\n                txs = {};\n                i = 0;\n                _c.label = 15;\n\n              case 15:\n                if (!(i < logs.length)) return [3\n                /*break*/\n                , 19];\n                log = logs[i];\n\n                if (log.blockHash != null) {\n                  return [3\n                  /*break*/\n                  , 18];\n                }\n\n                if (!(txs[log.transactionHash] == null)) return [3\n                /*break*/\n                , 17];\n                return [4\n                /*yield*/\n                , this.getTransaction(log.transactionHash)];\n\n              case 16:\n                tx = _c.sent();\n\n                if (tx) {\n                  txs[log.transactionHash] = tx.blockHash;\n                }\n\n                _c.label = 17;\n\n              case 17:\n                log.blockHash = txs[log.transactionHash];\n                _c.label = 18;\n\n              case 18:\n                i++;\n                return [3\n                /*break*/\n                , 15];\n\n              case 19:\n                return [2\n                /*return*/\n                , logs];\n\n              case 20:\n                if (this.network.name !== \"homestead\") {\n                  return [2\n                  /*return*/\n                  , 0.0];\n                }\n\n                url += \"/api?module=stats&action=ethprice\";\n                url += apiKey;\n                _b = parseFloat;\n                return [4\n                /*yield*/\n                , get(url, getResult)];\n\n              case 21:\n                return [2\n                /*return*/\n                , _b.apply(void 0, [_c.sent().ethusd])];\n\n              case 22:\n                return [3\n                /*break*/\n                , 23];\n\n              case 23:\n                return [2\n                /*return*/\n                , _super.prototype.perform.call(this, method, params)];\n            }\n          });\n        });\n      }; // @TODO: Allow startBlock and endBlock to be Promises\n\n\n      EtherscanProvider.prototype.getHistory = function (addressOrName, startBlock, endBlock) {\n        var _this = this;\n\n        var url = this.baseUrl;\n        var apiKey = \"\";\n\n        if (this.apiKey) {\n          apiKey += \"&apikey=\" + this.apiKey;\n        }\n\n        if (startBlock == null) {\n          startBlock = 0;\n        }\n\n        if (endBlock == null) {\n          endBlock = 99999999;\n        }\n\n        return this.resolveName(addressOrName).then(function (address) {\n          url += \"/api?module=account&action=txlist&address=\" + address;\n          url += \"&startblock=\" + startBlock;\n          url += \"&endblock=\" + endBlock;\n          url += \"&sort=asc\" + apiKey;\n\n          _this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: _this\n          });\n\n          var connection = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: function (attempt, url) {\n              if (_this.apiKey === defaultApiKey) {\n                formatter.showThrottleMessage();\n              }\n\n              return Promise.resolve(true);\n            }\n          };\n          return lib$l.fetchJson(connection, null, getResult).then(function (result) {\n            _this.emit(\"debug\", {\n              action: \"response\",\n              request: url,\n              response: lib$3.deepCopy(result),\n              provider: _this\n            });\n\n            var output = [];\n            result.forEach(function (tx) {\n              [\"contractAddress\", \"to\"].forEach(function (key) {\n                if (tx[key] == \"\") {\n                  delete tx[key];\n                }\n              });\n\n              if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n              }\n\n              var item = _this.formatter.transactionResponse(tx);\n\n              if (tx.timeStamp) {\n                item.timestamp = parseInt(tx.timeStamp);\n              }\n\n              output.push(item);\n            });\n            return output;\n          });\n        });\n      };\n\n      return EtherscanProvider;\n    }(baseProvider.BaseProvider);\n\n    exports.EtherscanProvider = EtherscanProvider;\n  });\n  var etherscanProvider$1 = unwrapExports(etherscanProvider);\n  var etherscanProvider_1 = etherscanProvider.EtherscanProvider;\n  var fallbackProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    var __awaiter = commonjsGlobal && commonjsGlobal.__awaiter || function (thisArg, _arguments, P, generator) {\n      function adopt(value) {\n        return value instanceof P ? value : new P(function (resolve) {\n          resolve(value);\n        });\n      }\n\n      return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n          try {\n            step(generator.next(value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function rejected(value) {\n          try {\n            step(generator[\"throw\"](value));\n          } catch (e) {\n            reject(e);\n          }\n        }\n\n        function step(result) {\n          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n      });\n    };\n\n    var __generator = commonjsGlobal && commonjsGlobal.__generator || function (thisArg, body) {\n      var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n          f,\n          y,\n          t,\n          g;\n      return g = {\n        next: verb(0),\n        \"throw\": verb(1),\n        \"return\": verb(2)\n      }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n        return this;\n      }), g;\n\n      function verb(n) {\n        return function (v) {\n          return step([n, v]);\n        };\n      }\n\n      function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n\n        while (_) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n\n          switch (op[0]) {\n            case 0:\n            case 1:\n              t = op;\n              break;\n\n            case 4:\n              _.label++;\n              return {\n                value: op[1],\n                done: false\n              };\n\n            case 5:\n              _.label++;\n              y = op[1];\n              op = [0];\n              continue;\n\n            case 7:\n              op = _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n\n            default:\n              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                _ = 0;\n                continue;\n              }\n\n              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                _.label = op[1];\n                break;\n              }\n\n              if (op[0] === 6 && _.label < t[1]) {\n                _.label = t[1];\n                t = op;\n                break;\n              }\n\n              if (t && _.label < t[2]) {\n                _.label = t[2];\n\n                _.ops.push(op);\n\n                break;\n              }\n\n              if (t[2]) _.ops.pop();\n\n              _.trys.pop();\n\n              continue;\n          }\n\n          op = body.call(thisArg, _);\n        } catch (e) {\n          op = [6, e];\n          y = 0;\n        } finally {\n          f = t = 0;\n        }\n\n        if (op[0] & 5) throw op[1];\n        return {\n          value: op[0] ? op[1] : void 0,\n          done: true\n        };\n      }\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version);\n\n    function now() {\n      return new Date().getTime();\n    } // Returns to network as long as all agree, or null if any is null.\n    // Throws an error if any two networks do not match.\n\n\n    function checkNetworks(networks) {\n      var result = null;\n\n      for (var i = 0; i < networks.length; i++) {\n        var network = networks[i]; // Null! We do not know our network; bail.\n\n        if (network == null) {\n          return null;\n        }\n\n        if (result) {\n          // Make sure the network matches the previous networks\n          if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n            logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n          }\n        } else {\n          result = network;\n        }\n      }\n\n      return result;\n    }\n\n    function median(values, maxDelta) {\n      values = values.slice().sort();\n      var middle = Math.floor(values.length / 2); // Odd length; take the middle\n\n      if (values.length % 2) {\n        return values[middle];\n      } // Even length; take the average of the two middle\n\n\n      var a = values[middle - 1],\n          b = values[middle];\n\n      if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n      }\n\n      return (a + b) / 2;\n    }\n\n    function serialize(value) {\n      if (value === null) {\n        return \"null\";\n      } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n        return JSON.stringify(value);\n      } else if (typeof value === \"string\") {\n        return value;\n      } else if (lib$2.BigNumber.isBigNumber(value)) {\n        return value.toString();\n      } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map(function (i) {\n          return serialize(i);\n        }));\n      } else if (typeof value === \"object\") {\n        var keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map(function (key) {\n          var v = value[key];\n\n          if (typeof v === \"function\") {\n            v = \"[function]\";\n          } else {\n            v = serialize(v);\n          }\n\n          return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n      }\n\n      throw new Error(\"unknown value type: \" + typeof value);\n    } // Next request ID to use for emitting debug info\n\n\n    var nextRid = 1;\n    ;\n\n    function stall(duration) {\n      var cancel = null;\n      var timer = null;\n      var promise = new Promise(function (resolve) {\n        cancel = function () {\n          if (timer) {\n            clearTimeout(timer);\n            timer = null;\n          }\n\n          resolve();\n        };\n\n        timer = setTimeout(cancel, duration);\n      });\n\n      var wait = function (func) {\n        promise = promise.then(func);\n        return promise;\n      };\n\n      function getPromise() {\n        return promise;\n      }\n\n      return {\n        cancel: cancel,\n        getPromise: getPromise,\n        wait: wait\n      };\n    }\n\n    ;\n\n    function exposeDebugConfig(config, now) {\n      var result = {\n        provider: config.provider,\n        weight: config.weight\n      };\n\n      if (config.start) {\n        result.start = config.start;\n      }\n\n      if (now) {\n        result.duration = now - config.start;\n      }\n\n      if (config.done) {\n        if (config.error) {\n          result.error = config.error;\n        } else {\n          result.result = config.result || null;\n        }\n      }\n\n      return result;\n    }\n\n    function normalizedTally(normalize, quorum) {\n      return function (configs) {\n        // Count the votes for each result\n        var tally = {};\n        configs.forEach(function (c) {\n          var value = normalize(c.result);\n\n          if (!tally[value]) {\n            tally[value] = {\n              count: 0,\n              result: c.result\n            };\n          }\n\n          tally[value].count++;\n        }); // Check for a quorum on any given result\n\n        var keys = Object.keys(tally);\n\n        for (var i = 0; i < keys.length; i++) {\n          var check = tally[keys[i]];\n\n          if (check.count >= quorum) {\n            return check.result;\n          }\n        } // No quroum\n\n\n        return undefined;\n      };\n    }\n\n    function getProcessFunc(provider, method, params) {\n      var normalize = serialize;\n\n      switch (method) {\n        case \"getBlockNumber\":\n          // Return the median value, unless there is (median + 1) is also\n          // present, in which case that is probably true and the median\n          // is going to be stale soon. In the event of a malicious node,\n          // the lie will be true soon enough.\n          return function (configs) {\n            var values = configs.map(function (c) {\n              return c.result;\n            }); // Get the median block number\n\n            var blockNumber = median(configs.map(function (c) {\n              return c.result;\n            }), 2);\n\n            if (blockNumber == null) {\n              return undefined;\n            }\n\n            blockNumber = Math.ceil(blockNumber); // If the next block height is present, its prolly safe to use\n\n            if (values.indexOf(blockNumber + 1) >= 0) {\n              blockNumber++;\n            } // Don't ever roll back the blockNumber\n\n\n            if (blockNumber >= provider._highestBlockNumber) {\n              provider._highestBlockNumber = blockNumber;\n            }\n\n            return provider._highestBlockNumber;\n          };\n\n        case \"getGasPrice\":\n          // Return the middle (round index up) value, similar to median\n          // but do not average even entries and choose the higher.\n          // Malicious actors must compromise 50% of the nodes to lie.\n          return function (configs) {\n            var values = configs.map(function (c) {\n              return c.result;\n            });\n            values.sort();\n            return values[Math.floor(values.length / 2)];\n          };\n\n        case \"getEtherPrice\":\n          // Returns the median price. Malicious actors must compromise at\n          // least 50% of the nodes to lie (in a meaningful way).\n          return function (configs) {\n            return median(configs.map(function (c) {\n              return c.result;\n            }));\n          };\n        // No additional normalizing required; serialize is enough\n\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n          break;\n        // We drop the confirmations from transactions as it is approximate\n\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n          normalize = function (tx) {\n            if (tx == null) {\n              return null;\n            }\n\n            tx = lib$3.shallowCopy(tx);\n            tx.confirmations = -1;\n            return serialize(tx);\n          };\n\n          break;\n        // We drop the confirmations from transactions as it is approximate\n\n        case \"getBlock\":\n          // We drop the confirmations from transactions as it is approximate\n          if (params.includeTransactions) {\n            normalize = function (block) {\n              if (block == null) {\n                return null;\n              }\n\n              block = lib$3.shallowCopy(block);\n              block.transactions = block.transactions.map(function (tx) {\n                tx = lib$3.shallowCopy(tx);\n                tx.confirmations = -1;\n                return tx;\n              });\n              return serialize(block);\n            };\n          } else {\n            normalize = function (block) {\n              if (block == null) {\n                return null;\n              }\n\n              return serialize(block);\n            };\n          }\n\n          break;\n\n        default:\n          throw new Error(\"unknown method: \" + method);\n      } // Return the result if and only if the expected quorum is\n      // satisfied and agreed upon for the final result.\n\n\n      return normalizedTally(normalize, provider.quorum);\n    } // If we are doing a blockTag query, we need to make sure the backend is\n    // caught up to the FallbackProvider, before sending a request to it.\n\n\n    function waitForSync(config, blockNumber) {\n      return __awaiter(this, void 0, void 0, function () {\n        var provider;\n        return __generator(this, function (_a) {\n          provider = config.provider;\n\n          if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {\n            return [2\n            /*return*/\n            , provider];\n          }\n\n          return [2\n          /*return*/\n          , lib$l.poll(function () {\n            return new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                // We are synced\n                if (provider.blockNumber >= blockNumber) {\n                  return resolve(provider);\n                } // We're done; just quit\n\n\n                if (config.cancelled) {\n                  return resolve(null);\n                } // Try again, next block\n\n\n                return resolve(undefined);\n              }, 0);\n            });\n          }, {\n            oncePoll: provider\n          })];\n        });\n      });\n    }\n\n    function getRunner(config, currentBlockNumber, method, params) {\n      return __awaiter(this, void 0, void 0, function () {\n        var provider, _a, filter;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              provider = config.provider;\n              _a = method;\n\n              switch (_a) {\n                case \"getBlockNumber\":\n                  return [3\n                  /*break*/\n                  , 1];\n\n                case \"getGasPrice\":\n                  return [3\n                  /*break*/\n                  , 1];\n\n                case \"getEtherPrice\":\n                  return [3\n                  /*break*/\n                  , 2];\n\n                case \"getBalance\":\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case \"getTransactionCount\":\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case \"getCode\":\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case \"getStorageAt\":\n                  return [3\n                  /*break*/\n                  , 6];\n\n                case \"getBlock\":\n                  return [3\n                  /*break*/\n                  , 9];\n\n                case \"call\":\n                  return [3\n                  /*break*/\n                  , 12];\n\n                case \"estimateGas\":\n                  return [3\n                  /*break*/\n                  , 12];\n\n                case \"getTransaction\":\n                  return [3\n                  /*break*/\n                  , 15];\n\n                case \"getTransactionReceipt\":\n                  return [3\n                  /*break*/\n                  , 15];\n\n                case \"getLogs\":\n                  return [3\n                  /*break*/\n                  , 16];\n              }\n\n              return [3\n              /*break*/\n              , 19];\n\n            case 1:\n              return [2\n              /*return*/\n              , provider[method]()];\n\n            case 2:\n              if (provider.getEtherPrice) {\n                return [2\n                /*return*/\n                , provider.getEtherPrice()];\n              }\n\n              return [3\n              /*break*/\n              , 19];\n\n            case 3:\n              if (!(params.blockTag && lib$1.isHexString(params.blockTag))) return [3\n              /*break*/\n              , 5];\n              return [4\n              /*yield*/\n              , waitForSync(config, currentBlockNumber)];\n\n            case 4:\n              provider = _b.sent();\n              _b.label = 5;\n\n            case 5:\n              return [2\n              /*return*/\n              , provider[method](params.address, params.blockTag || \"latest\")];\n\n            case 6:\n              if (!(params.blockTag && lib$1.isHexString(params.blockTag))) return [3\n              /*break*/\n              , 8];\n              return [4\n              /*yield*/\n              , waitForSync(config, currentBlockNumber)];\n\n            case 7:\n              provider = _b.sent();\n              _b.label = 8;\n\n            case 8:\n              return [2\n              /*return*/\n              , provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\")];\n\n            case 9:\n              if (!(params.blockTag && lib$1.isHexString(params.blockTag))) return [3\n              /*break*/\n              , 11];\n              return [4\n              /*yield*/\n              , waitForSync(config, currentBlockNumber)];\n\n            case 10:\n              provider = _b.sent();\n              _b.label = 11;\n\n            case 11:\n              return [2\n              /*return*/\n              , provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash)];\n\n            case 12:\n              if (!(params.blockTag && lib$1.isHexString(params.blockTag))) return [3\n              /*break*/\n              , 14];\n              return [4\n              /*yield*/\n              , waitForSync(config, currentBlockNumber)];\n\n            case 13:\n              provider = _b.sent();\n              _b.label = 14;\n\n            case 14:\n              return [2\n              /*return*/\n              , provider[method](params.transaction)];\n\n            case 15:\n              return [2\n              /*return*/\n              , provider[method](params.transactionHash)];\n\n            case 16:\n              filter = params.filter;\n              if (!(filter.fromBlock && lib$1.isHexString(filter.fromBlock) || filter.toBlock && lib$1.isHexString(filter.toBlock))) return [3\n              /*break*/\n              , 18];\n              return [4\n              /*yield*/\n              , waitForSync(config, currentBlockNumber)];\n\n            case 17:\n              provider = _b.sent();\n              _b.label = 18;\n\n            case 18:\n              return [2\n              /*return*/\n              , provider.getLogs(filter)];\n\n            case 19:\n              return [2\n              /*return*/\n              , logger.throwError(\"unknown method error\", lib.Logger.errors.UNKNOWN_ERROR, {\n                method: method,\n                params: params\n              })];\n          }\n        });\n      });\n    }\n\n    var FallbackProvider =\n    /** @class */\n    function (_super) {\n      __extends(FallbackProvider, _super);\n\n      function FallbackProvider(providers, quorum) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, FallbackProvider);\n\n        if (providers.length === 0) {\n          logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        var providerConfigs = providers.map(function (configOrProvider, index) {\n          if (lib$b.Provider.isProvider(configOrProvider)) {\n            return Object.freeze({\n              provider: configOrProvider,\n              weight: 1,\n              stallTimeout: 750,\n              priority: 1\n            });\n          }\n\n          var config = lib$3.shallowCopy(configOrProvider);\n\n          if (config.priority == null) {\n            config.priority = 1;\n          }\n\n          if (config.stallTimeout == null) {\n            config.stallTimeout = 750;\n          }\n\n          if (config.weight == null) {\n            config.weight = 1;\n          }\n\n          var weight = config.weight;\n\n          if (weight % 1 || weight > 512 || weight < 1) {\n            logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", \"providers[\" + index + \"].weight\", weight);\n          }\n\n          return Object.freeze(config);\n        });\n        var total = providerConfigs.reduce(function (accum, c) {\n          return accum + c.weight;\n        }, 0);\n\n        if (quorum == null) {\n          quorum = total / 2;\n        } else if (quorum > total) {\n          logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        } // Are all providers' networks are known\n\n\n        var networkOrReady = checkNetworks(providerConfigs.map(function (c) {\n          return c.provider.network;\n        })); // Not all networks are known; we must stall\n\n        if (networkOrReady == null) {\n          networkOrReady = new Promise(function (resolve, reject) {\n            setTimeout(function () {\n              _this.detectNetwork().then(resolve, reject);\n            }, 0);\n          });\n        }\n\n        _this = _super.call(this, networkOrReady) || this; // Preserve a copy, so we do not get mutated\n\n        lib$3.defineReadOnly(_this, \"providerConfigs\", Object.freeze(providerConfigs));\n        lib$3.defineReadOnly(_this, \"quorum\", quorum);\n        _this._highestBlockNumber = -1;\n        return _this;\n      }\n\n      FallbackProvider.prototype.detectNetwork = function () {\n        return __awaiter(this, void 0, void 0, function () {\n          var networks;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , Promise.all(this.providerConfigs.map(function (c) {\n                  return c.provider.getNetwork();\n                }))];\n\n              case 1:\n                networks = _a.sent();\n                return [2\n                /*return*/\n                , checkNetworks(networks)];\n            }\n          });\n        });\n      };\n\n      FallbackProvider.prototype.perform = function (method, params) {\n        return __awaiter(this, void 0, void 0, function () {\n          var results, i_1, result, processFunc, configs, currentBlockNumber, i, first, _loop_1, this_1, state_1;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!(method === \"sendTransaction\")) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , Promise.all(this.providerConfigs.map(function (c) {\n                  return c.provider.sendTransaction(params.signedTransaction).then(function (result) {\n                    return result.hash;\n                  }, function (error) {\n                    return error;\n                  });\n                }))];\n\n              case 1:\n                results = _a.sent(); // Any success is good enough (other errors are likely \"already seen\" errors\n\n                for (i_1 = 0; i_1 < results.length; i_1++) {\n                  result = results[i_1];\n\n                  if (typeof result === \"string\") {\n                    return [2\n                    /*return*/\n                    , result];\n                  }\n                } // They were all an error; pick the first error\n\n\n                throw results[0];\n\n              case 2:\n                if (!(this._highestBlockNumber === -1 && method !== \"getBlockNumber\")) return [3\n                /*break*/\n                , 4];\n                return [4\n                /*yield*/\n                , this.getBlockNumber()];\n\n              case 3:\n                _a.sent();\n\n                _a.label = 4;\n\n              case 4:\n                processFunc = getProcessFunc(this, method, params);\n                configs = browser$6.shuffled(this.providerConfigs.map(lib$3.shallowCopy));\n                configs.sort(function (a, b) {\n                  return a.priority - b.priority;\n                });\n                currentBlockNumber = this._highestBlockNumber;\n                i = 0;\n                first = true;\n\n                _loop_1 = function () {\n                  var t0, inflightWeight, _loop_2, waiting, results, result;\n\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        t0 = now();\n                        inflightWeight = configs.filter(function (c) {\n                          return c.runner && t0 - c.start < c.stallTimeout;\n                        }).reduce(function (accum, c) {\n                          return accum + c.weight;\n                        }, 0);\n\n                        _loop_2 = function () {\n                          var config = configs[i++];\n                          var rid = nextRid++;\n                          config.start = now();\n                          config.staller = stall(config.stallTimeout);\n                          config.staller.wait(function () {\n                            config.staller = null;\n                          });\n                          config.runner = getRunner(config, currentBlockNumber, method, params).then(function (result) {\n                            config.done = true;\n                            config.result = result;\n\n                            if (_this.listenerCount(\"debug\")) {\n                              _this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: {\n                                  method: method,\n                                  params: lib$3.deepCopy(params)\n                                },\n                                provider: _this\n                              });\n                            }\n                          }, function (error) {\n                            config.done = true;\n                            config.error = error;\n\n                            if (_this.listenerCount(\"debug\")) {\n                              _this.emit(\"debug\", {\n                                action: \"request\",\n                                rid: rid,\n                                backend: exposeDebugConfig(config, now()),\n                                request: {\n                                  method: method,\n                                  params: lib$3.deepCopy(params)\n                                },\n                                provider: _this\n                              });\n                            }\n                          });\n\n                          if (this_1.listenerCount(\"debug\")) {\n                            this_1.emit(\"debug\", {\n                              action: \"request\",\n                              rid: rid,\n                              backend: exposeDebugConfig(config, null),\n                              request: {\n                                method: method,\n                                params: lib$3.deepCopy(params)\n                              },\n                              provider: this_1\n                            });\n                          }\n\n                          inflightWeight += config.weight;\n                        }; // Start running enough to meet quorum\n\n\n                        while (inflightWeight < this_1.quorum && i < configs.length) {\n                          _loop_2();\n                        }\n\n                        waiting = [];\n                        configs.forEach(function (c) {\n                          if (c.done || !c.runner) {\n                            return;\n                          }\n\n                          waiting.push(c.runner);\n\n                          if (c.staller) {\n                            waiting.push(c.staller.getPromise());\n                          }\n                        });\n                        if (!waiting.length) return [3\n                        /*break*/\n                        , 2];\n                        return [4\n                        /*yield*/\n                        , Promise.race(waiting)];\n\n                      case 1:\n                        _a.sent();\n\n                        _a.label = 2;\n\n                      case 2:\n                        results = configs.filter(function (c) {\n                          return c.done && c.error == null;\n                        });\n                        if (!(results.length >= this_1.quorum)) return [3\n                        /*break*/\n                        , 5];\n                        result = processFunc(results);\n\n                        if (result !== undefined) {\n                          // Shut down any stallers\n                          configs.forEach(function (c) {\n                            if (c.staller) {\n                              c.staller.cancel();\n                            }\n\n                            c.cancelled = true;\n                          });\n                          return [2\n                          /*return*/\n                          , {\n                            value: result\n                          }];\n                        }\n\n                        if (!!first) return [3\n                        /*break*/\n                        , 4];\n                        return [4\n                        /*yield*/\n                        , stall(100).getPromise()];\n\n                      case 3:\n                        _a.sent();\n\n                        _a.label = 4;\n\n                      case 4:\n                        first = false;\n                        _a.label = 5;\n\n                      case 5:\n                        // All configs have run to completion; we will never get more data\n                        if (configs.filter(function (c) {\n                          return !c.done;\n                        }).length === 0) {\n                          return [2\n                          /*return*/\n                          , \"break\"];\n                        }\n\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                };\n\n                this_1 = this;\n                _a.label = 5;\n\n              case 5:\n                if (!true) return [3\n                /*break*/\n                , 7];\n                return [5\n                /*yield**/\n                , _loop_1()];\n\n              case 6:\n                state_1 = _a.sent();\n                if (typeof state_1 === \"object\") return [2\n                /*return*/\n                , state_1.value];\n                if (state_1 === \"break\") return [3\n                /*break*/\n                , 7];\n                return [3\n                /*break*/\n                , 5];\n\n              case 7:\n                // Shut down any stallers; shouldn't be any\n                configs.forEach(function (c) {\n                  if (c.staller) {\n                    c.staller.cancel();\n                  }\n\n                  c.cancelled = true;\n                });\n                return [2\n                /*return*/\n                , logger.throwError(\"failed to meet quorum\", lib.Logger.errors.SERVER_ERROR, {\n                  method: method,\n                  params: params,\n                  //results: configs.map((c) => c.result),\n                  //errors: configs.map((c) => c.error),\n                  results: configs.map(function (c) {\n                    return exposeDebugConfig(c);\n                  }),\n                  provider: this\n                })];\n            }\n          });\n        });\n      };\n\n      return FallbackProvider;\n    }(baseProvider.BaseProvider);\n\n    exports.FallbackProvider = FallbackProvider;\n  });\n  var fallbackProvider$1 = unwrapExports(fallbackProvider);\n  var fallbackProvider_1 = fallbackProvider.FallbackProvider;\n  \"use strict\";\n\n  var IpcProvider = null;\n  var browserIpcProvider = {\n    IpcProvider: IpcProvider\n  };\n  var infuraProvider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version);\n    var defaultProjectId = \"84842078b09946638c03157f83405213\";\n\n    var InfuraProvider =\n    /** @class */\n    function (_super) {\n      __extends(InfuraProvider, _super);\n\n      function InfuraProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      InfuraProvider.getWebSocketProvider = function (network, apiKey) {\n        var provider = new InfuraProvider(network, apiKey);\n        var connection = provider.connection;\n\n        if (connection.password) {\n          logger.throwError(\"INFURA WebSocket project secrets unsupported\", lib.Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"InfuraProvider.getWebSocketProvider()\"\n          });\n        }\n\n        var url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        return new websocketProvider.WebSocketProvider(url, network);\n      };\n\n      InfuraProvider.getApiKey = function (apiKey) {\n        var apiKeyObj = {\n          apiKey: defaultProjectId,\n          projectId: defaultProjectId,\n          projectSecret: null\n        };\n\n        if (apiKey == null) {\n          return apiKeyObj;\n        }\n\n        if (typeof apiKey === \"string\") {\n          apiKeyObj.projectId = apiKey;\n        } else if (apiKey.projectSecret != null) {\n          logger.assertArgument(typeof apiKey.projectId === \"string\", \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n          logger.assertArgument(typeof apiKey.projectSecret === \"string\", \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n          apiKeyObj.projectId = apiKey.projectId;\n          apiKeyObj.projectSecret = apiKey.projectSecret;\n        } else if (apiKey.projectId) {\n          apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n        return apiKeyObj;\n      };\n\n      InfuraProvider.getUrl = function (network, apiKey) {\n        var host = null;\n\n        switch (network ? network.name : \"unknown\") {\n          case \"homestead\":\n            host = \"mainnet.infura.io\";\n            break;\n\n          case \"ropsten\":\n            host = \"ropsten.infura.io\";\n            break;\n\n          case \"rinkeby\":\n            host = \"rinkeby.infura.io\";\n            break;\n\n          case \"kovan\":\n            host = \"kovan.infura.io\";\n            break;\n\n          case \"goerli\":\n            host = \"goerli.infura.io\";\n            break;\n\n          default:\n            logger.throwError(\"unsupported network\", lib.Logger.errors.INVALID_ARGUMENT, {\n              argument: \"network\",\n              value: network\n            });\n        }\n\n        var connection = {\n          url: \"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId,\n          throttleCallback: function (attempt, url) {\n            if (apiKey.projectId === defaultProjectId) {\n              formatter.showThrottleMessage();\n            }\n\n            return Promise.resolve(true);\n          }\n        };\n\n        if (apiKey.projectSecret != null) {\n          connection.user = \"\";\n          connection.password = apiKey.projectSecret;\n        }\n\n        return connection;\n      };\n\n      return InfuraProvider;\n    }(urlJsonRpcProvider.UrlJsonRpcProvider);\n\n    exports.InfuraProvider = InfuraProvider;\n  });\n  var infuraProvider$1 = unwrapExports(infuraProvider);\n  var infuraProvider_1 = infuraProvider.InfuraProvider;\n  var nodesmithProvider = createCommonjsModule(function (module, exports) {\n    /* istanbul ignore file */\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version); // Special API key provided by Nodesmith for ethers.js\n\n    var defaultApiKey = \"ETHERS_JS_SHARED\";\n\n    var NodesmithProvider =\n    /** @class */\n    function (_super) {\n      __extends(NodesmithProvider, _super);\n\n      function NodesmithProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      NodesmithProvider.getApiKey = function (apiKey) {\n        if (apiKey && typeof apiKey !== \"string\") {\n          logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKey || defaultApiKey;\n      };\n\n      NodesmithProvider.getUrl = function (network, apiKey) {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n        var host = null;\n\n        switch (network.name) {\n          case \"homestead\":\n            host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n            break;\n\n          case \"ropsten\":\n            host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n            break;\n\n          case \"rinkeby\":\n            host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n            break;\n\n          case \"goerli\":\n            host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n            break;\n\n          case \"kovan\":\n            host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n            break;\n\n          default:\n            logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host + \"?apiKey=\" + apiKey;\n      };\n\n      return NodesmithProvider;\n    }(urlJsonRpcProvider.UrlJsonRpcProvider);\n\n    exports.NodesmithProvider = NodesmithProvider;\n  });\n  var nodesmithProvider$1 = unwrapExports(nodesmithProvider);\n  var nodesmithProvider_1 = nodesmithProvider.NodesmithProvider;\n  var web3Provider = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __extends = commonjsGlobal && commonjsGlobal.__extends || function () {\n      var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf || {\n          __proto__: []\n        } instanceof Array && function (d, b) {\n          d.__proto__ = b;\n        } || function (d, b) {\n          for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        };\n\n        return extendStatics(d, b);\n      };\n\n      return function (d, b) {\n        extendStatics(d, b);\n\n        function __() {\n          this.constructor = d;\n        }\n\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n      };\n    }();\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$I.version);\n    var _nextId = 1;\n\n    function buildWeb3LegacyFetcher(provider, sendFunc) {\n      return function (method, params) {\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && provider.isMetaMask) {\n          // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n          method = \"personal_sign\";\n          params = [params[1], params[0]];\n        }\n\n        var request = {\n          method: method,\n          params: params,\n          id: _nextId++,\n          jsonrpc: \"2.0\"\n        };\n        return new Promise(function (resolve, reject) {\n          sendFunc(request, function (error, result) {\n            if (error) {\n              return reject(error);\n            }\n\n            if (result.error) {\n              var error_1 = new Error(result.error.message);\n              error_1.code = result.error.code;\n              error_1.data = result.error.data;\n              return reject(error_1);\n            }\n\n            resolve(result.result);\n          });\n        });\n      };\n    }\n\n    function buildEip1193Fetcher(provider) {\n      return function (method, params) {\n        if (params == null) {\n          params = [];\n        } // Metamask complains about eth_sign (and on some versions hangs)\n\n\n        if (method == \"eth_sign\" && provider.isMetaMask) {\n          // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n          method = \"personal_sign\";\n          params = [params[1], params[0]];\n        }\n\n        return provider.request({\n          method: method,\n          params: params\n        });\n      };\n    }\n\n    var Web3Provider =\n    /** @class */\n    function (_super) {\n      __extends(Web3Provider, _super);\n\n      function Web3Provider(provider, network) {\n        var _newTarget = this.constructor;\n\n        var _this = this;\n\n        logger.checkNew(_newTarget, Web3Provider);\n\n        if (provider == null) {\n          logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        var path = null;\n        var jsonRpcFetchFunc = null;\n        var subprovider = null;\n\n        if (typeof provider === \"function\") {\n          path = \"unknown:\";\n          jsonRpcFetchFunc = provider;\n        } else {\n          path = provider.host || provider.path || \"\";\n\n          if (!path && provider.isMetaMask) {\n            path = \"metamask\";\n          }\n\n          subprovider = provider;\n\n          if (provider.request) {\n            if (path === \"\") {\n              path = \"eip-1193:\";\n            }\n\n            jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n          } else if (provider.sendAsync) {\n            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n          } else if (provider.send) {\n            jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n          } else {\n            logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n          }\n\n          if (!path) {\n            path = \"unknown:\";\n          }\n        }\n\n        _this = _super.call(this, path, network) || this;\n        lib$3.defineReadOnly(_this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        lib$3.defineReadOnly(_this, \"provider\", subprovider);\n        return _this;\n      }\n\n      Web3Provider.prototype.send = function (method, params) {\n        return this.jsonRpcFetchFunc(method, params);\n      };\n\n      return Web3Provider;\n    }(jsonRpcProvider.JsonRpcProvider);\n\n    exports.Web3Provider = Web3Provider;\n  });\n  var web3Provider$1 = unwrapExports(web3Provider);\n  var web3Provider_1 = web3Provider.Web3Provider;\n  var lib$m = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.Provider = lib$b.Provider;\n    exports.getNetwork = lib$k.getNetwork;\n    exports.BaseProvider = baseProvider.BaseProvider;\n    exports.AlchemyProvider = alchemyProvider.AlchemyProvider;\n    exports.CloudflareProvider = cloudflareProvider.CloudflareProvider;\n    exports.EtherscanProvider = etherscanProvider.EtherscanProvider;\n    exports.FallbackProvider = fallbackProvider.FallbackProvider;\n    exports.IpcProvider = browserIpcProvider.IpcProvider;\n    exports.InfuraProvider = infuraProvider.InfuraProvider;\n    exports.JsonRpcProvider = jsonRpcProvider.JsonRpcProvider;\n    exports.JsonRpcSigner = jsonRpcProvider.JsonRpcSigner;\n    exports.NodesmithProvider = nodesmithProvider.NodesmithProvider;\n    exports.StaticJsonRpcProvider = urlJsonRpcProvider.StaticJsonRpcProvider;\n    exports.UrlJsonRpcProvider = urlJsonRpcProvider.UrlJsonRpcProvider;\n    exports.Web3Provider = web3Provider.Web3Provider;\n    exports.WebSocketProvider = websocketProvider.WebSocketProvider;\n    exports.Formatter = formatter.Formatter;\n    var logger = new lib.Logger(_version$I.version); ////////////////////////\n    // Helper Functions\n\n    function getDefaultProvider(network, options) {\n      if (network == null) {\n        network = \"homestead\";\n      } // If passed a URL, figure out the right type of provider based on the scheme\n\n\n      if (typeof network === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n        // Handle http and ws (and their secure variants)\n        var match = network.match(/^(ws|http)s?:/i);\n\n        if (match) {\n          switch (match[1]) {\n            case \"http\":\n              return new jsonRpcProvider.JsonRpcProvider(network);\n\n            case \"ws\":\n              return new websocketProvider.WebSocketProvider(network);\n\n            default:\n              logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n          }\n        }\n      }\n\n      var n = lib$k.getNetwork(network);\n\n      if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", lib.Logger.errors.NETWORK_ERROR, {\n          operation: \"getDefaultProvider\",\n          network: network\n        });\n      }\n\n      return n._defaultProvider({\n        FallbackProvider: fallbackProvider.FallbackProvider,\n        AlchemyProvider: alchemyProvider.AlchemyProvider,\n        CloudflareProvider: cloudflareProvider.CloudflareProvider,\n        EtherscanProvider: etherscanProvider.EtherscanProvider,\n        InfuraProvider: infuraProvider.InfuraProvider,\n        JsonRpcProvider: jsonRpcProvider.JsonRpcProvider,\n        NodesmithProvider: nodesmithProvider.NodesmithProvider,\n        Web3Provider: web3Provider.Web3Provider,\n        IpcProvider: browserIpcProvider.IpcProvider\n      }, options);\n    }\n\n    exports.getDefaultProvider = getDefaultProvider;\n  });\n  var index$m = unwrapExports(lib$m);\n  var lib_1$m = lib$m.Provider;\n  var lib_2$k = lib$m.getNetwork;\n  var lib_3$g = lib$m.BaseProvider;\n  var lib_4$c = lib$m.AlchemyProvider;\n  var lib_5$b = lib$m.CloudflareProvider;\n  var lib_6$7 = lib$m.EtherscanProvider;\n  var lib_7$6 = lib$m.FallbackProvider;\n  var lib_8$5 = lib$m.IpcProvider;\n  var lib_9$5 = lib$m.InfuraProvider;\n  var lib_10$3 = lib$m.JsonRpcProvider;\n  var lib_11$2 = lib$m.JsonRpcSigner;\n  var lib_12$2 = lib$m.NodesmithProvider;\n  var lib_13$2 = lib$m.StaticJsonRpcProvider;\n  var lib_14$1 = lib$m.UrlJsonRpcProvider;\n  var lib_15$1 = lib$m.Web3Provider;\n  var lib_16$1 = lib$m.WebSocketProvider;\n  var lib_17 = lib$m.Formatter;\n  var lib_18 = lib$m.getDefaultProvider;\n  var lib$n = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var regexBytes = new RegExp(\"^bytes([0-9]+)$\");\n    var regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\n    var regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n    var Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\n    function _pack(type, value, isArray) {\n      switch (type) {\n        case \"address\":\n          if (isArray) {\n            return lib$1.zeroPad(value, 32);\n          }\n\n          return lib$1.arrayify(value);\n\n        case \"string\":\n          return lib$8.toUtf8Bytes(value);\n\n        case \"bytes\":\n          return lib$1.arrayify(value);\n\n        case \"bool\":\n          value = value ? \"0x01\" : \"0x00\";\n\n          if (isArray) {\n            return lib$1.zeroPad(value, 32);\n          }\n\n          return lib$1.arrayify(value);\n      }\n\n      var match = type.match(regexNumber);\n\n      if (match) {\n        //let signed = (match[1] === \"int\")\n        var size = parseInt(match[2] || \"256\");\n\n        if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n          throw new Error(\"invalid number type - \" + type);\n        }\n\n        if (isArray) {\n          size = 256;\n        }\n\n        value = lib$2.BigNumber.from(value).toTwos(size);\n        return lib$1.zeroPad(value, size / 8);\n      }\n\n      match = type.match(regexBytes);\n\n      if (match) {\n        var size = parseInt(match[1]);\n\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n          throw new Error(\"invalid bytes type - \" + type);\n        }\n\n        if (lib$1.arrayify(value).byteLength !== size) {\n          throw new Error(\"invalid value for \" + type);\n        }\n\n        if (isArray) {\n          return lib$1.arrayify((value + Zeros).substring(0, 66));\n        }\n\n        return value;\n      }\n\n      match = type.match(regexArray);\n\n      if (match && Array.isArray(value)) {\n        var baseType_1 = match[1];\n        var count = parseInt(match[2] || String(value.length));\n\n        if (count != value.length) {\n          throw new Error(\"invalid value for \" + type);\n        }\n\n        var result_1 = [];\n        value.forEach(function (value) {\n          result_1.push(_pack(baseType_1, value, true));\n        });\n        return lib$1.concat(result_1);\n      }\n\n      throw new Error(\"invalid type - \" + type);\n    } // @TODO: Array Enum\n\n\n    function pack(types, values) {\n      if (types.length != values.length) {\n        throw new Error(\"type/value count mismatch\");\n      }\n\n      var tight = [];\n      types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n      });\n      return lib$1.hexlify(lib$1.concat(tight));\n    }\n\n    exports.pack = pack;\n\n    function keccak256(types, values) {\n      return lib$4.keccak256(pack(types, values));\n    }\n\n    exports.keccak256 = keccak256;\n\n    function sha256(types, values) {\n      return browser.sha256(pack(types, values));\n    }\n\n    exports.sha256 = sha256;\n  });\n  var index$n = unwrapExports(lib$n);\n  var lib_1$n = lib$n.pack;\n  var lib_2$l = lib$n.keccak256;\n  var lib_3$h = lib$n.sha256;\n\n  var _version$K = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"units/5.0.3\";\n  });\n\n  var _version$L = unwrapExports(_version$K);\n\n  var _version_1$n = _version$K.version;\n  var lib$o = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var logger = new lib.Logger(_version$K.version);\n    var names = [\"wei\", \"kwei\", \"mwei\", \"gwei\", \"szabo\", \"finney\", \"ether\"]; // Some environments have issues with RegEx that contain back-tracking, so we cannot\n    // use them.\n\n    function commify(value) {\n      var comps = String(value).split(\".\");\n\n      if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || comps[1] && !comps[1].match(/^[0-9]*$/) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n      } // Make sure we have at least one whole digit (0 if none)\n\n\n      var whole = comps[0];\n      var negative = \"\";\n\n      if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n      } // Make sure we have at least 1 whole digit with no leading zeros\n\n\n      while (whole.substring(0, 1) === \"0\") {\n        whole = whole.substring(1);\n      }\n\n      if (whole === \"\") {\n        whole = \"0\";\n      }\n\n      var suffix = \"\";\n\n      if (comps.length === 2) {\n        suffix = \".\" + (comps[1] || \"0\");\n      }\n\n      while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n      }\n\n      var formatted = [];\n\n      while (whole.length) {\n        if (whole.length <= 3) {\n          formatted.unshift(whole);\n          break;\n        } else {\n          var index = whole.length - 3;\n          formatted.unshift(whole.substring(index));\n          whole = whole.substring(0, index);\n        }\n      }\n\n      return negative + formatted.join(\",\") + suffix;\n    }\n\n    exports.commify = commify;\n\n    function formatUnits(value, unitName) {\n      if (typeof unitName === \"string\") {\n        var index = names.indexOf(unitName);\n\n        if (index !== -1) {\n          unitName = 3 * index;\n        }\n      }\n\n      return lib$2.formatFixed(value, unitName != null ? unitName : 18);\n    }\n\n    exports.formatUnits = formatUnits;\n\n    function parseUnits(value, unitName) {\n      if (typeof unitName === \"string\") {\n        var index = names.indexOf(unitName);\n\n        if (index !== -1) {\n          unitName = 3 * index;\n        }\n      }\n\n      return lib$2.parseFixed(value, unitName != null ? unitName : 18);\n    }\n\n    exports.parseUnits = parseUnits;\n\n    function formatEther(wei) {\n      return formatUnits(wei, 18);\n    }\n\n    exports.formatEther = formatEther;\n\n    function parseEther(ether) {\n      return parseUnits(ether, 18);\n    }\n\n    exports.parseEther = parseEther;\n  });\n  var index$o = unwrapExports(lib$o);\n  var lib_1$o = lib$o.commify;\n  var lib_2$m = lib$o.formatUnits;\n  var lib_3$i = lib$o.parseUnits;\n  var lib_4$d = lib$o.formatEther;\n  var lib_5$c = lib$o.parseEther;\n  var utils$3 = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n      result[\"default\"] = mod;\n      return result;\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.AbiCoder = lib$a.AbiCoder;\n    exports.checkResultErrors = lib$a.checkResultErrors;\n    exports.defaultAbiCoder = lib$a.defaultAbiCoder;\n    exports.EventFragment = lib$a.EventFragment;\n    exports.FormatTypes = lib$a.FormatTypes;\n    exports.Fragment = lib$a.Fragment;\n    exports.FunctionFragment = lib$a.FunctionFragment;\n    exports.Indexed = lib$a.Indexed;\n    exports.Interface = lib$a.Interface;\n    exports.LogDescription = lib$a.LogDescription;\n    exports.ParamType = lib$a.ParamType;\n    exports.TransactionDescription = lib$a.TransactionDescription;\n    exports.getAddress = lib$6.getAddress;\n    exports.getCreate2Address = lib$6.getCreate2Address;\n    exports.getContractAddress = lib$6.getContractAddress;\n    exports.getIcapAddress = lib$6.getIcapAddress;\n    exports.isAddress = lib$6.isAddress;\n\n    var base64 = __importStar(browser$8);\n\n    exports.base64 = base64;\n    exports.base58 = lib$e.Base58;\n    exports.arrayify = lib$1.arrayify;\n    exports.concat = lib$1.concat;\n    exports.hexDataSlice = lib$1.hexDataSlice;\n    exports.hexDataLength = lib$1.hexDataLength;\n    exports.hexlify = lib$1.hexlify;\n    exports.hexStripZeros = lib$1.hexStripZeros;\n    exports.hexValue = lib$1.hexValue;\n    exports.hexZeroPad = lib$1.hexZeroPad;\n    exports.isBytes = lib$1.isBytes;\n    exports.isBytesLike = lib$1.isBytesLike;\n    exports.isHexString = lib$1.isHexString;\n    exports.joinSignature = lib$1.joinSignature;\n    exports.zeroPad = lib$1.zeroPad;\n    exports.splitSignature = lib$1.splitSignature;\n    exports.stripZeros = lib$1.stripZeros;\n    exports.hashMessage = lib$9.hashMessage;\n    exports.id = lib$9.id;\n    exports.isValidName = lib$9.isValidName;\n    exports.namehash = lib$9.namehash;\n    exports.defaultPath = lib$h.defaultPath;\n    exports.entropyToMnemonic = lib$h.entropyToMnemonic;\n    exports.HDNode = lib$h.HDNode;\n    exports.isValidMnemonic = lib$h.isValidMnemonic;\n    exports.mnemonicToEntropy = lib$h.mnemonicToEntropy;\n    exports.mnemonicToSeed = lib$h.mnemonicToSeed;\n    exports.getJsonWalletAddress = lib$i.getJsonWalletAddress;\n    exports.keccak256 = lib$4.keccak256;\n    exports.Logger = lib.Logger;\n    exports.computeHmac = browser.computeHmac;\n    exports.ripemd160 = browser.ripemd160;\n    exports.sha256 = browser.sha256;\n    exports.sha512 = browser.sha512;\n    exports.solidityKeccak256 = lib$n.keccak256;\n    exports.solidityPack = lib$n.pack;\n    exports.soliditySha256 = lib$n.sha256;\n    exports.randomBytes = browser$6.randomBytes;\n    exports.shuffled = browser$6.shuffled;\n    exports.checkProperties = lib$3.checkProperties;\n    exports.deepCopy = lib$3.deepCopy;\n    exports.defineReadOnly = lib$3.defineReadOnly;\n    exports.getStatic = lib$3.getStatic;\n    exports.resolveProperties = lib$3.resolveProperties;\n    exports.shallowCopy = lib$3.shallowCopy;\n\n    var RLP = __importStar(lib$5);\n\n    exports.RLP = RLP;\n    exports.computePublicKey = lib$f.computePublicKey;\n    exports.recoverPublicKey = lib$f.recoverPublicKey;\n    exports.SigningKey = lib$f.SigningKey;\n    exports.formatBytes32String = lib$8.formatBytes32String;\n    exports.nameprep = lib$8.nameprep;\n    exports.parseBytes32String = lib$8.parseBytes32String;\n    exports._toEscapedUtf8String = lib$8._toEscapedUtf8String;\n    exports.toUtf8Bytes = lib$8.toUtf8Bytes;\n    exports.toUtf8CodePoints = lib$8.toUtf8CodePoints;\n    exports.toUtf8String = lib$8.toUtf8String;\n    exports.Utf8ErrorFuncs = lib$8.Utf8ErrorFuncs;\n    exports.computeAddress = lib$g.computeAddress;\n    exports.parseTransaction = lib$g.parse;\n    exports.recoverAddress = lib$g.recoverAddress;\n    exports.serializeTransaction = lib$g.serialize;\n    exports.commify = lib$o.commify;\n    exports.formatEther = lib$o.formatEther;\n    exports.parseEther = lib$o.parseEther;\n    exports.formatUnits = lib$o.formatUnits;\n    exports.parseUnits = lib$o.parseUnits;\n    exports.verifyMessage = lib$j.verifyMessage;\n    exports._fetchData = lib$l._fetchData;\n    exports.fetchJson = lib$l.fetchJson;\n    exports.poll = lib$l.poll; ////////////////////////\n    // Enums\n\n    var sha2_2 = browser;\n    exports.SupportedAlgorithm = sha2_2.SupportedAlgorithm;\n    var strings_2 = lib$8;\n    exports.UnicodeNormalizationForm = strings_2.UnicodeNormalizationForm;\n    exports.Utf8ErrorReason = strings_2.Utf8ErrorReason;\n  });\n  var utils$4 = unwrapExports(utils$3);\n  var utils_1$3 = utils$3.AbiCoder;\n  var utils_2$1 = utils$3.checkResultErrors;\n  var utils_3$1 = utils$3.defaultAbiCoder;\n  var utils_4$1 = utils$3.EventFragment;\n  var utils_5$1 = utils$3.FormatTypes;\n  var utils_6 = utils$3.Fragment;\n  var utils_7 = utils$3.FunctionFragment;\n  var utils_8 = utils$3.Indexed;\n  var utils_9 = utils$3.Interface;\n  var utils_10 = utils$3.LogDescription;\n  var utils_11 = utils$3.ParamType;\n  var utils_12 = utils$3.TransactionDescription;\n  var utils_13 = utils$3.getAddress;\n  var utils_14 = utils$3.getCreate2Address;\n  var utils_15 = utils$3.getContractAddress;\n  var utils_16 = utils$3.getIcapAddress;\n  var utils_17 = utils$3.isAddress;\n  var utils_18 = utils$3.base64;\n  var utils_19 = utils$3.base58;\n  var utils_20 = utils$3.arrayify;\n  var utils_21 = utils$3.concat;\n  var utils_22 = utils$3.hexDataSlice;\n  var utils_23 = utils$3.hexDataLength;\n  var utils_24 = utils$3.hexlify;\n  var utils_25 = utils$3.hexStripZeros;\n  var utils_26 = utils$3.hexValue;\n  var utils_27 = utils$3.hexZeroPad;\n  var utils_28 = utils$3.isBytes;\n  var utils_29 = utils$3.isBytesLike;\n  var utils_30 = utils$3.isHexString;\n  var utils_31 = utils$3.joinSignature;\n  var utils_32 = utils$3.zeroPad;\n  var utils_33 = utils$3.splitSignature;\n  var utils_34 = utils$3.stripZeros;\n  var utils_35 = utils$3.hashMessage;\n  var utils_36 = utils$3.id;\n  var utils_37 = utils$3.isValidName;\n  var utils_38 = utils$3.namehash;\n  var utils_39 = utils$3.defaultPath;\n  var utils_40 = utils$3.entropyToMnemonic;\n  var utils_41 = utils$3.HDNode;\n  var utils_42 = utils$3.isValidMnemonic;\n  var utils_43 = utils$3.mnemonicToEntropy;\n  var utils_44 = utils$3.mnemonicToSeed;\n  var utils_45 = utils$3.getJsonWalletAddress;\n  var utils_46 = utils$3.keccak256;\n  var utils_47 = utils$3.Logger;\n  var utils_48 = utils$3.computeHmac;\n  var utils_49 = utils$3.ripemd160;\n  var utils_50 = utils$3.sha256;\n  var utils_51 = utils$3.sha512;\n  var utils_52 = utils$3.solidityKeccak256;\n  var utils_53 = utils$3.solidityPack;\n  var utils_54 = utils$3.soliditySha256;\n  var utils_55 = utils$3.randomBytes;\n  var utils_56 = utils$3.shuffled;\n  var utils_57 = utils$3.checkProperties;\n  var utils_58 = utils$3.deepCopy;\n  var utils_59 = utils$3.defineReadOnly;\n  var utils_60 = utils$3.getStatic;\n  var utils_61 = utils$3.resolveProperties;\n  var utils_62 = utils$3.shallowCopy;\n  var utils_63 = utils$3.RLP;\n  var utils_64 = utils$3.computePublicKey;\n  var utils_65 = utils$3.recoverPublicKey;\n  var utils_66 = utils$3.SigningKey;\n  var utils_67 = utils$3.formatBytes32String;\n  var utils_68 = utils$3.nameprep;\n  var utils_69 = utils$3.parseBytes32String;\n  var utils_70 = utils$3._toEscapedUtf8String;\n  var utils_71 = utils$3.toUtf8Bytes;\n  var utils_72 = utils$3.toUtf8CodePoints;\n  var utils_73 = utils$3.toUtf8String;\n  var utils_74 = utils$3.Utf8ErrorFuncs;\n  var utils_75 = utils$3.computeAddress;\n  var utils_76 = utils$3.parseTransaction;\n  var utils_77 = utils$3.recoverAddress;\n  var utils_78 = utils$3.serializeTransaction;\n  var utils_79 = utils$3.commify;\n  var utils_80 = utils$3.formatEther;\n  var utils_81 = utils$3.parseEther;\n  var utils_82 = utils$3.formatUnits;\n  var utils_83 = utils$3.parseUnits;\n  var utils_84 = utils$3.verifyMessage;\n  var utils_85 = utils$3._fetchData;\n  var utils_86 = utils$3.fetchJson;\n  var utils_87 = utils$3.poll;\n  var utils_88 = utils$3.SupportedAlgorithm;\n  var utils_89 = utils$3.UnicodeNormalizationForm;\n  var utils_90 = utils$3.Utf8ErrorReason;\n\n  var _version$M = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.version = \"ethers/5.0.9\";\n  });\n\n  var _version$N = unwrapExports(_version$M);\n\n  var _version_1$o = _version$M.version;\n  var ethers = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n      result[\"default\"] = mod;\n      return result;\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.Contract = lib$d.Contract;\n    exports.ContractFactory = lib$d.ContractFactory;\n    exports.BigNumber = lib$2.BigNumber;\n    exports.FixedNumber = lib$2.FixedNumber;\n    exports.Signer = lib$c.Signer;\n    exports.VoidSigner = lib$c.VoidSigner;\n    exports.Wallet = lib$j.Wallet;\n\n    var constants = __importStar(lib$7);\n\n    exports.constants = constants;\n\n    var providers = __importStar(lib$m);\n\n    exports.providers = providers;\n    var providers_1 = lib$m;\n    exports.getDefaultProvider = providers_1.getDefaultProvider;\n    exports.Wordlist = browser$4.Wordlist;\n    exports.wordlists = browser$4.wordlists;\n\n    var utils = __importStar(utils$3);\n\n    exports.utils = utils;\n    exports.errors = lib.ErrorCode; ////////////////////////\n    // Compile-Time Constants\n    // This is generated by \"npm run dist\"\n\n    exports.version = _version$M.version;\n    var logger = new lib.Logger(_version$M.version);\n    exports.logger = logger;\n  });\n  var ethers$1 = unwrapExports(ethers);\n  var ethers_1 = ethers.Contract;\n  var ethers_2 = ethers.ContractFactory;\n  var ethers_3 = ethers.BigNumber;\n  var ethers_4 = ethers.FixedNumber;\n  var ethers_5 = ethers.Signer;\n  var ethers_6 = ethers.VoidSigner;\n  var ethers_7 = ethers.Wallet;\n  var ethers_8 = ethers.constants;\n  var ethers_9 = ethers.providers;\n  var ethers_10 = ethers.getDefaultProvider;\n  var ethers_11 = ethers.Wordlist;\n  var ethers_12 = ethers.wordlists;\n  var ethers_13 = ethers.utils;\n  var ethers_14 = ethers.errors;\n  var ethers_15 = ethers.version;\n  var ethers_16 = ethers.logger;\n  var lib$p = createCommonjsModule(function (module, exports) {\n    \"use strict\";\n\n    var __importStar = commonjsGlobal && commonjsGlobal.__importStar || function (mod) {\n      if (mod && mod.__esModule) return mod;\n      var result = {};\n      if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n      result[\"default\"] = mod;\n      return result;\n    };\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    }); // To modify this file, you must update ./admin/cmds/update-exports.js\n\n    var ethers$1 = __importStar(ethers);\n\n    exports.ethers = ethers$1;\n\n    try {\n      var anyGlobal = window;\n\n      if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers$1;\n      }\n    } catch (error) {}\n\n    var ethers_1 = ethers;\n    exports.Signer = ethers_1.Signer;\n    exports.Wallet = ethers_1.Wallet;\n    exports.VoidSigner = ethers_1.VoidSigner;\n    exports.getDefaultProvider = ethers_1.getDefaultProvider;\n    exports.providers = ethers_1.providers;\n    exports.Contract = ethers_1.Contract;\n    exports.ContractFactory = ethers_1.ContractFactory;\n    exports.BigNumber = ethers_1.BigNumber;\n    exports.FixedNumber = ethers_1.FixedNumber;\n    exports.constants = ethers_1.constants;\n    exports.errors = ethers_1.errors;\n    exports.logger = ethers_1.logger;\n    exports.utils = ethers_1.utils;\n    exports.wordlists = ethers_1.wordlists; ////////////////////////\n    // Compile-Time Constants\n\n    exports.version = ethers_1.version;\n    exports.Wordlist = ethers_1.Wordlist;\n  });\n  var index$p = unwrapExports(lib$p);\n  var lib_1$p = lib$p.ethers;\n  var lib_2$n = lib$p.Signer;\n  var lib_3$j = lib$p.Wallet;\n  var lib_4$e = lib$p.VoidSigner;\n  var lib_5$d = lib$p.getDefaultProvider;\n  var lib_6$8 = lib$p.providers;\n  var lib_7$7 = lib$p.Contract;\n  var lib_8$6 = lib$p.ContractFactory;\n  var lib_9$6 = lib$p.BigNumber;\n  var lib_10$4 = lib$p.FixedNumber;\n  var lib_11$3 = lib$p.constants;\n  var lib_12$3 = lib$p.errors;\n  var lib_13$3 = lib$p.logger;\n  var lib_14$2 = lib$p.utils;\n  var lib_15$2 = lib$p.wordlists;\n  var lib_16$2 = lib$p.version;\n  var lib_17$1 = lib$p.Wordlist;\n  exports.BigNumber = lib_9$6;\n  exports.Contract = lib_7$7;\n  exports.ContractFactory = lib_8$6;\n  exports.FixedNumber = lib_10$4;\n  exports.Signer = lib_2$n;\n  exports.VoidSigner = lib_4$e;\n  exports.Wallet = lib_3$j;\n  exports.Wordlist = lib_17$1;\n  exports.constants = lib_11$3;\n  exports.default = index$p;\n  exports.errors = lib_12$3;\n  exports.ethers = lib_1$p;\n  exports.getDefaultProvider = lib_5$d;\n  exports.logger = lib_13$3;\n  exports.providers = lib_6$8;\n  exports.utils = lib_14$2;\n  exports.version = lib_16$2;\n  exports.wordlists = lib_15$2;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":null,"metadata":{},"sourceType":"script"}