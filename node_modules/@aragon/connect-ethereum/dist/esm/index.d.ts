import { AppFilters, Network, SubscriptionHandler } from '@aragon/connect-types';
import { App, ConnectionContext, IOrganizationConnector, Organization, Permission, Repo, Role } from '@aragon/connect-core';
export declare type ConnectorEthereumConfig = {
    network: Network;
};
declare class ConnectorEthereum implements IOrganizationConnector {
    connection?: ConnectionContext;
    readonly config: ConnectorEthereumConfig;
    readonly name = "ethereum";
    readonly network: Network;
    constructor(config: ConnectorEthereumConfig);
    connect(connection: ConnectionContext): Promise<void>;
    disconnect(): Promise<void>;
    permissionsForOrg(): Promise<Permission[]>;
    onPermissionsForOrg(organization: Organization, callback: Function): SubscriptionHandler;
    appForOrg(organization: Organization, filters: AppFilters): Promise<App>;
    appsForOrg(organization: Organization, filters: AppFilters): Promise<App[]>;
    onAppForOrg(organization: Organization, filters: AppFilters, callback: Function): SubscriptionHandler;
    onAppsForOrg(organization: Organization, filters: AppFilters, callback: Function): SubscriptionHandler;
    repoForApp(organization: Organization, appAddress: string): Promise<Repo>;
    appByAddress(organization: Organization, appAddress: string): Promise<App>;
    rolesForAddress(organization: Organization, appAddress: string): Promise<Role[]>;
}
export default ConnectorEthereum;
//# sourceMappingURL=index.d.ts.map