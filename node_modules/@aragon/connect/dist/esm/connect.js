import { ethers } from 'ethers';
import { ConnectorJson, Organization, toNetwork, } from '@aragon/connect-core';
import ConnectorEthereum from '@aragon/connect-ethereum';
import ConnectorTheGraph from '@aragon/connect-thegraph';
import { XDAI_WSS_ENDPOINT, DEFAULT_IPFS_URL } from './constants';
function ipfsResolverFromUrlTemplate(urlTemplate) {
    return function ipfsResolver(cid, path) {
        const url = urlTemplate.replace(/\{cid\}/, cid);
        if (!path) {
            return url.replace(/\{path\}/, '');
        }
        if (!path.startsWith('/')) {
            path = `/${path}`;
        }
        return url.replace(/\{path\}/, path);
    };
}
function getIpfsResolver(ipfs) {
    if (typeof ipfs === 'function') {
        return ipfs;
    }
    return ipfsResolverFromUrlTemplate(ipfs || DEFAULT_IPFS_URL);
}
function normalizeConnectorConfig(connector) {
    if (Array.isArray(connector)) {
        return [connector[0], connector[1] || {}];
    }
    if (typeof connector === 'string') {
        return [connector, {}];
    }
    return null;
}
function getConnector(connector, network) {
    const normalizedConfig = normalizeConnectorConfig(connector);
    if (normalizedConfig === null) {
        return connector;
    }
    const [name, config] = normalizedConfig;
    if (!config.network) {
        config.network = network;
    }
    if (name === 'json') {
        return new ConnectorJson(config);
    }
    if (name === 'thegraph') {
        return new ConnectorTheGraph(config);
    }
    if (name === 'ethereum') {
        return new ConnectorEthereum(config);
    }
    throw new Error(`Unsupported connector name: ${name}`);
}
function getEthersProvider(ethereumProvider, network) {
    // Ethers compatibility: ethereum => homestead
    if (network.name === 'ethereum' && network.chainId === 1) {
        network = { ...network, name: 'homestead' };
    }
    if (ethereumProvider) {
        try {
            return new ethers.providers.Web3Provider(ethereumProvider, network);
        }
        catch (err) {
            console.error('Invalid provider:', ethereumProvider);
            throw err;
        }
    }
    if (network.chainId === 100) {
        return new ethers.providers.WebSocketProvider(XDAI_WSS_ENDPOINT, network);
    }
    return ethers.getDefaultProvider(network);
}
async function resolveAddress(ethersProvider, location) {
    const address = ethers.utils.isAddress(location)
        ? location
        : await ethersProvider.resolveName(location);
    if (!ethers.utils.isAddress(address)) {
        throw new Error('Please provide a valid address or ENS domain.');
    }
    return address;
}
async function connect(location, connector, { actAs, ethereum: ethereumProvider, ipfs, network, verbose, } = {}) {
    var _a;
    const _network = toNetwork(network !== null && network !== void 0 ? network : 'ethereum');
    const ethersProvider = getEthersProvider(ethereumProvider, _network);
    const orgConnector = getConnector(connector, _network);
    const orgAddress = await resolveAddress(ethersProvider, location);
    const connectionContext = {
        actAs: actAs || null,
        ethereumProvider: ethereumProvider || null,
        ethersProvider,
        ipfs: getIpfsResolver(ipfs),
        network: _network,
        orgAddress,
        orgConnector,
        orgLocation: location,
        verbose: verbose !== null && verbose !== void 0 ? verbose : false,
    };
    await ((_a = orgConnector.connect) === null || _a === void 0 ? void 0 : _a.call(orgConnector, connectionContext));
    return new Organization(connectionContext);
}
export default connect;
//# sourceMappingURL=connect.js.map