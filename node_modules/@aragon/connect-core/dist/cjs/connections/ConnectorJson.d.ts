import { AppFilters, Network, SubscriptionHandler } from '@aragon/connect-types';
import { ConnectionContext } from '../types';
import IOrganizationConnector from './IOrganizationConnector';
import App from '../entities/App';
import Organization from '../entities/Organization';
import Permission from '../entities/Permission';
import Repo from '../entities/Repo';
import Role from '../entities/Role';
export declare type ConnectorJsonConfig = {
    permissions: Permission[];
    network: Network;
};
declare class ConnectorJson implements IOrganizationConnector {
    #private;
    connection?: ConnectionContext;
    readonly config: ConnectorJsonConfig;
    readonly name = "json";
    readonly network: Network;
    constructor(config: ConnectorJsonConfig);
    connect(connection: ConnectionContext): Promise<void>;
    disconnect(): Promise<void>;
    permissionsForOrg(): Promise<Permission[]>;
    onPermissionsForOrg(organization: Organization, callback: Function): SubscriptionHandler;
    app(organization: Organization, filters: AppFilters): Promise<App>;
    apps(filters: AppFilters): Promise<App[]>;
    appForOrg(organization: Organization): Promise<App>;
    appsForOrg(organization: Organization): Promise<App[]>;
    onAppForOrg(organization: Organization, filters: AppFilters, callback: Function): SubscriptionHandler;
    onAppsForOrg(organization: Organization, filters: AppFilters, callback: Function): SubscriptionHandler;
    repoForApp(organization: Organization, appAddress: string): Promise<Repo>;
    appByAddress(organization: Organization, appAddress: string): Promise<App>;
    rolesForAddress(organization: Organization, appAddress: string): Promise<Role[]>;
}
export default ConnectorJson;
//# sourceMappingURL=ConnectorJson.d.ts.map