"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _metadata;
Object.defineProperty(exports, "__esModule", { value: true });
const metadata_1 = require("../utils/metadata");
class App {
    constructor(data, metadata, organization) {
        _metadata.set(this, void 0);
        __classPrivateFieldSet(this, _metadata, metadata);
        this.address = data.address;
        this.appId = data.appId;
        this.codeAddress = data.codeAddress;
        this.contentUri = data.contentUri;
        this.isForwarder = data.isForwarder;
        this.isUpgradeable = data.isUpgradeable;
        this.kernelAddress = data.kernelAddress;
        this.name = data.name;
        this.organization = organization;
        this.registry = data.registry;
        this.registryAddress = data.registryAddress;
        this.repoAddress = data.repoAddress;
        this.version = data.version;
    }
    static async create(data, organization) {
        const artifact = await metadata_1.resolveArtifact(data);
        const manifest = await metadata_1.resolveManifest(data);
        const metadata = [artifact, manifest];
        return new App(data, metadata, organization);
    }
    orgConnector() {
        return this.organization.connection.orgConnector;
    }
    async repo() {
        return this.orgConnector().repoForApp(this.organization, this.address);
    }
    async roles() {
        return this.orgConnector().rolesForAddress(this.organization, this.address);
    }
    get artifact() {
        return __classPrivateFieldGet(this, _metadata)[0];
    }
    get manifest() {
        return __classPrivateFieldGet(this, _metadata)[1];
    }
    get abi() {
        return this.artifact.abi;
    }
    get intents() {
        return this.artifact.functions;
    }
    get deprecatedIntents() {
        return this.artifact.deprecatedFunctions;
    }
    get appName() {
        return this.artifact.appName;
    }
}
exports.default = App;
_metadata = new WeakMap();
//# sourceMappingURL=App.js.map