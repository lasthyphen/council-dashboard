import { ethers } from 'ethers';
import { getApmInternalAppInfo, getAragonOsInternalAppInfo, hasAppInfo, } from './overrides/index';
import { DEFAULT_IPFS_GATEWAY } from '../params';
export function parseMetadata(name, metadata) {
    try {
        return JSON.parse(metadata);
    }
    catch (error) {
        throw new Error(`Can't parse ${name} file, invalid JSON.`);
    }
}
export async function fetchMetadata(fileName, contentUri) {
    const contentHashRegEx = contentUri.match(/ipfs:(.*)/);
    if (contentHashRegEx) {
        const url = `${DEFAULT_IPFS_GATEWAY}/ipfs/${contentHashRegEx[1]}/${fileName}`;
        let metadata;
        try {
            metadata = await ethers.utils.fetchJson(url);
        }
        catch (error) {
            throw new Error(`Can't fetch ${url}, failed with error: {error}.`);
        }
        return metadata;
    }
    return {};
}
export async function resolveMetadata(fileName, contentUri, metadata) {
    if (metadata) {
        return parseMetadata(fileName, metadata);
    }
    if (contentUri) {
        return fetchMetadata(fileName, contentUri);
    }
    return {};
}
export async function resolveManifest(data) {
    return resolveMetadata('manifest.json', data.contentUri, data.manifest);
}
export async function resolveArtifact(data) {
    if (hasAppInfo(data.appId, 'apm')) {
        return getApmInternalAppInfo(data.appId);
    }
    if (hasAppInfo(data.appId, 'aragon')) {
        return getAragonOsInternalAppInfo(data.appId);
    }
    return resolveMetadata('artifact.json', data.contentUri, data.artifact);
}
//# sourceMappingURL=metadata.js.map