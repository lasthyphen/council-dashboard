var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _org, _provider;
import TransactionPath from './TransactionPath';
import { calculateTransactionPath } from '../utils/path/calculatePath';
import { describeTransactionPath } from '../utils/descriptions';
export default class TransactionIntent {
    constructor(data, org, provider) {
        _org.set(this, void 0);
        _provider.set(this, void 0);
        __classPrivateFieldSet(this, _org, org);
        __classPrivateFieldSet(this, _provider, provider);
        this.contractAddress = data.contractAddress;
        this.functionArgs = data.functionArgs;
        this.functionName = data.functionName;
    }
    async paths(account, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    options) {
        const apps = await __classPrivateFieldGet(this, _org).apps();
        const { forwardingFeePretransaction, path, } = await calculateTransactionPath(account, this.contractAddress, this.functionName, this.functionArgs, apps, __classPrivateFieldGet(this, _provider));
        const describedPath = await describeTransactionPath(path, apps, __classPrivateFieldGet(this, _provider));
        return new TransactionPath({
            apps: apps.filter((app) => path
                .map((transaction) => transaction.to)
                .some((address) => address === app.address)),
            destination: apps.find((app) => app.address == this.contractAddress),
            forwardingFeePretransaction,
            transactions: describedPath,
        });
    }
    async transactions(account, options) {
        return (await this.paths(account, options)).transactions;
    }
}
_org = new WeakMap(), _provider = new WeakMap();
//# sourceMappingURL=TransactionIntent.js.map