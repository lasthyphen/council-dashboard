import Organization from './Organization';
import Repo from './Repo';
import Role from './Role';
import { Abi, AppIntent, AragonArtifact, AragonManifest, Metadata } from '../types';
export interface AppData {
    address: string;
    appId: string;
    artifact?: string | null;
    codeAddress: string;
    contentUri?: string;
    isForwarder?: boolean;
    isUpgradeable?: boolean;
    kernelAddress: string;
    manifest?: string | null;
    name?: string;
    registry?: string;
    registryAddress: string;
    repoAddress?: string;
    version?: string;
}
export default class App {
    #private;
    readonly address: string;
    readonly appId: string;
    readonly codeAddress: string;
    readonly contentUri?: string;
    readonly isForwarder?: boolean;
    readonly isUpgradeable?: boolean;
    readonly kernelAddress: string;
    readonly name?: string;
    readonly organization: Organization;
    readonly registry?: string;
    readonly registryAddress: string;
    readonly repoAddress?: string;
    readonly version?: string;
    constructor(data: AppData, metadata: Metadata, organization: Organization);
    static create(data: AppData, organization: Organization): Promise<App>;
    private orgConnector;
    repo(): Promise<Repo>;
    roles(): Promise<Role[]>;
    get artifact(): AragonArtifact;
    get manifest(): AragonManifest;
    get abi(): Abi;
    get intents(): AppIntent[];
    get deprecatedIntents(): {
        [version: string]: AppIntent[];
    };
    get appName(): string;
}
//# sourceMappingURL=App.d.ts.map