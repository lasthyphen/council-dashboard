import TransactionIntent from '../transactions/TransactionIntent';
import { toArrayEntry } from '../utils/misc';
function normalizeAppFilters(filters) {
    var _a;
    if (!filters) {
        return {};
    }
    if (typeof filters === 'string') {
        return filters.startsWith('0x')
            ? { address: [filters] }
            : { name: [filters] };
    }
    if (Array.isArray(filters)) {
        return ((_a = filters[0]) === null || _a === void 0 ? void 0 : _a.startsWith('0x')) ? { address: filters }
            : { name: filters };
    }
    if (filters.address) {
        return { address: toArrayEntry(filters.address) };
    }
    if (filters.name) {
        return { name: toArrayEntry(filters.name) };
    }
    return {};
}
export default class Organization {
    constructor(connection) {
        this.connection = connection;
    }
    get location() {
        return this.connection.orgLocation;
    }
    get address() {
        return this.connection.orgAddress;
    }
    get _connection() {
        return this.connection;
    }
    ///////// APPS ///////////
    async app(filters) {
        return this.connection.orgConnector.appForOrg(this, normalizeAppFilters(filters));
    }
    async apps(filters) {
        return this.connection.orgConnector.appsForOrg(this, normalizeAppFilters(filters));
    }
    onApp(filtersOrCallback, callback) {
        const filters = (callback ? filtersOrCallback : null);
        const _callback = (callback || filtersOrCallback);
        return this.connection.orgConnector.onAppForOrg(this, normalizeAppFilters(filters), _callback);
    }
    onApps(filtersOrCallback, callback) {
        const filters = (callback ? filtersOrCallback : null);
        const _callback = (callback || filtersOrCallback);
        return this.connection.orgConnector.onAppsForOrg(this, normalizeAppFilters(filters), _callback);
    }
    ///////// PERMISSIONS ///////////
    async permissions() {
        return this.connection.orgConnector.permissionsForOrg(this);
    }
    onPermissions(callback) {
        return this.connection.orgConnector.onPermissionsForOrg(this, callback);
    }
    ///////// INTENTS ///////////
    appIntent(appAddress, functionName, functionArgs) {
        return new TransactionIntent({ contractAddress: appAddress, functionName, functionArgs }, this, this.connection.ethersProvider);
    }
}
//# sourceMappingURL=Organization.js.map