"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseRoles = exports.parseRole = void 0;
const connect_core_1 = require("@aragon/connect-core");
async function _parseRole(role, app, organization) {
    var _a, _b, _c;
    const grantees = (_a = role === null || role === void 0 ? void 0 : role.grantees) === null || _a === void 0 ? void 0 : _a.map((permission) => {
        var _a;
        return ({
            appAddress: permission === null || permission === void 0 ? void 0 : permission.appAddress,
            allowed: permission === null || permission === void 0 ? void 0 : permission.allowed,
            granteeAddress: permission === null || permission === void 0 ? void 0 : permission.granteeAddress,
            params: ((_a = permission === null || permission === void 0 ? void 0 : permission.params) === null || _a === void 0 ? void 0 : _a.map((param) => ({
                argumentId: param === null || param === void 0 ? void 0 : param.argumentId,
                operationType: param === null || param === void 0 ? void 0 : param.operationType,
                argumentValue: param === null || param === void 0 ? void 0 : param.argumentValue,
            }))) || [],
            roleHash: permission === null || permission === void 0 ? void 0 : permission.roleHash,
        });
    });
    const roleData = {
        appAddress: role === null || role === void 0 ? void 0 : role.appAddress,
        appId: app === null || app === void 0 ? void 0 : app.appId,
        artifact: (_b = app === null || app === void 0 ? void 0 : app.version) === null || _b === void 0 ? void 0 : _b.artifact,
        contentUri: (_c = app === null || app === void 0 ? void 0 : app.version) === null || _c === void 0 ? void 0 : _c.contentUri,
        grantees: grantees || [],
        hash: role === null || role === void 0 ? void 0 : role.roleHash,
        manager: role === null || role === void 0 ? void 0 : role.manager,
    };
    return connect_core_1.Role.create(roleData, organization);
}
async function parseRole(result, organization) {
    var _a, _b;
    const app = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.app;
    const role = (_b = result === null || result === void 0 ? void 0 : result.data) === null || _b === void 0 ? void 0 : _b.role;
    if (!app || !role) {
        throw new Error('Unable to parse role.');
    }
    return _parseRole(role, app, organization);
}
exports.parseRole = parseRole;
async function parseRoles(result, organization) {
    var _a;
    const app = (_a = result === null || result === void 0 ? void 0 : result.data) === null || _a === void 0 ? void 0 : _a.app;
    const roles = app === null || app === void 0 ? void 0 : app.roles;
    if (!app || !Array.isArray(roles)) {
        throw new Error('Unable to parse roles.');
    }
    return Promise.all(roles.map(async (role) => {
        return _parseRole(role, app, organization);
    }));
}
exports.parseRoles = parseRoles;
//# sourceMappingURL=roles.js.map