"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _gql;
Object.defineProperty(exports, "__esModule", { value: true });
const connect_core_1 = require("@aragon/connect-core");
const queries = __importStar(require("./queries"));
const GraphQLWrapper_1 = __importDefault(require("./core/GraphQLWrapper"));
const parsers_1 = require("./parsers");
function getOrgSubgraphUrl(network) {
    if (network.chainId === 1) {
        return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-mainnet';
    }
    if (network.chainId === 43112) {
        return 'https://graphs.centralus.cloudapp.azure.com/subgraphs/name/aragon/aragon-court-dijets';
    }
    if (network.chainId === 4) {
        return 'https://api.thegraph.com/subgraphs/name/aragon/aragon-rinkeby';
    }
    if (network.chainId === 100) {
        return 'https://api.thegraph.com/subgraphs/name/1hive/aragon-xdai';
    }
    return null;
}
function appFiltersToQueryFilter(appFilters) {
    const queryFilter = {};
    if (appFilters.name) {
        queryFilter.repoName_in = appFilters.name.map((name) => name.replace(/\.aragonpm\.eth$/, ''));
    }
    if (appFilters.address) {
        queryFilter.address_in = appFilters.address;
    }
    return queryFilter;
}
class ConnectorTheGraph {
    constructor(config) {
        _gql.set(this, void 0);
        this.name = 'thegraph';
        this.config = config;
        this.network = connect_core_1.toNetwork(config.network);
        const orgSubgraphUrl = config.orgSubgraphUrl || getOrgSubgraphUrl(this.network);
        if (!orgSubgraphUrl) {
            throw new Error(`The chainId ${this.network.chainId} is not supported by the TheGraph connector.`);
        }
        __classPrivateFieldSet(this, _gql, new GraphQLWrapper_1.default(orgSubgraphUrl, {
            pollInterval: config.pollInterval,
            verbose: config.verbose,
        }));
    }
    async connect(connection) {
        this.connection = connection;
    }
    async disconnect() {
        __classPrivateFieldGet(this, _gql).close();
        delete this.connection;
    }
    async rolesForAddress(organization, appAddress) {
        return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ROLE_BY_APP_ADDRESS('query'), { appAddress: appAddress.toLowerCase() }, (result) => parsers_1.parseRoles(result, organization));
    }
    async permissionsForOrg(organization) {
        return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_PERMISSIONS('query'), { orgAddress: organization.address.toLowerCase() }, (result) => parsers_1.parsePermissions(result, organization));
    }
    onPermissionsForOrg(organization, callback) {
        return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_PERMISSIONS('subscription'), { orgAddress: organization.address.toLowerCase() }, callback, (result) => parsers_1.parsePermissions(result, organization));
    }
    async appByAddress(organization, appAddress) {
        return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.APP_BY_ADDRESS('query'), { appAddress: appAddress.toLowerCase() }, (result) => parsers_1.parseApp(result, organization));
    }
    async appForOrg(organization, filters) {
        const apps = await __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_APPS('query'), {
            appFilter: appFiltersToQueryFilter(filters),
            first: 1,
            orgAddress: organization.address.toLowerCase(),
        }, (result) => parsers_1.parseApps(result, organization));
        return apps[0];
    }
    async appsForOrg(organization, filters) {
        return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.ORGANIZATION_APPS('query'), {
            appFilter: appFiltersToQueryFilter(filters),
            orgAddress: organization.address.toLowerCase(),
        }, (result) => parsers_1.parseApps(result, organization));
    }
    onAppForOrg(organization, filters, callback) {
        return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {
            appFilter: appFiltersToQueryFilter(filters),
            first: 1,
            orgAddress: organization.address.toLowerCase(),
        }, (apps) => callback(apps[0]), (result) => parsers_1.parseApps(result, organization));
    }
    onAppsForOrg(organization, filters, callback) {
        return __classPrivateFieldGet(this, _gql).subscribeToQueryWithParser(queries.ORGANIZATION_APPS('subscription'), {
            appFilter: appFiltersToQueryFilter(filters),
            orgAddress: organization.address.toLowerCase(),
        }, callback, (result) => parsers_1.parseApps(result, organization));
    }
    async repoForApp(organization, appAddress) {
        return __classPrivateFieldGet(this, _gql).performQueryWithParser(queries.REPO_BY_APP_ADDRESS('query'), { appAddress: appAddress.toLowerCase() }, (result) => parsers_1.parseRepo(result, organization));
    }
}
_gql = new WeakMap();
exports.default = ConnectorTheGraph;
//# sourceMappingURL=connector.js.map