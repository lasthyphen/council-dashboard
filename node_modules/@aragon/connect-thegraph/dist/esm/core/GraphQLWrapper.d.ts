import { DocumentNode } from 'graphql';
import { SubscriptionHandler } from '@aragon/connect-types';
import { ParseFunction, QueryResult } from '../types';
declare type GraphQLWrapperOptions = {
    pollInterval?: number;
    verbose?: boolean;
};
export default class GraphQLWrapper {
    #private;
    constructor(subgraphUrl: string, options?: GraphQLWrapperOptions | boolean);
    close(): void;
    subscribeToQuery(query: DocumentNode, args: any, callback: Function): SubscriptionHandler;
    subscribeToQueryWithParser<T>(query: DocumentNode, args: any, callback: Function, parser: ParseFunction): SubscriptionHandler;
    performQuery(query: DocumentNode, args?: any): Promise<QueryResult>;
    performQueryWithParser<T>(query: DocumentNode, args: any, parser: ParseFunction): Promise<T>;
    parseQueryResult<T>(parser: ParseFunction, result: QueryResult): Promise<T>;
    private describeQueryResultError;
    private describeQueryResult;
}
export {};
//# sourceMappingURL=GraphQLWrapper.d.ts.map