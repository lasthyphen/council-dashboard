'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _gzipSize = require('gzip-size');

var _gzipSize2 = _interopRequireDefault(_gzipSize);

var _logger = require('../../logger');

var _logger2 = _interopRequireDefault(_logger);

var _ValidationError = require('../errors/ValidationError');

var _ValidationError2 = _interopRequireDefault(_ValidationError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getBrotliSize = data => {
    let brotli;
    try {
        brotli = require('brotli-size'); // eslint-disable-line global-require
    } catch (e) {
        throw new _ValidationError2.default(`'brotli-size' package has not been installed, please install package to use this compression type`);
    }
    return brotli.sync(data);
};

const getSize = ({ filePath, compression }) => {
    let data;
    try {
        data = _fs2.default.readFileSync(filePath, 'utf8');
    } catch (error) {
        _logger2.default.error(`Could not read file: ${filePath}}`, error);
        return null;
    }

    let size;
    switch (compression) {
        case 'gzip':
            size = _gzipSize2.default.sync(data);
            break;
        case 'brotli':
            size = getBrotliSize(data);
            break;
        case 'none':
        default:
            size = Buffer.byteLength(data);
    }

    return size;
};

exports.default = getSize;