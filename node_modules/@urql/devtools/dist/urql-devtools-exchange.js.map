{"version":3,"file":"urql-devtools-exchange.js","sources":["../src/utils/getDisplayName.ts","../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","../node_modules/graphql/jsutils/inspect.mjs","../node_modules/graphql/jsutils/devAssert.mjs","../node_modules/graphql/jsutils/defineToJSON.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/language/source.mjs","../node_modules/graphql/jsutils/defineToStringTag.mjs","../node_modules/graphql/language/blockString.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/parser.mjs","../src/exchange.ts","../src/utils/hash.ts","../src/types/outgoing.ts","../src/types/incoming.ts"],"sourcesContent":["import * as React from \"react\";\n\nconst {\n  ReactCurrentOwner: CurrentOwner\n} = (React as any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// Is the Fiber a FunctionComponent, ClassComponent, or IndeterminateComponent\nconst isComponentFiber = (fiber: void | { tag: number }) =>\n  fiber && (fiber.tag === 0 || fiber.tag === 1 || fiber.tag === 2);\n\n// Is the component one of ours (just a heuristic to avoid circular dependencies or flags)\nconst isInternalComponent = (Component: { name: string }) =>\n  Component.name === \"Query\" ||\n  Component.name === \"Mutation\" ||\n  Component.name === \"Subscription\";\n\nexport const getDisplayName = (): string => {\n  let source = \"Component\";\n\n  // Check whether the CurrentOwner is set\n  const owner = CurrentOwner.current;\n  if (owner !== null && isComponentFiber(owner)) {\n    let Component = owner.type;\n\n    // If this is one of our own components then check the parent\n    if (isInternalComponent(Component) && isComponentFiber(owner._debugOwner)) {\n      Component = owner._debugOwner.type;\n    }\n\n    // Get the Component's name if it has one\n    if (typeof Component === \"function\") {\n      source = Component.displayName || Component.name || source;\n    }\n  }\n\n  return source;\n};\n","var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    // $FlowFixMe(>=0.90.0)\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","import nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON(classObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","import { getLocation } from '../language/location';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var sublineIndex = Math.floor(columnNum / 80);\n    var sublineColumnNum = columnNum % 80;\n    var sublines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      sublines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), sublines[0]]].concat(sublines.slice(1, sublineIndex + 1).map(function (subline) {\n      return ['', subline];\n    }), [[' ', whitespace(sublineColumnNum - 1) + '^'], ['', sublines[sublineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","import isObjectLike from '../jsutils/isObjectLike';\nimport { getLocation } from '../language/location';\nimport { printLocation, printSourceLocation } from '../language/printLocation';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions;\n\n  if (_extensions == null && originalError != null) {\n    var originalExtensions = originalError.extensions;\n\n    if (isObjectLike(originalExtensions)) {\n      _extensions = originalExtensions;\n    }\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);\n","/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}\n","/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n","import { map, pipe, tap, toPromise, take, filter, merge, share } from \"wonka\";\nimport {\n  Exchange,\n  Client,\n  Operation,\n  OperationResult,\n  OperationDebugMeta\n} from \"urql\";\nimport {\n  DevtoolsExchangeOutgoingMessage,\n  DevtoolsExchangeOutgoingEventType,\n  ExecuteRequestMessage,\n  DevtoolsExchangeIncomingEventType,\n  DevtoolsExchangeIncomingMessage\n} from \"./types\";\nimport { getDisplayName } from \"./utils\";\nimport { hash } from \"./utils/hash\";\nimport { parse } from \"graphql\";\n\nexport const devtoolsExchange: Exchange = ({ client, forward }) => {\n  if (typeof window === \"undefined\") {\n    return ops$ => pipe(ops$, forward);\n  }\n\n  // Expose graphql url for introspection\n  window.__urql__ = {\n    url: client.url\n  };\n\n  // Listen for messages from content script\n  window.addEventListener(DevtoolsExchangeIncomingEventType, event => {\n    const e = event as CustomEvent<DevtoolsExchangeIncomingMessage>;\n    const handler = messageHandlers[e.detail.type];\n    handler && handler(client)(e.detail);\n  });\n  sendToContentScript({ type: \"init\" });\n\n  return ops$ => {\n    const sharedOps$ = pipe(ops$, map(addOperationContext), share);\n\n    const isDevtoolsOp = (o: Operation) =>\n      Boolean(o.context.meta && o.context.meta.source === \"Devtools\");\n\n    const appOps$ = pipe(\n      sharedOps$,\n      filter(o => !isDevtoolsOp(o)),\n      tap(handleOperation),\n      forward,\n      map(addOperationResponseContext),\n      tap(handleOperation)\n    );\n\n    const devtoolsOps$ = pipe(\n      sharedOps$,\n      filter(o => isDevtoolsOp(o)),\n      forward\n    );\n\n    return merge([appOps$, devtoolsOps$]);\n  };\n};\n\nconst addOperationResponseContext = (op: OperationResult): OperationResult => ({\n  ...op,\n  operation: {\n    ...op.operation,\n    context: {\n      ...op.operation.context,\n      meta: {\n        ...op.operation.context.meta,\n        networkLatency:\n          Date.now() -\n          ((op.operation.context.meta as OperationDebugMeta)\n            .startTime as number)\n      }\n    }\n  }\n});\n\nconst addOperationContext = (op: Operation): Operation => ({\n  ...op,\n  context: {\n    ...op.context,\n    meta: {\n      ...op.context.meta,\n      source: (op.context.meta && op.context.meta.source) || getDisplayName(),\n      startTime: Date.now()\n    }\n  }\n});\n\n/** Handle operation or response from stream. */\nconst handleOperation = <T extends Operation | OperationResult>(op: T) => {\n  const event = JSON.parse(JSON.stringify(parseStreamData(op))); // Serialization required for some events (such as error)\n  sendToContentScript(event);\n};\n\n/** Handles execute request messages. */\nconst requestHandler = (client: Client) => (message: ExecuteRequestMessage) => {\n  const isMutation = /(^|\\W)+mutation\\W/.test(message.query);\n  const requestType = isMutation ? \"mutation\" : \"query\";\n  const op = client.createRequestOperation(\n    requestType,\n    {\n      key: hash(JSON.stringify(message.query)),\n      query: parse(message.query)\n    },\n    {\n      meta: {\n        source: \"Devtools\"\n      }\n    }\n  );\n\n  handleOperation(op);\n  pipe(\n    client.executeRequestOperation(op),\n    tap(handleOperation),\n    take(1),\n    toPromise\n  );\n};\n\n/** Map of handlers for incoming messages. */\nconst messageHandlers = {\n  request: requestHandler\n} as const;\n\n/** Creates a DevtoolsExchangeOutgoingMessage from operations/responses. */\nconst parseStreamData = <T extends Operation | OperationResult>(op: T) => {\n  const timestamp = Date.now();\n\n  // Outgoing operation\n  if (\"operationName\" in op) {\n    return {\n      type: \"operation\",\n      data: op,\n      timestamp\n    } as const;\n  }\n\n  // Incoming error\n  if ((op as OperationResult).error !== undefined) {\n    return { type: \"error\", data: op, timestamp } as const;\n  }\n\n  // Incoming response\n  return {\n    type: \"response\",\n    data: op,\n    timestamp\n  } as const;\n};\n\nconst sendToContentScript = (detail: DevtoolsExchangeOutgoingMessage) =>\n  window.dispatchEvent(\n    new CustomEvent(DevtoolsExchangeOutgoingEventType, { detail })\n  );\n","// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n","import { Operation, OperationResult } from \"urql\";\n\n/** Dispatched when an operation is dispatched in the urql client. */\nexport interface OperationMessage {\n  type: \"operation\";\n  data: Operation;\n  timestamp: number;\n}\n\n/** Dispatched when an operation result without an error has been returned. */\nexport interface OperationResponseMessage {\n  type: \"response\";\n  data: OperationResult;\n  timestamp: number;\n}\n\n/** Dispatched when an operation result with an error has been returned. */\nexport interface OperationErrorMessage {\n  type: \"error\";\n  data: OperationResult;\n  timestamp: number;\n}\n\nexport interface InitMessage {\n  type: \"init\";\n}\n\nexport interface DisconnectMessage {\n  type: \"disconnect\";\n}\n\n/** Messages being sent by the devtools exchange to the content script. */\nexport type DevtoolsExchangeOutgoingMessage =\n  | OperationMessage\n  | OperationResponseMessage\n  | OperationErrorMessage\n  | DisconnectMessage\n  | InitMessage;\n\n/** Event type associated with events triggered by the exchange. */\nexport const DevtoolsExchangeOutgoingEventType = \"urql-devtools-exchange\" as const;\n","export interface ExecuteRequestMessage {\n  type: \"request\";\n  query: string;\n}\n\nexport type DevtoolsExchangeIncomingMessage = ExecuteRequestMessage;\n\nexport const DevtoolsExchangeIncomingEventType = \"urql-devtools-exchange-in\" as const;\n"],"names":["React","const","isComponentFiber","fiber","tag","getDisplayName","source","owner","CurrentOwner","current","Component","type","name","isInternalComponent","_debugOwner","displayName","nodejsCustomInspectSymbol","Symbol","for","undefined","_typeof","obj","iterator","constructor","prototype","MAX_ARRAY_LENGTH","MAX_RECURSIVE_DEPTH","formatValue","value","seenValues","JSON","stringify","concat","formatObjectValue","previouslySeenValues","indexOf","customInspectFn","getCustomFn","object","String","inspect","customValue","call","Array","isArray","formatArray","array","length","len","Math","min","remaining","items","i","push","join","formatObject","keys","Object","getObjectTag","toString","replace","map","key","devAssert","condition","message","Boolean","Error","defineToJSON","classObject","fn","arguments","toJSON","getLocation","position","lineRegexp","line","column","match","exec","body","index","printLocation","location","printSourceLocation","start","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineNum","columnNum","locationStr","lines","split","locationLine","sublineIndex","floor","sublineColumnNum","sublines","slice","printPrefixedLines","subline","existingLines","filter","_ref","padLen","max","apply","_ref2","_ref3","lpad","str","GraphQLError","nodes","positions","path","originalError","extensions","_nodes","_source","node","loc","_positions","reduce","list","_locations","pos","_extensions","originalExtensions","isObjectLike","defineProperties","this","enumerable","writable","locations","stack","defineProperty","configurable","captureStackTrace","create","printError","error","output","_i2","_error$nodes2","_i4","_error$locations2","syntaxError","description","Kind","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","Source","defineToStringTag","toStringTag","get","dedentBlockStringValue","rawString","commonIndent","getBlockStringIndentation","indent","leadingWhitespace","isBlank","shift","pop","TokenKind","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","advanceLexer","lastToken","token","lookahead","kind","next","readToken","Tok","end","prev","printCharCode","code","isNaN","fromCharCode","toUpperCase","lexer","bodyLength","positionAfterWhitespace","startPosition","charCodeAt","lineStart","col","readComment","readName","readNumber","firstCode","isFloat","readDigits","readBlockString","chunkStart","rawValue","readString","charCode","a","b","c","d","char2hex","invalidSequence","unexpectedCharacterMessage","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","Parser","options","sourceObj","_lexer","createLexer","startOfFileToken","advance","_options","_proto","parseName","expectToken","parseDocument","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","parseTypeReference","defaultValue","expectOptionalToken","parseValueLiteral","selections","parseSelection","parseFragment","parseField","nameOrAlias","alias","parseArguments","isConst","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","expectKeyword","experimentalFragmentVariables","parseList","parseObject","parseStringLiteral","block","_this","values","any","item","_this2","fields","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","types","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","startToken","noLocation","Loc","getTokenDesc","atToken","openKind","parseFn","closeKind","endToken","o","context","meta","addOperationResponseContext","op","networkLatency","Date","now","startTime","addOperationContext","handleOperation","event","parse","parseStreamData","sendToContentScript","messageHandlers","request","client","isMutation","test","query","createRequestOperation","x","h","let","l","phash","pipe","executeRequestOperation","tap","take","toPromise","timestamp","data","detail","window","dispatchEvent","CustomEvent","ref","ops$","forward","__urql__","url","addEventListener","e","handler","sharedOps$","share","isDevtoolsOp","appOps$","devtoolsOps$","merge"],"mappings":"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"}