{"version":3,"file":"urql-devtools-exchange.es.min.js","sources":["../src/types/incoming.ts","../src/types/outgoing.ts","../src/utils/getDisplayName.ts","../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","../node_modules/graphql/jsutils/inspect.mjs","../node_modules/graphql/jsutils/devAssert.mjs","../node_modules/graphql/jsutils/defineToJSON.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/kinds.mjs","../node_modules/graphql/language/source.mjs","../node_modules/graphql/language/blockString.mjs","../node_modules/graphql/jsutils/defineToStringTag.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/parser.mjs","../src/exchange.ts","../src/utils/hash.ts"],"sourcesContent":["export interface ExecuteRequestMessage {\n  type: \"request\";\n  query: string;\n}\n\nexport type DevtoolsExchangeIncomingMessage = ExecuteRequestMessage;\n\nexport const DevtoolsExchangeIncomingEventType = \"urql-devtools-exchange-in\" as const;\n","import { Operation, OperationResult } from \"urql\";\n\n/** Dispatched when an operation is dispatched in the urql client. */\nexport interface OperationMessage {\n  type: \"operation\";\n  data: Operation;\n  timestamp: number;\n}\n\n/** Dispatched when an operation result without an error has been returned. */\nexport interface OperationResponseMessage {\n  type: \"response\";\n  data: OperationResult;\n  timestamp: number;\n}\n\n/** Dispatched when an operation result with an error has been returned. */\nexport interface OperationErrorMessage {\n  type: \"error\";\n  data: OperationResult;\n  timestamp: number;\n}\n\nexport interface InitMessage {\n  type: \"init\";\n}\n\nexport interface DisconnectMessage {\n  type: \"disconnect\";\n}\n\n/** Messages being sent by the devtools exchange to the content script. */\nexport type DevtoolsExchangeOutgoingMessage =\n  | OperationMessage\n  | OperationResponseMessage\n  | OperationErrorMessage\n  | DisconnectMessage\n  | InitMessage;\n\n/** Event type associated with events triggered by the exchange. */\nexport const DevtoolsExchangeOutgoingEventType = \"urql-devtools-exchange\" as const;\n","import * as React from \"react\";\n\nconst {\n  ReactCurrentOwner: CurrentOwner\n} = (React as any).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// Is the Fiber a FunctionComponent, ClassComponent, or IndeterminateComponent\nconst isComponentFiber = (fiber: void | { tag: number }) =>\n  fiber && (fiber.tag === 0 || fiber.tag === 1 || fiber.tag === 2);\n\n// Is the component one of ours (just a heuristic to avoid circular dependencies or flags)\nconst isInternalComponent = (Component: { name: string }) =>\n  Component.name === \"Query\" ||\n  Component.name === \"Mutation\" ||\n  Component.name === \"Subscription\";\n\nexport const getDisplayName = (): string => {\n  let source = \"Component\";\n\n  // Check whether the CurrentOwner is set\n  const owner = CurrentOwner.current;\n  if (owner !== null && isComponentFiber(owner)) {\n    let Component = owner.type;\n\n    // If this is one of our own components then check the parent\n    if (isInternalComponent(Component) && isComponentFiber(owner._debugOwner)) {\n      Component = owner._debugOwner.type;\n    }\n\n    // Get the Component's name if it has one\n    if (typeof Component === \"function\") {\n      source = Component.displayName || Component.name || source;\n    }\n  }\n\n  return source;\n};\n","var nodejsCustomInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n  var customInspectFn = getCustomFn(value);\n\n  if (customInspectFn !== undefined) {\n    // $FlowFixMe(>=0.90.0)\n    var customValue = customInspectFn.call(value); // check for infinite recursion\n\n    if (customValue !== value) {\n      return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","export default function devAssert(condition, message) {\n  var booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","import nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON(classObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}\n","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return _typeof(value) == 'object' && value !== null;\n}\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}\n","import { getLocation } from '../language/location';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = sourceLocation.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = sourceLocation.line + lineOffset;\n  var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = sourceLocation.column + columnOffset;\n  var locationStr = \"\".concat(source.name, \":\").concat(lineNum, \":\").concat(columnNum, \"\\n\");\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  var locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    var sublineIndex = Math.floor(columnNum / 80);\n    var sublineColumnNum = columnNum % 80;\n    var sublines = [];\n\n    for (var i = 0; i < locationLine.length; i += 80) {\n      sublines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[\"\".concat(lineNum), sublines[0]]].concat(sublines.slice(1, sublineIndex + 1).map(function (subline) {\n      return ['', subline];\n    }), [[' ', whitespace(sublineColumnNum - 1) + '^'], ['', sublines[sublineIndex + 1]]]));\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1), lines[lineIndex - 1]], [\"\".concat(lineNum), locationLine], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = Math.max.apply(Math, existingLines.map(function (_ref2) {\n    var prefix = _ref2[0];\n    return prefix.length;\n  }));\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + (line ? ' | ' + line : ' |');\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","import isObjectLike from '../jsutils/isObjectLike';\nimport { getLocation } from '../language/location';\nimport { printLocation, printSourceLocation } from '../language/printLocation';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions;\n\n  if (_extensions == null && originalError != null) {\n    var originalExtensions = originalError.extensions;\n\n    if (isObjectLike(originalExtensions)) {\n      _extensions = originalExtensions;\n    }\n  }\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  var output = error.message;\n\n  if (error.nodes) {\n    for (var _i2 = 0, _error$nodes2 = error.nodes; _i2 < _error$nodes2.length; _i2++) {\n      var node = _error$nodes2[_i2];\n\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (var _i4 = 0, _error$locations2 = error.locations; _i4 < _error$locations2.length; _i4++) {\n      var location = _error$locations2[_i4];\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","import devAssert from '../jsutils/devAssert';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive');\n  this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive');\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);\n","/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n","/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","import defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { dedentBlockStringValue } from './blockString';\nimport { TokenKind } from './tokenKind';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or e\n\n\n  if (code === 46 || code === 69 || code === 101) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}\n","/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","import inspect from '../jsutils/inspect';\nimport devAssert from '../jsutils/devAssert';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error/syntaxError';\nimport { Kind } from './kinds';\nimport { Source } from './source';\nimport { createLexer } from './lexer';\nimport { DirectiveLocation } from './directiveLocation';\nimport { TokenKind } from './tokenKind';\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  var type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n\nvar Parser =\n/*#__PURE__*/\nfunction () {\n  function Parser(source, options) {\n    var sourceObj = typeof source === 'string' ? new Source(source) : source;\n    sourceObj instanceof Source || devAssert(0, \"Must provide Source. Received: \".concat(inspect(sourceObj)));\n    this._lexer = createLexer(sourceObj);\n    this._options = options || {};\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  var _proto = Parser.prototype;\n\n  _proto.parseName = function parseName() {\n    var token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n  ;\n\n  _proto.parseDocument = function parseDocument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n  ;\n\n  _proto.parseDefinition = function parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseOperationDefinition = function parseOperationDefinition() {\n    var start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    var operation = this.parseOperationType();\n    var name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: operation,\n      name: name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n  ;\n\n  _proto.parseOperationType = function parseOperationType() {\n    var operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n  ;\n\n  _proto.parseVariableDefinitions = function parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseVariableDefinition = function parseVariableDefinition() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n  ;\n\n  _proto.parseVariable = function parseVariable() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n  ;\n\n  _proto.parseSelectionSet = function parseSelectionSet() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n  ;\n\n  _proto.parseSelection = function parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n  ;\n\n  _proto.parseField = function parseField() {\n    var start = this._lexer.token;\n    var nameOrAlias = this.parseName();\n    var alias;\n    var name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias: alias,\n      name: name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n  ;\n\n  _proto.parseArguments = function parseArguments(isConst) {\n    var item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseArgument = function parseArgument() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name: name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  };\n\n  _proto.parseConstArgument = function parseConstArgument() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n  ;\n\n  _proto.parseFragment = function parseFragment() {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    var hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n  ;\n\n  _proto.parseFragmentDefinition = function parseFragmentDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options.experimentalFragmentVariables) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n  ;\n\n  _proto.parseFragmentName = function parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n  ;\n\n  _proto.parseValueLiteral = function parseValueLiteral(isConst) {\n    var token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        if (token.value === 'true' || token.value === 'false') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.BOOLEAN,\n            value: token.value === 'true',\n            loc: this.loc(token)\n          };\n        } else if (token.value === 'null') {\n          this._lexer.advance();\n\n          return {\n            kind: Kind.NULL,\n            loc: this.loc(token)\n          };\n        }\n\n        this._lexer.advance();\n\n        return {\n          kind: Kind.ENUM,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  };\n\n  _proto.parseStringLiteral = function parseStringLiteral() {\n    var token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n  ;\n\n  _proto.parseList = function parseList(isConst) {\n    var _this = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this.parseValueLiteral(isConst);\n    };\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n  ;\n\n  _proto.parseObject = function parseObject(isConst) {\n    var _this2 = this;\n\n    var start = this._lexer.token;\n\n    var item = function item() {\n      return _this2.parseObjectField(isConst);\n    };\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n  ;\n\n  _proto.parseObjectField = function parseObjectField(isConst) {\n    var start = this._lexer.token;\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name: name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n  ;\n\n  _proto.parseDirectives = function parseDirectives(isConst) {\n    var directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n  ;\n\n  _proto.parseDirective = function parseDirective(isConst) {\n    var start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n  ;\n\n  _proto.parseTypeReference = function parseTypeReference() {\n    var start = this._lexer.token;\n    var type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type: type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n  ;\n\n  _proto.parseNamedType = function parseNamedType() {\n    var start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  };\n\n  _proto.peekDescription = function peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n  ;\n\n  _proto.parseDescription = function parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n  ;\n\n  _proto.parseSchemaDefinition = function parseSchemaDefinition() {\n    var start = this._lexer.token;\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n  ;\n\n  _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {\n    var start = this._lexer.token;\n    var operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation: operation,\n      type: type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n  ;\n\n  _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n  ;\n\n  _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {\n    var types = [];\n\n    if (this.expectOptionalKeyword('implements')) {\n      // Optional leading ampersand\n      this.expectOptionalToken(TokenKind.AMP);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.AMP) || // Legacy support for the SDL?\n      this._options.allowLegacySDLImplementsInterfaces && this.peek(TokenKind.NAME));\n    }\n\n    return types;\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n  ;\n\n  _proto.parseFieldsDefinition = function parseFieldsDefinition() {\n    // Legacy support for the SDL?\n    if (this._options.allowLegacySDLEmptyFields && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {\n      this._lexer.advance();\n\n      this._lexer.advance();\n\n      return [];\n    }\n\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n  ;\n\n  _proto.parseFieldDefinition = function parseFieldDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      type: type,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n  ;\n\n  _proto.parseArgumentDefs = function parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n  ;\n\n  _proto.parseInputValueDef = function parseInputValueDef() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    var type = this.parseTypeReference();\n    var defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      type: type,\n      defaultValue: defaultValue,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n  ;\n\n  _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n  ;\n\n  _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n  ;\n\n  _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {\n    var types = [];\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      // Optional leading pipe\n      this.expectOptionalToken(TokenKind.PIPE);\n\n      do {\n        types.push(this.parseNamedType());\n      } while (this.expectOptionalToken(TokenKind.PIPE));\n    }\n\n    return types;\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n  ;\n\n  _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n  ;\n\n  _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n  ;\n\n  _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n  ;\n\n  _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description: description,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n  ;\n\n  _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n  ;\n\n  _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {\n    var keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n  ;\n\n  _proto.parseSchemaExtension = function parseSchemaExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    var directives = this.parseDirectives(true);\n    var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives: directives,\n      operationTypes: operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n  ;\n\n  _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n  ;\n\n  _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    var name = this.parseName();\n    var interfaces = this.parseImplementsInterfaces();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name: name,\n      interfaces: interfaces,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *   - extend interface Name Directives[Const]? FieldsDefinition\n   *   - extend interface Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n  ;\n\n  _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      types: types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n  ;\n\n  _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      values: values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n  ;\n\n  _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {\n    var start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    var name = this.parseName();\n    var directives = this.parseDirectives(true);\n    var fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name: name,\n      directives: directives,\n      fields: fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n  ;\n\n  _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {\n    var start = this._lexer.token;\n    var description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    var name = this.parseName();\n    var args = this.parseArgumentDefs();\n    var repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    var locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description: description,\n      name: name,\n      arguments: args,\n      repeatable: repeatable,\n      locations: locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n  ;\n\n  _proto.parseDirectiveLocations = function parseDirectiveLocations() {\n    // Optional leading pipe\n    this.expectOptionalToken(TokenKind.PIPE);\n    var locations = [];\n\n    do {\n      locations.push(this.parseDirectiveLocation());\n    } while (this.expectOptionalToken(TokenKind.PIPE));\n\n    return locations;\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n  ;\n\n  _proto.parseDirectiveLocation = function parseDirectiveLocation() {\n    var start = this._lexer.token;\n    var name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in\n   * the source that created a given parsed object.\n   */\n  ;\n\n  _proto.loc = function loc(startToken) {\n    if (!this._options.noLocation) {\n      return new Loc(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n  ;\n\n  _proto.peek = function peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectToken = function expectToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing\n   * the lexer. Otherwise, do not change the parser state and return undefined.\n   */\n  ;\n\n  _proto.expectOptionalToken = function expectOptionalToken(kind) {\n    var token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n  ;\n\n  _proto.expectKeyword = function expectKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing\n   * the lexer. Otherwise, do not change the parser state and return \"false\".\n   */\n  ;\n\n  _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {\n    var token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token\n   * is encountered.\n   */\n  ;\n\n  _proto.unexpected = function unexpected(atToken) {\n    var token = atToken || this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.any = function any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always\n   * return non-empty list that begins with a lex token of openKind and ends\n   * with a lex token of closeKind. Advances the parser to the next lex token\n   * after the closing token.\n   */\n  ;\n\n  _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      var nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by\n   * the parseFn. This list begins with a lex token of openKind\n   * and ends with a lex token of closeKind. Advances the parser\n   * to the next lex token after the closing token.\n   */\n  ;\n\n  _proto.many = function many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    var nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  };\n\n  return Parser;\n}();\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nfunction getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n","import { map, pipe, tap, toPromise, take, filter, merge, share } from \"wonka\";\nimport {\n  Exchange,\n  Client,\n  Operation,\n  OperationResult,\n  OperationDebugMeta\n} from \"urql\";\nimport {\n  DevtoolsExchangeOutgoingMessage,\n  DevtoolsExchangeOutgoingEventType,\n  ExecuteRequestMessage,\n  DevtoolsExchangeIncomingEventType,\n  DevtoolsExchangeIncomingMessage\n} from \"./types\";\nimport { getDisplayName } from \"./utils\";\nimport { hash } from \"./utils/hash\";\nimport { parse } from \"graphql\";\n\nexport const devtoolsExchange: Exchange = ({ client, forward }) => {\n  if (typeof window === \"undefined\") {\n    return ops$ => pipe(ops$, forward);\n  }\n\n  // Expose graphql url for introspection\n  window.__urql__ = {\n    url: client.url\n  };\n\n  // Listen for messages from content script\n  window.addEventListener(DevtoolsExchangeIncomingEventType, event => {\n    const e = event as CustomEvent<DevtoolsExchangeIncomingMessage>;\n    const handler = messageHandlers[e.detail.type];\n    handler && handler(client)(e.detail);\n  });\n  sendToContentScript({ type: \"init\" });\n\n  return ops$ => {\n    const sharedOps$ = pipe(ops$, map(addOperationContext), share);\n\n    const isDevtoolsOp = (o: Operation) =>\n      Boolean(o.context.meta && o.context.meta.source === \"Devtools\");\n\n    const appOps$ = pipe(\n      sharedOps$,\n      filter(o => !isDevtoolsOp(o)),\n      tap(handleOperation),\n      forward,\n      map(addOperationResponseContext),\n      tap(handleOperation)\n    );\n\n    const devtoolsOps$ = pipe(\n      sharedOps$,\n      filter(o => isDevtoolsOp(o)),\n      forward\n    );\n\n    return merge([appOps$, devtoolsOps$]);\n  };\n};\n\nconst addOperationResponseContext = (op: OperationResult): OperationResult => ({\n  ...op,\n  operation: {\n    ...op.operation,\n    context: {\n      ...op.operation.context,\n      meta: {\n        ...op.operation.context.meta,\n        networkLatency:\n          Date.now() -\n          ((op.operation.context.meta as OperationDebugMeta)\n            .startTime as number)\n      }\n    }\n  }\n});\n\nconst addOperationContext = (op: Operation): Operation => ({\n  ...op,\n  context: {\n    ...op.context,\n    meta: {\n      ...op.context.meta,\n      source: (op.context.meta && op.context.meta.source) || getDisplayName(),\n      startTime: Date.now()\n    }\n  }\n});\n\n/** Handle operation or response from stream. */\nconst handleOperation = <T extends Operation | OperationResult>(op: T) => {\n  const event = JSON.parse(JSON.stringify(parseStreamData(op))); // Serialization required for some events (such as error)\n  sendToContentScript(event);\n};\n\n/** Handles execute request messages. */\nconst requestHandler = (client: Client) => (message: ExecuteRequestMessage) => {\n  const isMutation = /(^|\\W)+mutation\\W/.test(message.query);\n  const requestType = isMutation ? \"mutation\" : \"query\";\n  const op = client.createRequestOperation(\n    requestType,\n    {\n      key: hash(JSON.stringify(message.query)),\n      query: parse(message.query)\n    },\n    {\n      meta: {\n        source: \"Devtools\"\n      }\n    }\n  );\n\n  handleOperation(op);\n  pipe(\n    client.executeRequestOperation(op),\n    tap(handleOperation),\n    take(1),\n    toPromise\n  );\n};\n\n/** Map of handlers for incoming messages. */\nconst messageHandlers = {\n  request: requestHandler\n} as const;\n\n/** Creates a DevtoolsExchangeOutgoingMessage from operations/responses. */\nconst parseStreamData = <T extends Operation | OperationResult>(op: T) => {\n  const timestamp = Date.now();\n\n  // Outgoing operation\n  if (\"operationName\" in op) {\n    return {\n      type: \"operation\",\n      data: op,\n      timestamp\n    } as const;\n  }\n\n  // Incoming error\n  if ((op as OperationResult).error !== undefined) {\n    return { type: \"error\", data: op, timestamp } as const;\n  }\n\n  // Incoming response\n  return {\n    type: \"response\",\n    data: op,\n    timestamp\n  } as const;\n};\n\nconst sendToContentScript = (detail: DevtoolsExchangeOutgoingMessage) =>\n  window.dispatchEvent(\n    new CustomEvent(DevtoolsExchangeOutgoingEventType, { detail })\n  );\n","// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n"],"names":["DevtoolsExchangeIncomingEventType","DevtoolsExchangeOutgoingEventType","React","isComponentFiber","fiber","tag","getDisplayName","source","owner","CurrentOwner","current","Component","type","name","isInternalComponent","_debugOwner","displayName","nodejsCustomInspectSymbol","Symbol","for","undefined","_typeof","obj","iterator","constructor","prototype","MAX_ARRAY_LENGTH","MAX_RECURSIVE_DEPTH","devAssert","condition","message","Boolean","Error","defineToJSON","classObject","fn","arguments","length","toString","toJSON","inspect","getLocation","position","match","lineRegexp","line","column","exec","body","index","printSourceLocation","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineNum","columnNum","locationStr","concat","lines","split","locationLine","sublineIndex","Math","floor","sublineColumnNum","sublines","i","push","slice","printPrefixedLines","map","subline","existingLines","filter","_ref","padLen","max","apply","_ref2","_ref3","str","join","len","Array","GraphQLError","nodes","positions","path","originalError","extensions","_nodes","isArray","_source","node","loc","_locations","_positions","reduce","list","start","pos","value","_extensions","originalExtensions","Object","defineProperties","this","enumerable","writable","locations","stack","defineProperty","configurable","captureStackTrace","syntaxError","description","create","error","location","output","_i2","_error$nodes2","_i4","_error$locations2","printError","Kind","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","Source","dedentBlockStringValue","rawString","commonIndent","indent","leadingWhitespace","getBlockStringIndentation","isBlank","shift","pop","toStringTag","get","TokenKind","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","advanceLexer","lastToken","token","lookahead","kind","next","readToken","Tok","end","prev","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","toUpperCase","lexer","bodyLength","startPosition","charCodeAt","lineStart","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","readBlockString","a","b","c","d","charCode","char2hex","invalidSequence","readString","unexpectedCharacterMessage","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","Parser","options","sourceObj","formatValue","seenValues","previouslySeenValues","indexOf","customInspectFn","object","getCustomFn","customValue","call","array","min","remaining","items","formatArray","keys","replace","getObjectTag","key","formatObject","formatObjectValue","_lexer","startOfFileToken","createLexer","advance","_options","_proto","parseName","expectToken","parseDocument","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","parseTypeReference","defaultValue","expectOptionalToken","parseValueLiteral","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","expectKeyword","experimentalFragmentVariables","parseList","parseObject","parseStringLiteral","block","_this","values","any","_this2","fields","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","types","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","args","parseArgumentDefs","parseInputValueDef","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","startToken","noLocation","Loc","getTokenDesc","atToken","openKind","parseFn","closeKind","endToken","o","context","meta","devtoolsExchange","ref","window","ops$","pipe","forward","__urql__","url","client","addEventListener","event","e","handler","messageHandlers","detail","sendToContentScript","sharedOps$","addOperationContext","share","isDevtoolsOp","appOps$","tap","handleOperation","addOperationResponseContext","devtoolsOps$","merge","op","networkLatency","Date","now","startTime","parse","parseStreamData","request","x","isMutation","test","query","createRequestOperation","h","let","l","phash","executeRequestOperation","take","toPromise","timestamp","data","dispatchEvent","CustomEvent"],"mappings":"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"}